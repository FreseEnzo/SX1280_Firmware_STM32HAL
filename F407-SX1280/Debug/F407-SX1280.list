
F407-SX1280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d97c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800db0c  0800db0c  0001db0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd54  0800dd54  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd54  0800dd54  0001dd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd5c  0800dd5c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800dd5c  0800dd5c  0001dd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800dd64  0800dd64  0001dd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800dd6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          000020d8  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000223c  2000223c  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002dad6  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a86  00000000  00000000  0004dc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ea8  00000000  00000000  000536f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d18  00000000  00000000  00055598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002af21  00000000  00000000  000572b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027ee4  00000000  00000000  000821d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de01b  00000000  00000000  000aa0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001880d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008ab0  00000000  00000000  00188120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800daf4 	.word	0x0800daf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800daf4 	.word	0x0800daf4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b974 	b.w	8000d4c <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468e      	mov	lr, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14d      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	d969      	bls.n	8000b64 <__udivmoddi4+0xe8>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b152      	cbz	r2, 8000aac <__udivmoddi4+0x30>
 8000a96:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9a:	f1c2 0120 	rsb	r1, r2, #32
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	0c21      	lsrs	r1, r4, #16
 8000ab2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ab6:	fa1f f78c 	uxth.w	r7, ip
 8000aba:	fb08 e316 	mls	r3, r8, r6, lr
 8000abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac2:	fb06 f107 	mul.w	r1, r6, r7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad2:	f080 811f 	bcs.w	8000d14 <__udivmoddi4+0x298>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 811c 	bls.w	8000d14 <__udivmoddi4+0x298>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af0:	fb00 f707 	mul.w	r7, r0, r7
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x92>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b00:	f080 810a 	bcs.w	8000d18 <__udivmoddi4+0x29c>
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	f240 8107 	bls.w	8000d18 <__udivmoddi4+0x29c>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	1be4      	subs	r4, r4, r7
 8000b14:	2600      	movs	r6, #0
 8000b16:	b11d      	cbz	r5, 8000b20 <__udivmoddi4+0xa4>
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0xc2>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80ef 	beq.w	8000d0e <__udivmoddi4+0x292>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x160>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xd4>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80f9 	bhi.w	8000d42 <__udivmoddi4+0x2c6>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0303 	sbc.w	r3, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	469e      	mov	lr, r3
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0e0      	beq.n	8000b20 <__udivmoddi4+0xa4>
 8000b5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b62:	e7dd      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000b64:	b902      	cbnz	r2, 8000b68 <__udivmoddi4+0xec>
 8000b66:	deff      	udf	#255	; 0xff
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	f040 8092 	bne.w	8000c96 <__udivmoddi4+0x21a>
 8000b72:	eba1 010c 	sub.w	r1, r1, ip
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2601      	movs	r6, #1
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b86:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb0e f003 	mul.w	r0, lr, r3
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x12c>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x12a>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2c0>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x156>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x154>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2ca>
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bda:	e79c      	b.n	8000b16 <__udivmoddi4+0x9a>
 8000bdc:	f1c6 0720 	rsb	r7, r6, #32
 8000be0:	40b3      	lsls	r3, r6
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa20 f407 	lsr.w	r4, r0, r7
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	40f9      	lsrs	r1, r7
 8000bf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fb09 1118 	mls	r1, r9, r8, r1
 8000c0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c10:	fb08 f00e 	mul.w	r0, r8, lr
 8000c14:	4288      	cmp	r0, r1
 8000c16:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b8>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2bc>
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2bc>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4461      	add	r1, ip
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	458e      	cmp	lr, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1e2>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2b4>
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2b4>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c62:	fba0 9402 	umull	r9, r4, r0, r2
 8000c66:	eba1 010e 	sub.w	r1, r1, lr
 8000c6a:	42a1      	cmp	r1, r4
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x2a4>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x2a0>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x212>
 8000c76:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c82:	fa22 f306 	lsr.w	r3, r2, r6
 8000c86:	40f1      	lsrs	r1, r6
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	40d8      	lsrs	r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	4301      	orrs	r1, r0
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x260>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd4:	429e      	cmp	r6, r3
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cec:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x28a>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000d02:	3e02      	subs	r6, #2
 8000d04:	4461      	add	r1, ip
 8000d06:	1ac9      	subs	r1, r1, r3
 8000d08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0x104>
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e705      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e3      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6f8      	b.n	8000b0e <__udivmoddi4+0x92>
 8000d1c:	454b      	cmp	r3, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f8>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f8>
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x28a>
 8000d30:	4620      	mov	r0, r4
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1e2>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b8>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x12c>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e709      	b.n	8000b5a <__udivmoddi4+0xde>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x156>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <_ZN11SerialDebugC1EP20__UART_HandleTypeDefm>:
 */

#include "SerialDebug.hpp"
#include <string.h>

SerialDebug::SerialDebug(UART_HandleTypeDef* huartptr, uint32_t fifoSize)
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
: huartptr(huartptr)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	711a      	strb	r2, [r3, #4]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
{
	fifo = new StaticFIFO(fifoSize);
 8000d70:	2014      	movs	r0, #20
 8000d72:	f00c f991 	bl	800d098 <_Znwj>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461c      	mov	r4, r3
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f000 fa09 	bl	8001194 <_ZN10StaticFIFOC1Em>
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	601c      	str	r4, [r3, #0]
}
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd90      	pop	{r4, r7, pc}

08000d90 <_ZN11SerialDebug8setLevelENS_10DebugLevelE>:

void SerialDebug::setLevel(DebugLevel level)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	70fb      	strb	r3, [r7, #3]
	debugLevel = level;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	78fa      	ldrb	r2, [r7, #3]
 8000da0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_ZN11SerialDebug20serialTxCpltCallbackEv>:

void SerialDebug::serialTxCpltCallback(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	uint32_t numChars;
	uint8_t* pointer;
	if (fifo->pop(&pointer, &numChars, bufSize) >= 0){
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	f107 020c 	add.w	r2, r7, #12
 8000dc0:	f107 0108 	add.w	r1, r7, #8
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	f000 faa2 	bl	800130e <_ZN10StaticFIFO3popEPPhPmm>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	0fdb      	lsrs	r3, r3, #31
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00f      	beq.n	8000df6 <_ZN11SerialDebug20serialTxCpltCallbackEv+0x46>
		memcpy(uartBuf, pointer, numChars);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	338c      	adds	r3, #140	; 0x8c
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f00c f9ce 	bl	800d180 <memcpy>
		HAL_UART_Transmit_DMA(huartptr, pointer, (uint16_t)numChars);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	b292      	uxth	r2, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f007 f800 	bl	8007df4 <HAL_UART_Transmit_DMA>
	}else{
		transmitting = false;
	}
}
 8000df4:	e002      	b.n	8000dfc <_ZN11SerialDebug20serialTxCpltCallbackEv+0x4c>
		transmitting = false;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	711a      	strb	r2, [r3, #4]
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_ZN11SerialDebug4infoEPKc>:
			}
		}
	}
}

void SerialDebug::info(const char* data){
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
	if (debugLevel <= DEBUG_LEVEL_INFO){
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d830      	bhi.n	8000e7a <_ZN11SerialDebug4infoEPKc+0x76>
		int numChars = sprintf(charBuf, "[%13lu] INF: %.105s\r\n", HAL_GetTick(), data);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f103 040c 	add.w	r4, r3, #12
 8000e1e:	f002 fc4f 	bl	80036c0 <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	4917      	ldr	r1, [pc, #92]	; (8000e84 <_ZN11SerialDebug4infoEPKc+0x80>)
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f00c faf3 	bl	800d414 <siprintf>
 8000e2e:	60f8      	str	r0, [r7, #12]
		if(numChars > 0){
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	dd21      	ble.n	8000e7a <_ZN11SerialDebug4infoEPKc+0x76>
			if(transmitting){
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	791b      	ldrb	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d008      	beq.n	8000e50 <_ZN11SerialDebug4infoEPKc+0x4c>
				fifo->push(charBuf, numChars);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	330c      	adds	r3, #12
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f000 f9f5 	bl	8001238 <_ZN10StaticFIFO4pushEPcm>
				memcpy(uartBuf, (uint8_t*)charBuf, numChars);
				HAL_UART_Transmit_DMA(huartptr, uartBuf, (uint16_t)numChars);
			}
		}
	}
}
 8000e4e:	e014      	b.n	8000e7a <_ZN11SerialDebug4infoEPKc+0x76>
				transmitting = true;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2201      	movs	r2, #1
 8000e54:	711a      	strb	r2, [r3, #4]
				memcpy(uartBuf, (uint8_t*)charBuf, numChars);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	330c      	adds	r3, #12
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	4619      	mov	r1, r3
 8000e64:	f00c f98c 	bl	800d180 <memcpy>
				HAL_UART_Transmit_DMA(huartptr, uartBuf, (uint16_t)numChars);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6898      	ldr	r0, [r3, #8]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	338c      	adds	r3, #140	; 0x8c
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	b292      	uxth	r2, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f006 ffbd 	bl	8007df4 <HAL_UART_Transmit_DMA>
}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd90      	pop	{r4, r7, pc}
 8000e82:	bf00      	nop
 8000e84:	0800db24 	.word	0x0800db24

08000e88 <HAL_UART_TxCpltCallback>:
	if(htim==&htim6){

	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <HAL_UART_TxCpltCallback+0x20>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d102      	bne.n	8000e9e <HAL_UART_TxCpltCallback+0x16>
		debug.serialTxCpltCallback();
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <HAL_UART_TxCpltCallback+0x24>)
 8000e9a:	f7ff ff89 	bl	8000db0 <_ZN11SerialDebug20serialTxCpltCallbackEv>
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000570 	.word	0x20000570
 8000eac:	20000180 	.word	0x20000180

08000eb0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin){
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d103      	bne.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x18>
	case 8:
		radio0.HalInterruptCallback();
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x24>)
 8000ec2:	f000 febc 	bl	8001c3e <_ZN9SX1280Hal20HalInterruptCallbackEv>
		break;
 8000ec6:	e000      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x1a>
	default:
		break;
 8000ec8:	bf00      	nop
	}
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000290 	.word	0x20000290

08000ed8 <start>:

void start(){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b092      	sub	sp, #72	; 0x48
 8000edc:	af02      	add	r7, sp, #8
	/* Modulation Params*/

   ModulationParams.Params.Flrc.BitrateBandwidth  = ( RadioFlrcBitrates_t )       FLRC_BR_0_260_BW_0_3;
 8000ede:	4b77      	ldr	r3, [pc, #476]	; (80010bc <start+0x1e4>)
 8000ee0:	22eb      	movs	r2, #235	; 0xeb
 8000ee2:	71da      	strb	r2, [r3, #7]
   ModulationParams.Params.Flrc.CodingRate        = ( RadioFlrcCodingRates_t )    FLRC_CR_1_2;
 8000ee4:	4b75      	ldr	r3, [pc, #468]	; (80010bc <start+0x1e4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	721a      	strb	r2, [r3, #8]
   ModulationParams.Params.Flrc.ModulationShaping = ( RadioModShapings_t )        RADIO_MOD_SHAPING_BT_1_0;
 8000eea:	4b74      	ldr	r3, [pc, #464]	; (80010bc <start+0x1e4>)
 8000eec:	2210      	movs	r2, #16
 8000eee:	725a      	strb	r2, [r3, #9]

   PacketParams.Params.Flrc.PreambleLength        = ( RadioPreambleLengths_t )     PREAMBLE_LENGTH_32_BITS;
 8000ef0:	4b73      	ldr	r3, [pc, #460]	; (80010c0 <start+0x1e8>)
 8000ef2:	2270      	movs	r2, #112	; 0x70
 8000ef4:	735a      	strb	r2, [r3, #13]
   PacketParams.Params.Flrc.SyncWordLength        = ( RadioFlrcSyncWordLengths_t )FLRC_SYNCWORD_LENGTH_4_BYTE;
 8000ef6:	4b72      	ldr	r3, [pc, #456]	; (80010c0 <start+0x1e8>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	739a      	strb	r2, [r3, #14]
   PacketParams.Params.Flrc.SyncWordMatch         = ( RadioSyncWordRxMatchs_t )   RADIO_RX_MATCH_SYNCWORD_1;
 8000efc:	4b70      	ldr	r3, [pc, #448]	; (80010c0 <start+0x1e8>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	73da      	strb	r2, [r3, #15]
   PacketParams.Params.Flrc.HeaderType            = ( RadioPacketLengthModes_t )  RADIO_PACKET_VARIABLE_LENGTH;
 8000f02:	4b6f      	ldr	r3, [pc, #444]	; (80010c0 <start+0x1e8>)
 8000f04:	2220      	movs	r2, #32
 8000f06:	741a      	strb	r2, [r3, #16]
   PacketParams.Params.Flrc.PayloadLength         =                               15;
 8000f08:	4b6d      	ldr	r3, [pc, #436]	; (80010c0 <start+0x1e8>)
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	745a      	strb	r2, [r3, #17]
   PacketParams.Params.Flrc.CrcLength             = ( RadioCrcTypes_t )           RADIO_CRC_3_BYTES;
 8000f0e:	4b6c      	ldr	r3, [pc, #432]	; (80010c0 <start+0x1e8>)
 8000f10:	2230      	movs	r2, #48	; 0x30
 8000f12:	749a      	strb	r2, [r3, #18]
   PacketParams.Params.Flrc.Whitening             = ( RadioWhiteningModes_t )	  RADIO_WHITENING_OFF;
 8000f14:	4b6a      	ldr	r3, [pc, #424]	; (80010c0 <start+0x1e8>)
 8000f16:	2208      	movs	r2, #8
 8000f18:	74da      	strb	r2, [r3, #19]

   ModulationParams.PacketType = PACKET_TYPE_FLRC;
 8000f1a:	4b68      	ldr	r3, [pc, #416]	; (80010bc <start+0x1e4>)
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	701a      	strb	r2, [r3, #0]
   PacketParams.PacketType     = PACKET_TYPE_FLRC;
 8000f20:	4b67      	ldr	r3, [pc, #412]	; (80010c0 <start+0x1e8>)
 8000f22:	2203      	movs	r2, #3
 8000f24:	701a      	strb	r2, [r3, #0]

   /*Radio Type*/
    bool isMaster = false;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b




	debug.setLevel(SerialDebug::DEBUG_LEVEL_DEBUG);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4865      	ldr	r0, [pc, #404]	; (80010c4 <start+0x1ec>)
 8000f30:	f7ff ff2e 	bl	8000d90 <_ZN11SerialDebug8setLevelENS_10DebugLevelE>
	debug.info("-----Init-----");
 8000f34:	4964      	ldr	r1, [pc, #400]	; (80010c8 <start+0x1f0>)
 8000f36:	4863      	ldr	r0, [pc, #396]	; (80010c4 <start+0x1ec>)
 8000f38:	f7ff ff64 	bl	8000e04 <_ZN11SerialDebug4infoEPKc>
	debug.info("Init timers begin");
 8000f3c:	4963      	ldr	r1, [pc, #396]	; (80010cc <start+0x1f4>)
 8000f3e:	4861      	ldr	r0, [pc, #388]	; (80010c4 <start+0x1ec>)
 8000f40:	f7ff ff60 	bl	8000e04 <_ZN11SerialDebug4infoEPKc>
	HAL_TIM_Base_Start(&htim6);
 8000f44:	4862      	ldr	r0, [pc, #392]	; (80010d0 <start+0x1f8>)
 8000f46:	f006 fd83 	bl	8007a50 <HAL_TIM_Base_Start>
	debug.info("Init timers end");
 8000f4a:	4962      	ldr	r1, [pc, #392]	; (80010d4 <start+0x1fc>)
 8000f4c:	485d      	ldr	r0, [pc, #372]	; (80010c4 <start+0x1ec>)
 8000f4e:	f7ff ff59 	bl	8000e04 <_ZN11SerialDebug4infoEPKc>
	debug.info("Init radio begin");
 8000f52:	4961      	ldr	r1, [pc, #388]	; (80010d8 <start+0x200>)
 8000f54:	485b      	ldr	r0, [pc, #364]	; (80010c4 <start+0x1ec>)
 8000f56:	f7ff ff55 	bl	8000e04 <_ZN11SerialDebug4infoEPKc>
	HAL_Delay(500);
 8000f5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f5e:	f002 fbbb 	bl	80036d8 <HAL_Delay>

	radio0.Init();
 8000f62:	485e      	ldr	r0, [pc, #376]	; (80010dc <start+0x204>)
 8000f64:	f000 fe9c 	bl	8001ca0 <_ZN6SX12804InitEv>
	radio0.SetRegulatorMode(USE_LDO);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	485c      	ldr	r0, [pc, #368]	; (80010dc <start+0x204>)
 8000f6c:	f001 fa27 	bl	80023be <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>
	radio0.SetStandby( STDBY_RC);
 8000f70:	2100      	movs	r1, #0
 8000f72:	485a      	ldr	r0, [pc, #360]	; (80010dc <start+0x204>)
 8000f74:	f000 ff04 	bl	8001d80 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>
	//radio0.SetLNAGainSetting(LNA_HIGH_SENSITIVITY_MODE);
	radio0.SetPacketType( ModulationParams.PacketType );
 8000f78:	4b50      	ldr	r3, [pc, #320]	; (80010bc <start+0x1e4>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4857      	ldr	r0, [pc, #348]	; (80010dc <start+0x204>)
 8000f80:	f000 ff89 	bl	8001e96 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
	radio0.SetModulationParams( &ModulationParams );
 8000f84:	494d      	ldr	r1, [pc, #308]	; (80010bc <start+0x1e4>)
 8000f86:	4855      	ldr	r0, [pc, #340]	; (80010dc <start+0x204>)
 8000f88:	f001 f830 	bl	8001fec <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>
	radio0.SetPacketParams( &PacketParams );
 8000f8c:	494c      	ldr	r1, [pc, #304]	; (80010c0 <start+0x1e8>)
 8000f8e:	4853      	ldr	r0, [pc, #332]	; (80010dc <start+0x204>)
 8000f90:	f001 f8a8 	bl	80020e4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t>

	radio0.SetRfFrequency( 2402000000UL );
 8000f94:	4952      	ldr	r1, [pc, #328]	; (80010e0 <start+0x208>)
 8000f96:	4851      	ldr	r0, [pc, #324]	; (80010dc <start+0x204>)
 8000f98:	f000 ffbe 	bl	8001f18 <_ZN6SX128014SetRfFrequencyEm>
	radio0.SetBufferBaseAddresses( 0x00, 0x00 );
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	484e      	ldr	r0, [pc, #312]	; (80010dc <start+0x204>)
 8000fa2:	f001 f809 	bl	8001fb8 <_ZN6SX128022SetBufferBaseAddressesEhh>
	//radio0.SetSyncWord( 1, syncWord ); // NAO USEI
	// only used in GFSK, FLRC
	//uint8_t crcSeedLocal[2] = {0x45, 0x67}; // NAO USEI
	//radio0.SetCrcSeed( crcSeedLocal ); // NAO USEI
	//radio0.SetCrcPolynomial( 0x0123 ); // NAOP USEI
	radio0.SetTxParams( 0, RADIO_RAMP_20_US );
 8000fa6:	22e0      	movs	r2, #224	; 0xe0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	484c      	ldr	r0, [pc, #304]	; (80010dc <start+0x204>)
 8000fac:	f000 ffe8 	bl	8001f80 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>
	uint16_t RxIrqMask = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT;
 8000fb0:	f244 0302 	movw	r3, #16386	; 0x4002
 8000fb4:	873b      	strh	r3, [r7, #56]	; 0x38
	radio0.SetDioIrqParams( RxIrqMask, RxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8000fb6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000fb8:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	4846      	ldr	r0, [pc, #280]	; (80010dc <start+0x204>)
 8000fc2:	f001 f98b 	bl	80022dc <_ZN6SX128015SetDioIrqParamsEtttt>
	radio0.SetRx( ( TickTime_t ) { RADIO_TICK_SIZE_1000_US, 0xFFFF } );
 8000fc6:	4b47      	ldr	r3, [pc, #284]	; (80010e4 <start+0x20c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fce:	4843      	ldr	r0, [pc, #268]	; (80010dc <start+0x204>)
 8000fd0:	f000 ff2b 	bl	8001e2a <_ZN6SX12805SetRxE10TickTime_s>
	//Frese



	radio0.SetPollingMode( );
 8000fd4:	4841      	ldr	r0, [pc, #260]	; (80010dc <start+0x204>)
 8000fd6:	f001 fa6d 	bl	80024b4 <_ZN6SX128014SetPollingModeEv>
	radio0.ProcessIrqs( );
 8000fda:	4840      	ldr	r0, [pc, #256]	; (80010dc <start+0x204>)
 8000fdc:	f001 fa8e 	bl	80024fc <_ZN6SX128011ProcessIrqsEv>


	uint8_t Buffer[16];
    uint8_t BufferReceived[16];
	uint8_t BufferSize = 16;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	71fb      	strb	r3, [r7, #7]
	memset( &BufferReceived, 0x00, BufferSize );
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00c f8d4 	bl	800d19c <memset>

	char *data = "hello adfa \n";
 8000ff4:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <start+0x210>)
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34

while(1)
{
	if(isMaster == true)
 8000ff8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d142      	bne.n	8001086 <start+0x1ae>
	{

		// Send the next PING frame
		Buffer[0] = 1;
 8001000:	2301      	movs	r3, #1
 8001002:	763b      	strb	r3, [r7, #24]
		Buffer[1] = 2;
 8001004:	2302      	movs	r3, #2
 8001006:	767b      	strb	r3, [r7, #25]
		Buffer[2] = 3;
 8001008:	2303      	movs	r3, #3
 800100a:	76bb      	strb	r3, [r7, #26]
		Buffer[3] = 4;
 800100c:	2304      	movs	r3, #4
 800100e:	76fb      	strb	r3, [r7, #27]
		Buffer[4] = 5;
 8001010:	2305      	movs	r3, #5
 8001012:	773b      	strb	r3, [r7, #28]
		Buffer[5] = 6;
 8001014:	2306      	movs	r3, #6
 8001016:	777b      	strb	r3, [r7, #29]
		Buffer[6] = 7;
 8001018:	2307      	movs	r3, #7
 800101a:	77bb      	strb	r3, [r7, #30]
		Buffer[7] = 8;
 800101c:	2308      	movs	r3, #8
 800101e:	77fb      	strb	r3, [r7, #31]
		for(int i = 8; i < 16; i++ )
 8001020:	2308      	movs	r3, #8
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001026:	2b0f      	cmp	r3, #15
 8001028:	dc0b      	bgt.n	8001042 <start+0x16a>
		{
			Buffer[i] = i;
 800102a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800102c:	b2d9      	uxtb	r1, r3
 800102e:	f107 0218 	add.w	r2, r7, #24
 8001032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001034:	4413      	add	r3, r2
 8001036:	460a      	mov	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
		for(int i = 8; i < 16; i++ )
 800103a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800103c:	3301      	adds	r3, #1
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001040:	e7f0      	b.n	8001024 <start+0x14c>
		}

		uint16_t TxIrqMask = IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT;
 8001042:	f244 0301 	movw	r3, #16385	; 0x4001
 8001046:	867b      	strh	r3, [r7, #50]	; 0x32
		radio0.SetDioIrqParams( TxIrqMask, TxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8001048:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800104a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800104c:	2300      	movs	r3, #0
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2300      	movs	r3, #0
 8001052:	4822      	ldr	r0, [pc, #136]	; (80010dc <start+0x204>)
 8001054:	f001 f942 	bl	80022dc <_ZN6SX128015SetDioIrqParamsEtttt>
		radio0.SendPayload( Buffer, 16,( TickTime_t ){ RADIO_TICK_SIZE_1000_US, 100 } );
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <start+0x214>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800105e:	f107 0118 	add.w	r1, r7, #24
 8001062:	2300      	movs	r3, #0
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001068:	2210      	movs	r2, #16
 800106a:	481c      	ldr	r0, [pc, #112]	; (80010dc <start+0x204>)
 800106c:	f001 f9f6 	bl	800245c <_ZN6SX128011SendPayloadEPhh10TickTime_sh>
		HAL_Delay(10);
 8001070:	200a      	movs	r0, #10
 8001072:	f002 fb31 	bl	80036d8 <HAL_Delay>
		radio0.GetIrqStatus();
 8001076:	4819      	ldr	r0, [pc, #100]	; (80010dc <start+0x204>)
 8001078:	f001 f96b 	bl	8002352 <_ZN6SX128012GetIrqStatusEv>
		debug.info("Init radio end");
 800107c:	491c      	ldr	r1, [pc, #112]	; (80010f0 <start+0x218>)
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <start+0x1ec>)
 8001080:	f7ff fec0 	bl	8000e04 <_ZN11SerialDebug4infoEPKc>
 8001084:	e7b8      	b.n	8000ff8 <start+0x120>
	}
	else
	{


			 radio0.GetPayload(BufferReceived, &BufferSize, 16);
 8001086:	1dfa      	adds	r2, r7, #7
 8001088:	f107 0108 	add.w	r1, r7, #8
 800108c:	2310      	movs	r3, #16
 800108e:	4813      	ldr	r0, [pc, #76]	; (80010dc <start+0x204>)
 8001090:	f001 f9c0 	bl	8002414 <_ZN6SX128010GetPayloadEPhS0_h>
			 CDC_Transmit_FS(BufferReceived, 16);
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	2110      	movs	r1, #16
 800109a:	4618      	mov	r0, r3
 800109c:	f00b fb90 	bl	800c7c0 <CDC_Transmit_FS>
			 //CDC_Transmit_FS((uint8_t*)data, strlen(data));
			 HAL_Delay(1000);
 80010a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a4:	f002 fb18 	bl	80036d8 <HAL_Delay>
			 memset( &BufferReceived, 0x00, BufferSize );
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	461a      	mov	r2, r3
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f00c f872 	bl	800d19c <memset>

	}
	}
 80010b8:	e79e      	b.n	8000ff8 <start+0x120>
 80010ba:	bf00      	nop
 80010bc:	2000030c 	.word	0x2000030c
 80010c0:	200002f4 	.word	0x200002f4
 80010c4:	20000180 	.word	0x20000180
 80010c8:	0800db6c 	.word	0x0800db6c
 80010cc:	0800db7c 	.word	0x0800db7c
 80010d0:	20000528 	.word	0x20000528
 80010d4:	0800db90 	.word	0x0800db90
 80010d8:	0800dba0 	.word	0x0800dba0
 80010dc:	20000290 	.word	0x20000290
 80010e0:	8f2b9c80 	.word	0x8f2b9c80
 80010e4:	0800dbd4 	.word	0x0800dbd4
 80010e8:	0800dbb4 	.word	0x0800dbb4
 80010ec:	0800dbd8 	.word	0x0800dbd8
 80010f0:	0800dbc4 	.word	0x0800dbc4

080010f4 <_Z41__static_initialization_and_destruction_0ii>:
}
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af06      	add	r7, sp, #24
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d11c      	bne.n	800113e <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110a:	4293      	cmp	r3, r2
 800110c:	d117      	bne.n	800113e <_Z41__static_initialization_and_destruction_0ii+0x4a>
SerialDebug debug(&huart2, 32);
 800110e:	2220      	movs	r2, #32
 8001110:	4912      	ldr	r1, [pc, #72]	; (800115c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001112:	4813      	ldr	r0, [pc, #76]	; (8001160 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001114:	f7ff fe1c 	bl	8000d50 <_ZN11SerialDebugC1EP20__UART_HandleTypeDefm>
SX1280Hal radio0(&hspi2, SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, SX1280_RST_GPIO_Port, SX1280_RST_Pin, NULL);
 8001118:	2300      	movs	r3, #0
 800111a:	9304      	str	r3, [sp, #16]
 800111c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001120:	9303      	str	r3, [sp, #12]
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001136:	490d      	ldr	r1, [pc, #52]	; (800116c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800113a:	f000 f9eb 	bl	8001514 <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d107      	bne.n	8001154 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114a:	4293      	cmp	r3, r2
 800114c:	d102      	bne.n	8001154 <_Z41__static_initialization_and_destruction_0ii+0x60>
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001150:	f000 fa1c 	bl	800158c <_ZN9SX1280HalD1Ev>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000570 	.word	0x20000570
 8001160:	20000180 	.word	0x20000180
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40020400 	.word	0x40020400
 800116c:	20000410 	.word	0x20000410
 8001170:	20000290 	.word	0x20000290

08001174 <_GLOBAL__sub_I_debug>:
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
 8001178:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff ffb9 	bl	80010f4 <_Z41__static_initialization_and_destruction_0ii>
 8001182:	bd80      	pop	{r7, pc}

08001184 <_GLOBAL__sub_D_debug>:
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
 8001188:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff ffb1 	bl	80010f4 <_Z41__static_initialization_and_destruction_0ii>
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZN10StaticFIFOC1Em>:

#include "StaticFIFO.hpp"

#include <cstring>

StaticFIFO::StaticFIFO(uint32_t fifoSize) : fifoSize(fifoSize){
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <_ZN10StaticFIFOC1Em+0x50>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
	fifo = new StringContainer[fifoSize];
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <_ZN10StaticFIFOC1Em+0x54>)
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d804      	bhi.n	80011c8 <_ZN10StaticFIFOC1Em+0x34>
 80011be:	4613      	mov	r3, r2
 80011c0:	015b      	lsls	r3, r3, #5
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	e001      	b.n	80011cc <_ZN10StaticFIFOC1Em+0x38>
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00b ff74 	bl	800d0ba <_Znaj>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	609a      	str	r2, [r3, #8]
}
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0800dc2c 	.word	0x0800dc2c
 80011e8:	00f83e0f 	.word	0x00f83e0f

080011ec <_ZN10StaticFIFOD1Ev>:

StaticFIFO::~StaticFIFO() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <_ZN10StaticFIFOD1Ev+0x28>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	601a      	str	r2, [r3, #0]
	delete fifo;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <_ZN10StaticFIFOD1Ev+0x1e>
 8001202:	2184      	movs	r1, #132	; 0x84
 8001204:	4618      	mov	r0, r3
 8001206:	f00b ff45 	bl	800d094 <_ZdlPvj>
}
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	0800dc2c 	.word	0x0800dc2c

08001218 <_ZN10StaticFIFOD0Ev>:
StaticFIFO::~StaticFIFO() {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
}
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffe3 	bl	80011ec <_ZN10StaticFIFOD1Ev>
 8001226:	2114      	movs	r1, #20
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f00b ff33 	bl	800d094 <_ZdlPvj>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZN10StaticFIFO4pushEPcm>:
	fifo[lastIdx] = stringContainer;
	lastIdx = (lastIdx + 1) % fifoSize;
	return (((fifoSize + lastIdx) - firstIdx) % fifoSize);
}

int32_t StaticFIFO::push(char* stringPointer, uint32_t stringLength){
 8001238:	b580      	push	{r7, lr}
 800123a:	b0a6      	sub	sp, #152	; 0x98
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
	if (((fifoSize + firstIdx) - lastIdx) % fifoSize == 1) {
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	441a      	add	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	6852      	ldr	r2, [r2, #4]
 8001258:	fbb3 f1f2 	udiv	r1, r3, r2
 800125c:	fb01 f202 	mul.w	r2, r1, r2
 8001260:	1a9b      	subs	r3, r3, r2
 8001262:	2b01      	cmp	r3, #1
 8001264:	d101      	bne.n	800126a <_ZN10StaticFIFO4pushEPcm+0x32>
		return 0; //overflow
 8001266:	2300      	movs	r3, #0
 8001268:	e04d      	b.n	8001306 <_ZN10StaticFIFO4pushEPcm+0xce>
	}else if(stringLength > bufSize){
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b80      	cmp	r3, #128	; 0x80
 800126e:	d902      	bls.n	8001276 <_ZN10StaticFIFO4pushEPcm+0x3e>
		return -2; //length limit
 8001270:	f06f 0301 	mvn.w	r3, #1
 8001274:	e047      	b.n	8001306 <_ZN10StaticFIFO4pushEPcm+0xce>
	}
	StringContainer stringContainer;
	for(uint32_t i=0; i < (stringLength); i++){
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800127c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	429a      	cmp	r2, r3
 8001284:	d211      	bcs.n	80012aa <_ZN10StaticFIFO4pushEPcm+0x72>
		stringContainer.buffer[i] = stringPointer[i];
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800128c:	4413      	add	r3, r2
 800128e:	7819      	ldrb	r1, [r3, #0]
 8001290:	f107 0210 	add.w	r2, r7, #16
 8001294:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001298:	4413      	add	r3, r2
 800129a:	460a      	mov	r2, r1
 800129c:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i < (stringLength); i++){
 800129e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012a2:	3301      	adds	r3, #1
 80012a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012a8:	e7e8      	b.n	800127c <_ZN10StaticFIFO4pushEPcm+0x44>
	}
	stringContainer.length = stringLength;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	fifo[lastIdx] = stringContainer;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6899      	ldr	r1, [r3, #8]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	4613      	mov	r3, r2
 80012ba:	015b      	lsls	r3, r3, #5
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	4618      	mov	r0, r3
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	2284      	movs	r2, #132	; 0x84
 80012ca:	4619      	mov	r1, r3
 80012cc:	f00b ff58 	bl	800d180 <memcpy>
	lastIdx = (lastIdx + 1) % fifoSize;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	3301      	adds	r3, #1
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	6852      	ldr	r2, [r2, #4]
 80012da:	fbb3 f1f2 	udiv	r1, r3, r2
 80012de:	fb01 f202 	mul.w	r2, r1, r2
 80012e2:	1a9a      	subs	r2, r3, r2
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	611a      	str	r2, [r3, #16]
	return (((fifoSize + lastIdx) - firstIdx) % fifoSize);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	441a      	add	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	6852      	ldr	r2, [r2, #4]
 80012fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001300:	fb01 f202 	mul.w	r2, r1, r2
 8001304:	1a9b      	subs	r3, r3, r2
}
 8001306:	4618      	mov	r0, r3
 8001308:	3798      	adds	r7, #152	; 0x98
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_ZN10StaticFIFO3popEPPhPmm>:

int32_t StaticFIFO::pop(uint8_t** pointer, uint32_t* length, uint32_t max_length){
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	603b      	str	r3, [r7, #0]
    if (lastIdx == firstIdx){
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	429a      	cmp	r2, r3
 8001326:	d102      	bne.n	800132e <_ZN10StaticFIFO3popEPPhPmm+0x20>
    	return -1;	//underrun
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	e044      	b.n	80013b8 <_ZN10StaticFIFO3popEPPhPmm+0xaa>
    }else if(fifo[firstIdx].length > max_length){
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6899      	ldr	r1, [r3, #8]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	4613      	mov	r3, r2
 8001338:	015b      	lsls	r3, r3, #5
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d202      	bcs.n	8001350 <_ZN10StaticFIFO3popEPPhPmm+0x42>
    	return -2;	//length limit
 800134a:	f06f 0301 	mvn.w	r3, #1
 800134e:	e033      	b.n	80013b8 <_ZN10StaticFIFO3popEPPhPmm+0xaa>
    }
    *pointer = fifo[firstIdx].buffer;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6899      	ldr	r1, [r3, #8]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	4613      	mov	r3, r2
 800135a:	015b      	lsls	r3, r3, #5
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	461a      	mov	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	601a      	str	r2, [r3, #0]
    *length = fifo[firstIdx].length;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6899      	ldr	r1, [r3, #8]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	4613      	mov	r3, r2
 8001372:	015b      	lsls	r3, r3, #5
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	601a      	str	r2, [r3, #0]
    firstIdx = (firstIdx + 1) % fifoSize;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	3301      	adds	r3, #1
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	6852      	ldr	r2, [r2, #4]
 800138c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001390:	fb01 f202 	mul.w	r2, r1, r2
 8001394:	1a9a      	subs	r2, r3, r2
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	60da      	str	r2, [r3, #12]
    return (((fifoSize + lastIdx) - firstIdx) % fifoSize);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	441a      	add	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	6852      	ldr	r2, [r2, #4]
 80013ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80013b2:	fb01 f202 	mul.w	r2, r1, r2
 80013b6:	1a9b      	subs	r3, r3, r2
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_ZN5RadioC1EP16RadioCallbacks_t>:
     *
     * \param [in]  callbacks     The structure of callbacks function pointers
     *                            to be called on radio interrupts
     *
     */
    Radio( RadioCallbacks_t *callbacks )
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
    {
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <_ZN5RadioC1EP16RadioCallbacks_t+0x68>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	601a      	str	r2, [r3, #0]
        this->txDone = callbacks->txDone;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	605a      	str	r2, [r3, #4]
        this->rxDone = callbacks->rxDone;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	609a      	str	r2, [r3, #8]
        this->rxSyncWordDone = callbacks->rxSyncWordDone;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	60da      	str	r2, [r3, #12]
        this->rxHeaderDone = callbacks->rxHeaderDone;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	611a      	str	r2, [r3, #16]
        this->txTimeout = callbacks->txTimeout;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	615a      	str	r2, [r3, #20]
        this->rxTimeout = callbacks->rxTimeout;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	695a      	ldr	r2, [r3, #20]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
        this->rxError = callbacks->rxError;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	699a      	ldr	r2, [r3, #24]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	61da      	str	r2, [r3, #28]
        this->rangingDone = callbacks->rangingDone;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	69da      	ldr	r2, [r3, #28]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	621a      	str	r2, [r3, #32]
        this->cadDone = callbacks->cadDone;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	6a1a      	ldr	r2, [r3, #32]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	625a      	str	r2, [r3, #36]	; 0x24
    }
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	0800dc84 	.word	0x0800dc84

08001430 <_ZN5RadioD1Ev>:
    virtual ~Radio( void ){ };
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <_ZN5RadioD1Ev+0x1c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	0800dc84 	.word	0x0800dc84

08001450 <_ZN5RadioD0Ev>:
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ffe9 	bl	8001430 <_ZN5RadioD1Ev>
 800145e:	2128      	movs	r1, #40	; 0x28
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f00b fe17 	bl	800d094 <_ZdlPvj>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <_ZN6SX1280C1EP16RadioCallbacks_t>:
     * \brief Instantiates a SX1280 object and provides API functions to communicates with the radio
     *
     * \param [in]  callbacks      Pointer to the callbacks structure defining
     *                             all callbacks function pointers
     */
    SX1280( RadioCallbacks_t *callbacks ):
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
        // The class members are value-initialiazed in member-initilaizer list
        Radio( callbacks ), OperatingMode( MODE_STDBY_RC ), PacketType( PACKET_TYPE_NONE ),
        LoRaBandwidth( LORA_BW_1600 ), IrqState( false ), PollingMode( false )
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6839      	ldr	r1, [r7, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ffa0 	bl	80013c4 <_ZN5RadioC1EP16RadioCallbacks_t>
 8001484:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <_ZN6SX1280C1EP16RadioCallbacks_t+0x58>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2202      	movs	r2, #2
 800148e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	220f      	movs	r2, #15
 8001496:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	220a      	movs	r2, #10
 800149e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    {
        this->dioIrq        = &SX1280::OnDioIrq;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a05      	ldr	r2, [pc, #20]	; (80014cc <_ZN6SX1280C1EP16RadioCallbacks_t+0x5c>)
 80014b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	631a      	str	r2, [r3, #48]	; 0x30

        // Warning: this constructor set the LoRaBandwidth member to a valid
        // value, but it is not related to the actual radio configuration!
    }
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	0800dcc0 	.word	0x0800dcc0
 80014cc:	080024d1 	.word	0x080024d1

080014d0 <_ZN6SX1280D1Ev>:

    virtual ~SX1280( )
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    {
 80014d8:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <_ZN6SX1280D1Ev+0x20>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ffa5 	bl	8001430 <_ZN5RadioD1Ev>
    }
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	0800dcc0 	.word	0x0800dcc0

080014f4 <_ZN6SX1280D0Ev>:
    virtual ~SX1280( )
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
    }
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ffe7 	bl	80014d0 <_ZN6SX1280D1Ev>
 8001502:	2138      	movs	r1, #56	; 0x38
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f00b fdc5 	bl	800d094 <_ZdlPvj>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t>:
// This code handles cases where assert_param is undefined
#ifndef assert_param
#define assert_param( ... )
#endif

SX1280Hal::SX1280Hal( SPI_HandleTypeDef* hspi,
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	807b      	strh	r3, [r7, #2]
                      RadioCallbacks_t *callbacks )
        :   SX1280( callbacks ),
            RadioNssPort( nssPort ), RadioNssPin( nssPin ),
            RadioResetPort( rstPort ), RadioResetPin( rstPin ),
            RadioCtsnPort( nullptr ), RadioCtsnPin( 0 ),
            BUSYPort( busyPort ), BUSYPin( busyPin )
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ffa2 	bl	8001470 <_ZN6SX1280C1EP16RadioCallbacks_t>
 800152c:	4a16      	ldr	r2, [pc, #88]	; (8001588 <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t+0x74>)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	63da      	str	r2, [r3, #60]	; 0x3c
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a3a      	ldr	r2, [r7, #32]
 8001544:	645a      	str	r2, [r3, #68]	; 0x44
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800154a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	64da      	str	r2, [r3, #76]	; 0x4c
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8bba      	ldrh	r2, [r7, #28]
 8001566:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	661a      	str	r2, [r3, #96]	; 0x60
{
    RadioSpi = hspi;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	639a      	str	r2, [r3, #56]	; 0x38

    //HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
    //HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_SET);
}
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	0800dc3c 	.word	0x0800dc3c

0800158c <_ZN9SX1280HalD1Ev>:

SX1280Hal::~SX1280Hal( void )
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_ZN9SX1280HalD1Ev+0x20>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff97 	bl	80014d0 <_ZN6SX1280D1Ev>
{
};
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	0800dc3c 	.word	0x0800dc3c

080015b0 <_ZN9SX1280HalD0Ev>:
SX1280Hal::~SX1280Hal( void )
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
};
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ffe7 	bl	800158c <_ZN9SX1280HalD1Ev>
 80015be:	2164      	movs	r1, #100	; 0x64
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f00b fd67 	bl	800d094 <_ZdlPvj>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_ZN9SX1280Hal9IoIrqInitEM6SX1280FvvE>:

void SX1280Hal::IoIrqInit( DioIrqHandler irqHandler )
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	e883 0006 	stmia.w	r3, {r1, r2}
    assert_param( RadioSpi != NULL);
    // BUSY.mode( PullNone );
    //Conexão entre interrupt do HAL e da biblioteca
    //irqHandler é o ponteiro para a função que deve ser chamada em caso de interrupt
    RadioIrqHandler = irqHandler;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	335c      	adds	r3, #92	; 0x5c
 80015e2:	1d3a      	adds	r2, r7, #4
 80015e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015e8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_ZN9SX1280Hal5ResetEv>:

void SX1280Hal::Reset( void )
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	//Por que desliga o IRQ?
	/* Habilitar o delay de outra forma*/
    //__disable_irq( );
    HAL_Delay( 20 );
 8001600:	2014      	movs	r0, #20
 8001602:	f002 f869 	bl	80036d8 <HAL_Delay>
    HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_RESET);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001610:	2200      	movs	r2, #0
 8001612:	4619      	mov	r1, r3
 8001614:	f002 ff4c 	bl	80044b0 <HAL_GPIO_WritePin>
    HAL_Delay( 50 );
 8001618:	2032      	movs	r0, #50	; 0x32
 800161a:	f002 f85d 	bl	80036d8 <HAL_Delay>
    HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_SET);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001628:	2201      	movs	r2, #1
 800162a:	4619      	mov	r1, r3
 800162c:	f002 ff40 	bl	80044b0 <HAL_GPIO_WritePin>
    HAL_Delay( 20 );
 8001630:	2014      	movs	r0, #20
 8001632:	f002 f851 	bl	80036d8 <HAL_Delay>
   // __enable_irq( );
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_ZN9SX1280Hal6WakeupEv>:

void SX1280Hal::Wakeup( void )
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001646:	b672      	cpsid	i
}
 8001648:	bf00      	nop
    __disable_irq( );

    //Don't wait for BUSY here

    if( RadioSpi != NULL )
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164e:	2b00      	cmp	r3, #0
 8001650:	d019      	beq.n	8001686 <_ZN9SX1280Hal6WakeupEv+0x48>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	f002 ff26 	bl	80044b0 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_GET_STATUS );
 8001664:	21c0      	movs	r1, #192	; 0xc0
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fad4 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 800166c:	2100      	movs	r1, #0
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fad0 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800167e:	2201      	movs	r2, #1
 8001680:	4619      	mov	r1, r3
 8001682:	f002 ff15 	bl	80044b0 <HAL_GPIO_WritePin>
    }

    // Wait for chip to be ready.
    WaitOnBusy( );
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001690:	4619      	mov	r1, r3
 8001692:	4610      	mov	r0, r2
 8001694:	f002 fef4 	bl	8004480 <HAL_GPIO_ReadPin>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf14      	ite	ne
 800169e:	2301      	movne	r3, #1
 80016a0:	2300      	moveq	r3, #0
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d000      	beq.n	80016aa <_ZN9SX1280Hal6WakeupEv+0x6c>
 80016a8:	e7ed      	b.n	8001686 <_ZN9SX1280Hal6WakeupEv+0x48>
  __ASM volatile ("cpsie i" : : : "memory");
 80016aa:	b662      	cpsie	i
}
 80016ac:	bf00      	nop

    __enable_irq( );
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht>:

void SX1280Hal::WriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	461a      	mov	r2, r3
 80016c2:	460b      	mov	r3, r1
 80016c4:	72fb      	strb	r3, [r7, #11]
 80016c6:	4613      	mov	r3, r2
 80016c8:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80016d4:	4619      	mov	r1, r3
 80016d6:	4610      	mov	r0, r2
 80016d8:	f002 fed2 	bl	8004480 <HAL_GPIO_ReadPin>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf14      	ite	ne
 80016e2:	2301      	movne	r3, #1
 80016e4:	2300      	moveq	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d000      	beq.n	80016ee <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x38>
 80016ec:	e7ed      	b.n	80016ca <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x14>

    if( RadioSpi != NULL )
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d028      	beq.n	8001748 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x92>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	f002 fed4 	bl	80044b0 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( ( uint8_t )command );
 8001708:	7afb      	ldrb	r3, [r7, #11]
 800170a:	4619      	mov	r1, r3
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 fa81 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 8001712:	2300      	movs	r3, #0
 8001714:	82fb      	strh	r3, [r7, #22]
 8001716:	8afa      	ldrh	r2, [r7, #22]
 8001718:	893b      	ldrh	r3, [r7, #8]
 800171a:	429a      	cmp	r2, r3
 800171c:	d20b      	bcs.n	8001736 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x80>
        {
            SpiTransmitReceiveByte( buffer[i] );
 800171e:	8afb      	ldrh	r3, [r7, #22]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	4619      	mov	r1, r3
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 fa73 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 800172e:	8afb      	ldrh	r3, [r7, #22]
 8001730:	3301      	adds	r3, #1
 8001732:	82fb      	strh	r3, [r7, #22]
 8001734:	e7ef      	b.n	8001716 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x60>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001740:	2201      	movs	r2, #1
 8001742:	4619      	mov	r1, r3
 8001744:	f002 feb4 	bl	80044b0 <HAL_GPIO_WritePin>
    }

    if( command != RADIO_SET_SLEEP )
 8001748:	7afb      	ldrb	r3, [r7, #11]
 800174a:	2b84      	cmp	r3, #132	; 0x84
 800174c:	d011      	beq.n	8001772 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0xbc>
    {
        WaitOnBusy( );
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001758:	4619      	mov	r1, r3
 800175a:	4610      	mov	r0, r2
 800175c:	f002 fe90 	bl	8004480 <HAL_GPIO_ReadPin>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d000      	beq.n	8001772 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0xbc>
 8001770:	e7ed      	b.n	800174e <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x98>
    }
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht>:

void SX1280Hal::ReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800177a:	b590      	push	{r4, r7, lr}
 800177c:	b087      	sub	sp, #28
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	461a      	mov	r2, r3
 8001786:	460b      	mov	r3, r1
 8001788:	72fb      	strb	r3, [r7, #11]
 800178a:	4613      	mov	r3, r2
 800178c:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001798:	4619      	mov	r1, r3
 800179a:	4610      	mov	r0, r2
 800179c:	f002 fe70 	bl	8004480 <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf14      	ite	ne
 80017a6:	2301      	movne	r3, #1
 80017a8:	2300      	moveq	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d000      	beq.n	80017b2 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x38>
 80017b0:	e7ed      	b.n	800178e <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x14>

    if( RadioSpi != NULL )
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d042      	beq.n	8001840 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xc6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017c4:	2200      	movs	r2, #0
 80017c6:	4619      	mov	r1, r3
 80017c8:	f002 fe72 	bl	80044b0 <HAL_GPIO_WritePin>
        if( command == RADIO_GET_STATUS )
 80017cc:	7afb      	ldrb	r3, [r7, #11]
 80017ce:	2bc0      	cmp	r3, #192	; 0xc0
 80017d0:	d111      	bne.n	80017f6 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x7c>
        {
            buffer[0] = SpiTransmitReceiveByte( ( uint8_t )command );
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	4619      	mov	r1, r3
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 fa1c 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	701a      	strb	r2, [r3, #0]
            SpiTransmitReceiveByte( 0 );
 80017e4:	2100      	movs	r1, #0
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 fa14 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            SpiTransmitReceiveByte( 0 );
 80017ec:	2100      	movs	r1, #0
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 fa10 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80017f4:	e01b      	b.n	800182e <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xb4>
        }
        else
        {
            SpiTransmitReceiveByte( ( uint8_t )command );
 80017f6:	7afb      	ldrb	r3, [r7, #11]
 80017f8:	4619      	mov	r1, r3
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 fa0a 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            SpiTransmitReceiveByte( 0 );
 8001800:	2100      	movs	r1, #0
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 fa06 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            for( uint16_t i = 0; i < size; i++ )
 8001808:	2300      	movs	r3, #0
 800180a:	82fb      	strh	r3, [r7, #22]
 800180c:	8afa      	ldrh	r2, [r7, #22]
 800180e:	893b      	ldrh	r3, [r7, #8]
 8001810:	429a      	cmp	r2, r3
 8001812:	d20c      	bcs.n	800182e <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xb4>
            {
                 buffer[i] = SpiTransmitReceiveByte( 0 );
 8001814:	8afb      	ldrh	r3, [r7, #22]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	18d4      	adds	r4, r2, r3
 800181a:	2100      	movs	r1, #0
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 f9f9 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 8001822:	4603      	mov	r3, r0
 8001824:	7023      	strb	r3, [r4, #0]
            for( uint16_t i = 0; i < size; i++ )
 8001826:	8afb      	ldrh	r3, [r7, #22]
 8001828:	3301      	adds	r3, #1
 800182a:	82fb      	strh	r3, [r7, #22]
 800182c:	e7ee      	b.n	800180c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x92>
            }
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001838:	2201      	movs	r2, #1
 800183a:	4619      	mov	r1, r3
 800183c:	f002 fe38 	bl	80044b0 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800184a:	4619      	mov	r1, r3
 800184c:	4610      	mov	r0, r2
 800184e:	f002 fe17 	bl	8004480 <HAL_GPIO_ReadPin>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf14      	ite	ne
 8001858:	2301      	movne	r3, #1
 800185a:	2300      	moveq	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d000      	beq.n	8001864 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xea>
 8001862:	e7ed      	b.n	8001840 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xc6>
}
 8001864:	bf00      	nop
 8001866:	371c      	adds	r7, #28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}

0800186c <_ZN9SX1280Hal13WriteRegisterEtPht>:

void SX1280Hal::WriteRegister( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	461a      	mov	r2, r3
 8001878:	460b      	mov	r3, r1
 800187a:	817b      	strh	r3, [r7, #10]
 800187c:	4613      	mov	r3, r2
 800187e:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800188a:	4619      	mov	r1, r3
 800188c:	4610      	mov	r0, r2
 800188e:	f002 fdf7 	bl	8004480 <HAL_GPIO_ReadPin>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d000      	beq.n	80018a4 <_ZN9SX1280Hal13WriteRegisterEtPht+0x38>
 80018a2:	e7ed      	b.n	8001880 <_ZN9SX1280Hal13WriteRegisterEtPht+0x14>

    if( RadioSpi != NULL )
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d035      	beq.n	8001918 <_ZN9SX1280Hal13WriteRegisterEtPht+0xac>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018b6:	2200      	movs	r2, #0
 80018b8:	4619      	mov	r1, r3
 80018ba:	f002 fdf9 	bl	80044b0 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_WRITE_REGISTER );
 80018be:	2118      	movs	r1, #24
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 f9a7 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( ( address & 0xFF00 ) >> 8 );
 80018c6:	897b      	ldrh	r3, [r7, #10]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4619      	mov	r1, r3
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f99f 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( address & 0x00FF );
 80018d6:	897b      	ldrh	r3, [r7, #10]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	4619      	mov	r1, r3
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f999 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80018e2:	2300      	movs	r3, #0
 80018e4:	82fb      	strh	r3, [r7, #22]
 80018e6:	8afa      	ldrh	r2, [r7, #22]
 80018e8:	893b      	ldrh	r3, [r7, #8]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d20b      	bcs.n	8001906 <_ZN9SX1280Hal13WriteRegisterEtPht+0x9a>
        {
            SpiTransmitReceiveByte( buffer[i] );
 80018ee:	8afb      	ldrh	r3, [r7, #22]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	4619      	mov	r1, r3
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f98b 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80018fe:	8afb      	ldrh	r3, [r7, #22]
 8001900:	3301      	adds	r3, #1
 8001902:	82fb      	strh	r3, [r7, #22]
 8001904:	e7ef      	b.n	80018e6 <_ZN9SX1280Hal13WriteRegisterEtPht+0x7a>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001910:	2201      	movs	r2, #1
 8001912:	4619      	mov	r1, r3
 8001914:	f002 fdcc 	bl	80044b0 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001922:	4619      	mov	r1, r3
 8001924:	4610      	mov	r0, r2
 8001926:	f002 fdab 	bl	8004480 <HAL_GPIO_ReadPin>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d000      	beq.n	800193c <_ZN9SX1280Hal13WriteRegisterEtPht+0xd0>
 800193a:	e7ed      	b.n	8001918 <_ZN9SX1280Hal13WriteRegisterEtPht+0xac>
}
 800193c:	bf00      	nop
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_ZN9SX1280Hal13WriteRegisterEth>:

void SX1280Hal::WriteRegister( uint16_t address, uint8_t value )
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
 8001950:	4613      	mov	r3, r2
 8001952:	707b      	strb	r3, [r7, #1]
    WriteRegister( address, &value, 1 );
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3318      	adds	r3, #24
 800195a:	681c      	ldr	r4, [r3, #0]
 800195c:	1c7a      	adds	r2, r7, #1
 800195e:	8879      	ldrh	r1, [r7, #2]
 8001960:	2301      	movs	r3, #1
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	47a0      	blx	r4
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bd90      	pop	{r4, r7, pc}

0800196e <_ZN9SX1280Hal12ReadRegisterEtPht>:

void SX1280Hal::ReadRegister( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800196e:	b590      	push	{r4, r7, lr}
 8001970:	b087      	sub	sp, #28
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	461a      	mov	r2, r3
 800197a:	460b      	mov	r3, r1
 800197c:	817b      	strh	r3, [r7, #10]
 800197e:	4613      	mov	r3, r2
 8001980:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800198c:	4619      	mov	r1, r3
 800198e:	4610      	mov	r0, r2
 8001990:	f002 fd76 	bl	8004480 <HAL_GPIO_ReadPin>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf14      	ite	ne
 800199a:	2301      	movne	r3, #1
 800199c:	2300      	moveq	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d000      	beq.n	80019a6 <_ZN9SX1280Hal12ReadRegisterEtPht+0x38>
 80019a4:	e7ed      	b.n	8001982 <_ZN9SX1280Hal12ReadRegisterEtPht+0x14>

    if( RadioSpi != NULL )
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d03a      	beq.n	8001a24 <_ZN9SX1280Hal12ReadRegisterEtPht+0xb6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019b8:	2200      	movs	r2, #0
 80019ba:	4619      	mov	r1, r3
 80019bc:	f002 fd78 	bl	80044b0 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_READ_REGISTER );
 80019c0:	2119      	movs	r1, #25
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f926 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( ( address & 0xFF00 ) >> 8 );
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	0a1b      	lsrs	r3, r3, #8
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4619      	mov	r1, r3
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f91e 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( address & 0x00FF );
 80019d8:	897b      	ldrh	r3, [r7, #10]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	4619      	mov	r1, r3
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 f918 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 80019e4:	2100      	movs	r1, #0
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f914 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80019ec:	2300      	movs	r3, #0
 80019ee:	82fb      	strh	r3, [r7, #22]
 80019f0:	8afa      	ldrh	r2, [r7, #22]
 80019f2:	893b      	ldrh	r3, [r7, #8]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d20c      	bcs.n	8001a12 <_ZN9SX1280Hal12ReadRegisterEtPht+0xa4>
        {
            buffer[i] = SpiTransmitReceiveByte( 0 );
 80019f8:	8afb      	ldrh	r3, [r7, #22]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	18d4      	adds	r4, r2, r3
 80019fe:	2100      	movs	r1, #0
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f907 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 8001a06:	4603      	mov	r3, r0
 8001a08:	7023      	strb	r3, [r4, #0]
        for( uint16_t i = 0; i < size; i++ )
 8001a0a:	8afb      	ldrh	r3, [r7, #22]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	82fb      	strh	r3, [r7, #22]
 8001a10:	e7ee      	b.n	80019f0 <_ZN9SX1280Hal12ReadRegisterEtPht+0x82>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f002 fd46 	bl	80044b0 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4610      	mov	r0, r2
 8001a32:	f002 fd25 	bl	8004480 <HAL_GPIO_ReadPin>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d000      	beq.n	8001a48 <_ZN9SX1280Hal12ReadRegisterEtPht+0xda>
 8001a46:	e7ed      	b.n	8001a24 <_ZN9SX1280Hal12ReadRegisterEtPht+0xb6>
}
 8001a48:	bf00      	nop
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd90      	pop	{r4, r7, pc}

08001a50 <_ZN9SX1280Hal12ReadRegisterEt>:

uint8_t SX1280Hal::ReadRegister( uint16_t address )
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
    uint8_t data;

    ReadRegister( address, &data, 1 );
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3320      	adds	r3, #32
 8001a62:	681c      	ldr	r4, [r3, #0]
 8001a64:	f107 020f 	add.w	r2, r7, #15
 8001a68:	8879      	ldrh	r1, [r7, #2]
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	47a0      	blx	r4
    return data;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd90      	pop	{r4, r7, pc}

08001a7a <_ZN9SX1280Hal11WriteBufferEhPhh>:

void SX1280Hal::WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	461a      	mov	r2, r3
 8001a86:	460b      	mov	r3, r1
 8001a88:	72fb      	strb	r3, [r7, #11]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	72bb      	strb	r3, [r7, #10]
    WaitOnBusy( );
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f002 fcf0 	bl	8004480 <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	bf14      	ite	ne
 8001aa6:	2301      	movne	r3, #1
 8001aa8:	2300      	moveq	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d000      	beq.n	8001ab2 <_ZN9SX1280Hal11WriteBufferEhPhh+0x38>
 8001ab0:	e7ed      	b.n	8001a8e <_ZN9SX1280Hal11WriteBufferEhPhh+0x14>

    if( RadioSpi != NULL )
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d02d      	beq.n	8001b16 <_ZN9SX1280Hal11WriteBufferEhPhh+0x9c>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f002 fcf2 	bl	80044b0 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_WRITE_BUFFER );
 8001acc:	211a      	movs	r1, #26
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 f8a0 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( offset );
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f89b 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 8001ade:	2300      	movs	r3, #0
 8001ae0:	82fb      	strh	r3, [r7, #22]
 8001ae2:	7abb      	ldrb	r3, [r7, #10]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	8afa      	ldrh	r2, [r7, #22]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d20b      	bcs.n	8001b04 <_ZN9SX1280Hal11WriteBufferEhPhh+0x8a>
        {
            SpiTransmitReceiveByte( buffer[i] );
 8001aec:	8afb      	ldrh	r3, [r7, #22]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 f88c 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 8001afc:	8afb      	ldrh	r3, [r7, #22]
 8001afe:	3301      	adds	r3, #1
 8001b00:	82fb      	strh	r3, [r7, #22]
 8001b02:	e7ee      	b.n	8001ae2 <_ZN9SX1280Hal11WriteBufferEhPhh+0x68>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4619      	mov	r1, r3
 8001b12:	f002 fccd 	bl	80044b0 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001b20:	4619      	mov	r1, r3
 8001b22:	4610      	mov	r0, r2
 8001b24:	f002 fcac 	bl	8004480 <HAL_GPIO_ReadPin>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d000      	beq.n	8001b3a <_ZN9SX1280Hal11WriteBufferEhPhh+0xc0>
 8001b38:	e7ed      	b.n	8001b16 <_ZN9SX1280Hal11WriteBufferEhPhh+0x9c>
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_ZN9SX1280Hal10ReadBufferEhPhh>:

void SX1280Hal::ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001b42:	b590      	push	{r4, r7, lr}
 8001b44:	b087      	sub	sp, #28
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	460b      	mov	r3, r1
 8001b50:	72fb      	strb	r3, [r7, #11]
 8001b52:	4613      	mov	r3, r2
 8001b54:	72bb      	strb	r3, [r7, #10]
    WaitOnBusy( );
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001b60:	4619      	mov	r1, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	f002 fc8c 	bl	8004480 <HAL_GPIO_ReadPin>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf14      	ite	ne
 8001b6e:	2301      	movne	r3, #1
 8001b70:	2300      	moveq	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d000      	beq.n	8001b7a <_ZN9SX1280Hal10ReadBufferEhPhh+0x38>
 8001b78:	e7ed      	b.n	8001b56 <_ZN9SX1280Hal10ReadBufferEhPhh+0x14>

    if( RadioSpi != NULL )
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d032      	beq.n	8001be8 <_ZN9SX1280Hal10ReadBufferEhPhh+0xa6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f002 fc8e 	bl	80044b0 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_READ_BUFFER );
 8001b94:	211b      	movs	r1, #27
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 f83c 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( offset );
 8001b9c:	7afb      	ldrb	r3, [r7, #11]
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f000 f837 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f833 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 8001bae:	2300      	movs	r3, #0
 8001bb0:	82fb      	strh	r3, [r7, #22]
 8001bb2:	7abb      	ldrb	r3, [r7, #10]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	8afa      	ldrh	r2, [r7, #22]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d20c      	bcs.n	8001bd6 <_ZN9SX1280Hal10ReadBufferEhPhh+0x94>
        {
            buffer[i] = SpiTransmitReceiveByte( 0 );
 8001bbc:	8afb      	ldrh	r3, [r7, #22]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	18d4      	adds	r4, r2, r3
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f825 	bl	8001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	7023      	strb	r3, [r4, #0]
        for( uint16_t i = 0; i < size; i++ )
 8001bce:	8afb      	ldrh	r3, [r7, #22]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	82fb      	strh	r3, [r7, #22]
 8001bd4:	e7ed      	b.n	8001bb2 <_ZN9SX1280Hal10ReadBufferEhPhh+0x70>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001be0:	2201      	movs	r2, #1
 8001be2:	4619      	mov	r1, r3
 8001be4:	f002 fc64 	bl	80044b0 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	f002 fc43 	bl	8004480 <HAL_GPIO_ReadPin>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf14      	ite	ne
 8001c00:	2301      	movne	r3, #1
 8001c02:	2300      	moveq	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d000      	beq.n	8001c0c <_ZN9SX1280Hal10ReadBufferEhPhh+0xca>
 8001c0a:	e7ed      	b.n	8001be8 <_ZN9SX1280Hal10ReadBufferEhPhh+0xa6>
}
 8001c0c:	bf00      	nop
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}

08001c14 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>:

uint8_t SX1280Hal::SpiTransmitReceiveByte( uint8_t byte )
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
	//Se for IT ou DMA a função acaba antes de terminar de transmitir
	uint8_t receivedByte;
	HAL_SPI_TransmitReceive(RadioSpi, &byte, &receivedByte, 1, 100);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c24:	f107 020f 	add.w	r2, r7, #15
 8001c28:	1cf9      	adds	r1, r7, #3
 8001c2a:	2364      	movs	r3, #100	; 0x64
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f005 fb33 	bl	800729a <HAL_SPI_TransmitReceive>
	return receivedByte;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_ZN9SX1280Hal20HalInterruptCallbackEv>:

void SX1280Hal::HalInterruptCallback(void){
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
	if(RadioIrqHandler != NULL){
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d107      	bne.n	8001c5e <_ZN9SX1280Hal20HalInterruptCallbackEv+0x20>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <_ZN9SX1280Hal20HalInterruptCallbackEv+0x20>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x22>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d019      	beq.n	8001c98 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x5a>
		(this->*RadioIrqHandler)();
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001c6a:	1052      	asrs	r2, r2, #1
 8001c6c:	1899      	adds	r1, r3, r2
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d102      	bne.n	8001c80 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x42>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7e:	e009      	b.n	8001c94 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x56>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001c86:	1052      	asrs	r2, r2, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c90:	4413      	add	r3, r2
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4608      	mov	r0, r1
 8001c96:	4798      	blx	r3
	}
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_ZN6SX12804InitEv>:
 * \brief Radio hardware registers initialization
 */
const RadioRegisters_t RadioRegsInit[] = RADIO_INIT_REGISTERS_VALUE;

void SX1280::Init( void )
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
    Reset( );
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3308      	adds	r3, #8
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	4798      	blx	r3
    IoIrqInit( dioIrq );
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3334      	adds	r3, #52	; 0x34
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	322c      	adds	r2, #44	; 0x2c
 8001cc0:	ca06      	ldmia	r2, {r1, r2}
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	4798      	blx	r3
    Wakeup( );
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3338      	adds	r3, #56	; 0x38
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
    SetRegistersDefault( );
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f804 	bl	8001ce0 <_ZN6SX128019SetRegistersDefaultEv>
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZN6SX128019SetRegistersDefaultEv>:

void SX1280::SetRegistersDefault( void )
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    for( int16_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8001ce8:	2300      	movs	r3, #0
 8001cea:	81fb      	strh	r3, [r7, #14]
    {
        WriteRegister( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    }
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_ZN6SX128018GetFirmwareVersionEv>:

uint16_t SX1280::GetFirmwareVersion( void )
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3324      	adds	r3, #36	; 0x24
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f240 1153 	movw	r1, #339	; 0x153
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4798      	blx	r3
 8001d10:	4603      	mov	r3, r0
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	b21c      	sxth	r4, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	3324      	adds	r3, #36	; 0x24
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4798      	blx	r3
 8001d26:	4603      	mov	r3, r0
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	b29b      	uxth	r3, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd90      	pop	{r4, r7, pc}

08001d38 <_ZN6SX12809GetStatusEv>:

RadioStatus_t SX1280::GetStatus( void )
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    uint8_t stat = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
    RadioStatus_t status;

    ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3314      	adds	r3, #20
 8001d4a:	681c      	ldr	r4, [r3, #0]
 8001d4c:	f107 020f 	add.w	r2, r7, #15
 8001d50:	2301      	movs	r3, #1
 8001d52:	21c0      	movs	r1, #192	; 0xc0
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	47a0      	blx	r4
    status.Value = stat;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	733b      	strb	r3, [r7, #12]
    return( status );
 8001d5c:	7b3b      	ldrb	r3, [r7, #12]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd90      	pop	{r4, r7, pc}

08001d66 <_ZN6SX12809GetOpModeEv>:

RadioOperatingModes_t SX1280::GetOpMode( void )
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
    return( OperatingMode );
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>:
    OperatingMode = MODE_SLEEP;
    WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
}

void SX1280::SetStandby( RadioStandbyModes_t standbyConfig )
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	70fb      	strb	r3, [r7, #3]
    WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3310      	adds	r3, #16
 8001d92:	681c      	ldr	r4, [r3, #0]
 8001d94:	1cfa      	adds	r2, r7, #3
 8001d96:	2301      	movs	r3, #1
 8001d98:	2180      	movs	r1, #128	; 0x80
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	47a0      	blx	r4
    if( standbyConfig == STDBY_RC )
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d104      	bne.n	8001dae <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x2e>
    {
        OperatingMode = MODE_STDBY_RC;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8001dac:	e003      	b.n	8001db6 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x36>
        OperatingMode = MODE_STDBY_XOSC;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2203      	movs	r2, #3
 8001db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}

08001dbe <_ZN6SX12805SetTxE10TickTime_s>:
    WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SX1280::SetTx( TickTime_t timeout )
{
 8001dbe:	b590      	push	{r4, r7, lr}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    buf[0] = timeout.PeriodBase;
 8001dc8:	783b      	ldrb	r3, [r7, #0]
 8001dca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	73bb      	strb	r3, [r7, #14]

    ClearIrqStatus( IRQ_RADIO_ALL );
 8001ddc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fad0 	bl	8002386 <_ZN6SX128014ClearIrqStatusEt>

    // If the radio is doing ranging operations, then apply the specific calls
    // prior to SetTx
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
 8001de6:	2101      	movs	r1, #1
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f86b 	bl	8001ec4 <_ZN6SX128013GetPacketTypeEb>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <_ZN6SX12805SetTxE10TickTime_s+0x48>
    {
        SetRangingRole( RADIO_RANGING_ROLE_MASTER );
 8001dfe:	2101      	movs	r1, #1
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 fb41 	bl	8002488 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    }
    WriteCommand( RADIO_SET_TX, buf, 3 );
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3310      	adds	r3, #16
 8001e0c:	681c      	ldr	r4, [r3, #0]
 8001e0e:	f107 020c 	add.w	r2, r7, #12
 8001e12:	2303      	movs	r3, #3
 8001e14:	2183      	movs	r1, #131	; 0x83
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	47a0      	blx	r4
    OperatingMode = MODE_TX;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2206      	movs	r2, #6
 8001e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd90      	pop	{r4, r7, pc}

08001e2a <_ZN6SX12805SetRxE10TickTime_s>:

void SX1280::SetRx( TickTime_t timeout )
{
 8001e2a:	b590      	push	{r4, r7, lr}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    buf[0] = timeout.PeriodBase;
 8001e34:	783b      	ldrb	r3, [r7, #0]
 8001e36:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	73bb      	strb	r3, [r7, #14]

    ClearIrqStatus( IRQ_RADIO_ALL );
 8001e48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fa9a 	bl	8002386 <_ZN6SX128014ClearIrqStatusEt>

    // If the radio is doing ranging operations, then apply the specific calls
    // prior to SetRx
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
 8001e52:	2101      	movs	r1, #1
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f835 	bl	8001ec4 <_ZN6SX128013GetPacketTypeEb>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <_ZN6SX12805SetRxE10TickTime_s+0x48>
    {
        SetRangingRole( RADIO_RANGING_ROLE_SLAVE );
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fb0b 	bl	8002488 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    }
    WriteCommand( RADIO_SET_RX, buf, 3 );
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3310      	adds	r3, #16
 8001e78:	681c      	ldr	r4, [r3, #0]
 8001e7a:	f107 020c 	add.w	r2, r7, #12
 8001e7e:	2303      	movs	r3, #3
 8001e80:	2182      	movs	r1, #130	; 0x82
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	47a0      	blx	r4
    OperatingMode = MODE_RX;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2205      	movs	r2, #5
 8001e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd90      	pop	{r4, r7, pc}

08001e96 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>:
{
    WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX1280::SetPacketType( RadioPacketTypes_t packetType )
{
 8001e96:	b590      	push	{r4, r7, lr}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	70fb      	strb	r3, [r7, #3]
    // Save packet type internally to avoid questioning the radio
    this->PacketType = packetType;
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3310      	adds	r3, #16
 8001eb0:	681c      	ldr	r4, [r3, #0]
 8001eb2:	1cfa      	adds	r2, r7, #3
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	218a      	movs	r1, #138	; 0x8a
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	47a0      	blx	r4
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd90      	pop	{r4, r7, pc}

08001ec4 <_ZN6SX128013GetPacketTypeEb>:

RadioPacketTypes_t SX1280::GetPacketType( bool returnLocalCopy )
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
    RadioPacketTypes_t packetType = PACKET_TYPE_NONE;
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	73fb      	strb	r3, [r7, #15]
    if( returnLocalCopy == false )
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d114      	bne.n	8001f04 <_ZN6SX128013GetPacketTypeEb+0x40>
    {
        ReadCommand( RADIO_GET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3314      	adds	r3, #20
 8001ee0:	681c      	ldr	r4, [r3, #0]
 8001ee2:	f107 020f 	add.w	r2, r7, #15
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	2103      	movs	r1, #3
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	47a0      	blx	r4
        if( this->PacketType != packetType )
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d008      	beq.n	8001f0c <_ZN6SX128013GetPacketTypeEb+0x48>
        {
            this->PacketType = packetType;
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001f02:	e003      	b.n	8001f0c <_ZN6SX128013GetPacketTypeEb+0x48>
        }
    }
    else
    {
        packetType = this->PacketType;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f0a:	73fb      	strb	r3, [r7, #15]
    }
    return packetType;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd90      	pop	{r4, r7, pc}
	...

08001f18 <_ZN6SX128014SetRfFrequencyEm>:

void SX1280::SetRfFrequency( uint32_t rfFrequency )
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    uint32_t freq = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]

    freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
 8001f26:	6838      	ldr	r0, [r7, #0]
 8001f28:	f7fe fae4 	bl	80004f4 <__aeabi_ui2d>
 8001f2c:	a312      	add	r3, pc, #72	; (adr r3, 8001f78 <_ZN6SX128014SetRfFrequencyEm+0x60>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fc83 	bl	800083c <__aeabi_ddiv>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fd65 	bl	8000a0c <__aeabi_d2uiz>
 8001f42:	4603      	mov	r3, r0
 8001f44:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	0c1b      	lsrs	r3, r3, #16
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq & 0xFF );
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	72bb      	strb	r3, [r7, #10]
    WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3310      	adds	r3, #16
 8001f62:	681c      	ldr	r4, [r3, #0]
 8001f64:	f107 0208 	add.w	r2, r7, #8
 8001f68:	2303      	movs	r3, #3
 8001f6a:	2186      	movs	r1, #134	; 0x86
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	47a0      	blx	r4
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	4068cba8 	.word	0x4068cba8

08001f80 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>:

void SX1280::SetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[2];

    // The power value to send on SPI/UART is in the range [0..31] and the
    // physical output power is in the range [-18..13]dBm
    buf[0] = power + 18;
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	3312      	adds	r3, #18
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8001f98:	78bb      	ldrb	r3, [r7, #2]
 8001f9a:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3310      	adds	r3, #16
 8001fa2:	681c      	ldr	r4, [r3, #0]
 8001fa4:	f107 020c 	add.w	r2, r7, #12
 8001fa8:	2302      	movs	r3, #2
 8001faa:	218e      	movs	r1, #142	; 0x8e
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	47a0      	blx	r4
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}

08001fb8 <_ZN6SX128022SetBufferBaseAddressesEhh>:
    WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
    OperatingMode = MODE_CAD;
}

void SX1280::SetBufferBaseAddresses( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8001fcc:	78bb      	ldrb	r3, [r7, #2]
 8001fce:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3310      	adds	r3, #16
 8001fd6:	681c      	ldr	r4, [r3, #0]
 8001fd8:	f107 020c 	add.w	r2, r7, #12
 8001fdc:	2302      	movs	r3, #2
 8001fde:	218f      	movs	r1, #143	; 0x8f
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	47a0      	blx	r4
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd90      	pop	{r4, r7, pc}

08001fec <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>:

void SX1280::SetModulationParams( ModulationParams_t *modParams )
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != modParams->PacketType )
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d005      	beq.n	8002010 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x24>
    {
        this->SetPacketType( modParams->PacketType );
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff43 	bl	8001e96 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( modParams->PacketType )
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b0f      	cmp	r3, #15
 8002016:	d857      	bhi.n	80020c8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
 8002018:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x34>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002061 	.word	0x08002061
 8002024:	08002075 	.word	0x08002075
 8002028:	08002075 	.word	0x08002075
 800202c:	08002093 	.word	0x08002093
 8002030:	080020a7 	.word	0x080020a7
 8002034:	080020c9 	.word	0x080020c9
 8002038:	080020c9 	.word	0x080020c9
 800203c:	080020c9 	.word	0x080020c9
 8002040:	080020c9 	.word	0x080020c9
 8002044:	080020c9 	.word	0x080020c9
 8002048:	080020c9 	.word	0x080020c9
 800204c:	080020c9 	.word	0x080020c9
 8002050:	080020c9 	.word	0x080020c9
 8002054:	080020c9 	.word	0x080020c9
 8002058:	080020c9 	.word	0x080020c9
 800205c:	080020bb 	.word	0x080020bb
    {
        case PACKET_TYPE_GFSK:
            buf[0] = modParams->Params.Gfsk.BitrateBandwidth;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	785b      	ldrb	r3, [r3, #1]
 8002064:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Gfsk.ModulationIndex;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	789b      	ldrb	r3, [r3, #2]
 800206a:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Gfsk.ModulationShaping;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	78db      	ldrb	r3, [r3, #3]
 8002070:	73bb      	strb	r3, [r7, #14]
            break;
 8002072:	e029      	b.n	80020c8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_LORA:
        case PACKET_TYPE_RANGING:
            buf[0] = modParams->Params.LoRa.SpreadingFactor;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	791b      	ldrb	r3, [r3, #4]
 8002078:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.LoRa.Bandwidth;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	795b      	ldrb	r3, [r3, #5]
 800207e:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.LoRa.CodingRate;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	799b      	ldrb	r3, [r3, #6]
 8002084:	73bb      	strb	r3, [r7, #14]
            this->LoRaBandwidth = modParams->Params.LoRa.Bandwidth;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	795a      	ldrb	r2, [r3, #5]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            break;
 8002090:	e01a      	b.n	80020c8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_FLRC:
            buf[0] = modParams->Params.Flrc.BitrateBandwidth;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	79db      	ldrb	r3, [r3, #7]
 8002096:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Flrc.CodingRate;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	7a1b      	ldrb	r3, [r3, #8]
 800209c:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Flrc.ModulationShaping;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	7a5b      	ldrb	r3, [r3, #9]
 80020a2:	73bb      	strb	r3, [r7, #14]
            break;
 80020a4:	e010      	b.n	80020c8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_BLE:
            buf[0] = modParams->Params.Ble.BitrateBandwidth;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	7a9b      	ldrb	r3, [r3, #10]
 80020aa:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Ble.ModulationIndex;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	7adb      	ldrb	r3, [r3, #11]
 80020b0:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Ble.ModulationShaping;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	7b1b      	ldrb	r3, [r3, #12]
 80020b6:	73bb      	strb	r3, [r7, #14]
            break;
 80020b8:	e006      	b.n	80020c8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_NONE:
            buf[0] = NULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	733b      	strb	r3, [r7, #12]
            buf[1] = NULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	737b      	strb	r3, [r7, #13]
            buf[2] = NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73bb      	strb	r3, [r7, #14]
            break;
 80020c6:	bf00      	nop
    }
    WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3310      	adds	r3, #16
 80020ce:	681c      	ldr	r4, [r3, #0]
 80020d0:	f107 020c 	add.w	r2, r7, #12
 80020d4:	2303      	movs	r3, #3
 80020d6:	218b      	movs	r1, #139	; 0x8b
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	47a0      	blx	r4
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd90      	pop	{r4, r7, pc}

080020e4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t>:

void SX1280::SetPacketParams( PacketParams_t *packetParams )
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
    uint8_t buf[7];
    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != packetParams->PacketType )
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d005      	beq.n	8002108 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x24>
    {
        this->SetPacketType( packetParams->PacketType );
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fec7 	bl	8001e96 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( packetParams->PacketType )
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b0f      	cmp	r3, #15
 800210e:	f200 8085 	bhi.w	800221c <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x34>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002159 	.word	0x08002159
 800211c:	08002185 	.word	0x08002185
 8002120:	08002185 	.word	0x08002185
 8002124:	080021ad 	.word	0x080021ad
 8002128:	080021d9 	.word	0x080021d9
 800212c:	0800221d 	.word	0x0800221d
 8002130:	0800221d 	.word	0x0800221d
 8002134:	0800221d 	.word	0x0800221d
 8002138:	0800221d 	.word	0x0800221d
 800213c:	0800221d 	.word	0x0800221d
 8002140:	0800221d 	.word	0x0800221d
 8002144:	0800221d 	.word	0x0800221d
 8002148:	0800221d 	.word	0x0800221d
 800214c:	0800221d 	.word	0x0800221d
 8002150:	0800221d 	.word	0x0800221d
 8002154:	080021ff 	.word	0x080021ff
    {
        case PACKET_TYPE_GFSK:
            buf[0] = packetParams->Params.Gfsk.PreambleLength;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	785b      	ldrb	r3, [r3, #1]
 800215c:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Gfsk.SyncWordLength;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	789b      	ldrb	r3, [r3, #2]
 8002162:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Gfsk.SyncWordMatch;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	78db      	ldrb	r3, [r3, #3]
 8002168:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Gfsk.HeaderType;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	791b      	ldrb	r3, [r3, #4]
 800216e:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.Gfsk.PayloadLength;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	795b      	ldrb	r3, [r3, #5]
 8002174:	733b      	strb	r3, [r7, #12]
            buf[5] = packetParams->Params.Gfsk.CrcLength;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	799b      	ldrb	r3, [r3, #6]
 800217a:	737b      	strb	r3, [r7, #13]
            buf[6] = packetParams->Params.Gfsk.Whitening;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	79db      	ldrb	r3, [r3, #7]
 8002180:	73bb      	strb	r3, [r7, #14]
            break;
 8002182:	e04b      	b.n	800221c <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_LORA:
        case PACKET_TYPE_RANGING:
            buf[0] = packetParams->Params.LoRa.PreambleLength;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	7a1b      	ldrb	r3, [r3, #8]
 8002188:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.LoRa.HeaderType;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	7a5b      	ldrb	r3, [r3, #9]
 800218e:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.LoRa.PayloadLength;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	7a9b      	ldrb	r3, [r3, #10]
 8002194:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.LoRa.Crc;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	7adb      	ldrb	r3, [r3, #11]
 800219a:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.LoRa.InvertIQ;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	7b1b      	ldrb	r3, [r3, #12]
 80021a0:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	73bb      	strb	r3, [r7, #14]
            break;
 80021aa:	e037      	b.n	800221c <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_FLRC:
            buf[0] = packetParams->Params.Flrc.PreambleLength;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	7b5b      	ldrb	r3, [r3, #13]
 80021b0:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Flrc.SyncWordLength;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	7b9b      	ldrb	r3, [r3, #14]
 80021b6:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Flrc.SyncWordMatch;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	7bdb      	ldrb	r3, [r3, #15]
 80021bc:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Flrc.HeaderType;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	7c1b      	ldrb	r3, [r3, #16]
 80021c2:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.Flrc.PayloadLength;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	7c5b      	ldrb	r3, [r3, #17]
 80021c8:	733b      	strb	r3, [r7, #12]
            buf[5] = packetParams->Params.Flrc.CrcLength;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	7c9b      	ldrb	r3, [r3, #18]
 80021ce:	737b      	strb	r3, [r7, #13]
            buf[6] = packetParams->Params.Flrc.Whitening;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	7cdb      	ldrb	r3, [r3, #19]
 80021d4:	73bb      	strb	r3, [r7, #14]
            break;
 80021d6:	e021      	b.n	800221c <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_BLE:
            buf[0] = packetParams->Params.Ble.ConnectionState;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	7d1b      	ldrb	r3, [r3, #20]
 80021dc:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Ble.CrcLength;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	7d5b      	ldrb	r3, [r3, #21]
 80021e2:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Ble.BleTestPayload;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	7d9b      	ldrb	r3, [r3, #22]
 80021e8:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Ble.Whitening;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	7ddb      	ldrb	r3, [r3, #23]
 80021ee:	72fb      	strb	r3, [r7, #11]
            buf[4] = NULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73bb      	strb	r3, [r7, #14]
            break;
 80021fc:	e00e      	b.n	800221c <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_NONE:
            buf[0] = NULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	723b      	strb	r3, [r7, #8]
            buf[1] = NULL;
 8002202:	2300      	movs	r3, #0
 8002204:	727b      	strb	r3, [r7, #9]
            buf[2] = NULL;
 8002206:	2300      	movs	r3, #0
 8002208:	72bb      	strb	r3, [r7, #10]
            buf[3] = NULL;
 800220a:	2300      	movs	r3, #0
 800220c:	72fb      	strb	r3, [r7, #11]
            buf[4] = NULL;
 800220e:	2300      	movs	r3, #0
 8002210:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 8002216:	2300      	movs	r3, #0
 8002218:	73bb      	strb	r3, [r7, #14]
            break;
 800221a:	bf00      	nop
    }
    WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3310      	adds	r3, #16
 8002222:	681c      	ldr	r4, [r3, #0]
 8002224:	f107 0208 	add.w	r2, r7, #8
 8002228:	2307      	movs	r3, #7
 800222a:	218c      	movs	r1, #140	; 0x8c
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	47a0      	blx	r4
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bd90      	pop	{r4, r7, pc}

08002238 <_ZN6SX128017GetRxBufferStatusEPhS0_>:
{
    this->WriteRegister( REG_LR_PREAMBLELENGTH, ( this->ReadRegister( REG_LR_PREAMBLELENGTH ) & MASK_FORCE_PREAMBLELENGTH ) | preambleLength );
}

void SX1280::GetRxBufferStatus( uint8_t *rxPayloadLength, uint8_t *rxStartBufferPointer )
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
    uint8_t status[2];

    ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3314      	adds	r3, #20
 800224a:	681c      	ldr	r4, [r3, #0]
 800224c:	f107 0214 	add.w	r2, r7, #20
 8002250:	2302      	movs	r3, #2
 8002252:	2117      	movs	r1, #23
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	47a0      	blx	r4

    // In case of LORA fixed header, the rxPayloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( this -> GetPacketType( true ) == PACKET_TYPE_LORA ) && ( ReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 8002258:	2101      	movs	r1, #1
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f7ff fe32 	bl	8001ec4 <_ZN6SX128013GetPacketTypeEb>
 8002260:	4603      	mov	r3, r0
 8002262:	2b01      	cmp	r3, #1
 8002264:	d10e      	bne.n	8002284 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4c>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3324      	adds	r3, #36	; 0x24
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f640 1103 	movw	r1, #2307	; 0x903
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	4798      	blx	r3
 8002276:	4603      	mov	r3, r0
 8002278:	09db      	lsrs	r3, r3, #7
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4c>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4e>
 8002284:	2300      	movs	r3, #0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00c      	beq.n	80022a4 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x6c>
    {
        *rxPayloadLength = ReadRegister( REG_LR_PAYLOADLENGTH );
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3324      	adds	r3, #36	; 0x24
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f640 1101 	movw	r1, #2305	; 0x901
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	4798      	blx	r3
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	701a      	strb	r2, [r3, #0]
 80022a2:	e014      	b.n	80022ce <_ZN6SX128017GetRxBufferStatusEPhS0_+0x96>
    }
    else if( this -> GetPacketType( true ) == PACKET_TYPE_BLE )
 80022a4:	2101      	movs	r1, #1
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f7ff fe0c 	bl	8001ec4 <_ZN6SX128013GetPacketTypeEb>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x90>
    {
        // In the case of BLE, the size returned in status[0] do not include the 2-byte length PDU header
        // so it is added there
        *rxPayloadLength = status[0] + 2;
 80022bc:	7d3b      	ldrb	r3, [r7, #20]
 80022be:	3302      	adds	r3, #2
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	e002      	b.n	80022ce <_ZN6SX128017GetRxBufferStatusEPhS0_+0x96>
    }
    else
    {
        *rxPayloadLength = status[0];
 80022c8:	7d3a      	ldrb	r2, [r7, #20]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	701a      	strb	r2, [r3, #0]
    }

    *rxStartBufferPointer = status[1];
 80022ce:	7d7a      	ldrb	r2, [r7, #21]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	701a      	strb	r2, [r3, #0]
}
 80022d4:	bf00      	nop
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}

080022dc <_ZN6SX128015SetDioIrqParamsEtttt>:

    return ( int8_t ) ( -raw / 2 );
}

void SX1280::SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	4608      	mov	r0, r1
 80022e6:	4611      	mov	r1, r2
 80022e8:	461a      	mov	r2, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	817b      	strh	r3, [r7, #10]
 80022ee:	460b      	mov	r3, r1
 80022f0:	813b      	strh	r3, [r7, #8]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80022f6:	897b      	ldrh	r3, [r7, #10]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	743b      	strb	r3, [r7, #16]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8002300:	897b      	ldrh	r3, [r7, #10]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8002306:	893b      	ldrh	r3, [r7, #8]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	b29b      	uxth	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8002310:	893b      	ldrh	r3, [r7, #8]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	b29b      	uxth	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8002326:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	b29b      	uxth	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	75bb      	strb	r3, [r7, #22]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8002330:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002332:	b2db      	uxtb	r3, r3
 8002334:	75fb      	strb	r3, [r7, #23]
    WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3310      	adds	r3, #16
 800233c:	681c      	ldr	r4, [r3, #0]
 800233e:	f107 0210 	add.w	r2, r7, #16
 8002342:	2308      	movs	r3, #8
 8002344:	218d      	movs	r1, #141	; 0x8d
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	47a0      	blx	r4
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	bd90      	pop	{r4, r7, pc}

08002352 <_ZN6SX128012GetIrqStatusEv>:

uint16_t SX1280::GetIrqStatus( void )
{
 8002352:	b590      	push	{r4, r7, lr}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
    uint8_t irqStatus[2];
    ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3314      	adds	r3, #20
 8002360:	681c      	ldr	r4, [r3, #0]
 8002362:	f107 020c 	add.w	r2, r7, #12
 8002366:	2302      	movs	r3, #2
 8002368:	2115      	movs	r1, #21
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	47a0      	blx	r4
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 800236e:	7b3b      	ldrb	r3, [r7, #12]
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	b21a      	sxth	r2, r3
 8002374:	7b7b      	ldrb	r3, [r7, #13]
 8002376:	b21b      	sxth	r3, r3
 8002378:	4313      	orrs	r3, r2
 800237a:	b21b      	sxth	r3, r3
 800237c:	b29b      	uxth	r3, r3
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}

08002386 <_ZN6SX128014ClearIrqStatusEt>:

void SX1280::ClearIrqStatus( uint16_t irqMask )
{
 8002386:	b590      	push	{r4, r7, lr}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	b29b      	uxth	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3310      	adds	r3, #16
 80023a8:	681c      	ldr	r4, [r3, #0]
 80023aa:	f107 020c 	add.w	r2, r7, #12
 80023ae:	2302      	movs	r3, #2
 80023b0:	2197      	movs	r1, #151	; 0x97
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	47a0      	blx	r4
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd90      	pop	{r4, r7, pc}

080023be <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>:
                  ( calibParam.RC64KEnable );
    WriteCommand( RADIO_CALIBRATE, &cal, 1 );
}

void SX1280::SetRegulatorMode( RadioRegulatorModes_t mode )
{
 80023be:	b590      	push	{r4, r7, lr}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	70fb      	strb	r3, [r7, #3]
    WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3310      	adds	r3, #16
 80023d0:	681c      	ldr	r4, [r3, #0]
 80023d2:	1cfa      	adds	r2, r7, #3
 80023d4:	2301      	movs	r3, #1
 80023d6:	2196      	movs	r1, #150	; 0x96
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	47a0      	blx	r4
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd90      	pop	{r4, r7, pc}

080023e4 <_ZN6SX128010SetPayloadEPhhh>:
{
    WriteCommand( RADIO_SET_LONGPREAMBLE, ( uint8_t * )&enable, 1 );
}

void SX1280::SetPayload( uint8_t *buffer, uint8_t size, uint8_t offset )
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	4611      	mov	r1, r2
 80023f0:	461a      	mov	r2, r3
 80023f2:	460b      	mov	r3, r1
 80023f4:	71fb      	strb	r3, [r7, #7]
 80023f6:	4613      	mov	r3, r2
 80023f8:	71bb      	strb	r3, [r7, #6]
    WriteBuffer( offset, buffer, size );
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3328      	adds	r3, #40	; 0x28
 8002400:	681c      	ldr	r4, [r3, #0]
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	79b9      	ldrb	r1, [r7, #6]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	47a0      	blx	r4
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	bd90      	pop	{r4, r7, pc}

08002414 <_ZN6SX128010GetPayloadEPhS0_h>:

uint8_t SX1280::GetPayload( uint8_t *buffer, uint8_t *size , uint8_t maxSize )
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	70fb      	strb	r3, [r7, #3]
    uint8_t offset;

    GetRxBufferStatus( size, &offset );
 8002422:	f107 0317 	add.w	r3, r7, #23
 8002426:	461a      	mov	r2, r3
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7ff ff04 	bl	8002238 <_ZN6SX128017GetRxBufferStatusEPhS0_>
    if( *size > maxSize )
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	429a      	cmp	r2, r3
 8002438:	d201      	bcs.n	800243e <_ZN6SX128010GetPayloadEPhS0_h+0x2a>
    {
        return 1;
 800243a:	2301      	movs	r3, #1
 800243c:	e00a      	b.n	8002454 <_ZN6SX128010GetPayloadEPhS0_h+0x40>
    }
    ReadBuffer( offset, buffer, *size );
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	332c      	adds	r3, #44	; 0x2c
 8002444:	681c      	ldr	r4, [r3, #0]
 8002446:	7df9      	ldrb	r1, [r7, #23]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	47a0      	blx	r4
    return 0;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd90      	pop	{r4, r7, pc}

0800245c <_ZN6SX128011SendPayloadEPhh10TickTime_sh>:

void SX1280::SendPayload( uint8_t *payload, uint8_t size, TickTime_t timeout, uint8_t offset )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	71fb      	strb	r3, [r7, #7]
    SetPayload( payload, size, offset );
 800246c:	7e3b      	ldrb	r3, [r7, #24]
 800246e:	79fa      	ldrb	r2, [r7, #7]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f7ff ffb6 	bl	80023e4 <_ZN6SX128010SetPayloadEPhhh>
    SetTx( timeout );
 8002478:	6839      	ldr	r1, [r7, #0]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f7ff fc9f 	bl	8001dbe <_ZN6SX12805SetTxE10TickTime_s>
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>:
    // Silently set 8 as minimum value
    WriteRegister( REG_LR_RANGINGFILTERWINDOWSIZE, ( num < DEFAULT_RANGING_FILTER_SIZE ) ? DEFAULT_RANGING_FILTER_SIZE : num );
}

void SX1280::SetRangingRole( RadioRangingRoles_t role )
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[1];

    buf[0] = role;
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	733b      	strb	r3, [r7, #12]
    WriteCommand( RADIO_SET_RANGING_ROLE, &buf[0], 1 );
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3310      	adds	r3, #16
 800249e:	681c      	ldr	r4, [r3, #0]
 80024a0:	f107 020c 	add.w	r2, r7, #12
 80024a4:	2301      	movs	r3, #1
 80024a6:	21a3      	movs	r1, #163	; 0xa3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	47a0      	blx	r4
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd90      	pop	{r4, r7, pc}

080024b4 <_ZN6SX128014SetPollingModeEv>:

    return efeHz;
}

void SX1280::SetPollingMode( void )
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
    this->PollingMode = true;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <_ZN6SX12808OnDioIrqEv>:
{
    this->PollingMode = false;
}

void SX1280::OnDioIrq( void )
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
    /*
     * When polling mode is activated, it is up to the application to call
     * ProcessIrqs( ). Otherwise, the driver automatically calls ProcessIrqs( )
     * on radio interrupt.
     */
    if( this->PollingMode == true )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d104      	bne.n	80024ec <_ZN6SX12808OnDioIrqEv+0x1c>
    {
        this->IrqState = true;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    }
    else
    {
        this->ProcessIrqs( );
    }
}
 80024ea:	e002      	b.n	80024f2 <_ZN6SX12808OnDioIrqEv+0x22>
        this->ProcessIrqs( );
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f805 	bl	80024fc <_ZN6SX128011ProcessIrqsEv>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <_ZN6SX128011ProcessIrqsEv>:

void SX1280::ProcessIrqs( void )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
    RadioPacketTypes_t packetType = PACKET_TYPE_NONE;
 8002504:	230f      	movs	r3, #15
 8002506:	73fb      	strb	r3, [r7, #15]

    if( this->PollingMode == true )
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800250e:	2b01      	cmp	r3, #1
 8002510:	d10d      	bne.n	800252e <_ZN6SX128011ProcessIrqsEv+0x32>
    {
        if( this->IrqState == true )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002518:	2b01      	cmp	r3, #1
 800251a:	f040 81c1 	bne.w	80028a0 <_ZN6SX128011ProcessIrqsEv+0x3a4>
  __ASM volatile ("cpsid i" : : : "memory");
 800251e:	b672      	cpsid	i
}
 8002520:	bf00      	nop
        {
            __disable_irq( );
            this->IrqState = false;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  __ASM volatile ("cpsie i" : : : "memory");
 800252a:	b662      	cpsie	i
}
 800252c:	bf00      	nop
        {
            return;
        }
    }

    packetType = GetPacketType( true );
 800252e:	2101      	movs	r1, #1
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fcc7 	bl	8001ec4 <_ZN6SX128013GetPacketTypeEb>
 8002536:	4603      	mov	r3, r0
 8002538:	73fb      	strb	r3, [r7, #15]
    uint16_t irqRegs = GetIrqStatus( );
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff09 	bl	8002352 <_ZN6SX128012GetIrqStatusEv>
 8002540:	4603      	mov	r3, r0
 8002542:	81bb      	strh	r3, [r7, #12]
    ClearIrqStatus( IRQ_RADIO_ALL );
 8002544:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff1c 	bl	8002386 <_ZN6SX128014ClearIrqStatusEt>
    }
    TEST_PIN_1 = 0;
    TEST_PIN_2 = 0;
#endif

    switch( packetType )
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	2b04      	cmp	r3, #4
 8002552:	f200 81a7 	bhi.w	80028a4 <_ZN6SX128011ProcessIrqsEv+0x3a8>
 8002556:	a201      	add	r2, pc, #4	; (adr r2, 800255c <_ZN6SX128011ProcessIrqsEv+0x60>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	08002571 	.word	0x08002571
 8002560:	0800266f 	.word	0x0800266f
 8002564:	080027b7 	.word	0x080027b7
 8002568:	08002571 	.word	0x08002571
 800256c:	08002571 	.word	0x08002571
    {
        case PACKET_TYPE_GFSK:
        case PACKET_TYPE_FLRC:
        case PACKET_TYPE_BLE:
            switch( OperatingMode )
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002576:	2b05      	cmp	r3, #5
 8002578:	d002      	beq.n	8002580 <_ZN6SX128011ProcessIrqsEv+0x84>
 800257a:	2b06      	cmp	r3, #6
 800257c:	d05a      	beq.n	8002634 <_ZN6SX128011ProcessIrqsEv+0x138>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 800257e:	e075      	b.n	800266c <_ZN6SX128011ProcessIrqsEv+0x170>
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8002580:	89bb      	ldrh	r3, [r7, #12]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d022      	beq.n	80025d0 <_ZN6SX128011ProcessIrqsEv+0xd4>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 800258a:	89bb      	ldrh	r3, [r7, #12]
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <_ZN6SX128011ProcessIrqsEv+0xaa>
                            if( rxError != NULL )
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d019      	beq.n	80025d0 <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxError( IRQ_CRC_ERROR_CODE );
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	2002      	movs	r0, #2
 80025a2:	4798      	blx	r3
 80025a4:	e014      	b.n	80025d0 <_ZN6SX128011ProcessIrqsEv+0xd4>
                        else if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
 80025a6:	89bb      	ldrh	r3, [r7, #12]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <_ZN6SX128011ProcessIrqsEv+0xc6>
                            if( rxError != NULL )
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00b      	beq.n	80025d0 <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxError( IRQ_SYNCWORD_ERROR_CODE );
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2001      	movs	r0, #1
 80025be:	4798      	blx	r3
 80025c0:	e006      	b.n	80025d0 <_ZN6SX128011ProcessIrqsEv+0xd4>
                            if( rxDone != NULL )
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxDone( );
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4798      	blx	r3
                    if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
 80025d0:	89bb      	ldrh	r3, [r7, #12]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <_ZN6SX128011ProcessIrqsEv+0xec>
                        if( rxSyncWordDone != NULL )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <_ZN6SX128011ProcessIrqsEv+0xec>
                            rxSyncWordDone( );
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	4798      	blx	r3
                    if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
 80025e8:	89bb      	ldrh	r3, [r7, #12]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <_ZN6SX128011ProcessIrqsEv+0x106>
                        if( rxError != NULL )
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <_ZN6SX128011ProcessIrqsEv+0x106>
                            rxError( IRQ_SYNCWORD_ERROR_CODE );
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	2001      	movs	r0, #1
 8002600:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002602:	89bb      	ldrh	r3, [r7, #12]
 8002604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <_ZN6SX128011ProcessIrqsEv+0x11e>
                        if( rxTimeout != NULL )
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <_ZN6SX128011ProcessIrqsEv+0x11e>
                            rxTimeout( );
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4798      	blx	r3
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 800261a:	89bb      	ldrh	r3, [r7, #12]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <_ZN6SX128011ProcessIrqsEv+0x16a>
                        if( txDone != NULL )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01c      	beq.n	8002666 <_ZN6SX128011ProcessIrqsEv+0x16a>
                            txDone( );
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4798      	blx	r3
                    break;
 8002632:	e018      	b.n	8002666 <_ZN6SX128011ProcessIrqsEv+0x16a>
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8002634:	89bb      	ldrh	r3, [r7, #12]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <_ZN6SX128011ProcessIrqsEv+0x150>
                        if( txDone != NULL )
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <_ZN6SX128011ProcessIrqsEv+0x150>
                            txDone( );
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800264c:	89bb      	ldrh	r3, [r7, #12]
 800264e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <_ZN6SX128011ProcessIrqsEv+0x16e>
                        if( txTimeout != NULL )
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <_ZN6SX128011ProcessIrqsEv+0x16e>
                            txTimeout( );
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	4798      	blx	r3
                    break;
 8002664:	e001      	b.n	800266a <_ZN6SX128011ProcessIrqsEv+0x16e>
                    break;
 8002666:	bf00      	nop
 8002668:	e11d      	b.n	80028a6 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 800266a:	bf00      	nop
            }
            break;
 800266c:	e11b      	b.n	80028a6 <_ZN6SX128011ProcessIrqsEv+0x3aa>
        case PACKET_TYPE_LORA:
            switch( OperatingMode )
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002674:	2b07      	cmp	r3, #7
 8002676:	d06d      	beq.n	8002754 <_ZN6SX128011ProcessIrqsEv+0x258>
 8002678:	2b07      	cmp	r3, #7
 800267a:	f300 8094 	bgt.w	80027a6 <_ZN6SX128011ProcessIrqsEv+0x2aa>
 800267e:	2b05      	cmp	r3, #5
 8002680:	d002      	beq.n	8002688 <_ZN6SX128011ProcessIrqsEv+0x18c>
 8002682:	2b06      	cmp	r3, #6
 8002684:	d04d      	beq.n	8002722 <_ZN6SX128011ProcessIrqsEv+0x226>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 8002686:	e08e      	b.n	80027a6 <_ZN6SX128011ProcessIrqsEv+0x2aa>
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8002688:	89bb      	ldrh	r3, [r7, #12]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d014      	beq.n	80026bc <_ZN6SX128011ProcessIrqsEv+0x1c0>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 8002692:	89bb      	ldrh	r3, [r7, #12]
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <_ZN6SX128011ProcessIrqsEv+0x1b2>
                            if( rxError != NULL )
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00b      	beq.n	80026bc <_ZN6SX128011ProcessIrqsEv+0x1c0>
                                rxError( IRQ_CRC_ERROR_CODE );
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	2002      	movs	r0, #2
 80026aa:	4798      	blx	r3
 80026ac:	e006      	b.n	80026bc <_ZN6SX128011ProcessIrqsEv+0x1c0>
                            if( rxDone != NULL )
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <_ZN6SX128011ProcessIrqsEv+0x1c0>
                                rxDone( );
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 80026bc:	89bb      	ldrh	r3, [r7, #12]
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <_ZN6SX128011ProcessIrqsEv+0x1d8>
                        if( rxHeaderDone != NULL )
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <_ZN6SX128011ProcessIrqsEv+0x1d8>
                            rxHeaderDone( );
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 80026d4:	89bb      	ldrh	r3, [r7, #12]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <_ZN6SX128011ProcessIrqsEv+0x1f2>
                        if( rxError != NULL )
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <_ZN6SX128011ProcessIrqsEv+0x1f2>
                            rxError( IRQ_HEADER_ERROR_CODE );
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2000      	movs	r0, #0
 80026ec:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80026ee:	89bb      	ldrh	r3, [r7, #12]
 80026f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <_ZN6SX128011ProcessIrqsEv+0x20a>
                        if( rxTimeout != NULL )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <_ZN6SX128011ProcessIrqsEv+0x20a>
                            rxTimeout( );
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
 8002706:	89bb      	ldrh	r3, [r7, #12]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d04c      	beq.n	80027aa <_ZN6SX128011ProcessIrqsEv+0x2ae>
                        if( rxError != NULL )
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d048      	beq.n	80027aa <_ZN6SX128011ProcessIrqsEv+0x2ae>
                            rxError( IRQ_RANGING_ON_LORA_ERROR_CODE );
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	2003      	movs	r0, #3
 800271e:	4798      	blx	r3
                    break;
 8002720:	e043      	b.n	80027aa <_ZN6SX128011ProcessIrqsEv+0x2ae>
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8002722:	89bb      	ldrh	r3, [r7, #12]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d006      	beq.n	800273a <_ZN6SX128011ProcessIrqsEv+0x23e>
                        if( txDone != NULL )
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <_ZN6SX128011ProcessIrqsEv+0x23e>
                            txDone( );
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800273a:	89bb      	ldrh	r3, [r7, #12]
 800273c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d034      	beq.n	80027ae <_ZN6SX128011ProcessIrqsEv+0x2b2>
                        if( txTimeout != NULL )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d030      	beq.n	80027ae <_ZN6SX128011ProcessIrqsEv+0x2b2>
                            txTimeout( );
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	4798      	blx	r3
                    break;
 8002752:	e02c      	b.n	80027ae <_ZN6SX128011ProcessIrqsEv+0x2b2>
                    if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 8002754:	89bb      	ldrh	r3, [r7, #12]
 8002756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d016      	beq.n	800278c <_ZN6SX128011ProcessIrqsEv+0x290>
                        if( ( irqRegs & IRQ_CAD_DETECTED ) == IRQ_CAD_DETECTED )
 800275e:	89bb      	ldrh	r3, [r7, #12]
 8002760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <_ZN6SX128011ProcessIrqsEv+0x27e>
                            if( cadDone != NULL )
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                                cadDone( true );
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2001      	movs	r0, #1
 8002776:	4798      	blx	r3
                    break;
 8002778:	e01b      	b.n	80027b2 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                            if( cadDone != NULL )
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	2b00      	cmp	r3, #0
 8002780:	d017      	beq.n	80027b2 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                                cadDone( false );
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	2000      	movs	r0, #0
 8002788:	4798      	blx	r3
                    break;
 800278a:	e012      	b.n	80027b2 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                    else if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800278c:	89bb      	ldrh	r3, [r7, #12]
 800278e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                        if( rxTimeout != NULL )
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                            rxTimeout( );
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	4798      	blx	r3
                    break;
 80027a4:	e005      	b.n	80027b2 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                    break;
 80027a6:	bf00      	nop
 80027a8:	e07d      	b.n	80028a6 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 80027aa:	bf00      	nop
 80027ac:	e07b      	b.n	80028a6 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 80027ae:	bf00      	nop
 80027b0:	e079      	b.n	80028a6 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 80027b2:	bf00      	nop
            }
            break;
 80027b4:	e077      	b.n	80028a6 <_ZN6SX128011ProcessIrqsEv+0x3aa>
        case PACKET_TYPE_RANGING:
            switch( OperatingMode )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d002      	beq.n	80027c6 <_ZN6SX128011ProcessIrqsEv+0x2ca>
 80027c0:	2b06      	cmp	r3, #6
 80027c2:	d04e      	beq.n	8002862 <_ZN6SX128011ProcessIrqsEv+0x366>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 80027c4:	e06b      	b.n	800289e <_ZN6SX128011ProcessIrqsEv+0x3a2>
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
 80027c6:	89bb      	ldrh	r3, [r7, #12]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <_ZN6SX128011ProcessIrqsEv+0x2e4>
                        if( rangingDone != NULL )
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <_ZN6SX128011ProcessIrqsEv+0x2e4>
                            rangingDone( IRQ_RANGING_SLAVE_ERROR_CODE );
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	2000      	movs	r0, #0
 80027de:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_VALID ) == IRQ_RANGING_SLAVE_REQUEST_VALID )
 80027e0:	89bb      	ldrh	r3, [r7, #12]
 80027e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <_ZN6SX128011ProcessIrqsEv+0x2fe>
                        if( rangingDone != NULL )
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <_ZN6SX128011ProcessIrqsEv+0x2fe>
                            rangingDone( IRQ_RANGING_SLAVE_VALID_CODE );
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	2001      	movs	r0, #1
 80027f8:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_RESPONSE_DONE ) == IRQ_RANGING_SLAVE_RESPONSE_DONE )
 80027fa:	89bb      	ldrh	r3, [r7, #12]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <_ZN6SX128011ProcessIrqsEv+0x318>
                        if( rangingDone != NULL )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <_ZN6SX128011ProcessIrqsEv+0x318>
                            rangingDone( IRQ_RANGING_SLAVE_VALID_CODE );
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	2001      	movs	r0, #1
 8002812:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002814:	89bb      	ldrh	r3, [r7, #12]
 8002816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <_ZN6SX128011ProcessIrqsEv+0x332>
                        if( rangingDone != NULL )
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <_ZN6SX128011ProcessIrqsEv+0x332>
                            rangingDone( IRQ_RANGING_SLAVE_ERROR_CODE );
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	2000      	movs	r0, #0
 800282c:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 800282e:	89bb      	ldrh	r3, [r7, #12]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <_ZN6SX128011ProcessIrqsEv+0x34a>
                        if( rxHeaderDone != NULL )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <_ZN6SX128011ProcessIrqsEv+0x34a>
                            rxHeaderDone( );
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 8002846:	89bb      	ldrh	r3, [r7, #12]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d023      	beq.n	8002898 <_ZN6SX128011ProcessIrqsEv+0x39c>
                        if( rxError != NULL )
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01f      	beq.n	8002898 <_ZN6SX128011ProcessIrqsEv+0x39c>
                            rxError( IRQ_HEADER_ERROR_CODE );
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	2000      	movs	r0, #0
 800285e:	4798      	blx	r3
                    break;
 8002860:	e01a      	b.n	8002898 <_ZN6SX128011ProcessIrqsEv+0x39c>
                    if( ( irqRegs & IRQ_RANGING_MASTER_TIMEOUT ) == IRQ_RANGING_MASTER_TIMEOUT )
 8002862:	89bb      	ldrh	r3, [r7, #12]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <_ZN6SX128011ProcessIrqsEv+0x380>
                        if( rangingDone != NULL )
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <_ZN6SX128011ProcessIrqsEv+0x380>
                            rangingDone( IRQ_RANGING_MASTER_ERROR_CODE );
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	2002      	movs	r0, #2
 800287a:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_MASTER_RESULT_VALID ) == IRQ_RANGING_MASTER_RESULT_VALID )
 800287c:	89bb      	ldrh	r3, [r7, #12]
 800287e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <_ZN6SX128011ProcessIrqsEv+0x3a0>
                        if( rangingDone != NULL )
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <_ZN6SX128011ProcessIrqsEv+0x3a0>
                            rangingDone( IRQ_RANGING_MASTER_VALID_CODE );
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	2003      	movs	r0, #3
 8002894:	4798      	blx	r3
                    break;
 8002896:	e001      	b.n	800289c <_ZN6SX128011ProcessIrqsEv+0x3a0>
                    break;
 8002898:	bf00      	nop
 800289a:	e004      	b.n	80028a6 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 800289c:	bf00      	nop
            }
            break;
 800289e:	e002      	b.n	80028a6 <_ZN6SX128011ProcessIrqsEv+0x3aa>
            return;
 80028a0:	bf00      	nop
 80028a2:	e000      	b.n	80028a6 <_ZN6SX128011ProcessIrqsEv+0x3aa>
        default:
            // Unexpected IRQ: silently returns
            break;
 80028a4:	bf00      	nop
    }
}
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028b0:	f000 fea0 	bl	80035f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028b4:	f000 f816 	bl	80028e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028b8:	f000 f9d8 	bl	8002c6c <MX_GPIO_Init>
  MX_DMA_Init();
 80028bc:	f000 f9a6 	bl	8002c0c <MX_DMA_Init>
  MX_I2C1_Init();
 80028c0:	f000 f87a 	bl	80029b8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80028c4:	f000 f8a6 	bl	8002a14 <MX_I2S3_Init>
  MX_SPI1_Init();
 80028c8:	f000 f8d4 	bl	8002a74 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80028cc:	f009 feba 	bl	800c644 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80028d0:	f000 f972 	bl	8002bb8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80028d4:	f000 f93a 	bl	8002b4c <MX_TIM6_Init>
  MX_SPI2_Init();
 80028d8:	f000 f902 	bl	8002ae0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  start();
 80028dc:	f7fe fafc 	bl	8000ed8 <start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <main+0x34>
	...

080028e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b094      	sub	sp, #80	; 0x50
 80028e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ea:	f107 0320 	add.w	r3, r7, #32
 80028ee:	2230      	movs	r2, #48	; 0x30
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f00a fc52 	bl	800d19c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028f8:	f107 030c 	add.w	r3, r7, #12
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	2300      	movs	r3, #0
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <SystemClock_Config+0xcc>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	4a27      	ldr	r2, [pc, #156]	; (80029b0 <SystemClock_Config+0xcc>)
 8002912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002916:	6413      	str	r3, [r2, #64]	; 0x40
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <SystemClock_Config+0xcc>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002924:	2300      	movs	r3, #0
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <SystemClock_Config+0xd0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a21      	ldr	r2, [pc, #132]	; (80029b4 <SystemClock_Config+0xd0>)
 800292e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <SystemClock_Config+0xd0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002940:	2301      	movs	r3, #1
 8002942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800294a:	2302      	movs	r3, #2
 800294c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800294e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002954:	2308      	movs	r3, #8
 8002956:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002958:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800295c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800295e:	2302      	movs	r3, #2
 8002960:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002962:	2307      	movs	r3, #7
 8002964:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002966:	f107 0320 	add.w	r3, r7, #32
 800296a:	4618      	mov	r0, r3
 800296c:	f003 fe34 	bl	80065d8 <HAL_RCC_OscConfig>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002976:	f000 fab7 	bl	8002ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800297a:	230f      	movs	r3, #15
 800297c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800297e:	2302      	movs	r3, #2
 8002980:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002986:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800298a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800298c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002990:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	2105      	movs	r1, #5
 8002998:	4618      	mov	r0, r3
 800299a:	f004 f895 	bl	8006ac8 <HAL_RCC_ClockConfig>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80029a4:	f000 faa0 	bl	8002ee8 <Error_Handler>
  }
}
 80029a8:	bf00      	nop
 80029aa:	3750      	adds	r7, #80	; 0x50
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40007000 	.word	0x40007000

080029b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <MX_I2C1_Init+0x50>)
 80029be:	4a13      	ldr	r2, [pc, #76]	; (8002a0c <MX_I2C1_Init+0x54>)
 80029c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <MX_I2C1_Init+0x50>)
 80029c4:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <MX_I2C1_Init+0x58>)
 80029c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <MX_I2C1_Init+0x50>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <MX_I2C1_Init+0x50>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <MX_I2C1_Init+0x50>)
 80029d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <MX_I2C1_Init+0x50>)
 80029de:	2200      	movs	r2, #0
 80029e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <MX_I2C1_Init+0x50>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <MX_I2C1_Init+0x50>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <MX_I2C1_Init+0x50>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029f4:	4804      	ldr	r0, [pc, #16]	; (8002a08 <MX_I2C1_Init+0x50>)
 80029f6:	f001 fd8d 	bl	8004514 <HAL_I2C_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a00:	f000 fa72 	bl	8002ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	2000031c 	.word	0x2000031c
 8002a0c:	40005400 	.word	0x40005400
 8002a10:	000186a0 	.word	0x000186a0

08002a14 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <MX_I2S3_Init+0x54>)
 8002a1a:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <MX_I2S3_Init+0x58>)
 8002a1c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <MX_I2S3_Init+0x54>)
 8002a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a24:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <MX_I2S3_Init+0x54>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002a2c:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <MX_I2S3_Init+0x54>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002a32:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <MX_I2S3_Init+0x54>)
 8002a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a38:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <MX_I2S3_Init+0x54>)
 8002a3c:	4a0c      	ldr	r2, [pc, #48]	; (8002a70 <MX_I2S3_Init+0x5c>)
 8002a3e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <MX_I2S3_Init+0x54>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <MX_I2S3_Init+0x54>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MX_I2S3_Init+0x54>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002a52:	4805      	ldr	r0, [pc, #20]	; (8002a68 <MX_I2S3_Init+0x54>)
 8002a54:	f001 fea2 	bl	800479c <HAL_I2S_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002a5e:	f000 fa43 	bl	8002ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000370 	.word	0x20000370
 8002a6c:	40003c00 	.word	0x40003c00
 8002a70:	00017700 	.word	0x00017700

08002a74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a78:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <MX_SPI1_Init+0x64>)
 8002a7a:	4a18      	ldr	r2, [pc, #96]	; (8002adc <MX_SPI1_Init+0x68>)
 8002a7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <MX_SPI1_Init+0x64>)
 8002a80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <MX_SPI1_Init+0x64>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <MX_SPI1_Init+0x64>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_SPI1_Init+0x64>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <MX_SPI1_Init+0x64>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <MX_SPI1_Init+0x64>)
 8002aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <MX_SPI1_Init+0x64>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <MX_SPI1_Init+0x64>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <MX_SPI1_Init+0x64>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab8:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <MX_SPI1_Init+0x64>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002abe:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <MX_SPI1_Init+0x64>)
 8002ac0:	220a      	movs	r2, #10
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ac4:	4804      	ldr	r0, [pc, #16]	; (8002ad8 <MX_SPI1_Init+0x64>)
 8002ac6:	f004 fb5f 	bl	8007188 <HAL_SPI_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ad0:	f000 fa0a 	bl	8002ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	200003b8 	.word	0x200003b8
 8002adc:	40013000 	.word	0x40013000

08002ae0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ae4:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <MX_SPI2_Init+0x64>)
 8002ae6:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <MX_SPI2_Init+0x68>)
 8002ae8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002aea:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <MX_SPI2_Init+0x64>)
 8002aec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002af0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <MX_SPI2_Init+0x64>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <MX_SPI2_Init+0x64>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <MX_SPI2_Init+0x64>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b04:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <MX_SPI2_Init+0x64>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <MX_SPI2_Init+0x64>)
 8002b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <MX_SPI2_Init+0x64>)
 8002b14:	2228      	movs	r2, #40	; 0x28
 8002b16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <MX_SPI2_Init+0x64>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <MX_SPI2_Init+0x64>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <MX_SPI2_Init+0x64>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <MX_SPI2_Init+0x64>)
 8002b2c:	220a      	movs	r2, #10
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b30:	4804      	ldr	r0, [pc, #16]	; (8002b44 <MX_SPI2_Init+0x64>)
 8002b32:	f004 fb29 	bl	8007188 <HAL_SPI_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b3c:	f000 f9d4 	bl	8002ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000410 	.word	0x20000410
 8002b48:	40003800 	.word	0x40003800

08002b4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b52:	463b      	mov	r3, r7
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <MX_TIM6_Init+0x64>)
 8002b5c:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <MX_TIM6_Init+0x68>)
 8002b5e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 167;
 8002b60:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <MX_TIM6_Init+0x64>)
 8002b62:	22a7      	movs	r2, #167	; 0xa7
 8002b64:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b66:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <MX_TIM6_Init+0x64>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8002b6c:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <MX_TIM6_Init+0x64>)
 8002b6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b72:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <MX_TIM6_Init+0x64>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b7a:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <MX_TIM6_Init+0x64>)
 8002b7c:	f004 ff18 	bl	80079b0 <HAL_TIM_Base_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002b86:	f000 f9af 	bl	8002ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b92:	463b      	mov	r3, r7
 8002b94:	4619      	mov	r1, r3
 8002b96:	4806      	ldr	r0, [pc, #24]	; (8002bb0 <MX_TIM6_Init+0x64>)
 8002b98:	f005 f862 	bl	8007c60 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002ba2:	f000 f9a1 	bl	8002ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000528 	.word	0x20000528
 8002bb4:	40001000 	.word	0x40001000

08002bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <MX_USART2_UART_Init+0x50>)
 8002bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bc4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bde:	220c      	movs	r2, #12
 8002be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bf0:	f005 f8b2 	bl	8007d58 <HAL_UART_Init>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bfa:	f000 f975 	bl	8002ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000570 	.word	0x20000570
 8002c08:	40004400 	.word	0x40004400

08002c0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <MX_DMA_Init+0x5c>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <MX_DMA_Init+0x5c>)
 8002c1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <MX_DMA_Init+0x5c>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	200e      	movs	r0, #14
 8002c34:	f000 fe4f 	bl	80038d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002c38:	200e      	movs	r0, #14
 8002c3a:	f000 fe68 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2100      	movs	r1, #0
 8002c42:	200f      	movs	r0, #15
 8002c44:	f000 fe47 	bl	80038d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002c48:	200f      	movs	r0, #15
 8002c4a:	f000 fe60 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2100      	movs	r1, #0
 8002c52:	2011      	movs	r0, #17
 8002c54:	f000 fe3f 	bl	80038d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002c58:	2011      	movs	r0, #17
 8002c5a:	f000 fe58 	bl	800390e <HAL_NVIC_EnableIRQ>

}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800

08002c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08c      	sub	sp, #48	; 0x30
 8002c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c72:	f107 031c 	add.w	r3, r7, #28
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	605a      	str	r2, [r3, #4]
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	60da      	str	r2, [r3, #12]
 8002c80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	4b92      	ldr	r3, [pc, #584]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a91      	ldr	r2, [pc, #580]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002c8c:	f043 0310 	orr.w	r3, r3, #16
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b8f      	ldr	r3, [pc, #572]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	4b8b      	ldr	r3, [pc, #556]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a8a      	ldr	r2, [pc, #552]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b88      	ldr	r3, [pc, #544]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	4b84      	ldr	r3, [pc, #528]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	4a83      	ldr	r2, [pc, #524]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002cc4:	f043 0304 	orr.w	r3, r3, #4
 8002cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cca:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	4b7d      	ldr	r3, [pc, #500]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	4a7c      	ldr	r2, [pc, #496]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce6:	4b7a      	ldr	r3, [pc, #488]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	4b76      	ldr	r3, [pc, #472]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a75      	ldr	r2, [pc, #468]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b73      	ldr	r3, [pc, #460]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	4b6f      	ldr	r3, [pc, #444]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a6e      	ldr	r2, [pc, #440]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002d18:	f043 0308 	orr.w	r3, r3, #8
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b6c      	ldr	r3, [pc, #432]	; (8002ed0 <MX_GPIO_Init+0x264>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2108      	movs	r1, #8
 8002d2e:	4869      	ldr	r0, [pc, #420]	; (8002ed4 <MX_GPIO_Init+0x268>)
 8002d30:	f001 fbbe 	bl	80044b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002d34:	2201      	movs	r2, #1
 8002d36:	2101      	movs	r1, #1
 8002d38:	4867      	ldr	r0, [pc, #412]	; (8002ed8 <MX_GPIO_Init+0x26c>)
 8002d3a:	f001 fbb9 	bl	80044b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, GPIO_PIN_SET);
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d44:	4865      	ldr	r0, [pc, #404]	; (8002edc <MX_GPIO_Init+0x270>)
 8002d46:	f001 fbb3 	bl	80044b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d50:	4863      	ldr	r0, [pc, #396]	; (8002ee0 <MX_GPIO_Init+0x274>)
 8002d52:	f001 fbad 	bl	80044b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002d56:	2200      	movs	r2, #0
 8002d58:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002d5c:	4860      	ldr	r0, [pc, #384]	; (8002ee0 <MX_GPIO_Init+0x274>)
 8002d5e:	f001 fba7 	bl	80044b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002d62:	2308      	movs	r3, #8
 8002d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d66:	2301      	movs	r3, #1
 8002d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002d72:	f107 031c 	add.w	r3, r7, #28
 8002d76:	4619      	mov	r1, r3
 8002d78:	4856      	ldr	r0, [pc, #344]	; (8002ed4 <MX_GPIO_Init+0x268>)
 8002d7a:	f001 f9e5 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d82:	2301      	movs	r3, #1
 8002d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002d8e:	f107 031c 	add.w	r3, r7, #28
 8002d92:	4619      	mov	r1, r3
 8002d94:	4850      	ldr	r0, [pc, #320]	; (8002ed8 <MX_GPIO_Init+0x26c>)
 8002d96:	f001 f9d7 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002daa:	2305      	movs	r3, #5
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002dae:	f107 031c 	add.w	r3, r7, #28
 8002db2:	4619      	mov	r1, r3
 8002db4:	4848      	ldr	r0, [pc, #288]	; (8002ed8 <MX_GPIO_Init+0x26c>)
 8002db6:	f001 f9c7 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002dbe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002dc8:	f107 031c 	add.w	r3, r7, #28
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4845      	ldr	r0, [pc, #276]	; (8002ee4 <MX_GPIO_Init+0x278>)
 8002dd0:	f001 f9ba 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002de0:	f107 031c 	add.w	r3, r7, #28
 8002de4:	4619      	mov	r1, r3
 8002de6:	483d      	ldr	r0, [pc, #244]	; (8002edc <MX_GPIO_Init+0x270>)
 8002de8:	f001 f9ae 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dfe:	2305      	movs	r3, #5
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002e02:	f107 031c 	add.w	r3, r7, #28
 8002e06:	4619      	mov	r1, r3
 8002e08:	4834      	ldr	r0, [pc, #208]	; (8002edc <MX_GPIO_Init+0x270>)
 8002e0a:	f001 f99d 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_NSS_Pin */
  GPIO_InitStruct.Pin = SX1280_NSS_Pin;
 8002e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e14:	2301      	movs	r3, #1
 8002e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX1280_NSS_GPIO_Port, &GPIO_InitStruct);
 8002e20:	f107 031c 	add.w	r3, r7, #28
 8002e24:	4619      	mov	r1, r3
 8002e26:	482d      	ldr	r0, [pc, #180]	; (8002edc <MX_GPIO_Init+0x270>)
 8002e28:	f001 f98e 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_INT_Pin */
  GPIO_InitStruct.Pin = SX1280_INT_Pin;
 8002e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX1280_INT_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	f107 031c 	add.w	r3, r7, #28
 8002e40:	4619      	mov	r1, r3
 8002e42:	4827      	ldr	r0, [pc, #156]	; (8002ee0 <MX_GPIO_Init+0x274>)
 8002e44:	f001 f980 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX1280_BUSY_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SX1280_BUSY_Pin|OTG_FS_OverCurrent_Pin;
 8002e48:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e56:	f107 031c 	add.w	r3, r7, #28
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4820      	ldr	r0, [pc, #128]	; (8002ee0 <MX_GPIO_Init+0x274>)
 8002e5e:	f001 f973 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 8002e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002e68:	2311      	movs	r3, #17
 8002e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e70:	2300      	movs	r3, #0
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 8002e74:	f107 031c 	add.w	r3, r7, #28
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4819      	ldr	r0, [pc, #100]	; (8002ee0 <MX_GPIO_Init+0x274>)
 8002e7c:	f001 f964 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002e80:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002e84:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e86:	2301      	movs	r3, #1
 8002e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e92:	f107 031c 	add.w	r3, r7, #28
 8002e96:	4619      	mov	r1, r3
 8002e98:	4811      	ldr	r0, [pc, #68]	; (8002ee0 <MX_GPIO_Init+0x274>)
 8002e9a:	f001 f955 	bl	8004148 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ea2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002eac:	f107 031c 	add.w	r3, r7, #28
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4808      	ldr	r0, [pc, #32]	; (8002ed4 <MX_GPIO_Init+0x268>)
 8002eb4:	f001 f948 	bl	8004148 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2100      	movs	r1, #0
 8002ebc:	2017      	movs	r0, #23
 8002ebe:	f000 fd0a 	bl	80038d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ec2:	2017      	movs	r0, #23
 8002ec4:	f000 fd23 	bl	800390e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ec8:	bf00      	nop
 8002eca:	3730      	adds	r7, #48	; 0x30
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40020400 	.word	0x40020400
 8002ee0:	40020c00 	.word	0x40020c00
 8002ee4:	40020000 	.word	0x40020000

08002ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002eec:	b672      	cpsid	i
}
 8002eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ef0:	e7fe      	b.n	8002ef0 <Error_Handler+0x8>
	...

08002ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <HAL_MspInit+0x4c>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <HAL_MspInit+0x4c>)
 8002f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f08:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_MspInit+0x4c>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f12:	607b      	str	r3, [r7, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_MspInit+0x4c>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <HAL_MspInit+0x4c>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_MspInit+0x4c>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f32:	2007      	movs	r0, #7
 8002f34:	f000 fcc4 	bl	80038c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40023800 	.word	0x40023800

08002f44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	; 0x28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <HAL_I2C_MspInit+0x84>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d12c      	bne.n	8002fc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <HAL_I2C_MspInit+0x88>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <HAL_I2C_MspInit+0x88>)
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	6313      	str	r3, [r2, #48]	; 0x30
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <HAL_I2C_MspInit+0x88>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002f82:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f88:	2312      	movs	r3, #18
 8002f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f90:	2300      	movs	r3, #0
 8002f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f94:	2304      	movs	r3, #4
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <HAL_I2C_MspInit+0x8c>)
 8002fa0:	f001 f8d2 	bl	8004148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <HAL_I2C_MspInit+0x88>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	4a07      	ldr	r2, [pc, #28]	; (8002fcc <HAL_I2C_MspInit+0x88>)
 8002fae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_I2C_MspInit+0x88>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fc0:	bf00      	nop
 8002fc2:	3728      	adds	r7, #40	; 0x28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40005400 	.word	0x40005400
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020400 	.word	0x40020400

08002fd4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08e      	sub	sp, #56	; 0x38
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fec:	f107 0314 	add.w	r3, r7, #20
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a31      	ldr	r2, [pc, #196]	; (80030c4 <HAL_I2S_MspInit+0xf0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d15a      	bne.n	80030ba <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003004:	2301      	movs	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003008:	23c0      	movs	r3, #192	; 0xc0
 800300a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800300c:	2302      	movs	r3, #2
 800300e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4618      	mov	r0, r3
 8003016:	f003 ff77 	bl	8006f08 <HAL_RCCEx_PeriphCLKConfig>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8003020:	f7ff ff62 	bl	8002ee8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003024:	2300      	movs	r3, #0
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <HAL_I2S_MspInit+0xf4>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	4a26      	ldr	r2, [pc, #152]	; (80030c8 <HAL_I2S_MspInit+0xf4>)
 800302e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003032:	6413      	str	r3, [r2, #64]	; 0x40
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_I2S_MspInit+0xf4>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <HAL_I2S_MspInit+0xf4>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <HAL_I2S_MspInit+0xf4>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6313      	str	r3, [r2, #48]	; 0x30
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_I2S_MspInit+0xf4>)
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_I2S_MspInit+0xf4>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	4a18      	ldr	r2, [pc, #96]	; (80030c8 <HAL_I2S_MspInit+0xf4>)
 8003066:	f043 0304 	orr.w	r3, r3, #4
 800306a:	6313      	str	r3, [r2, #48]	; 0x30
 800306c:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <HAL_I2S_MspInit+0xf4>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003078:	2310      	movs	r3, #16
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307c:	2302      	movs	r3, #2
 800307e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003084:	2300      	movs	r3, #0
 8003086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003088:	2306      	movs	r3, #6
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800308c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003090:	4619      	mov	r1, r3
 8003092:	480e      	ldr	r0, [pc, #56]	; (80030cc <HAL_I2S_MspInit+0xf8>)
 8003094:	f001 f858 	bl	8004148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003098:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	2300      	movs	r3, #0
 80030a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030aa:	2306      	movs	r3, #6
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b2:	4619      	mov	r1, r3
 80030b4:	4806      	ldr	r0, [pc, #24]	; (80030d0 <HAL_I2S_MspInit+0xfc>)
 80030b6:	f001 f847 	bl	8004148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80030ba:	bf00      	nop
 80030bc:	3738      	adds	r7, #56	; 0x38
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40003c00 	.word	0x40003c00
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020000 	.word	0x40020000
 80030d0:	40020800 	.word	0x40020800

080030d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08c      	sub	sp, #48	; 0x30
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 031c 	add.w	r3, r7, #28
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a64      	ldr	r2, [pc, #400]	; (8003284 <HAL_SPI_MspInit+0x1b0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d12c      	bne.n	8003150 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	4b63      	ldr	r3, [pc, #396]	; (8003288 <HAL_SPI_MspInit+0x1b4>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	4a62      	ldr	r2, [pc, #392]	; (8003288 <HAL_SPI_MspInit+0x1b4>)
 8003100:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003104:	6453      	str	r3, [r2, #68]	; 0x44
 8003106:	4b60      	ldr	r3, [pc, #384]	; (8003288 <HAL_SPI_MspInit+0x1b4>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	4b5c      	ldr	r3, [pc, #368]	; (8003288 <HAL_SPI_MspInit+0x1b4>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	4a5b      	ldr	r2, [pc, #364]	; (8003288 <HAL_SPI_MspInit+0x1b4>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6313      	str	r3, [r2, #48]	; 0x30
 8003122:	4b59      	ldr	r3, [pc, #356]	; (8003288 <HAL_SPI_MspInit+0x1b4>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800312e:	23e0      	movs	r3, #224	; 0xe0
 8003130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800313e:	2305      	movs	r3, #5
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003142:	f107 031c 	add.w	r3, r7, #28
 8003146:	4619      	mov	r1, r3
 8003148:	4850      	ldr	r0, [pc, #320]	; (800328c <HAL_SPI_MspInit+0x1b8>)
 800314a:	f000 fffd 	bl	8004148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800314e:	e094      	b.n	800327a <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a4e      	ldr	r2, [pc, #312]	; (8003290 <HAL_SPI_MspInit+0x1bc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	f040 808f 	bne.w	800327a <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	4b49      	ldr	r3, [pc, #292]	; (8003288 <HAL_SPI_MspInit+0x1b4>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	4a48      	ldr	r2, [pc, #288]	; (8003288 <HAL_SPI_MspInit+0x1b4>)
 8003166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800316a:	6413      	str	r3, [r2, #64]	; 0x40
 800316c:	4b46      	ldr	r3, [pc, #280]	; (8003288 <HAL_SPI_MspInit+0x1b4>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	4b42      	ldr	r3, [pc, #264]	; (8003288 <HAL_SPI_MspInit+0x1b4>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	4a41      	ldr	r2, [pc, #260]	; (8003288 <HAL_SPI_MspInit+0x1b4>)
 8003182:	f043 0302 	orr.w	r3, r3, #2
 8003186:	6313      	str	r3, [r2, #48]	; 0x30
 8003188:	4b3f      	ldr	r3, [pc, #252]	; (8003288 <HAL_SPI_MspInit+0x1b4>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003194:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a2:	2303      	movs	r3, #3
 80031a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031a6:	2305      	movs	r3, #5
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	f107 031c 	add.w	r3, r7, #28
 80031ae:	4619      	mov	r1, r3
 80031b0:	4838      	ldr	r0, [pc, #224]	; (8003294 <HAL_SPI_MspInit+0x1c0>)
 80031b2:	f000 ffc9 	bl	8004148 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80031b6:	4b38      	ldr	r3, [pc, #224]	; (8003298 <HAL_SPI_MspInit+0x1c4>)
 80031b8:	4a38      	ldr	r2, [pc, #224]	; (800329c <HAL_SPI_MspInit+0x1c8>)
 80031ba:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80031bc:	4b36      	ldr	r3, [pc, #216]	; (8003298 <HAL_SPI_MspInit+0x1c4>)
 80031be:	2200      	movs	r2, #0
 80031c0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031c2:	4b35      	ldr	r3, [pc, #212]	; (8003298 <HAL_SPI_MspInit+0x1c4>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c8:	4b33      	ldr	r3, [pc, #204]	; (8003298 <HAL_SPI_MspInit+0x1c4>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031ce:	4b32      	ldr	r3, [pc, #200]	; (8003298 <HAL_SPI_MspInit+0x1c4>)
 80031d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031d4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031d6:	4b30      	ldr	r3, [pc, #192]	; (8003298 <HAL_SPI_MspInit+0x1c4>)
 80031d8:	2200      	movs	r2, #0
 80031da:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031dc:	4b2e      	ldr	r3, [pc, #184]	; (8003298 <HAL_SPI_MspInit+0x1c4>)
 80031de:	2200      	movs	r2, #0
 80031e0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80031e2:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_SPI_MspInit+0x1c4>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031e8:	4b2b      	ldr	r3, [pc, #172]	; (8003298 <HAL_SPI_MspInit+0x1c4>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031ee:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <HAL_SPI_MspInit+0x1c4>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80031f4:	4828      	ldr	r0, [pc, #160]	; (8003298 <HAL_SPI_MspInit+0x1c4>)
 80031f6:	f000 fba5 	bl	8003944 <HAL_DMA_Init>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8003200:	f7ff fe72 	bl	8002ee8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a24      	ldr	r2, [pc, #144]	; (8003298 <HAL_SPI_MspInit+0x1c4>)
 8003208:	64da      	str	r2, [r3, #76]	; 0x4c
 800320a:	4a23      	ldr	r2, [pc, #140]	; (8003298 <HAL_SPI_MspInit+0x1c4>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003210:	4b23      	ldr	r3, [pc, #140]	; (80032a0 <HAL_SPI_MspInit+0x1cc>)
 8003212:	4a24      	ldr	r2, [pc, #144]	; (80032a4 <HAL_SPI_MspInit+0x1d0>)
 8003214:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003216:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <HAL_SPI_MspInit+0x1cc>)
 8003218:	2200      	movs	r2, #0
 800321a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_SPI_MspInit+0x1cc>)
 800321e:	2240      	movs	r2, #64	; 0x40
 8003220:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003222:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <HAL_SPI_MspInit+0x1cc>)
 8003224:	2200      	movs	r2, #0
 8003226:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_SPI_MspInit+0x1cc>)
 800322a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800322e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_SPI_MspInit+0x1cc>)
 8003232:	2200      	movs	r2, #0
 8003234:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003236:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <HAL_SPI_MspInit+0x1cc>)
 8003238:	2200      	movs	r2, #0
 800323a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800323c:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <HAL_SPI_MspInit+0x1cc>)
 800323e:	2200      	movs	r2, #0
 8003240:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <HAL_SPI_MspInit+0x1cc>)
 8003244:	2200      	movs	r2, #0
 8003246:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <HAL_SPI_MspInit+0x1cc>)
 800324a:	2200      	movs	r2, #0
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800324e:	4814      	ldr	r0, [pc, #80]	; (80032a0 <HAL_SPI_MspInit+0x1cc>)
 8003250:	f000 fb78 	bl	8003944 <HAL_DMA_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 800325a:	f7ff fe45 	bl	8002ee8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a0f      	ldr	r2, [pc, #60]	; (80032a0 <HAL_SPI_MspInit+0x1cc>)
 8003262:	649a      	str	r2, [r3, #72]	; 0x48
 8003264:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <HAL_SPI_MspInit+0x1cc>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800326a:	2200      	movs	r2, #0
 800326c:	2100      	movs	r1, #0
 800326e:	2024      	movs	r0, #36	; 0x24
 8003270:	f000 fb31 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003274:	2024      	movs	r0, #36	; 0x24
 8003276:	f000 fb4a 	bl	800390e <HAL_NVIC_EnableIRQ>
}
 800327a:	bf00      	nop
 800327c:	3730      	adds	r7, #48	; 0x30
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40013000 	.word	0x40013000
 8003288:	40023800 	.word	0x40023800
 800328c:	40020000 	.word	0x40020000
 8003290:	40003800 	.word	0x40003800
 8003294:	40020400 	.word	0x40020400
 8003298:	20000468 	.word	0x20000468
 800329c:	40026058 	.word	0x40026058
 80032a0:	200004c8 	.word	0x200004c8
 80032a4:	40026070 	.word	0x40026070

080032a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <HAL_TIM_Base_MspInit+0x3c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10d      	bne.n	80032d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_TIM_Base_MspInit+0x40>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <HAL_TIM_Base_MspInit+0x40>)
 80032c4:	f043 0310 	orr.w	r3, r3, #16
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <HAL_TIM_Base_MspInit+0x40>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40001000 	.word	0x40001000
 80032e8:	40023800 	.word	0x40023800

080032ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	; 0x28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f4:	f107 0314 	add.w	r3, r7, #20
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a34      	ldr	r2, [pc, #208]	; (80033dc <HAL_UART_MspInit+0xf0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d161      	bne.n	80033d2 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a32      	ldr	r2, [pc, #200]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 8003318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
 800331e:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	4a2b      	ldr	r2, [pc, #172]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6313      	str	r3, [r2, #48]	; 0x30
 800333a:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <HAL_UART_MspInit+0xf4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003346:	230c      	movs	r3, #12
 8003348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003352:	2303      	movs	r3, #3
 8003354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003356:	2307      	movs	r3, #7
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335a:	f107 0314 	add.w	r3, r7, #20
 800335e:	4619      	mov	r1, r3
 8003360:	4820      	ldr	r0, [pc, #128]	; (80033e4 <HAL_UART_MspInit+0xf8>)
 8003362:	f000 fef1 	bl	8004148 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_UART_MspInit+0xfc>)
 8003368:	4a20      	ldr	r2, [pc, #128]	; (80033ec <HAL_UART_MspInit+0x100>)
 800336a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800336c:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <HAL_UART_MspInit+0xfc>)
 800336e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003372:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003374:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <HAL_UART_MspInit+0xfc>)
 8003376:	2240      	movs	r2, #64	; 0x40
 8003378:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800337a:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_UART_MspInit+0xfc>)
 800337c:	2200      	movs	r2, #0
 800337e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003380:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <HAL_UART_MspInit+0xfc>)
 8003382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003386:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <HAL_UART_MspInit+0xfc>)
 800338a:	2200      	movs	r2, #0
 800338c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <HAL_UART_MspInit+0xfc>)
 8003390:	2200      	movs	r2, #0
 8003392:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003394:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <HAL_UART_MspInit+0xfc>)
 8003396:	2200      	movs	r2, #0
 8003398:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800339a:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <HAL_UART_MspInit+0xfc>)
 800339c:	2200      	movs	r2, #0
 800339e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_UART_MspInit+0xfc>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80033a6:	4810      	ldr	r0, [pc, #64]	; (80033e8 <HAL_UART_MspInit+0xfc>)
 80033a8:	f000 facc 	bl	8003944 <HAL_DMA_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80033b2:	f7ff fd99 	bl	8002ee8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a0b      	ldr	r2, [pc, #44]	; (80033e8 <HAL_UART_MspInit+0xfc>)
 80033ba:	635a      	str	r2, [r3, #52]	; 0x34
 80033bc:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_UART_MspInit+0xfc>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033c2:	2200      	movs	r2, #0
 80033c4:	2100      	movs	r1, #0
 80033c6:	2026      	movs	r0, #38	; 0x26
 80033c8:	f000 fa85 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033cc:	2026      	movs	r0, #38	; 0x26
 80033ce:	f000 fa9e 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033d2:	bf00      	nop
 80033d4:	3728      	adds	r7, #40	; 0x28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40004400 	.word	0x40004400
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40020000 	.word	0x40020000
 80033e8:	200005b4 	.word	0x200005b4
 80033ec:	400260a0 	.word	0x400260a0

080033f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033f4:	e7fe      	b.n	80033f4 <NMI_Handler+0x4>

080033f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033fa:	e7fe      	b.n	80033fa <HardFault_Handler+0x4>

080033fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003400:	e7fe      	b.n	8003400 <MemManage_Handler+0x4>

08003402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003406:	e7fe      	b.n	8003406 <BusFault_Handler+0x4>

08003408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800340c:	e7fe      	b.n	800340c <UsageFault_Handler+0x4>

0800340e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800340e:	b480      	push	{r7}
 8003410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800343c:	f000 f92c 	bl	8003698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003440:	bf00      	nop
 8003442:	bd80      	pop	{r7, pc}

08003444 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003448:	4802      	ldr	r0, [pc, #8]	; (8003454 <DMA1_Stream3_IRQHandler+0x10>)
 800344a:	f000 fc13 	bl	8003c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000468 	.word	0x20000468

08003458 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800345c:	4802      	ldr	r0, [pc, #8]	; (8003468 <DMA1_Stream4_IRQHandler+0x10>)
 800345e:	f000 fc09 	bl	8003c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	200004c8 	.word	0x200004c8

0800346c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <DMA1_Stream6_IRQHandler+0x10>)
 8003472:	f000 fbff 	bl	8003c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200005b4 	.word	0x200005b4

08003480 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX1280_INT_Pin);
 8003484:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003488:	f001 f82c 	bl	80044e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}

08003490 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003494:	4802      	ldr	r0, [pc, #8]	; (80034a0 <SPI2_IRQHandler+0x10>)
 8003496:	f004 f8a3 	bl	80075e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000410 	.word	0x20000410

080034a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034a8:	4802      	ldr	r0, [pc, #8]	; (80034b4 <USART2_IRQHandler+0x10>)
 80034aa:	f004 fd21 	bl	8007ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000570 	.word	0x20000570

080034b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <OTG_FS_IRQHandler+0x10>)
 80034be:	f001 ff5d 	bl	800537c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20001afc 	.word	0x20001afc

080034cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return 1;
 80034d0:	2301      	movs	r3, #1
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <_kill>:

int _kill(int pid, int sig)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034e6:	f009 fe11 	bl	800d10c <__errno>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2216      	movs	r2, #22
 80034ee:	601a      	str	r2, [r3, #0]
  return -1;
 80034f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_exit>:

void _exit (int status)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003504:	f04f 31ff 	mov.w	r1, #4294967295
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ffe7 	bl	80034dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800350e:	e7fe      	b.n	800350e <_exit+0x12>

08003510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003518:	4a14      	ldr	r2, [pc, #80]	; (800356c <_sbrk+0x5c>)
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <_sbrk+0x60>)
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003524:	4b13      	ldr	r3, [pc, #76]	; (8003574 <_sbrk+0x64>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <_sbrk+0x64>)
 800352e:	4a12      	ldr	r2, [pc, #72]	; (8003578 <_sbrk+0x68>)
 8003530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <_sbrk+0x64>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	429a      	cmp	r2, r3
 800353e:	d207      	bcs.n	8003550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003540:	f009 fde4 	bl	800d10c <__errno>
 8003544:	4603      	mov	r3, r0
 8003546:	220c      	movs	r2, #12
 8003548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800354a:	f04f 33ff 	mov.w	r3, #4294967295
 800354e:	e009      	b.n	8003564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <_sbrk+0x64>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <_sbrk+0x64>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	4a05      	ldr	r2, [pc, #20]	; (8003574 <_sbrk+0x64>)
 8003560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003562:	68fb      	ldr	r3, [r7, #12]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20020000 	.word	0x20020000
 8003570:	00000400 	.word	0x00000400
 8003574:	20000614 	.word	0x20000614
 8003578:	20002240 	.word	0x20002240

0800357c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <SystemInit+0x20>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	4a05      	ldr	r2, [pc, #20]	; (800359c <SystemInit+0x20>)
 8003588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800358c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035a4:	480d      	ldr	r0, [pc, #52]	; (80035dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035a6:	490e      	ldr	r1, [pc, #56]	; (80035e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035a8:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035ac:	e002      	b.n	80035b4 <LoopCopyDataInit>

080035ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035b2:	3304      	adds	r3, #4

080035b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b8:	d3f9      	bcc.n	80035ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ba:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035bc:	4c0b      	ldr	r4, [pc, #44]	; (80035ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80035be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c0:	e001      	b.n	80035c6 <LoopFillZerobss>

080035c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035c4:	3204      	adds	r2, #4

080035c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c8:	d3fb      	bcc.n	80035c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035ca:	f7ff ffd7 	bl	800357c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ce:	f009 fda3 	bl	800d118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035d2:	f7ff f96b 	bl	80028ac <main>
  bx  lr    
 80035d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035e0:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80035e4:	0800dd6c 	.word	0x0800dd6c
  ldr r2, =_sbss
 80035e8:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80035ec:	2000223c 	.word	0x2000223c

080035f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f0:	e7fe      	b.n	80035f0 <ADC_IRQHandler>
	...

080035f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035f8:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <HAL_Init+0x40>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <HAL_Init+0x40>)
 80035fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_Init+0x40>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_Init+0x40>)
 800360a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800360e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <HAL_Init+0x40>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a07      	ldr	r2, [pc, #28]	; (8003634 <HAL_Init+0x40>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800361c:	2003      	movs	r0, #3
 800361e:	f000 f94f 	bl	80038c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003622:	2000      	movs	r0, #0
 8003624:	f000 f808 	bl	8003638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003628:	f7ff fc64 	bl	8002ef4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00

08003638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003640:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_InitTick+0x54>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_InitTick+0x58>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	4619      	mov	r1, r3
 800364a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800364e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f967 	bl	800392a <HAL_SYSTICK_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e00e      	b.n	8003684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b0f      	cmp	r3, #15
 800366a:	d80a      	bhi.n	8003682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800366c:	2200      	movs	r2, #0
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	f000 f92f 	bl	80038d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003678:	4a06      	ldr	r2, [pc, #24]	; (8003694 <HAL_InitTick+0x5c>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e000      	b.n	8003684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000000 	.word	0x20000000
 8003690:	20000008 	.word	0x20000008
 8003694:	20000004 	.word	0x20000004

08003698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_IncTick+0x20>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_IncTick+0x24>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4413      	add	r3, r2
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <HAL_IncTick+0x24>)
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000008 	.word	0x20000008
 80036bc:	20000618 	.word	0x20000618

080036c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return uwTick;
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <HAL_GetTick+0x14>)
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000618 	.word	0x20000618

080036d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036e0:	f7ff ffee 	bl	80036c0 <HAL_GetTick>
 80036e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f0:	d005      	beq.n	80036fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <HAL_Delay+0x44>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036fe:	bf00      	nop
 8003700:	f7ff ffde 	bl	80036c0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	429a      	cmp	r2, r3
 800370e:	d8f7      	bhi.n	8003700 <HAL_Delay+0x28>
  {
  }
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000008 	.word	0x20000008

08003720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <__NVIC_SetPriorityGrouping+0x44>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800373c:	4013      	ands	r3, r2
 800373e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800374c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003752:	4a04      	ldr	r2, [pc, #16]	; (8003764 <__NVIC_SetPriorityGrouping+0x44>)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	60d3      	str	r3, [r2, #12]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <__NVIC_GetPriorityGrouping+0x18>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	0a1b      	lsrs	r3, r3, #8
 8003772:	f003 0307 	and.w	r3, r3, #7
}
 8003776:	4618      	mov	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	2b00      	cmp	r3, #0
 8003794:	db0b      	blt.n	80037ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	f003 021f 	and.w	r2, r3, #31
 800379c:	4907      	ldr	r1, [pc, #28]	; (80037bc <__NVIC_EnableIRQ+0x38>)
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	2001      	movs	r0, #1
 80037a6:	fa00 f202 	lsl.w	r2, r0, r2
 80037aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	e000e100 	.word	0xe000e100

080037c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	db0a      	blt.n	80037ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	490c      	ldr	r1, [pc, #48]	; (800380c <__NVIC_SetPriority+0x4c>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	440b      	add	r3, r1
 80037e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e8:	e00a      	b.n	8003800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4908      	ldr	r1, [pc, #32]	; (8003810 <__NVIC_SetPriority+0x50>)
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	3b04      	subs	r3, #4
 80037f8:	0112      	lsls	r2, r2, #4
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	440b      	add	r3, r1
 80037fe:	761a      	strb	r2, [r3, #24]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000e100 	.word	0xe000e100
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003814:	b480      	push	{r7}
 8003816:	b089      	sub	sp, #36	; 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f1c3 0307 	rsb	r3, r3, #7
 800382e:	2b04      	cmp	r3, #4
 8003830:	bf28      	it	cs
 8003832:	2304      	movcs	r3, #4
 8003834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3304      	adds	r3, #4
 800383a:	2b06      	cmp	r3, #6
 800383c:	d902      	bls.n	8003844 <NVIC_EncodePriority+0x30>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3b03      	subs	r3, #3
 8003842:	e000      	b.n	8003846 <NVIC_EncodePriority+0x32>
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	f04f 32ff 	mov.w	r2, #4294967295
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43da      	mvns	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	401a      	ands	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800385c:	f04f 31ff 	mov.w	r1, #4294967295
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	43d9      	mvns	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800386c:	4313      	orrs	r3, r2
         );
}
 800386e:	4618      	mov	r0, r3
 8003870:	3724      	adds	r7, #36	; 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800388c:	d301      	bcc.n	8003892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388e:	2301      	movs	r3, #1
 8003890:	e00f      	b.n	80038b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <SysTick_Config+0x40>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800389a:	210f      	movs	r1, #15
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	f7ff ff8e 	bl	80037c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <SysTick_Config+0x40>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <SysTick_Config+0x40>)
 80038ac:	2207      	movs	r2, #7
 80038ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	e000e010 	.word	0xe000e010

080038c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ff29 	bl	8003720 <__NVIC_SetPriorityGrouping>
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e8:	f7ff ff3e 	bl	8003768 <__NVIC_GetPriorityGrouping>
 80038ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	6978      	ldr	r0, [r7, #20]
 80038f4:	f7ff ff8e 	bl	8003814 <NVIC_EncodePriority>
 80038f8:	4602      	mov	r2, r0
 80038fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff5d 	bl	80037c0 <__NVIC_SetPriority>
}
 8003906:	bf00      	nop
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff31 	bl	8003784 <__NVIC_EnableIRQ>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ffa2 	bl	800387c <SysTick_Config>
 8003938:	4603      	mov	r3, r0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003950:	f7ff feb6 	bl	80036c0 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e099      	b.n	8003a94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003980:	e00f      	b.n	80039a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003982:	f7ff fe9d 	bl	80036c0 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b05      	cmp	r3, #5
 800398e:	d908      	bls.n	80039a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2203      	movs	r2, #3
 800399a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e078      	b.n	8003a94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e8      	bne.n	8003982 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <HAL_DMA_Init+0x158>)
 80039bc:	4013      	ands	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d107      	bne.n	8003a0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	4313      	orrs	r3, r2
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0307 	bic.w	r3, r3, #7
 8003a22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d117      	bne.n	8003a66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00e      	beq.n	8003a66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fb01 	bl	8004050 <DMA_CheckFifoParam>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2240      	movs	r2, #64	; 0x40
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a62:	2301      	movs	r3, #1
 8003a64:	e016      	b.n	8003a94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fab8 	bl	8003fe4 <DMA_CalcBaseAndBitshift>
 8003a74:	4603      	mov	r3, r0
 8003a76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	223f      	movs	r2, #63	; 0x3f
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	f010803f 	.word	0xf010803f

08003aa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_DMA_Start_IT+0x26>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e040      	b.n	8003b48 <HAL_DMA_Start_IT+0xa8>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d12f      	bne.n	8003b3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 fa4a 	bl	8003f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af8:	223f      	movs	r2, #63	; 0x3f
 8003afa:	409a      	lsls	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0216 	orr.w	r2, r2, #22
 8003b0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0208 	orr.w	r2, r2, #8
 8003b26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	e005      	b.n	8003b46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
 8003b44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b5e:	f7ff fdaf 	bl	80036c0 <HAL_GetTick>
 8003b62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d008      	beq.n	8003b82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2280      	movs	r2, #128	; 0x80
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e052      	b.n	8003c28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0216 	bic.w	r2, r2, #22
 8003b90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ba0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d103      	bne.n	8003bb2 <HAL_DMA_Abort+0x62>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0208 	bic.w	r2, r2, #8
 8003bc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bd2:	e013      	b.n	8003bfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bd4:	f7ff fd74 	bl	80036c0 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d90c      	bls.n	8003bfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2203      	movs	r2, #3
 8003bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e015      	b.n	8003c28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e4      	bne.n	8003bd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0e:	223f      	movs	r2, #63	; 0x3f
 8003c10:	409a      	lsls	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d004      	beq.n	8003c4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2280      	movs	r2, #128	; 0x80
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e00c      	b.n	8003c68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2205      	movs	r2, #5
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c80:	4b8e      	ldr	r3, [pc, #568]	; (8003ebc <HAL_DMA_IRQHandler+0x248>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a8e      	ldr	r2, [pc, #568]	; (8003ec0 <HAL_DMA_IRQHandler+0x24c>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	0a9b      	lsrs	r3, r3, #10
 8003c8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01a      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d013      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0204 	bic.w	r2, r2, #4
 8003cc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	2208      	movs	r2, #8
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd8:	f043 0201 	orr.w	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d012      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	2201      	movs	r2, #1
 8003d04:	409a      	lsls	r2, r3
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	f043 0202 	orr.w	r2, r3, #2
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d012      	beq.n	8003d4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00b      	beq.n	8003d4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d38:	2204      	movs	r2, #4
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f043 0204 	orr.w	r2, r3, #4
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	2210      	movs	r2, #16
 8003d52:	409a      	lsls	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d043      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d03c      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6e:	2210      	movs	r2, #16
 8003d70:	409a      	lsls	r2, r3
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d018      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d108      	bne.n	8003da4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d024      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
 8003da2:	e01f      	b.n	8003de4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01b      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	4798      	blx	r3
 8003db4:	e016      	b.n	8003de4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d107      	bne.n	8003dd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0208 	bic.w	r2, r2, #8
 8003dd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	2220      	movs	r2, #32
 8003dea:	409a      	lsls	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 808f 	beq.w	8003f14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8087 	beq.w	8003f14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	d136      	bne.n	8003e8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0216 	bic.w	r2, r2, #22
 8003e2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <HAL_DMA_IRQHandler+0x1da>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0208 	bic.w	r2, r2, #8
 8003e5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e62:	223f      	movs	r2, #63	; 0x3f
 8003e64:	409a      	lsls	r2, r3
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d07e      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	4798      	blx	r3
        }
        return;
 8003e8a:	e079      	b.n	8003f80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01d      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10d      	bne.n	8003ec4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d031      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	4798      	blx	r3
 8003eb8:	e02c      	b.n	8003f14 <HAL_DMA_IRQHandler+0x2a0>
 8003eba:	bf00      	nop
 8003ebc:	20000000 	.word	0x20000000
 8003ec0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d023      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	4798      	blx	r3
 8003ed4:	e01e      	b.n	8003f14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10f      	bne.n	8003f04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0210 	bic.w	r2, r2, #16
 8003ef2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d032      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d022      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2205      	movs	r2, #5
 8003f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	3301      	adds	r3, #1
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d307      	bcc.n	8003f5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f2      	bne.n	8003f40 <HAL_DMA_IRQHandler+0x2cc>
 8003f5a:	e000      	b.n	8003f5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
 8003f7e:	e000      	b.n	8003f82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f80:	bf00      	nop
    }
  }
}
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b40      	cmp	r3, #64	; 0x40
 8003fb4:	d108      	bne.n	8003fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fc6:	e007      	b.n	8003fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	60da      	str	r2, [r3, #12]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	3b10      	subs	r3, #16
 8003ff4:	4a14      	ldr	r2, [pc, #80]	; (8004048 <DMA_CalcBaseAndBitshift+0x64>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ffe:	4a13      	ldr	r2, [pc, #76]	; (800404c <DMA_CalcBaseAndBitshift+0x68>)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b03      	cmp	r3, #3
 8004010:	d909      	bls.n	8004026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800401a:	f023 0303 	bic.w	r3, r3, #3
 800401e:	1d1a      	adds	r2, r3, #4
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	659a      	str	r2, [r3, #88]	; 0x58
 8004024:	e007      	b.n	8004036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	aaaaaaab 	.word	0xaaaaaaab
 800404c:	0800dd18 	.word	0x0800dd18

08004050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d11f      	bne.n	80040aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d856      	bhi.n	800411e <DMA_CheckFifoParam+0xce>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <DMA_CheckFifoParam+0x28>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	08004089 	.word	0x08004089
 800407c:	0800409b 	.word	0x0800409b
 8004080:	08004089 	.word	0x08004089
 8004084:	0800411f 	.word	0x0800411f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d046      	beq.n	8004122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004098:	e043      	b.n	8004122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040a2:	d140      	bne.n	8004126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a8:	e03d      	b.n	8004126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b2:	d121      	bne.n	80040f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d837      	bhi.n	800412a <DMA_CheckFifoParam+0xda>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <DMA_CheckFifoParam+0x70>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040d7 	.word	0x080040d7
 80040c8:	080040d1 	.word	0x080040d1
 80040cc:	080040e9 	.word	0x080040e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      break;
 80040d4:	e030      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d025      	beq.n	800412e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e6:	e022      	b.n	800412e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040f0:	d11f      	bne.n	8004132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040f6:	e01c      	b.n	8004132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d903      	bls.n	8004106 <DMA_CheckFifoParam+0xb6>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b03      	cmp	r3, #3
 8004102:	d003      	beq.n	800410c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004104:	e018      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
      break;
 800410a:	e015      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00e      	beq.n	8004136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
      break;
 800411c:	e00b      	b.n	8004136 <DMA_CheckFifoParam+0xe6>
      break;
 800411e:	bf00      	nop
 8004120:	e00a      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 8004122:	bf00      	nop
 8004124:	e008      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 8004126:	bf00      	nop
 8004128:	e006      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 800412a:	bf00      	nop
 800412c:	e004      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 800412e:	bf00      	nop
 8004130:	e002      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;   
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 8004136:	bf00      	nop
    }
  } 
  
  return status; 
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop

08004148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004148:	b480      	push	{r7}
 800414a:	b089      	sub	sp, #36	; 0x24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	e16b      	b.n	800443c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004164:	2201      	movs	r2, #1
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4013      	ands	r3, r2
 8004176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	429a      	cmp	r2, r3
 800417e:	f040 815a 	bne.w	8004436 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d005      	beq.n	800419a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004196:	2b02      	cmp	r3, #2
 8004198:	d130      	bne.n	80041fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	2203      	movs	r2, #3
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4013      	ands	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041d0:	2201      	movs	r2, #1
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 0201 	and.w	r2, r3, #1
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	2b03      	cmp	r3, #3
 8004206:	d017      	beq.n	8004238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	2203      	movs	r2, #3
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d123      	bne.n	800428c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	08da      	lsrs	r2, r3, #3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3208      	adds	r2, #8
 800424c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	220f      	movs	r2, #15
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4313      	orrs	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	08da      	lsrs	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3208      	adds	r2, #8
 8004286:	69b9      	ldr	r1, [r7, #24]
 8004288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	2203      	movs	r2, #3
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 0203 	and.w	r2, r3, #3
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80b4 	beq.w	8004436 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	4b60      	ldr	r3, [pc, #384]	; (8004454 <HAL_GPIO_Init+0x30c>)
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	4a5f      	ldr	r2, [pc, #380]	; (8004454 <HAL_GPIO_Init+0x30c>)
 80042d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042dc:	6453      	str	r3, [r2, #68]	; 0x44
 80042de:	4b5d      	ldr	r3, [pc, #372]	; (8004454 <HAL_GPIO_Init+0x30c>)
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042ea:	4a5b      	ldr	r2, [pc, #364]	; (8004458 <HAL_GPIO_Init+0x310>)
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	089b      	lsrs	r3, r3, #2
 80042f0:	3302      	adds	r3, #2
 80042f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	220f      	movs	r2, #15
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	43db      	mvns	r3, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4013      	ands	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a52      	ldr	r2, [pc, #328]	; (800445c <HAL_GPIO_Init+0x314>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d02b      	beq.n	800436e <HAL_GPIO_Init+0x226>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a51      	ldr	r2, [pc, #324]	; (8004460 <HAL_GPIO_Init+0x318>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d025      	beq.n	800436a <HAL_GPIO_Init+0x222>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a50      	ldr	r2, [pc, #320]	; (8004464 <HAL_GPIO_Init+0x31c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01f      	beq.n	8004366 <HAL_GPIO_Init+0x21e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a4f      	ldr	r2, [pc, #316]	; (8004468 <HAL_GPIO_Init+0x320>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d019      	beq.n	8004362 <HAL_GPIO_Init+0x21a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a4e      	ldr	r2, [pc, #312]	; (800446c <HAL_GPIO_Init+0x324>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d013      	beq.n	800435e <HAL_GPIO_Init+0x216>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a4d      	ldr	r2, [pc, #308]	; (8004470 <HAL_GPIO_Init+0x328>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00d      	beq.n	800435a <HAL_GPIO_Init+0x212>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a4c      	ldr	r2, [pc, #304]	; (8004474 <HAL_GPIO_Init+0x32c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <HAL_GPIO_Init+0x20e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a4b      	ldr	r2, [pc, #300]	; (8004478 <HAL_GPIO_Init+0x330>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d101      	bne.n	8004352 <HAL_GPIO_Init+0x20a>
 800434e:	2307      	movs	r3, #7
 8004350:	e00e      	b.n	8004370 <HAL_GPIO_Init+0x228>
 8004352:	2308      	movs	r3, #8
 8004354:	e00c      	b.n	8004370 <HAL_GPIO_Init+0x228>
 8004356:	2306      	movs	r3, #6
 8004358:	e00a      	b.n	8004370 <HAL_GPIO_Init+0x228>
 800435a:	2305      	movs	r3, #5
 800435c:	e008      	b.n	8004370 <HAL_GPIO_Init+0x228>
 800435e:	2304      	movs	r3, #4
 8004360:	e006      	b.n	8004370 <HAL_GPIO_Init+0x228>
 8004362:	2303      	movs	r3, #3
 8004364:	e004      	b.n	8004370 <HAL_GPIO_Init+0x228>
 8004366:	2302      	movs	r3, #2
 8004368:	e002      	b.n	8004370 <HAL_GPIO_Init+0x228>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <HAL_GPIO_Init+0x228>
 800436e:	2300      	movs	r3, #0
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	f002 0203 	and.w	r2, r2, #3
 8004376:	0092      	lsls	r2, r2, #2
 8004378:	4093      	lsls	r3, r2
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004380:	4935      	ldr	r1, [pc, #212]	; (8004458 <HAL_GPIO_Init+0x310>)
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	089b      	lsrs	r3, r3, #2
 8004386:	3302      	adds	r3, #2
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800438e:	4b3b      	ldr	r3, [pc, #236]	; (800447c <HAL_GPIO_Init+0x334>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043b2:	4a32      	ldr	r2, [pc, #200]	; (800447c <HAL_GPIO_Init+0x334>)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043b8:	4b30      	ldr	r3, [pc, #192]	; (800447c <HAL_GPIO_Init+0x334>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4013      	ands	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043dc:	4a27      	ldr	r2, [pc, #156]	; (800447c <HAL_GPIO_Init+0x334>)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043e2:	4b26      	ldr	r3, [pc, #152]	; (800447c <HAL_GPIO_Init+0x334>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	43db      	mvns	r3, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4013      	ands	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004406:	4a1d      	ldr	r2, [pc, #116]	; (800447c <HAL_GPIO_Init+0x334>)
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <HAL_GPIO_Init+0x334>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	43db      	mvns	r3, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004430:	4a12      	ldr	r2, [pc, #72]	; (800447c <HAL_GPIO_Init+0x334>)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	3301      	adds	r3, #1
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	2b0f      	cmp	r3, #15
 8004440:	f67f ae90 	bls.w	8004164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	3724      	adds	r7, #36	; 0x24
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	40013800 	.word	0x40013800
 800445c:	40020000 	.word	0x40020000
 8004460:	40020400 	.word	0x40020400
 8004464:	40020800 	.word	0x40020800
 8004468:	40020c00 	.word	0x40020c00
 800446c:	40021000 	.word	0x40021000
 8004470:	40021400 	.word	0x40021400
 8004474:	40021800 	.word	0x40021800
 8004478:	40021c00 	.word	0x40021c00
 800447c:	40013c00 	.word	0x40013c00

08004480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	887b      	ldrh	r3, [r7, #2]
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	e001      	b.n	80044a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800449e:	2300      	movs	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	807b      	strh	r3, [r7, #2]
 80044bc:	4613      	mov	r3, r2
 80044be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044c0:	787b      	ldrb	r3, [r7, #1]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044c6:	887a      	ldrh	r2, [r7, #2]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044cc:	e003      	b.n	80044d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044ce:	887b      	ldrh	r3, [r7, #2]
 80044d0:	041a      	lsls	r2, r3, #16
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	619a      	str	r2, [r3, #24]
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	4013      	ands	r3, r2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d006      	beq.n	8004508 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044fa:	4a05      	ldr	r2, [pc, #20]	; (8004510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fc fcd4 	bl	8000eb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40013c00 	.word	0x40013c00

08004514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e12b      	b.n	800477e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fe fd02 	bl	8002f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2224      	movs	r2, #36	; 0x24
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0201 	bic.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004578:	f002 fc9e 	bl	8006eb8 <HAL_RCC_GetPCLK1Freq>
 800457c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4a81      	ldr	r2, [pc, #516]	; (8004788 <HAL_I2C_Init+0x274>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d807      	bhi.n	8004598 <HAL_I2C_Init+0x84>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a80      	ldr	r2, [pc, #512]	; (800478c <HAL_I2C_Init+0x278>)
 800458c:	4293      	cmp	r3, r2
 800458e:	bf94      	ite	ls
 8004590:	2301      	movls	r3, #1
 8004592:	2300      	movhi	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e006      	b.n	80045a6 <HAL_I2C_Init+0x92>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4a7d      	ldr	r2, [pc, #500]	; (8004790 <HAL_I2C_Init+0x27c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	bf94      	ite	ls
 80045a0:	2301      	movls	r3, #1
 80045a2:	2300      	movhi	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0e7      	b.n	800477e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a78      	ldr	r2, [pc, #480]	; (8004794 <HAL_I2C_Init+0x280>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	0c9b      	lsrs	r3, r3, #18
 80045b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4a6a      	ldr	r2, [pc, #424]	; (8004788 <HAL_I2C_Init+0x274>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d802      	bhi.n	80045e8 <HAL_I2C_Init+0xd4>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	3301      	adds	r3, #1
 80045e6:	e009      	b.n	80045fc <HAL_I2C_Init+0xe8>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	4a69      	ldr	r2, [pc, #420]	; (8004798 <HAL_I2C_Init+0x284>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	099b      	lsrs	r3, r3, #6
 80045fa:	3301      	adds	r3, #1
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	430b      	orrs	r3, r1
 8004602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800460e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	495c      	ldr	r1, [pc, #368]	; (8004788 <HAL_I2C_Init+0x274>)
 8004618:	428b      	cmp	r3, r1
 800461a:	d819      	bhi.n	8004650 <HAL_I2C_Init+0x13c>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1e59      	subs	r1, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	fbb1 f3f3 	udiv	r3, r1, r3
 800462a:	1c59      	adds	r1, r3, #1
 800462c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004630:	400b      	ands	r3, r1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_I2C_Init+0x138>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1e59      	subs	r1, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	fbb1 f3f3 	udiv	r3, r1, r3
 8004644:	3301      	adds	r3, #1
 8004646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464a:	e051      	b.n	80046f0 <HAL_I2C_Init+0x1dc>
 800464c:	2304      	movs	r3, #4
 800464e:	e04f      	b.n	80046f0 <HAL_I2C_Init+0x1dc>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d111      	bne.n	800467c <HAL_I2C_Init+0x168>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	1e58      	subs	r0, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6859      	ldr	r1, [r3, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	440b      	add	r3, r1
 8004666:	fbb0 f3f3 	udiv	r3, r0, r3
 800466a:	3301      	adds	r3, #1
 800466c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	e012      	b.n	80046a2 <HAL_I2C_Init+0x18e>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1e58      	subs	r0, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6859      	ldr	r1, [r3, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	0099      	lsls	r1, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004692:	3301      	adds	r3, #1
 8004694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_Init+0x196>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e022      	b.n	80046f0 <HAL_I2C_Init+0x1dc>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10e      	bne.n	80046d0 <HAL_I2C_Init+0x1bc>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1e58      	subs	r0, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6859      	ldr	r1, [r3, #4]
 80046ba:	460b      	mov	r3, r1
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	440b      	add	r3, r1
 80046c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ce:	e00f      	b.n	80046f0 <HAL_I2C_Init+0x1dc>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1e58      	subs	r0, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6859      	ldr	r1, [r3, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	0099      	lsls	r1, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e6:	3301      	adds	r3, #1
 80046e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	6809      	ldr	r1, [r1, #0]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800471e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6911      	ldr	r1, [r2, #16]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68d2      	ldr	r2, [r2, #12]
 800472a:	4311      	orrs	r1, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6812      	ldr	r2, [r2, #0]
 8004730:	430b      	orrs	r3, r1
 8004732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	000186a0 	.word	0x000186a0
 800478c:	001e847f 	.word	0x001e847f
 8004790:	003d08ff 	.word	0x003d08ff
 8004794:	431bde83 	.word	0x431bde83
 8004798:	10624dd3 	.word	0x10624dd3

0800479c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e128      	b.n	8004a00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a90      	ldr	r2, [pc, #576]	; (8004a08 <HAL_I2S_Init+0x26c>)
 80047c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7fe fc03 	bl	8002fd4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80047e4:	f023 030f 	bic.w	r3, r3, #15
 80047e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2202      	movs	r2, #2
 80047f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d060      	beq.n	80048bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004802:	2310      	movs	r3, #16
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	e001      	b.n	800480c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004808:	2320      	movs	r3, #32
 800480a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b20      	cmp	r3, #32
 8004812:	d802      	bhi.n	800481a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800481a:	2001      	movs	r0, #1
 800481c:	f002 fc56 	bl	80070cc <HAL_RCCEx_GetPeriphCLKFreq>
 8004820:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800482a:	d125      	bne.n	8004878 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d010      	beq.n	8004856 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	fbb2 f2f3 	udiv	r2, r2, r3
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	461a      	mov	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	3305      	adds	r3, #5
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	e01f      	b.n	8004896 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	461a      	mov	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	3305      	adds	r3, #5
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	e00e      	b.n	8004896 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	461a      	mov	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004892:	3305      	adds	r3, #5
 8004894:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4a5c      	ldr	r2, [pc, #368]	; (8004a0c <HAL_I2S_Init+0x270>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	08db      	lsrs	r3, r3, #3
 80048a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	021b      	lsls	r3, r3, #8
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	e003      	b.n	80048c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80048bc:	2302      	movs	r3, #2
 80048be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d902      	bls.n	80048d0 <HAL_I2S_Init+0x134>
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	2bff      	cmp	r3, #255	; 0xff
 80048ce:	d907      	bls.n	80048e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d4:	f043 0210 	orr.w	r2, r3, #16
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e08f      	b.n	8004a00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	ea42 0103 	orr.w	r1, r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048fe:	f023 030f 	bic.w	r3, r3, #15
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6851      	ldr	r1, [r2, #4]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6892      	ldr	r2, [r2, #8]
 800490a:	4311      	orrs	r1, r2
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	68d2      	ldr	r2, [r2, #12]
 8004910:	4311      	orrs	r1, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6992      	ldr	r2, [r2, #24]
 8004916:	430a      	orrs	r2, r1
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004922:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d161      	bne.n	80049f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a38      	ldr	r2, [pc, #224]	; (8004a10 <HAL_I2S_Init+0x274>)
 8004930:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a37      	ldr	r2, [pc, #220]	; (8004a14 <HAL_I2S_Init+0x278>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d101      	bne.n	8004940 <HAL_I2S_Init+0x1a4>
 800493c:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <HAL_I2S_Init+0x27c>)
 800493e:	e001      	b.n	8004944 <HAL_I2S_Init+0x1a8>
 8004940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	4932      	ldr	r1, [pc, #200]	; (8004a14 <HAL_I2S_Init+0x278>)
 800494c:	428a      	cmp	r2, r1
 800494e:	d101      	bne.n	8004954 <HAL_I2S_Init+0x1b8>
 8004950:	4a31      	ldr	r2, [pc, #196]	; (8004a18 <HAL_I2S_Init+0x27c>)
 8004952:	e001      	b.n	8004958 <HAL_I2S_Init+0x1bc>
 8004954:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004958:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800495c:	f023 030f 	bic.w	r3, r3, #15
 8004960:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2b      	ldr	r2, [pc, #172]	; (8004a14 <HAL_I2S_Init+0x278>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d101      	bne.n	8004970 <HAL_I2S_Init+0x1d4>
 800496c:	4b2a      	ldr	r3, [pc, #168]	; (8004a18 <HAL_I2S_Init+0x27c>)
 800496e:	e001      	b.n	8004974 <HAL_I2S_Init+0x1d8>
 8004970:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004974:	2202      	movs	r2, #2
 8004976:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a25      	ldr	r2, [pc, #148]	; (8004a14 <HAL_I2S_Init+0x278>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d101      	bne.n	8004986 <HAL_I2S_Init+0x1ea>
 8004982:	4b25      	ldr	r3, [pc, #148]	; (8004a18 <HAL_I2S_Init+0x27c>)
 8004984:	e001      	b.n	800498a <HAL_I2S_Init+0x1ee>
 8004986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004996:	d003      	beq.n	80049a0 <HAL_I2S_Init+0x204>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80049a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	e001      	b.n	80049ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049b6:	4313      	orrs	r3, r2
 80049b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049c0:	4313      	orrs	r3, r2
 80049c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80049ca:	4313      	orrs	r3, r2
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	897b      	ldrh	r3, [r7, #10]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a0d      	ldr	r2, [pc, #52]	; (8004a14 <HAL_I2S_Init+0x278>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d101      	bne.n	80049e8 <HAL_I2S_Init+0x24c>
 80049e4:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <HAL_I2S_Init+0x27c>)
 80049e6:	e001      	b.n	80049ec <HAL_I2S_Init+0x250>
 80049e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049ec:	897a      	ldrh	r2, [r7, #10]
 80049ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3720      	adds	r7, #32
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	08004b13 	.word	0x08004b13
 8004a0c:	cccccccd 	.word	0xcccccccd
 8004a10:	08004c29 	.word	0x08004c29
 8004a14:	40003800 	.word	0x40003800
 8004a18:	40003400 	.word	0x40003400

08004a1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	881a      	ldrh	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	1c9a      	adds	r2, r3, #2
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10e      	bne.n	8004aac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a9c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff ffb8 	bl	8004a1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	b292      	uxth	r2, r2
 8004ac8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	1c9a      	adds	r2, r3, #2
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10e      	bne.n	8004b0a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004afa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ff93 	bl	8004a30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b086      	sub	sp, #24
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d13a      	bne.n	8004ba4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d109      	bne.n	8004b4c <I2S_IRQHandler+0x3a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d102      	bne.n	8004b4c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff ffb4 	bl	8004ab4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b52:	2b40      	cmp	r3, #64	; 0x40
 8004b54:	d126      	bne.n	8004ba4 <I2S_IRQHandler+0x92>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d11f      	bne.n	8004ba4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	f043 0202 	orr.w	r2, r3, #2
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff ff50 	bl	8004a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d136      	bne.n	8004c1e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d109      	bne.n	8004bce <I2S_IRQHandler+0xbc>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d102      	bne.n	8004bce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff ff45 	bl	8004a58 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d122      	bne.n	8004c1e <I2S_IRQHandler+0x10c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d11b      	bne.n	8004c1e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bf4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	f043 0204 	orr.w	r2, r3, #4
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff ff13 	bl	8004a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c1e:	bf00      	nop
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a92      	ldr	r2, [pc, #584]	; (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d101      	bne.n	8004c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c42:	4b92      	ldr	r3, [pc, #584]	; (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c44:	e001      	b.n	8004c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004c46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a8b      	ldr	r2, [pc, #556]	; (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d101      	bne.n	8004c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004c60:	4b8a      	ldr	r3, [pc, #552]	; (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c62:	e001      	b.n	8004c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c74:	d004      	beq.n	8004c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f040 8099 	bne.w	8004db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d107      	bne.n	8004c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f925 	bl	8004ee4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d107      	bne.n	8004cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f9c8 	bl	8005044 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d13a      	bne.n	8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d035      	beq.n	8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a6e      	ldr	r2, [pc, #440]	; (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004cd2:	4b6e      	ldr	r3, [pc, #440]	; (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cd4:	e001      	b.n	8004cda <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4969      	ldr	r1, [pc, #420]	; (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ce2:	428b      	cmp	r3, r1
 8004ce4:	d101      	bne.n	8004cea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004ce6:	4b69      	ldr	r3, [pc, #420]	; (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ce8:	e001      	b.n	8004cee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cf2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d26:	f043 0202 	orr.w	r2, r3, #2
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fe88 	bl	8004a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	f040 80c3 	bne.w	8004ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 80bd 	beq.w	8004ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d5a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a49      	ldr	r2, [pc, #292]	; (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d101      	bne.n	8004d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004d66:	4b49      	ldr	r3, [pc, #292]	; (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d68:	e001      	b.n	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4944      	ldr	r1, [pc, #272]	; (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d76:	428b      	cmp	r3, r1
 8004d78:	d101      	bne.n	8004d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d7a:	4b44      	ldr	r3, [pc, #272]	; (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d7c:	e001      	b.n	8004d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d86:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f043 0204 	orr.w	r2, r3, #4
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff fe4a 	bl	8004a44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004db0:	e089      	b.n	8004ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d107      	bne.n	8004dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8be 	bl	8004f48 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d107      	bne.n	8004de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f8fd 	bl	8004fe0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d12f      	bne.n	8004e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d02a      	beq.n	8004e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e08:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004e14:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e16:	e001      	b.n	8004e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004e18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4919      	ldr	r1, [pc, #100]	; (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e24:	428b      	cmp	r3, r1
 8004e26:	d101      	bne.n	8004e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004e28:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e2a:	e001      	b.n	8004e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004e2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e42:	f043 0202 	orr.w	r2, r3, #2
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff fdfa 	bl	8004a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d136      	bne.n	8004ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f003 0320 	and.w	r3, r3, #32
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d031      	beq.n	8004ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a07      	ldr	r2, [pc, #28]	; (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d101      	bne.n	8004e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e6e:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e70:	e001      	b.n	8004e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4902      	ldr	r1, [pc, #8]	; (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e7e:	428b      	cmp	r3, r1
 8004e80:	d106      	bne.n	8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004e82:	4b02      	ldr	r3, [pc, #8]	; (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e84:	e006      	b.n	8004e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004e86:	bf00      	nop
 8004e88:	40003800 	.word	0x40003800
 8004e8c:	40003400 	.word	0x40003400
 8004e90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e98:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ea8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	f043 0204 	orr.w	r2, r3, #4
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff fdc0 	bl	8004a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ec4:	e000      	b.n	8004ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ec6:	bf00      	nop
}
 8004ec8:	bf00      	nop
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	1c99      	adds	r1, r3, #2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6251      	str	r1, [r2, #36]	; 0x24
 8004ef6:	881a      	ldrh	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d113      	bne.n	8004f3e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ffc9 	bl	8004ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	1c99      	adds	r1, r3, #2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6251      	str	r1, [r2, #36]	; 0x24
 8004f5a:	8819      	ldrh	r1, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1d      	ldr	r2, [pc, #116]	; (8004fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <I2SEx_TxISR_I2SExt+0x22>
 8004f66:	4b1d      	ldr	r3, [pc, #116]	; (8004fdc <I2SEx_TxISR_I2SExt+0x94>)
 8004f68:	e001      	b.n	8004f6e <I2SEx_TxISR_I2SExt+0x26>
 8004f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f6e:	460a      	mov	r2, r1
 8004f70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d121      	bne.n	8004fce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a12      	ldr	r2, [pc, #72]	; (8004fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d101      	bne.n	8004f98 <I2SEx_TxISR_I2SExt+0x50>
 8004f94:	4b11      	ldr	r3, [pc, #68]	; (8004fdc <I2SEx_TxISR_I2SExt+0x94>)
 8004f96:	e001      	b.n	8004f9c <I2SEx_TxISR_I2SExt+0x54>
 8004f98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	490d      	ldr	r1, [pc, #52]	; (8004fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	d101      	bne.n	8004fac <I2SEx_TxISR_I2SExt+0x64>
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	; (8004fdc <I2SEx_TxISR_I2SExt+0x94>)
 8004faa:	e001      	b.n	8004fb0 <I2SEx_TxISR_I2SExt+0x68>
 8004fac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fb4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff ff81 	bl	8004ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40003800 	.word	0x40003800
 8004fdc:	40003400 	.word	0x40003400

08004fe0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68d8      	ldr	r0, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	1c99      	adds	r1, r3, #2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ff8:	b282      	uxth	r2, r0
 8004ffa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d113      	bne.n	800503c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005022:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ff4a 	bl	8004ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a20      	ldr	r2, [pc, #128]	; (80050d4 <I2SEx_RxISR_I2SExt+0x90>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d101      	bne.n	800505a <I2SEx_RxISR_I2SExt+0x16>
 8005056:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <I2SEx_RxISR_I2SExt+0x94>)
 8005058:	e001      	b.n	800505e <I2SEx_RxISR_I2SExt+0x1a>
 800505a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800505e:	68d8      	ldr	r0, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	1c99      	adds	r1, r3, #2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	62d1      	str	r1, [r2, #44]	; 0x2c
 800506a:	b282      	uxth	r2, r0
 800506c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005072:	b29b      	uxth	r3, r3
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d121      	bne.n	80050ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <I2SEx_RxISR_I2SExt+0x90>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d101      	bne.n	8005094 <I2SEx_RxISR_I2SExt+0x50>
 8005090:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <I2SEx_RxISR_I2SExt+0x94>)
 8005092:	e001      	b.n	8005098 <I2SEx_RxISR_I2SExt+0x54>
 8005094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	490d      	ldr	r1, [pc, #52]	; (80050d4 <I2SEx_RxISR_I2SExt+0x90>)
 80050a0:	428b      	cmp	r3, r1
 80050a2:	d101      	bne.n	80050a8 <I2SEx_RxISR_I2SExt+0x64>
 80050a4:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <I2SEx_RxISR_I2SExt+0x94>)
 80050a6:	e001      	b.n	80050ac <I2SEx_RxISR_I2SExt+0x68>
 80050a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d106      	bne.n	80050ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff ff03 	bl	8004ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40003800 	.word	0x40003800
 80050d8:	40003400 	.word	0x40003400

080050dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050de:	b08f      	sub	sp, #60	; 0x3c
 80050e0:	af0a      	add	r7, sp, #40	; 0x28
 80050e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e10f      	b.n	800530e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f007 fca1 	bl	800ca50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2203      	movs	r2, #3
 8005112:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d102      	bne.n	8005128 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	f003 ff88 	bl	8009042 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	687e      	ldr	r6, [r7, #4]
 800513a:	466d      	mov	r5, sp
 800513c:	f106 0410 	add.w	r4, r6, #16
 8005140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005148:	e894 0003 	ldmia.w	r4, {r0, r1}
 800514c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005150:	1d33      	adds	r3, r6, #4
 8005152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005154:	6838      	ldr	r0, [r7, #0]
 8005156:	f003 fe5f 	bl	8008e18 <USB_CoreInit>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e0d0      	b.n	800530e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2100      	movs	r1, #0
 8005172:	4618      	mov	r0, r3
 8005174:	f003 ff76 	bl	8009064 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005178:	2300      	movs	r3, #0
 800517a:	73fb      	strb	r3, [r7, #15]
 800517c:	e04a      	b.n	8005214 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800517e:	7bfa      	ldrb	r2, [r7, #15]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	333d      	adds	r3, #61	; 0x3d
 800518e:	2201      	movs	r2, #1
 8005190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005192:	7bfa      	ldrb	r2, [r7, #15]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	333c      	adds	r3, #60	; 0x3c
 80051a2:	7bfa      	ldrb	r2, [r7, #15]
 80051a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051a6:	7bfa      	ldrb	r2, [r7, #15]
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	b298      	uxth	r0, r3
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	3344      	adds	r3, #68	; 0x44
 80051ba:	4602      	mov	r2, r0
 80051bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051be:	7bfa      	ldrb	r2, [r7, #15]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	440b      	add	r3, r1
 80051cc:	3340      	adds	r3, #64	; 0x40
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051d2:	7bfa      	ldrb	r2, [r7, #15]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	3348      	adds	r3, #72	; 0x48
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051e6:	7bfa      	ldrb	r2, [r7, #15]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	334c      	adds	r3, #76	; 0x4c
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051fa:	7bfa      	ldrb	r2, [r7, #15]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	3354      	adds	r3, #84	; 0x54
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	3301      	adds	r3, #1
 8005212:	73fb      	strb	r3, [r7, #15]
 8005214:	7bfa      	ldrb	r2, [r7, #15]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	429a      	cmp	r2, r3
 800521c:	d3af      	bcc.n	800517e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
 8005222:	e044      	b.n	80052ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005224:	7bfa      	ldrb	r2, [r7, #15]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800523a:	7bfa      	ldrb	r2, [r7, #15]
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800524c:	7bfa      	ldrb	r2, [r7, #15]
 800524e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005250:	7bfa      	ldrb	r2, [r7, #15]
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005266:	7bfa      	ldrb	r2, [r7, #15]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800527c:	7bfa      	ldrb	r2, [r7, #15]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005292:	7bfa      	ldrb	r2, [r7, #15]
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	4613      	mov	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	440b      	add	r3, r1
 80052a0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	3301      	adds	r3, #1
 80052ac:	73fb      	strb	r3, [r7, #15]
 80052ae:	7bfa      	ldrb	r2, [r7, #15]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d3b5      	bcc.n	8005224 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	603b      	str	r3, [r7, #0]
 80052be:	687e      	ldr	r6, [r7, #4]
 80052c0:	466d      	mov	r5, sp
 80052c2:	f106 0410 	add.w	r4, r6, #16
 80052c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80052d6:	1d33      	adds	r3, r6, #4
 80052d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052da:	6838      	ldr	r0, [r7, #0]
 80052dc:	f003 ff0e 	bl	80090fc <USB_DevInit>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e00d      	b.n	800530e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f005 f85d 	bl	800a3c6 <USB_DevDisconnect>

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005316 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b084      	sub	sp, #16
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_PCD_Start+0x1c>
 800532e:	2302      	movs	r3, #2
 8005330:	e020      	b.n	8005374 <HAL_PCD_Start+0x5e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	2b01      	cmp	r3, #1
 8005340:	d109      	bne.n	8005356 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005346:	2b01      	cmp	r3, #1
 8005348:	d005      	beq.n	8005356 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f003 fe60 	bl	8009020 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f005 f80d 	bl	800a384 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800537c:	b590      	push	{r4, r7, lr}
 800537e:	b08d      	sub	sp, #52	; 0x34
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f005 f8cb 	bl	800a52e <USB_GetMode>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	f040 848a 	bne.w	8005cb4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f005 f82f 	bl	800a408 <USB_ReadInterrupts>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8480 	beq.w	8005cb2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	0a1b      	lsrs	r3, r3, #8
 80053bc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f005 f81c 	bl	800a408 <USB_ReadInterrupts>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d107      	bne.n	80053ea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695a      	ldr	r2, [r3, #20]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f002 0202 	and.w	r2, r2, #2
 80053e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f005 f80a 	bl	800a408 <USB_ReadInterrupts>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d161      	bne.n	80054c2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699a      	ldr	r2, [r3, #24]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0210 	bic.w	r2, r2, #16
 800540c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f003 020f 	and.w	r2, r3, #15
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4413      	add	r3, r2
 800542a:	3304      	adds	r3, #4
 800542c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	0c5b      	lsrs	r3, r3, #17
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	2b02      	cmp	r3, #2
 8005438:	d124      	bne.n	8005484 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d035      	beq.n	80054b2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	091b      	lsrs	r3, r3, #4
 800544e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005454:	b29b      	uxth	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	6a38      	ldr	r0, [r7, #32]
 800545a:	f004 fe41 	bl	800a0e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	091b      	lsrs	r3, r3, #4
 8005466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800546a:	441a      	add	r2, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	6a1a      	ldr	r2, [r3, #32]
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800547c:	441a      	add	r2, r3
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	621a      	str	r2, [r3, #32]
 8005482:	e016      	b.n	80054b2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	0c5b      	lsrs	r3, r3, #17
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	2b06      	cmp	r3, #6
 800548e:	d110      	bne.n	80054b2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005496:	2208      	movs	r2, #8
 8005498:	4619      	mov	r1, r3
 800549a:	6a38      	ldr	r0, [r7, #32]
 800549c:	f004 fe20 	bl	800a0e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	6a1a      	ldr	r2, [r3, #32]
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	091b      	lsrs	r3, r3, #4
 80054a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054ac:	441a      	add	r2, r3
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	699a      	ldr	r2, [r3, #24]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0210 	orr.w	r2, r2, #16
 80054c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f004 ff9e 	bl	800a408 <USB_ReadInterrupts>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054d6:	f040 80a7 	bne.w	8005628 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f004 ffa3 	bl	800a42e <USB_ReadDevAllOutEpInterrupt>
 80054e8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80054ea:	e099      	b.n	8005620 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 808e 	beq.w	8005614 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	4611      	mov	r1, r2
 8005502:	4618      	mov	r0, r3
 8005504:	f004 ffc7 	bl	800a496 <USB_ReadDevOutEPInterrupt>
 8005508:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00c      	beq.n	800552e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	461a      	mov	r2, r3
 8005522:	2301      	movs	r3, #1
 8005524:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fec3 	bl	80062b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00c      	beq.n	8005552 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005544:	461a      	mov	r2, r3
 8005546:	2308      	movs	r3, #8
 8005548:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800554a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 ff99 	bl	8006484 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	d008      	beq.n	800556e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005568:	461a      	mov	r2, r3
 800556a:	2310      	movs	r3, #16
 800556c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d030      	beq.n	80055da <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005580:	2b80      	cmp	r3, #128	; 0x80
 8005582:	d109      	bne.n	8005598 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005596:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559a:	4613      	mov	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	4413      	add	r3, r2
 80055aa:	3304      	adds	r3, #4
 80055ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	78db      	ldrb	r3, [r3, #3]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d108      	bne.n	80055c8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2200      	movs	r2, #0
 80055ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f007 fb58 	bl	800cc78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d4:	461a      	mov	r2, r3
 80055d6:	2302      	movs	r3, #2
 80055d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f0:	461a      	mov	r2, r3
 80055f2:	2320      	movs	r3, #32
 80055f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560c:	461a      	mov	r2, r3
 800560e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005612:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	3301      	adds	r3, #1
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	2b00      	cmp	r3, #0
 8005624:	f47f af62 	bne.w	80054ec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f004 feeb 	bl	800a408 <USB_ReadInterrupts>
 8005632:	4603      	mov	r3, r0
 8005634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005638:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800563c:	f040 80db 	bne.w	80057f6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f004 ff0c 	bl	800a462 <USB_ReadDevAllInEpInterrupt>
 800564a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005650:	e0cd      	b.n	80057ee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80c2 	beq.w	80057e2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f004 ff32 	bl	800a4d2 <USB_ReadDevInEPInterrupt>
 800566e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d057      	beq.n	800572a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	f003 030f 	and.w	r3, r3, #15
 8005680:	2201      	movs	r2, #1
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	43db      	mvns	r3, r3
 8005694:	69f9      	ldr	r1, [r7, #28]
 8005696:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800569a:	4013      	ands	r3, r2
 800569c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056aa:	461a      	mov	r2, r3
 80056ac:	2301      	movs	r3, #1
 80056ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d132      	bne.n	800571e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	334c      	adds	r3, #76	; 0x4c
 80056c8:	6819      	ldr	r1, [r3, #0]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ce:	4613      	mov	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4403      	add	r3, r0
 80056d8:	3348      	adds	r3, #72	; 0x48
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4419      	add	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e2:	4613      	mov	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4403      	add	r3, r0
 80056ec:	334c      	adds	r3, #76	; 0x4c
 80056ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d113      	bne.n	800571e <HAL_PCD_IRQHandler+0x3a2>
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fa:	4613      	mov	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	3354      	adds	r3, #84	; 0x54
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d108      	bne.n	800571e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005716:	461a      	mov	r2, r3
 8005718:	2101      	movs	r1, #1
 800571a:	f004 ff39 	bl	800a590 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	b2db      	uxtb	r3, r3
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f007 fa22 	bl	800cb6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005740:	461a      	mov	r2, r3
 8005742:	2308      	movs	r3, #8
 8005744:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b00      	cmp	r3, #0
 800574e:	d008      	beq.n	8005762 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575c:	461a      	mov	r2, r3
 800575e:	2310      	movs	r3, #16
 8005760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	461a      	mov	r2, r3
 800577a:	2340      	movs	r3, #64	; 0x40
 800577c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d023      	beq.n	80057d0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800578a:	6a38      	ldr	r0, [r7, #32]
 800578c:	f003 fe1a 	bl	80093c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005792:	4613      	mov	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	3338      	adds	r3, #56	; 0x38
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4413      	add	r3, r2
 80057a0:	3304      	adds	r3, #4
 80057a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	78db      	ldrb	r3, [r3, #3]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d108      	bne.n	80057be <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2200      	movs	r2, #0
 80057b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f007 fa6f 	bl	800cc9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ca:	461a      	mov	r2, r3
 80057cc:	2302      	movs	r3, #2
 80057ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80057da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fcdb 	bl	8006198 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	3301      	adds	r3, #1
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f47f af2e 	bne.w	8005652 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f004 fe04 	bl	800a408 <USB_ReadInterrupts>
 8005800:	4603      	mov	r3, r0
 8005802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800580a:	d122      	bne.n	8005852 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800581a:	f023 0301 	bic.w	r3, r3, #1
 800581e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005826:	2b01      	cmp	r3, #1
 8005828:	d108      	bne.n	800583c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005832:	2100      	movs	r1, #0
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fec3 	bl	80065c0 <HAL_PCDEx_LPM_Callback>
 800583a:	e002      	b.n	8005842 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f007 fa0d 	bl	800cc5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f004 fdd6 	bl	800a408 <USB_ReadInterrupts>
 800585c:	4603      	mov	r3, r0
 800585e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005866:	d112      	bne.n	800588e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b01      	cmp	r3, #1
 8005876:	d102      	bne.n	800587e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f007 f9c9 	bl	800cc10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695a      	ldr	r2, [r3, #20]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800588c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f004 fdb8 	bl	800a408 <USB_ReadInterrupts>
 8005898:	4603      	mov	r3, r0
 800589a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800589e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a2:	f040 80b7 	bne.w	8005a14 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2110      	movs	r1, #16
 80058c0:	4618      	mov	r0, r3
 80058c2:	f003 fd7f 	bl	80093c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058c6:	2300      	movs	r3, #0
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ca:	e046      	b.n	800595a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	461a      	mov	r2, r3
 80058da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590c:	461a      	mov	r2, r3
 800590e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005912:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005924:	0151      	lsls	r1, r2, #5
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	440a      	add	r2, r1
 800592a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800592e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005932:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005952:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	3301      	adds	r3, #1
 8005958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005960:	429a      	cmp	r2, r3
 8005962:	d3b3      	bcc.n	80058cc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005972:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005976:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	2b00      	cmp	r3, #0
 800597e:	d016      	beq.n	80059ae <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005990:	f043 030b 	orr.w	r3, r3, #11
 8005994:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a6:	f043 030b 	orr.w	r3, r3, #11
 80059aa:	6453      	str	r3, [r2, #68]	; 0x44
 80059ac:	e015      	b.n	80059da <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80059c0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80059c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059d4:	f043 030b 	orr.w	r3, r3, #11
 80059d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80059fe:	461a      	mov	r2, r3
 8005a00:	f004 fdc6 	bl	800a590 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f004 fcf5 	bl	800a408 <USB_ReadInterrupts>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a28:	d124      	bne.n	8005a74 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f004 fd8b 	bl	800a54a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f003 fd40 	bl	80094be <USB_GetDevSpeed>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	461a      	mov	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681c      	ldr	r4, [r3, #0]
 8005a4a:	f001 fa29 	bl	8006ea0 <HAL_RCC_GetHCLKFreq>
 8005a4e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f003 fa3f 	bl	8008edc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f007 f8ad 	bl	800cbbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695a      	ldr	r2, [r3, #20]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f004 fcc5 	bl	800a408 <USB_ReadInterrupts>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d10a      	bne.n	8005a9e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f007 f88a 	bl	800cba2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695a      	ldr	r2, [r3, #20]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f002 0208 	and.w	r2, r2, #8
 8005a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f004 fcb0 	bl	800a408 <USB_ReadInterrupts>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aae:	2b80      	cmp	r3, #128	; 0x80
 8005ab0:	d122      	bne.n	8005af8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005abe:	2301      	movs	r3, #1
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac2:	e014      	b.n	8005aee <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d105      	bne.n	8005ae8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fb27 	bl	8006136 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	3301      	adds	r3, #1
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d3e5      	bcc.n	8005ac4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f004 fc83 	bl	800a408 <USB_ReadInterrupts>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b0c:	d13b      	bne.n	8005b86 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b0e:	2301      	movs	r3, #1
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
 8005b12:	e02b      	b.n	8005b6c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b28:	4613      	mov	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	3340      	adds	r3, #64	; 0x40
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d115      	bne.n	8005b66 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005b3a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	da12      	bge.n	8005b66 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b44:	4613      	mov	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	333f      	adds	r3, #63	; 0x3f
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fae8 	bl	8006136 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	3301      	adds	r3, #1
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d3ce      	bcc.n	8005b14 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f004 fc3c 	bl	800a408 <USB_ReadInterrupts>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b9a:	d155      	bne.n	8005c48 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba0:	e045      	b.n	8005c2e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d12e      	bne.n	8005c28 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005bca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	da2b      	bge.n	8005c28 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005bdc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d121      	bne.n	8005c28 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be8:	4613      	mov	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c24:	6053      	str	r3, [r2, #4]
            break;
 8005c26:	e007      	b.n	8005c38 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d3b4      	bcc.n	8005ba2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f004 fbdb 	bl	800a408 <USB_ReadInterrupts>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5c:	d10a      	bne.n	8005c74 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f007 f82e 	bl	800ccc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695a      	ldr	r2, [r3, #20]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f004 fbc5 	bl	800a408 <USB_ReadInterrupts>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d115      	bne.n	8005cb4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f007 f81e 	bl	800ccdc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6859      	ldr	r1, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	605a      	str	r2, [r3, #4]
 8005cb0:	e000      	b.n	8005cb4 <HAL_PCD_IRQHandler+0x938>
      return;
 8005cb2:	bf00      	nop
    }
  }
}
 8005cb4:	3734      	adds	r7, #52	; 0x34
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd90      	pop	{r4, r7, pc}

08005cba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b082      	sub	sp, #8
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_PCD_SetAddress+0x1a>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e013      	b.n	8005cfc <HAL_PCD_SetAddress+0x42>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	78fa      	ldrb	r2, [r7, #3]
 8005ce0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	78fa      	ldrb	r2, [r7, #3]
 8005cea:	4611      	mov	r1, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f004 fb23 	bl	800a338 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	461a      	mov	r2, r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	70fb      	strb	r3, [r7, #3]
 8005d16:	460b      	mov	r3, r1
 8005d18:	803b      	strh	r3, [r7, #0]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	da0f      	bge.n	8005d4a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	f003 020f 	and.w	r2, r3, #15
 8005d30:	4613      	mov	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	3338      	adds	r3, #56	; 0x38
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	3304      	adds	r3, #4
 8005d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	705a      	strb	r2, [r3, #1]
 8005d48:	e00f      	b.n	8005d6a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	f003 020f 	and.w	r2, r3, #15
 8005d50:	4613      	mov	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4413      	add	r3, r2
 8005d60:	3304      	adds	r3, #4
 8005d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	f003 030f 	and.w	r3, r3, #15
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d76:	883a      	ldrh	r2, [r7, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	78ba      	ldrb	r2, [r7, #2]
 8005d80:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d004      	beq.n	8005d94 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d94:	78bb      	ldrb	r3, [r7, #2]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d102      	bne.n	8005da0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_PCD_EP_Open+0xaa>
 8005daa:	2302      	movs	r3, #2
 8005dac:	e00e      	b.n	8005dcc <HAL_PCD_EP_Open+0xc8>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68f9      	ldr	r1, [r7, #12]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f003 fba3 	bl	8009508 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005dca:	7afb      	ldrb	r3, [r7, #11]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	da0f      	bge.n	8005e08 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	f003 020f 	and.w	r2, r3, #15
 8005dee:	4613      	mov	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	3338      	adds	r3, #56	; 0x38
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	705a      	strb	r2, [r3, #1]
 8005e06:	e00f      	b.n	8005e28 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	f003 020f 	and.w	r2, r3, #15
 8005e0e:	4613      	mov	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	3304      	adds	r3, #4
 8005e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <HAL_PCD_EP_Close+0x6e>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e00e      	b.n	8005e60 <HAL_PCD_EP_Close+0x8c>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68f9      	ldr	r1, [r7, #12]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f003 fbe1 	bl	8009618 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	607a      	str	r2, [r7, #4]
 8005e72:	603b      	str	r3, [r7, #0]
 8005e74:	460b      	mov	r3, r1
 8005e76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e78:	7afb      	ldrb	r3, [r7, #11]
 8005e7a:	f003 020f 	and.w	r2, r3, #15
 8005e7e:	4613      	mov	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	3304      	adds	r3, #4
 8005e90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eaa:	7afb      	ldrb	r3, [r7, #11]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d102      	bne.n	8005ec4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ec4:	7afb      	ldrb	r3, [r7, #11]
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6979      	ldr	r1, [r7, #20]
 8005edc:	f003 fec0 	bl	8009c60 <USB_EP0StartXfer>
 8005ee0:	e008      	b.n	8005ef4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	6979      	ldr	r1, [r7, #20]
 8005ef0:	f003 fc6e 	bl	80097d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	460b      	mov	r3, r1
 8005f08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f0a:	78fb      	ldrb	r3, [r7, #3]
 8005f0c:	f003 020f 	and.w	r2, r3, #15
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005f20:	681b      	ldr	r3, [r3, #0]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b086      	sub	sp, #24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f3e:	7afb      	ldrb	r3, [r7, #11]
 8005f40:	f003 020f 	and.w	r2, r3, #15
 8005f44:	4613      	mov	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	3338      	adds	r3, #56	; 0x38
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4413      	add	r3, r2
 8005f52:	3304      	adds	r3, #4
 8005f54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2200      	movs	r2, #0
 8005f66:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f6e:	7afb      	ldrb	r3, [r7, #11]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d102      	bne.n	8005f88 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f88:	7afb      	ldrb	r3, [r7, #11]
 8005f8a:	f003 030f 	and.w	r3, r3, #15
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6979      	ldr	r1, [r7, #20]
 8005fa0:	f003 fe5e 	bl	8009c60 <USB_EP0StartXfer>
 8005fa4:	e008      	b.n	8005fb8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6979      	ldr	r1, [r7, #20]
 8005fb4:	f003 fc0c 	bl	80097d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	f003 020f 	and.w	r2, r3, #15
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d901      	bls.n	8005fe0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e050      	b.n	8006082 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	da0f      	bge.n	8006008 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	f003 020f 	and.w	r2, r3, #15
 8005fee:	4613      	mov	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	3338      	adds	r3, #56	; 0x38
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	705a      	strb	r2, [r3, #1]
 8006006:	e00d      	b.n	8006024 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006008:	78fa      	ldrb	r2, [r7, #3]
 800600a:	4613      	mov	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	4413      	add	r3, r2
 800601a:	3304      	adds	r3, #4
 800601c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	f003 030f 	and.w	r3, r3, #15
 8006030:	b2da      	uxtb	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_PCD_EP_SetStall+0x82>
 8006040:	2302      	movs	r3, #2
 8006042:	e01e      	b.n	8006082 <HAL_PCD_EP_SetStall+0xc0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68f9      	ldr	r1, [r7, #12]
 8006052:	4618      	mov	r0, r3
 8006054:	f004 f89c 	bl	800a190 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	b2d9      	uxtb	r1, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006072:	461a      	mov	r2, r3
 8006074:	f004 fa8c 	bl	800a590 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	f003 020f 	and.w	r2, r3, #15
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d901      	bls.n	80060a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e042      	b.n	800612e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	da0f      	bge.n	80060d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	f003 020f 	and.w	r2, r3, #15
 80060b6:	4613      	mov	r3, r2
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	3338      	adds	r3, #56	; 0x38
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	4413      	add	r3, r2
 80060c4:	3304      	adds	r3, #4
 80060c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	705a      	strb	r2, [r3, #1]
 80060ce:	e00f      	b.n	80060f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	f003 020f 	and.w	r2, r3, #15
 80060d6:	4613      	mov	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	4413      	add	r3, r2
 80060e6:	3304      	adds	r3, #4
 80060e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_PCD_EP_ClrStall+0x86>
 800610c:	2302      	movs	r3, #2
 800610e:	e00e      	b.n	800612e <HAL_PCD_EP_ClrStall+0xa4>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68f9      	ldr	r1, [r7, #12]
 800611e:	4618      	mov	r0, r3
 8006120:	f004 f8a4 	bl	800a26c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	460b      	mov	r3, r1
 8006140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da0c      	bge.n	8006164 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	f003 020f 	and.w	r2, r3, #15
 8006150:	4613      	mov	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	3338      	adds	r3, #56	; 0x38
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4413      	add	r3, r2
 800615e:	3304      	adds	r3, #4
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	e00c      	b.n	800617e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	f003 020f 	and.w	r2, r3, #15
 800616a:	4613      	mov	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	4413      	add	r3, r2
 800617a:	3304      	adds	r3, #4
 800617c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68f9      	ldr	r1, [r7, #12]
 8006184:	4618      	mov	r0, r3
 8006186:	f003 fec3 	bl	8009f10 <USB_EPStopXfer>
 800618a:	4603      	mov	r3, r0
 800618c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800618e:	7afb      	ldrb	r3, [r7, #11]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08a      	sub	sp, #40	; 0x28
 800619c:	af02      	add	r7, sp, #8
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	4613      	mov	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	3338      	adds	r3, #56	; 0x38
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	4413      	add	r3, r2
 80061bc:	3304      	adds	r3, #4
 80061be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a1a      	ldr	r2, [r3, #32]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d901      	bls.n	80061d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e06c      	b.n	80062aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	699a      	ldr	r2, [r3, #24]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d902      	bls.n	80061ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	3303      	adds	r3, #3
 80061f0:	089b      	lsrs	r3, r3, #2
 80061f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061f4:	e02b      	b.n	800624e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	429a      	cmp	r2, r3
 800620a:	d902      	bls.n	8006212 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	3303      	adds	r3, #3
 8006216:	089b      	lsrs	r3, r3, #2
 8006218:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6919      	ldr	r1, [r3, #16]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800622a:	b2db      	uxtb	r3, r3
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	4603      	mov	r3, r0
 8006230:	6978      	ldr	r0, [r7, #20]
 8006232:	f003 ff17 	bl	800a064 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	441a      	add	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1a      	ldr	r2, [r3, #32]
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	441a      	add	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	b29b      	uxth	r3, r3
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	429a      	cmp	r2, r3
 8006262:	d809      	bhi.n	8006278 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a1a      	ldr	r2, [r3, #32]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800626c:	429a      	cmp	r2, r3
 800626e:	d203      	bcs.n	8006278 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1be      	bne.n	80061f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	429a      	cmp	r2, r3
 8006282:	d811      	bhi.n	80062a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	2201      	movs	r2, #1
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	43db      	mvns	r3, r3
 800629e:	6939      	ldr	r1, [r7, #16]
 80062a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062a4:	4013      	ands	r3, r2
 80062a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3720      	adds	r7, #32
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	333c      	adds	r3, #60	; 0x3c
 80062cc:	3304      	adds	r3, #4
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d17b      	bne.n	80063e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d015      	beq.n	8006320 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	4a61      	ldr	r2, [pc, #388]	; (800647c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	f240 80b9 	bls.w	8006470 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 80b3 	beq.w	8006470 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006316:	461a      	mov	r2, r3
 8006318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631c:	6093      	str	r3, [r2, #8]
 800631e:	e0a7      	b.n	8006470 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d009      	beq.n	800633e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006336:	461a      	mov	r2, r3
 8006338:	2320      	movs	r3, #32
 800633a:	6093      	str	r3, [r2, #8]
 800633c:	e098      	b.n	8006470 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006344:	2b00      	cmp	r3, #0
 8006346:	f040 8093 	bne.w	8006470 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	4a4b      	ldr	r2, [pc, #300]	; (800647c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d90f      	bls.n	8006372 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00a      	beq.n	8006372 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006368:	461a      	mov	r2, r3
 800636a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800636e:	6093      	str	r3, [r2, #8]
 8006370:	e07e      	b.n	8006470 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	4413      	add	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	4413      	add	r3, r2
 8006384:	3304      	adds	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	69da      	ldr	r2, [r3, #28]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	0159      	lsls	r1, r3, #5
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	440b      	add	r3, r1
 8006394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800639e:	1ad2      	subs	r2, r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d114      	bne.n	80063d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6818      	ldr	r0, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063bc:	461a      	mov	r2, r3
 80063be:	2101      	movs	r1, #1
 80063c0:	f004 f8e6 	bl	800a590 <USB_EP0_OutStart>
 80063c4:	e006      	b.n	80063d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	691a      	ldr	r2, [r3, #16]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	441a      	add	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	4619      	mov	r1, r3
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f006 fbac 	bl	800cb38 <HAL_PCD_DataOutStageCallback>
 80063e0:	e046      	b.n	8006470 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	4a26      	ldr	r2, [pc, #152]	; (8006480 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d124      	bne.n	8006434 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00a      	beq.n	800640a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006400:	461a      	mov	r2, r3
 8006402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006406:	6093      	str	r3, [r2, #8]
 8006408:	e032      	b.n	8006470 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006420:	461a      	mov	r2, r3
 8006422:	2320      	movs	r3, #32
 8006424:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	b2db      	uxtb	r3, r3
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f006 fb83 	bl	800cb38 <HAL_PCD_DataOutStageCallback>
 8006432:	e01d      	b.n	8006470 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d114      	bne.n	8006464 <PCD_EP_OutXfrComplete_int+0x1b0>
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	4613      	mov	r3, r2
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	440b      	add	r3, r1
 8006448:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d108      	bne.n	8006464 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800645c:	461a      	mov	r2, r3
 800645e:	2100      	movs	r1, #0
 8006460:	f004 f896 	bl	800a590 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f006 fb64 	bl	800cb38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3720      	adds	r7, #32
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	4f54300a 	.word	0x4f54300a
 8006480:	4f54310a 	.word	0x4f54310a

08006484 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	333c      	adds	r3, #60	; 0x3c
 800649c:	3304      	adds	r3, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4a15      	ldr	r2, [pc, #84]	; (800650c <PCD_EP_OutSetupPacket_int+0x88>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d90e      	bls.n	80064d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d009      	beq.n	80064d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	461a      	mov	r2, r3
 80064d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f006 fb1b 	bl	800cb14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4a0a      	ldr	r2, [pc, #40]	; (800650c <PCD_EP_OutSetupPacket_int+0x88>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d90c      	bls.n	8006500 <PCD_EP_OutSetupPacket_int+0x7c>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d108      	bne.n	8006500 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064f8:	461a      	mov	r2, r3
 80064fa:	2101      	movs	r1, #1
 80064fc:	f004 f848 	bl	800a590 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	4f54300a 	.word	0x4f54300a

08006510 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	70fb      	strb	r3, [r7, #3]
 800651c:	4613      	mov	r3, r2
 800651e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d107      	bne.n	800653e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800652e:	883b      	ldrh	r3, [r7, #0]
 8006530:	0419      	lsls	r1, r3, #16
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	430a      	orrs	r2, r1
 800653a:	629a      	str	r2, [r3, #40]	; 0x28
 800653c:	e028      	b.n	8006590 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	0c1b      	lsrs	r3, r3, #16
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	4413      	add	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]
 8006550:	e00d      	b.n	800656e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	7bfb      	ldrb	r3, [r7, #15]
 8006558:	3340      	adds	r3, #64	; 0x40
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	0c1b      	lsrs	r3, r3, #16
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	4413      	add	r3, r2
 8006566:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	3301      	adds	r3, #1
 800656c:	73fb      	strb	r3, [r7, #15]
 800656e:	7bfa      	ldrb	r2, [r7, #15]
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	3b01      	subs	r3, #1
 8006574:	429a      	cmp	r2, r3
 8006576:	d3ec      	bcc.n	8006552 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006578:	883b      	ldrh	r3, [r7, #0]
 800657a:	0418      	lsls	r0, r3, #16
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6819      	ldr	r1, [r3, #0]
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	3b01      	subs	r3, #1
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	4302      	orrs	r2, r0
 8006588:	3340      	adds	r3, #64	; 0x40
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	460b      	mov	r3, r1
 80065a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	887a      	ldrh	r2, [r7, #2]
 80065b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e267      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d075      	beq.n	80066e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065f6:	4b88      	ldr	r3, [pc, #544]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 030c 	and.w	r3, r3, #12
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d00c      	beq.n	800661c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006602:	4b85      	ldr	r3, [pc, #532]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800660a:	2b08      	cmp	r3, #8
 800660c:	d112      	bne.n	8006634 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800660e:	4b82      	ldr	r3, [pc, #520]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800661a:	d10b      	bne.n	8006634 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800661c:	4b7e      	ldr	r3, [pc, #504]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d05b      	beq.n	80066e0 <HAL_RCC_OscConfig+0x108>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d157      	bne.n	80066e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e242      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800663c:	d106      	bne.n	800664c <HAL_RCC_OscConfig+0x74>
 800663e:	4b76      	ldr	r3, [pc, #472]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a75      	ldr	r2, [pc, #468]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e01d      	b.n	8006688 <HAL_RCC_OscConfig+0xb0>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006654:	d10c      	bne.n	8006670 <HAL_RCC_OscConfig+0x98>
 8006656:	4b70      	ldr	r3, [pc, #448]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a6f      	ldr	r2, [pc, #444]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 800665c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	4b6d      	ldr	r3, [pc, #436]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a6c      	ldr	r2, [pc, #432]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e00b      	b.n	8006688 <HAL_RCC_OscConfig+0xb0>
 8006670:	4b69      	ldr	r3, [pc, #420]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a68      	ldr	r2, [pc, #416]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	4b66      	ldr	r3, [pc, #408]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a65      	ldr	r2, [pc, #404]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d013      	beq.n	80066b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006690:	f7fd f816 	bl	80036c0 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006698:	f7fd f812 	bl	80036c0 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b64      	cmp	r3, #100	; 0x64
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e207      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066aa:	4b5b      	ldr	r3, [pc, #364]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0f0      	beq.n	8006698 <HAL_RCC_OscConfig+0xc0>
 80066b6:	e014      	b.n	80066e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b8:	f7fd f802 	bl	80036c0 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066c0:	f7fc fffe 	bl	80036c0 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b64      	cmp	r3, #100	; 0x64
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e1f3      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066d2:	4b51      	ldr	r3, [pc, #324]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f0      	bne.n	80066c0 <HAL_RCC_OscConfig+0xe8>
 80066de:	e000      	b.n	80066e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d063      	beq.n	80067b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066ee:	4b4a      	ldr	r3, [pc, #296]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 030c 	and.w	r3, r3, #12
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00b      	beq.n	8006712 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066fa:	4b47      	ldr	r3, [pc, #284]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006702:	2b08      	cmp	r3, #8
 8006704:	d11c      	bne.n	8006740 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006706:	4b44      	ldr	r3, [pc, #272]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d116      	bne.n	8006740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006712:	4b41      	ldr	r3, [pc, #260]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d005      	beq.n	800672a <HAL_RCC_OscConfig+0x152>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d001      	beq.n	800672a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e1c7      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800672a:	4b3b      	ldr	r3, [pc, #236]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	4937      	ldr	r1, [pc, #220]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 800673a:	4313      	orrs	r3, r2
 800673c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800673e:	e03a      	b.n	80067b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d020      	beq.n	800678a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006748:	4b34      	ldr	r3, [pc, #208]	; (800681c <HAL_RCC_OscConfig+0x244>)
 800674a:	2201      	movs	r2, #1
 800674c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674e:	f7fc ffb7 	bl	80036c0 <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006754:	e008      	b.n	8006768 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006756:	f7fc ffb3 	bl	80036c0 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e1a8      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006768:	4b2b      	ldr	r3, [pc, #172]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0f0      	beq.n	8006756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006774:	4b28      	ldr	r3, [pc, #160]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	4925      	ldr	r1, [pc, #148]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 8006784:	4313      	orrs	r3, r2
 8006786:	600b      	str	r3, [r1, #0]
 8006788:	e015      	b.n	80067b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800678a:	4b24      	ldr	r3, [pc, #144]	; (800681c <HAL_RCC_OscConfig+0x244>)
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006790:	f7fc ff96 	bl	80036c0 <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006798:	f7fc ff92 	bl	80036c0 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e187      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067aa:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f0      	bne.n	8006798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d036      	beq.n	8006830 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d016      	beq.n	80067f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067ca:	4b15      	ldr	r3, [pc, #84]	; (8006820 <HAL_RCC_OscConfig+0x248>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d0:	f7fc ff76 	bl	80036c0 <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067d8:	f7fc ff72 	bl	80036c0 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e167      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ea:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <HAL_RCC_OscConfig+0x240>)
 80067ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0f0      	beq.n	80067d8 <HAL_RCC_OscConfig+0x200>
 80067f6:	e01b      	b.n	8006830 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067f8:	4b09      	ldr	r3, [pc, #36]	; (8006820 <HAL_RCC_OscConfig+0x248>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067fe:	f7fc ff5f 	bl	80036c0 <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006804:	e00e      	b.n	8006824 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006806:	f7fc ff5b 	bl	80036c0 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d907      	bls.n	8006824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e150      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
 8006818:	40023800 	.word	0x40023800
 800681c:	42470000 	.word	0x42470000
 8006820:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006824:	4b88      	ldr	r3, [pc, #544]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1ea      	bne.n	8006806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 8097 	beq.w	800696c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800683e:	2300      	movs	r3, #0
 8006840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006842:	4b81      	ldr	r3, [pc, #516]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10f      	bne.n	800686e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800684e:	2300      	movs	r3, #0
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	4b7d      	ldr	r3, [pc, #500]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	4a7c      	ldr	r2, [pc, #496]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800685c:	6413      	str	r3, [r2, #64]	; 0x40
 800685e:	4b7a      	ldr	r3, [pc, #488]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006866:	60bb      	str	r3, [r7, #8]
 8006868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800686a:	2301      	movs	r3, #1
 800686c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800686e:	4b77      	ldr	r3, [pc, #476]	; (8006a4c <HAL_RCC_OscConfig+0x474>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006876:	2b00      	cmp	r3, #0
 8006878:	d118      	bne.n	80068ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800687a:	4b74      	ldr	r3, [pc, #464]	; (8006a4c <HAL_RCC_OscConfig+0x474>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a73      	ldr	r2, [pc, #460]	; (8006a4c <HAL_RCC_OscConfig+0x474>)
 8006880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006886:	f7fc ff1b 	bl	80036c0 <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800688e:	f7fc ff17 	bl	80036c0 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e10c      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a0:	4b6a      	ldr	r3, [pc, #424]	; (8006a4c <HAL_RCC_OscConfig+0x474>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f0      	beq.n	800688e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d106      	bne.n	80068c2 <HAL_RCC_OscConfig+0x2ea>
 80068b4:	4b64      	ldr	r3, [pc, #400]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b8:	4a63      	ldr	r2, [pc, #396]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	6713      	str	r3, [r2, #112]	; 0x70
 80068c0:	e01c      	b.n	80068fc <HAL_RCC_OscConfig+0x324>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b05      	cmp	r3, #5
 80068c8:	d10c      	bne.n	80068e4 <HAL_RCC_OscConfig+0x30c>
 80068ca:	4b5f      	ldr	r3, [pc, #380]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ce:	4a5e      	ldr	r2, [pc, #376]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068d0:	f043 0304 	orr.w	r3, r3, #4
 80068d4:	6713      	str	r3, [r2, #112]	; 0x70
 80068d6:	4b5c      	ldr	r3, [pc, #368]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068da:	4a5b      	ldr	r2, [pc, #364]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068dc:	f043 0301 	orr.w	r3, r3, #1
 80068e0:	6713      	str	r3, [r2, #112]	; 0x70
 80068e2:	e00b      	b.n	80068fc <HAL_RCC_OscConfig+0x324>
 80068e4:	4b58      	ldr	r3, [pc, #352]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e8:	4a57      	ldr	r2, [pc, #348]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	6713      	str	r3, [r2, #112]	; 0x70
 80068f0:	4b55      	ldr	r3, [pc, #340]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f4:	4a54      	ldr	r2, [pc, #336]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 80068f6:	f023 0304 	bic.w	r3, r3, #4
 80068fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d015      	beq.n	8006930 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006904:	f7fc fedc 	bl	80036c0 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800690a:	e00a      	b.n	8006922 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800690c:	f7fc fed8 	bl	80036c0 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	f241 3288 	movw	r2, #5000	; 0x1388
 800691a:	4293      	cmp	r3, r2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e0cb      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006922:	4b49      	ldr	r3, [pc, #292]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0ee      	beq.n	800690c <HAL_RCC_OscConfig+0x334>
 800692e:	e014      	b.n	800695a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006930:	f7fc fec6 	bl	80036c0 <HAL_GetTick>
 8006934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006936:	e00a      	b.n	800694e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006938:	f7fc fec2 	bl	80036c0 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	f241 3288 	movw	r2, #5000	; 0x1388
 8006946:	4293      	cmp	r3, r2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e0b5      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800694e:	4b3e      	ldr	r3, [pc, #248]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1ee      	bne.n	8006938 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800695a:	7dfb      	ldrb	r3, [r7, #23]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d105      	bne.n	800696c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006960:	4b39      	ldr	r3, [pc, #228]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006964:	4a38      	ldr	r2, [pc, #224]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 80a1 	beq.w	8006ab8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006976:	4b34      	ldr	r3, [pc, #208]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 030c 	and.w	r3, r3, #12
 800697e:	2b08      	cmp	r3, #8
 8006980:	d05c      	beq.n	8006a3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d141      	bne.n	8006a0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800698a:	4b31      	ldr	r3, [pc, #196]	; (8006a50 <HAL_RCC_OscConfig+0x478>)
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006990:	f7fc fe96 	bl	80036c0 <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006998:	f7fc fe92 	bl	80036c0 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e087      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069aa:	4b27      	ldr	r3, [pc, #156]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f0      	bne.n	8006998 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69da      	ldr	r2, [r3, #28]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	019b      	lsls	r3, r3, #6
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	085b      	lsrs	r3, r3, #1
 80069ce:	3b01      	subs	r3, #1
 80069d0:	041b      	lsls	r3, r3, #16
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	061b      	lsls	r3, r3, #24
 80069da:	491b      	ldr	r1, [pc, #108]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069e0:	4b1b      	ldr	r3, [pc, #108]	; (8006a50 <HAL_RCC_OscConfig+0x478>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e6:	f7fc fe6b 	bl	80036c0 <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ec:	e008      	b.n	8006a00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ee:	f7fc fe67 	bl	80036c0 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e05c      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a00:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0f0      	beq.n	80069ee <HAL_RCC_OscConfig+0x416>
 8006a0c:	e054      	b.n	8006ab8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a0e:	4b10      	ldr	r3, [pc, #64]	; (8006a50 <HAL_RCC_OscConfig+0x478>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a14:	f7fc fe54 	bl	80036c0 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a1c:	f7fc fe50 	bl	80036c0 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e045      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2e:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <HAL_RCC_OscConfig+0x470>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f0      	bne.n	8006a1c <HAL_RCC_OscConfig+0x444>
 8006a3a:	e03d      	b.n	8006ab8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d107      	bne.n	8006a54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e038      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	40007000 	.word	0x40007000
 8006a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a54:	4b1b      	ldr	r3, [pc, #108]	; (8006ac4 <HAL_RCC_OscConfig+0x4ec>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d028      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d121      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d11a      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a84:	4013      	ands	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d111      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	085b      	lsrs	r3, r3, #1
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d107      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d001      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40023800 	.word	0x40023800

08006ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e0cc      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006adc:	4b68      	ldr	r3, [pc, #416]	; (8006c80 <HAL_RCC_ClockConfig+0x1b8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d90c      	bls.n	8006b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aea:	4b65      	ldr	r3, [pc, #404]	; (8006c80 <HAL_RCC_ClockConfig+0x1b8>)
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006af2:	4b63      	ldr	r3, [pc, #396]	; (8006c80 <HAL_RCC_ClockConfig+0x1b8>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d001      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e0b8      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d020      	beq.n	8006b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b1c:	4b59      	ldr	r3, [pc, #356]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	4a58      	ldr	r2, [pc, #352]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0308 	and.w	r3, r3, #8
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b34:	4b53      	ldr	r3, [pc, #332]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4a52      	ldr	r2, [pc, #328]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b40:	4b50      	ldr	r3, [pc, #320]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	494d      	ldr	r1, [pc, #308]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d044      	beq.n	8006be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d107      	bne.n	8006b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b66:	4b47      	ldr	r3, [pc, #284]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d119      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e07f      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d003      	beq.n	8006b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d107      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b86:	4b3f      	ldr	r3, [pc, #252]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e06f      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b96:	4b3b      	ldr	r3, [pc, #236]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e067      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ba6:	4b37      	ldr	r3, [pc, #220]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f023 0203 	bic.w	r2, r3, #3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	4934      	ldr	r1, [pc, #208]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bb8:	f7fc fd82 	bl	80036c0 <HAL_GetTick>
 8006bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bbe:	e00a      	b.n	8006bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bc0:	f7fc fd7e 	bl	80036c0 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e04f      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bd6:	4b2b      	ldr	r3, [pc, #172]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f003 020c 	and.w	r2, r3, #12
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d1eb      	bne.n	8006bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006be8:	4b25      	ldr	r3, [pc, #148]	; (8006c80 <HAL_RCC_ClockConfig+0x1b8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d20c      	bcs.n	8006c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bf6:	4b22      	ldr	r3, [pc, #136]	; (8006c80 <HAL_RCC_ClockConfig+0x1b8>)
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfe:	4b20      	ldr	r3, [pc, #128]	; (8006c80 <HAL_RCC_ClockConfig+0x1b8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d001      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e032      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d008      	beq.n	8006c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c1c:	4b19      	ldr	r3, [pc, #100]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	4916      	ldr	r1, [pc, #88]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c3a:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	490e      	ldr	r1, [pc, #56]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c4e:	f000 f821 	bl	8006c94 <HAL_RCC_GetSysClockFreq>
 8006c52:	4602      	mov	r2, r0
 8006c54:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	490a      	ldr	r1, [pc, #40]	; (8006c88 <HAL_RCC_ClockConfig+0x1c0>)
 8006c60:	5ccb      	ldrb	r3, [r1, r3]
 8006c62:	fa22 f303 	lsr.w	r3, r2, r3
 8006c66:	4a09      	ldr	r2, [pc, #36]	; (8006c8c <HAL_RCC_ClockConfig+0x1c4>)
 8006c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c6a:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <HAL_RCC_ClockConfig+0x1c8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fc fce2 	bl	8003638 <HAL_InitTick>

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40023c00 	.word	0x40023c00
 8006c84:	40023800 	.word	0x40023800
 8006c88:	0800dd00 	.word	0x0800dd00
 8006c8c:	20000000 	.word	0x20000000
 8006c90:	20000004 	.word	0x20000004

08006c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c98:	b094      	sub	sp, #80	; 0x50
 8006c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cac:	4b79      	ldr	r3, [pc, #484]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 030c 	and.w	r3, r3, #12
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d00d      	beq.n	8006cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	f200 80e1 	bhi.w	8006e80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d003      	beq.n	8006cce <HAL_RCC_GetSysClockFreq+0x3a>
 8006cc6:	e0db      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cc8:	4b73      	ldr	r3, [pc, #460]	; (8006e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ccc:	e0db      	b.n	8006e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cce:	4b73      	ldr	r3, [pc, #460]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x208>)
 8006cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cd2:	e0d8      	b.n	8006e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cd4:	4b6f      	ldr	r3, [pc, #444]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cdc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cde:	4b6d      	ldr	r3, [pc, #436]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d063      	beq.n	8006db2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cea:	4b6a      	ldr	r3, [pc, #424]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	099b      	lsrs	r3, r3, #6
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8006cfe:	2300      	movs	r3, #0
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
 8006d02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006d06:	4622      	mov	r2, r4
 8006d08:	462b      	mov	r3, r5
 8006d0a:	f04f 0000 	mov.w	r0, #0
 8006d0e:	f04f 0100 	mov.w	r1, #0
 8006d12:	0159      	lsls	r1, r3, #5
 8006d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d18:	0150      	lsls	r0, r2, #5
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4621      	mov	r1, r4
 8006d20:	1a51      	subs	r1, r2, r1
 8006d22:	6139      	str	r1, [r7, #16]
 8006d24:	4629      	mov	r1, r5
 8006d26:	eb63 0301 	sbc.w	r3, r3, r1
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	f04f 0200 	mov.w	r2, #0
 8006d30:	f04f 0300 	mov.w	r3, #0
 8006d34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d38:	4659      	mov	r1, fp
 8006d3a:	018b      	lsls	r3, r1, #6
 8006d3c:	4651      	mov	r1, sl
 8006d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d42:	4651      	mov	r1, sl
 8006d44:	018a      	lsls	r2, r1, #6
 8006d46:	4651      	mov	r1, sl
 8006d48:	ebb2 0801 	subs.w	r8, r2, r1
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	eb63 0901 	sbc.w	r9, r3, r1
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	f04f 0300 	mov.w	r3, #0
 8006d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d66:	4690      	mov	r8, r2
 8006d68:	4699      	mov	r9, r3
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	eb18 0303 	adds.w	r3, r8, r3
 8006d70:	60bb      	str	r3, [r7, #8]
 8006d72:	462b      	mov	r3, r5
 8006d74:	eb49 0303 	adc.w	r3, r9, r3
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d86:	4629      	mov	r1, r5
 8006d88:	024b      	lsls	r3, r1, #9
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d90:	4621      	mov	r1, r4
 8006d92:	024a      	lsls	r2, r1, #9
 8006d94:	4610      	mov	r0, r2
 8006d96:	4619      	mov	r1, r3
 8006d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006da0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006da4:	f7f9 fe52 	bl	8000a4c <__aeabi_uldivmod>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4613      	mov	r3, r2
 8006dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006db0:	e058      	b.n	8006e64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006db2:	4b38      	ldr	r3, [pc, #224]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	099b      	lsrs	r3, r3, #6
 8006db8:	2200      	movs	r2, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006dc2:	623b      	str	r3, [r7, #32]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006dcc:	4642      	mov	r2, r8
 8006dce:	464b      	mov	r3, r9
 8006dd0:	f04f 0000 	mov.w	r0, #0
 8006dd4:	f04f 0100 	mov.w	r1, #0
 8006dd8:	0159      	lsls	r1, r3, #5
 8006dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dde:	0150      	lsls	r0, r2, #5
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4641      	mov	r1, r8
 8006de6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006dea:	4649      	mov	r1, r9
 8006dec:	eb63 0b01 	sbc.w	fp, r3, r1
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e04:	ebb2 040a 	subs.w	r4, r2, sl
 8006e08:	eb63 050b 	sbc.w	r5, r3, fp
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	00eb      	lsls	r3, r5, #3
 8006e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e1a:	00e2      	lsls	r2, r4, #3
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	461d      	mov	r5, r3
 8006e20:	4643      	mov	r3, r8
 8006e22:	18e3      	adds	r3, r4, r3
 8006e24:	603b      	str	r3, [r7, #0]
 8006e26:	464b      	mov	r3, r9
 8006e28:	eb45 0303 	adc.w	r3, r5, r3
 8006e2c:	607b      	str	r3, [r7, #4]
 8006e2e:	f04f 0200 	mov.w	r2, #0
 8006e32:	f04f 0300 	mov.w	r3, #0
 8006e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	028b      	lsls	r3, r1, #10
 8006e3e:	4621      	mov	r1, r4
 8006e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e44:	4621      	mov	r1, r4
 8006e46:	028a      	lsls	r2, r1, #10
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e4e:	2200      	movs	r2, #0
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	61fa      	str	r2, [r7, #28]
 8006e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e58:	f7f9 fdf8 	bl	8000a4c <__aeabi_uldivmod>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4613      	mov	r3, r2
 8006e62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e64:	4b0b      	ldr	r3, [pc, #44]	; (8006e94 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	0c1b      	lsrs	r3, r3, #16
 8006e6a:	f003 0303 	and.w	r3, r3, #3
 8006e6e:	3301      	adds	r3, #1
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006e74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e7e:	e002      	b.n	8006e86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3750      	adds	r7, #80	; 0x50
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e92:	bf00      	nop
 8006e94:	40023800 	.word	0x40023800
 8006e98:	00f42400 	.word	0x00f42400
 8006e9c:	007a1200 	.word	0x007a1200

08006ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ea4:	4b03      	ldr	r3, [pc, #12]	; (8006eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	20000000 	.word	0x20000000

08006eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ebc:	f7ff fff0 	bl	8006ea0 <HAL_RCC_GetHCLKFreq>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	4b05      	ldr	r3, [pc, #20]	; (8006ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	0a9b      	lsrs	r3, r3, #10
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	4903      	ldr	r1, [pc, #12]	; (8006edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ece:	5ccb      	ldrb	r3, [r1, r3]
 8006ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40023800 	.word	0x40023800
 8006edc:	0800dd10 	.word	0x0800dd10

08006ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ee4:	f7ff ffdc 	bl	8006ea0 <HAL_RCC_GetHCLKFreq>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	0b5b      	lsrs	r3, r3, #13
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	4903      	ldr	r1, [pc, #12]	; (8006f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ef6:	5ccb      	ldrb	r3, [r1, r3]
 8006ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40023800 	.word	0x40023800
 8006f04:	0800dd10 	.word	0x0800dd10

08006f08 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d105      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d035      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f30:	4b62      	ldr	r3, [pc, #392]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f36:	f7fc fbc3 	bl	80036c0 <HAL_GetTick>
 8006f3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f3e:	f7fc fbbf 	bl	80036c0 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e0b0      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f50:	4b5b      	ldr	r3, [pc, #364]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1f0      	bne.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	019a      	lsls	r2, r3, #6
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	071b      	lsls	r3, r3, #28
 8006f68:	4955      	ldr	r1, [pc, #340]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f70:	4b52      	ldr	r3, [pc, #328]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006f72:	2201      	movs	r2, #1
 8006f74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f76:	f7fc fba3 	bl	80036c0 <HAL_GetTick>
 8006f7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f7c:	e008      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f7e:	f7fc fb9f 	bl	80036c0 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d901      	bls.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e090      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f90:	4b4b      	ldr	r3, [pc, #300]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0f0      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8083 	beq.w	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	4b44      	ldr	r3, [pc, #272]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	4a43      	ldr	r2, [pc, #268]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8006fba:	4b41      	ldr	r3, [pc, #260]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006fc6:	4b3f      	ldr	r3, [pc, #252]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a3e      	ldr	r2, [pc, #248]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006fd2:	f7fc fb75 	bl	80036c0 <HAL_GetTick>
 8006fd6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006fd8:	e008      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006fda:	f7fc fb71 	bl	80036c0 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e062      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006fec:	4b35      	ldr	r3, [pc, #212]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0f0      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ff8:	4b31      	ldr	r3, [pc, #196]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007000:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d02f      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	429a      	cmp	r2, r3
 8007014:	d028      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007016:	4b2a      	ldr	r3, [pc, #168]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007020:	4b29      	ldr	r3, [pc, #164]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007026:	4b28      	ldr	r3, [pc, #160]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800702c:	4a24      	ldr	r2, [pc, #144]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007032:	4b23      	ldr	r3, [pc, #140]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b01      	cmp	r3, #1
 800703c:	d114      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800703e:	f7fc fb3f 	bl	80036c0 <HAL_GetTick>
 8007042:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007044:	e00a      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007046:	f7fc fb3b 	bl	80036c0 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	f241 3288 	movw	r2, #5000	; 0x1388
 8007054:	4293      	cmp	r3, r2
 8007056:	d901      	bls.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e02a      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800705c:	4b18      	ldr	r3, [pc, #96]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800705e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0ee      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007074:	d10d      	bne.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007076:	4b12      	ldr	r3, [pc, #72]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800708a:	490d      	ldr	r1, [pc, #52]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800708c:	4313      	orrs	r3, r2
 800708e:	608b      	str	r3, [r1, #8]
 8007090:	e005      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007092:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	4a0a      	ldr	r2, [pc, #40]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007098:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800709c:	6093      	str	r3, [r2, #8]
 800709e:	4b08      	ldr	r3, [pc, #32]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070aa:	4905      	ldr	r1, [pc, #20]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	42470068 	.word	0x42470068
 80070c0:	40023800 	.word	0x40023800
 80070c4:	40007000 	.word	0x40007000
 80070c8:	42470e40 	.word	0x42470e40

080070cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d13e      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80070ea:	4b23      	ldr	r3, [pc, #140]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d005      	beq.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d12f      	bne.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007100:	4b1e      	ldr	r3, [pc, #120]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007102:	617b      	str	r3, [r7, #20]
          break;
 8007104:	e02f      	b.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007106:	4b1c      	ldr	r3, [pc, #112]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800710e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007112:	d108      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007114:	4b18      	ldr	r3, [pc, #96]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800711c:	4a18      	ldr	r2, [pc, #96]	; (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800711e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007122:	613b      	str	r3, [r7, #16]
 8007124:	e007      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007126:	4b14      	ldr	r3, [pc, #80]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800712e:	4a15      	ldr	r2, [pc, #84]	; (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007130:	fbb2 f3f3 	udiv	r3, r2, r3
 8007134:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007136:	4b10      	ldr	r3, [pc, #64]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800713c:	099b      	lsrs	r3, r3, #6
 800713e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	fb02 f303 	mul.w	r3, r2, r3
 8007148:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800714a:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800714c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007150:	0f1b      	lsrs	r3, r3, #28
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	fbb2 f3f3 	udiv	r3, r2, r3
 800715c:	617b      	str	r3, [r7, #20]
          break;
 800715e:	e002      	b.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]
          break;
 8007164:	bf00      	nop
        }
      }
      break;
 8007166:	bf00      	nop
    }
  }
  return frequency;
 8007168:	697b      	ldr	r3, [r7, #20]
}
 800716a:	4618      	mov	r0, r3
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40023800 	.word	0x40023800
 800717c:	00bb8000 	.word	0x00bb8000
 8007180:	007a1200 	.word	0x007a1200
 8007184:	00f42400 	.word	0x00f42400

08007188 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e07b      	b.n	8007292 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d108      	bne.n	80071b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071aa:	d009      	beq.n	80071c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	61da      	str	r2, [r3, #28]
 80071b2:	e005      	b.n	80071c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d106      	bne.n	80071e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fb ff7a 	bl	80030d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007208:	431a      	orrs	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	431a      	orrs	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	431a      	orrs	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007230:	431a      	orrs	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007244:	ea42 0103 	orr.w	r1, r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	0c1b      	lsrs	r3, r3, #16
 800725e:	f003 0104 	and.w	r1, r3, #4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	f003 0210 	and.w	r2, r3, #16
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	69da      	ldr	r2, [r3, #28]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007280:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b08c      	sub	sp, #48	; 0x30
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072a8:	2301      	movs	r3, #1
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_SPI_TransmitReceive+0x26>
 80072bc:	2302      	movs	r3, #2
 80072be:	e18a      	b.n	80075d6 <HAL_SPI_TransmitReceive+0x33c>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072c8:	f7fc f9fa 	bl	80036c0 <HAL_GetTick>
 80072cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80072de:	887b      	ldrh	r3, [r7, #2]
 80072e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d00f      	beq.n	800730a <HAL_SPI_TransmitReceive+0x70>
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072f0:	d107      	bne.n	8007302 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d103      	bne.n	8007302 <HAL_SPI_TransmitReceive+0x68>
 80072fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d003      	beq.n	800730a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007302:	2302      	movs	r3, #2
 8007304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007308:	e15b      	b.n	80075c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <HAL_SPI_TransmitReceive+0x82>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <HAL_SPI_TransmitReceive+0x82>
 8007316:	887b      	ldrh	r3, [r7, #2]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d103      	bne.n	8007324 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007322:	e14e      	b.n	80075c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b04      	cmp	r3, #4
 800732e:	d003      	beq.n	8007338 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2205      	movs	r2, #5
 8007334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	887a      	ldrh	r2, [r7, #2]
 8007348:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	887a      	ldrh	r2, [r7, #2]
 800734e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	887a      	ldrh	r2, [r7, #2]
 800735a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	887a      	ldrh	r2, [r7, #2]
 8007360:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007378:	2b40      	cmp	r3, #64	; 0x40
 800737a:	d007      	beq.n	800738c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800738a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007394:	d178      	bne.n	8007488 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <HAL_SPI_TransmitReceive+0x10a>
 800739e:	8b7b      	ldrh	r3, [r7, #26]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d166      	bne.n	8007472 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	881a      	ldrh	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b4:	1c9a      	adds	r2, r3, #2
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073be:	b29b      	uxth	r3, r3
 80073c0:	3b01      	subs	r3, #1
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073c8:	e053      	b.n	8007472 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d11b      	bne.n	8007410 <HAL_SPI_TransmitReceive+0x176>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d016      	beq.n	8007410 <HAL_SPI_TransmitReceive+0x176>
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d113      	bne.n	8007410 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	881a      	ldrh	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f8:	1c9a      	adds	r2, r3, #2
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007402:	b29b      	uxth	r3, r3
 8007404:	3b01      	subs	r3, #1
 8007406:	b29a      	uxth	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b01      	cmp	r3, #1
 800741c:	d119      	bne.n	8007452 <HAL_SPI_TransmitReceive+0x1b8>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d014      	beq.n	8007452 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007432:	b292      	uxth	r2, r2
 8007434:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743a:	1c9a      	adds	r2, r3, #2
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007444:	b29b      	uxth	r3, r3
 8007446:	3b01      	subs	r3, #1
 8007448:	b29a      	uxth	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800744e:	2301      	movs	r3, #1
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007452:	f7fc f935 	bl	80036c0 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800745e:	429a      	cmp	r2, r3
 8007460:	d807      	bhi.n	8007472 <HAL_SPI_TransmitReceive+0x1d8>
 8007462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d003      	beq.n	8007472 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007470:	e0a7      	b.n	80075c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1a6      	bne.n	80073ca <HAL_SPI_TransmitReceive+0x130>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007480:	b29b      	uxth	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1a1      	bne.n	80073ca <HAL_SPI_TransmitReceive+0x130>
 8007486:	e07c      	b.n	8007582 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <HAL_SPI_TransmitReceive+0x1fc>
 8007490:	8b7b      	ldrh	r3, [r7, #26]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d16b      	bne.n	800756e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	330c      	adds	r3, #12
 80074a0:	7812      	ldrb	r2, [r2, #0]
 80074a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074bc:	e057      	b.n	800756e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d11c      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x26c>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d017      	beq.n	8007506 <HAL_SPI_TransmitReceive+0x26c>
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d114      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	330c      	adds	r3, #12
 80074e6:	7812      	ldrb	r2, [r2, #0]
 80074e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b01      	cmp	r3, #1
 8007512:	d119      	bne.n	8007548 <HAL_SPI_TransmitReceive+0x2ae>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d014      	beq.n	8007548 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800753a:	b29b      	uxth	r3, r3
 800753c:	3b01      	subs	r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007544:	2301      	movs	r3, #1
 8007546:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007548:	f7fc f8ba 	bl	80036c0 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007554:	429a      	cmp	r2, r3
 8007556:	d803      	bhi.n	8007560 <HAL_SPI_TransmitReceive+0x2c6>
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755e:	d102      	bne.n	8007566 <HAL_SPI_TransmitReceive+0x2cc>
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	2b00      	cmp	r3, #0
 8007564:	d103      	bne.n	800756e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800756c:	e029      	b.n	80075c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007572:	b29b      	uxth	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1a2      	bne.n	80074be <HAL_SPI_TransmitReceive+0x224>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d19d      	bne.n	80074be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 f9d0 	bl	800792c <SPI_EndRxTxTransaction>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d006      	beq.n	80075a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2220      	movs	r2, #32
 800759c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800759e:	e010      	b.n	80075c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075a8:	2300      	movs	r3, #0
 80075aa:	617b      	str	r3, [r7, #20]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	e000      	b.n	80075c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80075c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3730      	adds	r7, #48	; 0x30
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	099b      	lsrs	r3, r3, #6
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10f      	bne.n	8007624 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	099b      	lsrs	r3, r3, #6
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d004      	beq.n	8007624 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
    return;
 8007622:	e0d7      	b.n	80077d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	085b      	lsrs	r3, r3, #1
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00a      	beq.n	8007646 <HAL_SPI_IRQHandler+0x66>
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	09db      	lsrs	r3, r3, #7
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d004      	beq.n	8007646 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	4798      	blx	r3
    return;
 8007644:	e0c6      	b.n	80077d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	095b      	lsrs	r3, r3, #5
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10c      	bne.n	800766c <HAL_SPI_IRQHandler+0x8c>
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	099b      	lsrs	r3, r3, #6
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	0a1b      	lsrs	r3, r3, #8
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80b4 	beq.w	80077d4 <HAL_SPI_IRQHandler+0x1f4>
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	095b      	lsrs	r3, r3, #5
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 80ad 	beq.w	80077d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	099b      	lsrs	r3, r3, #6
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d023      	beq.n	80076ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b03      	cmp	r3, #3
 8007690:	d011      	beq.n	80076b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007696:	f043 0204 	orr.w	r2, r3, #4
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	617b      	str	r3, [r7, #20]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	e00b      	b.n	80076ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076b6:	2300      	movs	r3, #0
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	613b      	str	r3, [r7, #16]
 80076ca:	693b      	ldr	r3, [r7, #16]
        return;
 80076cc:	e082      	b.n	80077d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	095b      	lsrs	r3, r3, #5
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d014      	beq.n	8007704 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076de:	f043 0201 	orr.w	r2, r3, #1
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	0a1b      	lsrs	r3, r3, #8
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00c      	beq.n	800772a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007714:	f043 0208 	orr.w	r2, r3, #8
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800771c:	2300      	movs	r3, #0
 800771e:	60bb      	str	r3, [r7, #8]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	60bb      	str	r3, [r7, #8]
 8007728:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772e:	2b00      	cmp	r3, #0
 8007730:	d04f      	beq.n	80077d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007740:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	f003 0302 	and.w	r3, r3, #2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d104      	bne.n	800775e <HAL_SPI_IRQHandler+0x17e>
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d034      	beq.n	80077c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0203 	bic.w	r2, r2, #3
 800776c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007772:	2b00      	cmp	r3, #0
 8007774:	d011      	beq.n	800779a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777a:	4a18      	ldr	r2, [pc, #96]	; (80077dc <HAL_SPI_IRQHandler+0x1fc>)
 800777c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007782:	4618      	mov	r0, r3
 8007784:	f7fc fa54 	bl	8003c30 <HAL_DMA_Abort_IT>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d005      	beq.n	800779a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007792:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d016      	beq.n	80077d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a6:	4a0d      	ldr	r2, [pc, #52]	; (80077dc <HAL_SPI_IRQHandler+0x1fc>)
 80077a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fc fa3e 	bl	8003c30 <HAL_DMA_Abort_IT>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00a      	beq.n	80077d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80077c6:	e003      	b.n	80077d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f809 	bl	80077e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80077ce:	e000      	b.n	80077d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80077d0:	bf00      	nop
    return;
 80077d2:	bf00      	nop
  }
}
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	080077f5 	.word	0x080077f5

080077e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f7ff ffe6 	bl	80077e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	4613      	mov	r3, r2
 800782a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800782c:	f7fb ff48 	bl	80036c0 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	4413      	add	r3, r2
 800783a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800783c:	f7fb ff40 	bl	80036c0 <HAL_GetTick>
 8007840:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007842:	4b39      	ldr	r3, [pc, #228]	; (8007928 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	015b      	lsls	r3, r3, #5
 8007848:	0d1b      	lsrs	r3, r3, #20
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	fb02 f303 	mul.w	r3, r2, r3
 8007850:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007852:	e054      	b.n	80078fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d050      	beq.n	80078fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800785c:	f7fb ff30 	bl	80036c0 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	429a      	cmp	r2, r3
 800786a:	d902      	bls.n	8007872 <SPI_WaitFlagStateUntilTimeout+0x56>
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d13d      	bne.n	80078ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800788a:	d111      	bne.n	80078b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007894:	d004      	beq.n	80078a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800789e:	d107      	bne.n	80078b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b8:	d10f      	bne.n	80078da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e017      	b.n	800791e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d101      	bne.n	80078f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4013      	ands	r3, r2
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	429a      	cmp	r2, r3
 800790c:	bf0c      	ite	eq
 800790e:	2301      	moveq	r3, #1
 8007910:	2300      	movne	r3, #0
 8007912:	b2db      	uxtb	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	429a      	cmp	r2, r3
 800791a:	d19b      	bne.n	8007854 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3720      	adds	r7, #32
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20000000 	.word	0x20000000

0800792c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af02      	add	r7, sp, #8
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007938:	4b1b      	ldr	r3, [pc, #108]	; (80079a8 <SPI_EndRxTxTransaction+0x7c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a1b      	ldr	r2, [pc, #108]	; (80079ac <SPI_EndRxTxTransaction+0x80>)
 800793e:	fba2 2303 	umull	r2, r3, r2, r3
 8007942:	0d5b      	lsrs	r3, r3, #21
 8007944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007948:	fb02 f303 	mul.w	r3, r2, r3
 800794c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007956:	d112      	bne.n	800797e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2200      	movs	r2, #0
 8007960:	2180      	movs	r1, #128	; 0x80
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f7ff ff5a 	bl	800781c <SPI_WaitFlagStateUntilTimeout>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d016      	beq.n	800799c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007972:	f043 0220 	orr.w	r2, r3, #32
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e00f      	b.n	800799e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00a      	beq.n	800799a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	3b01      	subs	r3, #1
 8007988:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007994:	2b80      	cmp	r3, #128	; 0x80
 8007996:	d0f2      	beq.n	800797e <SPI_EndRxTxTransaction+0x52>
 8007998:	e000      	b.n	800799c <SPI_EndRxTxTransaction+0x70>
        break;
 800799a:	bf00      	nop
  }

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20000000 	.word	0x20000000
 80079ac:	165e9f81 	.word	0x165e9f81

080079b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e041      	b.n	8007a46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7fb fc66 	bl	80032a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4619      	mov	r1, r3
 80079ee:	4610      	mov	r0, r2
 80079f0:	f000 f896 	bl	8007b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d001      	beq.n	8007a68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e046      	b.n	8007af6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a23      	ldr	r2, [pc, #140]	; (8007b04 <HAL_TIM_Base_Start+0xb4>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d022      	beq.n	8007ac0 <HAL_TIM_Base_Start+0x70>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a82:	d01d      	beq.n	8007ac0 <HAL_TIM_Base_Start+0x70>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a1f      	ldr	r2, [pc, #124]	; (8007b08 <HAL_TIM_Base_Start+0xb8>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d018      	beq.n	8007ac0 <HAL_TIM_Base_Start+0x70>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1e      	ldr	r2, [pc, #120]	; (8007b0c <HAL_TIM_Base_Start+0xbc>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d013      	beq.n	8007ac0 <HAL_TIM_Base_Start+0x70>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a1c      	ldr	r2, [pc, #112]	; (8007b10 <HAL_TIM_Base_Start+0xc0>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00e      	beq.n	8007ac0 <HAL_TIM_Base_Start+0x70>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a1b      	ldr	r2, [pc, #108]	; (8007b14 <HAL_TIM_Base_Start+0xc4>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d009      	beq.n	8007ac0 <HAL_TIM_Base_Start+0x70>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a19      	ldr	r2, [pc, #100]	; (8007b18 <HAL_TIM_Base_Start+0xc8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d004      	beq.n	8007ac0 <HAL_TIM_Base_Start+0x70>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a18      	ldr	r2, [pc, #96]	; (8007b1c <HAL_TIM_Base_Start+0xcc>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d111      	bne.n	8007ae4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b06      	cmp	r3, #6
 8007ad0:	d010      	beq.n	8007af4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f042 0201 	orr.w	r2, r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae2:	e007      	b.n	8007af4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	40010000 	.word	0x40010000
 8007b08:	40000400 	.word	0x40000400
 8007b0c:	40000800 	.word	0x40000800
 8007b10:	40000c00 	.word	0x40000c00
 8007b14:	40010400 	.word	0x40010400
 8007b18:	40014000 	.word	0x40014000
 8007b1c:	40001800 	.word	0x40001800

08007b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a40      	ldr	r2, [pc, #256]	; (8007c34 <TIM_Base_SetConfig+0x114>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d013      	beq.n	8007b60 <TIM_Base_SetConfig+0x40>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b3e:	d00f      	beq.n	8007b60 <TIM_Base_SetConfig+0x40>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a3d      	ldr	r2, [pc, #244]	; (8007c38 <TIM_Base_SetConfig+0x118>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d00b      	beq.n	8007b60 <TIM_Base_SetConfig+0x40>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a3c      	ldr	r2, [pc, #240]	; (8007c3c <TIM_Base_SetConfig+0x11c>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d007      	beq.n	8007b60 <TIM_Base_SetConfig+0x40>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a3b      	ldr	r2, [pc, #236]	; (8007c40 <TIM_Base_SetConfig+0x120>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d003      	beq.n	8007b60 <TIM_Base_SetConfig+0x40>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a3a      	ldr	r2, [pc, #232]	; (8007c44 <TIM_Base_SetConfig+0x124>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d108      	bne.n	8007b72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a2f      	ldr	r2, [pc, #188]	; (8007c34 <TIM_Base_SetConfig+0x114>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d02b      	beq.n	8007bd2 <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b80:	d027      	beq.n	8007bd2 <TIM_Base_SetConfig+0xb2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a2c      	ldr	r2, [pc, #176]	; (8007c38 <TIM_Base_SetConfig+0x118>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d023      	beq.n	8007bd2 <TIM_Base_SetConfig+0xb2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a2b      	ldr	r2, [pc, #172]	; (8007c3c <TIM_Base_SetConfig+0x11c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d01f      	beq.n	8007bd2 <TIM_Base_SetConfig+0xb2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a2a      	ldr	r2, [pc, #168]	; (8007c40 <TIM_Base_SetConfig+0x120>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d01b      	beq.n	8007bd2 <TIM_Base_SetConfig+0xb2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a29      	ldr	r2, [pc, #164]	; (8007c44 <TIM_Base_SetConfig+0x124>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d017      	beq.n	8007bd2 <TIM_Base_SetConfig+0xb2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a28      	ldr	r2, [pc, #160]	; (8007c48 <TIM_Base_SetConfig+0x128>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d013      	beq.n	8007bd2 <TIM_Base_SetConfig+0xb2>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a27      	ldr	r2, [pc, #156]	; (8007c4c <TIM_Base_SetConfig+0x12c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00f      	beq.n	8007bd2 <TIM_Base_SetConfig+0xb2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a26      	ldr	r2, [pc, #152]	; (8007c50 <TIM_Base_SetConfig+0x130>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00b      	beq.n	8007bd2 <TIM_Base_SetConfig+0xb2>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a25      	ldr	r2, [pc, #148]	; (8007c54 <TIM_Base_SetConfig+0x134>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d007      	beq.n	8007bd2 <TIM_Base_SetConfig+0xb2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a24      	ldr	r2, [pc, #144]	; (8007c58 <TIM_Base_SetConfig+0x138>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d003      	beq.n	8007bd2 <TIM_Base_SetConfig+0xb2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a23      	ldr	r2, [pc, #140]	; (8007c5c <TIM_Base_SetConfig+0x13c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d108      	bne.n	8007be4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a0a      	ldr	r2, [pc, #40]	; (8007c34 <TIM_Base_SetConfig+0x114>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d003      	beq.n	8007c18 <TIM_Base_SetConfig+0xf8>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a0c      	ldr	r2, [pc, #48]	; (8007c44 <TIM_Base_SetConfig+0x124>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d103      	bne.n	8007c20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	691a      	ldr	r2, [r3, #16]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	615a      	str	r2, [r3, #20]
}
 8007c26:	bf00      	nop
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	40010000 	.word	0x40010000
 8007c38:	40000400 	.word	0x40000400
 8007c3c:	40000800 	.word	0x40000800
 8007c40:	40000c00 	.word	0x40000c00
 8007c44:	40010400 	.word	0x40010400
 8007c48:	40014000 	.word	0x40014000
 8007c4c:	40014400 	.word	0x40014400
 8007c50:	40014800 	.word	0x40014800
 8007c54:	40001800 	.word	0x40001800
 8007c58:	40001c00 	.word	0x40001c00
 8007c5c:	40002000 	.word	0x40002000

08007c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e05a      	b.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a21      	ldr	r2, [pc, #132]	; (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d022      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc4:	d01d      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a1d      	ldr	r2, [pc, #116]	; (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d018      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a1b      	ldr	r2, [pc, #108]	; (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d013      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a1a      	ldr	r2, [pc, #104]	; (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d00e      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a18      	ldr	r2, [pc, #96]	; (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d009      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a17      	ldr	r2, [pc, #92]	; (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d004      	beq.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d10c      	bne.n	8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40010000 	.word	0x40010000
 8007d40:	40000400 	.word	0x40000400
 8007d44:	40000800 	.word	0x40000800
 8007d48:	40000c00 	.word	0x40000c00
 8007d4c:	40010400 	.word	0x40010400
 8007d50:	40014000 	.word	0x40014000
 8007d54:	40001800 	.word	0x40001800

08007d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e03f      	b.n	8007dea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d106      	bne.n	8007d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7fb fab4 	bl	80032ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2224      	movs	r2, #36	; 0x24
 8007d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fdc7 	bl	8008930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691a      	ldr	r2, [r3, #16]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695a      	ldr	r2, [r3, #20]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2220      	movs	r2, #32
 8007de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08c      	sub	sp, #48	; 0x30
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d165      	bne.n	8007eda <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <HAL_UART_Transmit_DMA+0x26>
 8007e14:	88fb      	ldrh	r3, [r7, #6]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e05e      	b.n	8007edc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d101      	bne.n	8007e2c <HAL_UART_Transmit_DMA+0x38>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e057      	b.n	8007edc <HAL_UART_Transmit_DMA+0xe8>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	88fa      	ldrh	r2, [r7, #6]
 8007e3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	88fa      	ldrh	r2, [r7, #6]
 8007e44:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2221      	movs	r2, #33	; 0x21
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e58:	4a22      	ldr	r2, [pc, #136]	; (8007ee4 <HAL_UART_Transmit_DMA+0xf0>)
 8007e5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e60:	4a21      	ldr	r2, [pc, #132]	; (8007ee8 <HAL_UART_Transmit_DMA+0xf4>)
 8007e62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e68:	4a20      	ldr	r2, [pc, #128]	; (8007eec <HAL_UART_Transmit_DMA+0xf8>)
 8007e6a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e70:	2200      	movs	r2, #0
 8007e72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007e74:	f107 0308 	add.w	r3, r7, #8
 8007e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	6819      	ldr	r1, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3304      	adds	r3, #4
 8007e88:	461a      	mov	r2, r3
 8007e8a:	88fb      	ldrh	r3, [r7, #6]
 8007e8c:	f7fb fe08 	bl	8003aa0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e98:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3314      	adds	r3, #20
 8007ea8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	e853 3f00 	ldrex	r3, [r3]
 8007eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3314      	adds	r3, #20
 8007ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ec2:	627a      	str	r2, [r7, #36]	; 0x24
 8007ec4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec6:	6a39      	ldr	r1, [r7, #32]
 8007ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eca:	e841 2300 	strex	r3, r2, [r1]
 8007ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1e5      	bne.n	8007ea2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e000      	b.n	8007edc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007eda:	2302      	movs	r3, #2
  }
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3730      	adds	r7, #48	; 0x30
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	08008461 	.word	0x08008461
 8007ee8:	080084fb 	.word	0x080084fb
 8007eec:	08008517 	.word	0x08008517

08007ef0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b0ba      	sub	sp, #232	; 0xe8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f26:	f003 030f 	and.w	r3, r3, #15
 8007f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10f      	bne.n	8007f56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3a:	f003 0320 	and.w	r3, r3, #32
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d009      	beq.n	8007f56 <HAL_UART_IRQHandler+0x66>
 8007f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f46:	f003 0320 	and.w	r3, r3, #32
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fc32 	bl	80087b8 <UART_Receive_IT>
      return;
 8007f54:	e256      	b.n	8008404 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 80de 	beq.w	800811c <HAL_UART_IRQHandler+0x22c>
 8007f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d106      	bne.n	8007f7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 80d1 	beq.w	800811c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00b      	beq.n	8007f9e <HAL_UART_IRQHandler+0xae>
 8007f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d005      	beq.n	8007f9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f96:	f043 0201 	orr.w	r2, r3, #1
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa2:	f003 0304 	and.w	r3, r3, #4
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00b      	beq.n	8007fc2 <HAL_UART_IRQHandler+0xd2>
 8007faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d005      	beq.n	8007fc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	f043 0202 	orr.w	r2, r3, #2
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <HAL_UART_IRQHandler+0xf6>
 8007fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d005      	beq.n	8007fe6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	f043 0204 	orr.w	r2, r3, #4
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d011      	beq.n	8008016 <HAL_UART_IRQHandler+0x126>
 8007ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d105      	bne.n	800800a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d005      	beq.n	8008016 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800e:	f043 0208 	orr.w	r2, r3, #8
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 81ed 	beq.w	80083fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b00      	cmp	r3, #0
 800802a:	d008      	beq.n	800803e <HAL_UART_IRQHandler+0x14e>
 800802c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008030:	f003 0320 	and.w	r3, r3, #32
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fbbd 	bl	80087b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008048:	2b40      	cmp	r3, #64	; 0x40
 800804a:	bf0c      	ite	eq
 800804c:	2301      	moveq	r3, #1
 800804e:	2300      	movne	r3, #0
 8008050:	b2db      	uxtb	r3, r3
 8008052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d103      	bne.n	800806a <HAL_UART_IRQHandler+0x17a>
 8008062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008066:	2b00      	cmp	r3, #0
 8008068:	d04f      	beq.n	800810a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fac5 	bl	80085fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807a:	2b40      	cmp	r3, #64	; 0x40
 800807c:	d141      	bne.n	8008102 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3314      	adds	r3, #20
 8008084:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008088:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800809c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3314      	adds	r3, #20
 80080a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080ba:	e841 2300 	strex	r3, r2, [r1]
 80080be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1d9      	bne.n	800807e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d013      	beq.n	80080fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d6:	4a7d      	ldr	r2, [pc, #500]	; (80082cc <HAL_UART_IRQHandler+0x3dc>)
 80080d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fb fda6 	bl	8003c30 <HAL_DMA_Abort_IT>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d016      	beq.n	8008118 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080f4:	4610      	mov	r0, r2
 80080f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f8:	e00e      	b.n	8008118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f99a 	bl	8008434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008100:	e00a      	b.n	8008118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f996 	bl	8008434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008108:	e006      	b.n	8008118 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f992 	bl	8008434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008116:	e170      	b.n	80083fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008118:	bf00      	nop
    return;
 800811a:	e16e      	b.n	80083fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008120:	2b01      	cmp	r3, #1
 8008122:	f040 814a 	bne.w	80083ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800812a:	f003 0310 	and.w	r3, r3, #16
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8143 	beq.w	80083ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008138:	f003 0310 	and.w	r3, r3, #16
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 813c 	beq.w	80083ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008142:	2300      	movs	r3, #0
 8008144:	60bb      	str	r3, [r7, #8]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	60bb      	str	r3, [r7, #8]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	60bb      	str	r3, [r7, #8]
 8008156:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008162:	2b40      	cmp	r3, #64	; 0x40
 8008164:	f040 80b4 	bne.w	80082d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008174:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8140 	beq.w	80083fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008186:	429a      	cmp	r2, r3
 8008188:	f080 8139 	bcs.w	80083fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008192:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819e:	f000 8088 	beq.w	80082b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	330c      	adds	r3, #12
 80081a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	330c      	adds	r3, #12
 80081ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80081ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80081d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80081da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80081e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1d9      	bne.n	80081a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3314      	adds	r3, #20
 80081f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008200:	f023 0301 	bic.w	r3, r3, #1
 8008204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3314      	adds	r3, #20
 800820e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008212:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008216:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008218:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800821a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e1      	bne.n	80081ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3314      	adds	r3, #20
 8008230:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800823a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800823c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3314      	adds	r3, #20
 800824a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800824e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008250:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008254:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800825c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e3      	bne.n	800822a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2220      	movs	r2, #32
 8008266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	330c      	adds	r3, #12
 8008276:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008282:	f023 0310 	bic.w	r3, r3, #16
 8008286:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	330c      	adds	r3, #12
 8008290:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008294:	65ba      	str	r2, [r7, #88]	; 0x58
 8008296:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800829a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e3      	bne.n	8008270 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fb fc4f 	bl	8003b50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	b29b      	uxth	r3, r3
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f8c0 	bl	8008448 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082c8:	e099      	b.n	80083fe <HAL_UART_IRQHandler+0x50e>
 80082ca:	bf00      	nop
 80082cc:	080086c1 	.word	0x080086c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082d8:	b29b      	uxth	r3, r3
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 808b 	beq.w	8008402 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80082ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 8086 	beq.w	8008402 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	330c      	adds	r3, #12
 80082fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	e853 3f00 	ldrex	r3, [r3]
 8008304:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800830c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	330c      	adds	r3, #12
 8008316:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800831a:	647a      	str	r2, [r7, #68]	; 0x44
 800831c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008320:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008322:	e841 2300 	strex	r3, r2, [r1]
 8008326:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1e3      	bne.n	80082f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	3314      	adds	r3, #20
 8008334:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	e853 3f00 	ldrex	r3, [r3]
 800833c:	623b      	str	r3, [r7, #32]
   return(result);
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	f023 0301 	bic.w	r3, r3, #1
 8008344:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3314      	adds	r3, #20
 800834e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008352:	633a      	str	r2, [r7, #48]	; 0x30
 8008354:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800835a:	e841 2300 	strex	r3, r2, [r1]
 800835e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1e3      	bne.n	800832e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2220      	movs	r2, #32
 800836a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	330c      	adds	r3, #12
 800837a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	60fb      	str	r3, [r7, #12]
   return(result);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0310 	bic.w	r3, r3, #16
 800838a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	330c      	adds	r3, #12
 8008394:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008398:	61fa      	str	r2, [r7, #28]
 800839a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839c:	69b9      	ldr	r1, [r7, #24]
 800839e:	69fa      	ldr	r2, [r7, #28]
 80083a0:	e841 2300 	strex	r3, r2, [r1]
 80083a4:	617b      	str	r3, [r7, #20]
   return(result);
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1e3      	bne.n	8008374 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f848 	bl	8008448 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083b8:	e023      	b.n	8008402 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80083ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d009      	beq.n	80083da <HAL_UART_IRQHandler+0x4ea>
 80083c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f988 	bl	80086e8 <UART_Transmit_IT>
    return;
 80083d8:	e014      	b.n	8008404 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80083da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00e      	beq.n	8008404 <HAL_UART_IRQHandler+0x514>
 80083e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d008      	beq.n	8008404 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f9c8 	bl	8008788 <UART_EndTransmit_IT>
    return;
 80083f8:	e004      	b.n	8008404 <HAL_UART_IRQHandler+0x514>
    return;
 80083fa:	bf00      	nop
 80083fc:	e002      	b.n	8008404 <HAL_UART_IRQHandler+0x514>
      return;
 80083fe:	bf00      	nop
 8008400:	e000      	b.n	8008404 <HAL_UART_IRQHandler+0x514>
      return;
 8008402:	bf00      	nop
  }
}
 8008404:	37e8      	adds	r7, #232	; 0xe8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop

0800840c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b090      	sub	sp, #64	; 0x40
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008478:	2b00      	cmp	r3, #0
 800847a:	d137      	bne.n	80084ec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800847c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800847e:	2200      	movs	r2, #0
 8008480:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3314      	adds	r3, #20
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	623b      	str	r3, [r7, #32]
   return(result);
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008498:	63bb      	str	r3, [r7, #56]	; 0x38
 800849a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3314      	adds	r3, #20
 80084a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084a2:	633a      	str	r2, [r7, #48]	; 0x30
 80084a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084aa:	e841 2300 	strex	r3, r2, [r1]
 80084ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e5      	bne.n	8008482 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	330c      	adds	r3, #12
 80084bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	e853 3f00 	ldrex	r3, [r3]
 80084c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084cc:	637b      	str	r3, [r7, #52]	; 0x34
 80084ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	330c      	adds	r3, #12
 80084d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084d6:	61fa      	str	r2, [r7, #28]
 80084d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084da:	69b9      	ldr	r1, [r7, #24]
 80084dc:	69fa      	ldr	r2, [r7, #28]
 80084de:	e841 2300 	strex	r3, r2, [r1]
 80084e2:	617b      	str	r3, [r7, #20]
   return(result);
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1e5      	bne.n	80084b6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084ea:	e002      	b.n	80084f2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80084ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80084ee:	f7f8 fccb 	bl	8000e88 <HAL_UART_TxCpltCallback>
}
 80084f2:	bf00      	nop
 80084f4:	3740      	adds	r7, #64	; 0x40
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008506:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f7ff ff7f 	bl	800840c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800850e:	bf00      	nop
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008532:	2b80      	cmp	r3, #128	; 0x80
 8008534:	bf0c      	ite	eq
 8008536:	2301      	moveq	r3, #1
 8008538:	2300      	movne	r3, #0
 800853a:	b2db      	uxtb	r3, r3
 800853c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b21      	cmp	r3, #33	; 0x21
 8008548:	d108      	bne.n	800855c <UART_DMAError+0x46>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d005      	beq.n	800855c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2200      	movs	r2, #0
 8008554:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008556:	68b8      	ldr	r0, [r7, #8]
 8008558:	f000 f827 	bl	80085aa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008566:	2b40      	cmp	r3, #64	; 0x40
 8008568:	bf0c      	ite	eq
 800856a:	2301      	moveq	r3, #1
 800856c:	2300      	movne	r3, #0
 800856e:	b2db      	uxtb	r3, r3
 8008570:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b22      	cmp	r3, #34	; 0x22
 800857c:	d108      	bne.n	8008590 <UART_DMAError+0x7a>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2200      	movs	r2, #0
 8008588:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800858a:	68b8      	ldr	r0, [r7, #8]
 800858c:	f000 f835 	bl	80085fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008594:	f043 0210 	orr.w	r2, r3, #16
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800859c:	68b8      	ldr	r0, [r7, #8]
 800859e:	f7ff ff49 	bl	8008434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085a2:	bf00      	nop
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b089      	sub	sp, #36	; 0x24
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	330c      	adds	r3, #12
 80085b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	330c      	adds	r3, #12
 80085d0:	69fa      	ldr	r2, [r7, #28]
 80085d2:	61ba      	str	r2, [r7, #24]
 80085d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d6:	6979      	ldr	r1, [r7, #20]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	613b      	str	r3, [r7, #16]
   return(result);
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e5      	bne.n	80085b2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2220      	movs	r2, #32
 80085ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80085ee:	bf00      	nop
 80085f0:	3724      	adds	r7, #36	; 0x24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b095      	sub	sp, #84	; 0x54
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	330c      	adds	r3, #12
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	330c      	adds	r3, #12
 8008620:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008622:	643a      	str	r2, [r7, #64]	; 0x40
 8008624:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e5      	bne.n	8008602 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3314      	adds	r3, #20
 800863c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	61fb      	str	r3, [r7, #28]
   return(result);
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	f023 0301 	bic.w	r3, r3, #1
 800864c:	64bb      	str	r3, [r7, #72]	; 0x48
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3314      	adds	r3, #20
 8008654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008656:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008658:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800865c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800865e:	e841 2300 	strex	r3, r2, [r1]
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e5      	bne.n	8008636 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866e:	2b01      	cmp	r3, #1
 8008670:	d119      	bne.n	80086a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	330c      	adds	r3, #12
 8008678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	60bb      	str	r3, [r7, #8]
   return(result);
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f023 0310 	bic.w	r3, r3, #16
 8008688:	647b      	str	r3, [r7, #68]	; 0x44
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	330c      	adds	r3, #12
 8008690:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008692:	61ba      	str	r2, [r7, #24]
 8008694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	6979      	ldr	r1, [r7, #20]
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	613b      	str	r3, [r7, #16]
   return(result);
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e5      	bne.n	8008672 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2220      	movs	r2, #32
 80086aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80086b4:	bf00      	nop
 80086b6:	3754      	adds	r7, #84	; 0x54
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f7ff feaa 	bl	8008434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086e0:	bf00      	nop
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b21      	cmp	r3, #33	; 0x21
 80086fa:	d13e      	bne.n	800877a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008704:	d114      	bne.n	8008730 <UART_Transmit_IT+0x48>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d110      	bne.n	8008730 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008722:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	1c9a      	adds	r2, r3, #2
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	621a      	str	r2, [r3, #32]
 800872e:	e008      	b.n	8008742 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	1c59      	adds	r1, r3, #1
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	6211      	str	r1, [r2, #32]
 800873a:	781a      	ldrb	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008746:	b29b      	uxth	r3, r3
 8008748:	3b01      	subs	r3, #1
 800874a:	b29b      	uxth	r3, r3
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	4619      	mov	r1, r3
 8008750:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10f      	bne.n	8008776 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008764:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68da      	ldr	r2, [r3, #12]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008774:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	e000      	b.n	800877c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800877a:	2302      	movs	r3, #2
  }
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68da      	ldr	r2, [r3, #12]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800879e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7f8 fb6d 	bl	8000e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b08c      	sub	sp, #48	; 0x30
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b22      	cmp	r3, #34	; 0x22
 80087ca:	f040 80ab 	bne.w	8008924 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d6:	d117      	bne.n	8008808 <UART_Receive_IT+0x50>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d113      	bne.n	8008808 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80087e0:	2300      	movs	r3, #0
 80087e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008800:	1c9a      	adds	r2, r3, #2
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	629a      	str	r2, [r3, #40]	; 0x28
 8008806:	e026      	b.n	8008856 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800880e:	2300      	movs	r3, #0
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800881a:	d007      	beq.n	800882c <UART_Receive_IT+0x74>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10a      	bne.n	800883a <UART_Receive_IT+0x82>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d106      	bne.n	800883a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	b2da      	uxtb	r2, r3
 8008834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008836:	701a      	strb	r2, [r3, #0]
 8008838:	e008      	b.n	800884c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	b2db      	uxtb	r3, r3
 8008842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008846:	b2da      	uxtb	r2, r3
 8008848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800885a:	b29b      	uxth	r3, r3
 800885c:	3b01      	subs	r3, #1
 800885e:	b29b      	uxth	r3, r3
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	4619      	mov	r1, r3
 8008864:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008866:	2b00      	cmp	r3, #0
 8008868:	d15a      	bne.n	8008920 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 0220 	bic.w	r2, r2, #32
 8008878:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008888:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	695a      	ldr	r2, [r3, #20]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 0201 	bic.w	r2, r2, #1
 8008898:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2220      	movs	r2, #32
 800889e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d135      	bne.n	8008916 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	330c      	adds	r3, #12
 80088b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	613b      	str	r3, [r7, #16]
   return(result);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f023 0310 	bic.w	r3, r3, #16
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	330c      	adds	r3, #12
 80088ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d0:	623a      	str	r2, [r7, #32]
 80088d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	69f9      	ldr	r1, [r7, #28]
 80088d6:	6a3a      	ldr	r2, [r7, #32]
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e5      	bne.n	80088b0 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0310 	and.w	r3, r3, #16
 80088ee:	2b10      	cmp	r3, #16
 80088f0:	d10a      	bne.n	8008908 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088f2:	2300      	movs	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	60fb      	str	r3, [r7, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff fd9a 	bl	8008448 <HAL_UARTEx_RxEventCallback>
 8008914:	e002      	b.n	800891c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7ff fd82 	bl	8008420 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	e002      	b.n	8008926 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	e000      	b.n	8008926 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008924:	2302      	movs	r3, #2
  }
}
 8008926:	4618      	mov	r0, r3
 8008928:	3730      	adds	r7, #48	; 0x30
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
	...

08008930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008934:	b0c0      	sub	sp, #256	; 0x100
 8008936:	af00      	add	r7, sp, #0
 8008938:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800893c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800894c:	68d9      	ldr	r1, [r3, #12]
 800894e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	ea40 0301 	orr.w	r3, r0, r1
 8008958:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800895a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	431a      	orrs	r2, r3
 8008968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	431a      	orrs	r2, r3
 8008970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	4313      	orrs	r3, r2
 8008978:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800897c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008988:	f021 010c 	bic.w	r1, r1, #12
 800898c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008996:	430b      	orrs	r3, r1
 8008998:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800899a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80089a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089aa:	6999      	ldr	r1, [r3, #24]
 80089ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	ea40 0301 	orr.w	r3, r0, r1
 80089b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	4b8f      	ldr	r3, [pc, #572]	; (8008bfc <UART_SetConfig+0x2cc>)
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d005      	beq.n	80089d0 <UART_SetConfig+0xa0>
 80089c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	4b8d      	ldr	r3, [pc, #564]	; (8008c00 <UART_SetConfig+0x2d0>)
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d104      	bne.n	80089da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80089d0:	f7fe fa86 	bl	8006ee0 <HAL_RCC_GetPCLK2Freq>
 80089d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80089d8:	e003      	b.n	80089e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80089da:	f7fe fa6d 	bl	8006eb8 <HAL_RCC_GetPCLK1Freq>
 80089de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ec:	f040 810c 	bne.w	8008c08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089f4:	2200      	movs	r2, #0
 80089f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80089fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80089fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a02:	4622      	mov	r2, r4
 8008a04:	462b      	mov	r3, r5
 8008a06:	1891      	adds	r1, r2, r2
 8008a08:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a0a:	415b      	adcs	r3, r3
 8008a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a12:	4621      	mov	r1, r4
 8008a14:	eb12 0801 	adds.w	r8, r2, r1
 8008a18:	4629      	mov	r1, r5
 8008a1a:	eb43 0901 	adc.w	r9, r3, r1
 8008a1e:	f04f 0200 	mov.w	r2, #0
 8008a22:	f04f 0300 	mov.w	r3, #0
 8008a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a32:	4690      	mov	r8, r2
 8008a34:	4699      	mov	r9, r3
 8008a36:	4623      	mov	r3, r4
 8008a38:	eb18 0303 	adds.w	r3, r8, r3
 8008a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a40:	462b      	mov	r3, r5
 8008a42:	eb49 0303 	adc.w	r3, r9, r3
 8008a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008a5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008a5e:	460b      	mov	r3, r1
 8008a60:	18db      	adds	r3, r3, r3
 8008a62:	653b      	str	r3, [r7, #80]	; 0x50
 8008a64:	4613      	mov	r3, r2
 8008a66:	eb42 0303 	adc.w	r3, r2, r3
 8008a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8008a6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008a74:	f7f7 ffea 	bl	8000a4c <__aeabi_uldivmod>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4b61      	ldr	r3, [pc, #388]	; (8008c04 <UART_SetConfig+0x2d4>)
 8008a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8008a82:	095b      	lsrs	r3, r3, #5
 8008a84:	011c      	lsls	r4, r3, #4
 8008a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008a94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008a98:	4642      	mov	r2, r8
 8008a9a:	464b      	mov	r3, r9
 8008a9c:	1891      	adds	r1, r2, r2
 8008a9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008aa0:	415b      	adcs	r3, r3
 8008aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008aa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008aa8:	4641      	mov	r1, r8
 8008aaa:	eb12 0a01 	adds.w	sl, r2, r1
 8008aae:	4649      	mov	r1, r9
 8008ab0:	eb43 0b01 	adc.w	fp, r3, r1
 8008ab4:	f04f 0200 	mov.w	r2, #0
 8008ab8:	f04f 0300 	mov.w	r3, #0
 8008abc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ac0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ac4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ac8:	4692      	mov	sl, r2
 8008aca:	469b      	mov	fp, r3
 8008acc:	4643      	mov	r3, r8
 8008ace:	eb1a 0303 	adds.w	r3, sl, r3
 8008ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ad6:	464b      	mov	r3, r9
 8008ad8:	eb4b 0303 	adc.w	r3, fp, r3
 8008adc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008aec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008af0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008af4:	460b      	mov	r3, r1
 8008af6:	18db      	adds	r3, r3, r3
 8008af8:	643b      	str	r3, [r7, #64]	; 0x40
 8008afa:	4613      	mov	r3, r2
 8008afc:	eb42 0303 	adc.w	r3, r2, r3
 8008b00:	647b      	str	r3, [r7, #68]	; 0x44
 8008b02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008b0a:	f7f7 ff9f 	bl	8000a4c <__aeabi_uldivmod>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4611      	mov	r1, r2
 8008b14:	4b3b      	ldr	r3, [pc, #236]	; (8008c04 <UART_SetConfig+0x2d4>)
 8008b16:	fba3 2301 	umull	r2, r3, r3, r1
 8008b1a:	095b      	lsrs	r3, r3, #5
 8008b1c:	2264      	movs	r2, #100	; 0x64
 8008b1e:	fb02 f303 	mul.w	r3, r2, r3
 8008b22:	1acb      	subs	r3, r1, r3
 8008b24:	00db      	lsls	r3, r3, #3
 8008b26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b2a:	4b36      	ldr	r3, [pc, #216]	; (8008c04 <UART_SetConfig+0x2d4>)
 8008b2c:	fba3 2302 	umull	r2, r3, r3, r2
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	005b      	lsls	r3, r3, #1
 8008b34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b38:	441c      	add	r4, r3
 8008b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008b48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008b4c:	4642      	mov	r2, r8
 8008b4e:	464b      	mov	r3, r9
 8008b50:	1891      	adds	r1, r2, r2
 8008b52:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b54:	415b      	adcs	r3, r3
 8008b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b5c:	4641      	mov	r1, r8
 8008b5e:	1851      	adds	r1, r2, r1
 8008b60:	6339      	str	r1, [r7, #48]	; 0x30
 8008b62:	4649      	mov	r1, r9
 8008b64:	414b      	adcs	r3, r1
 8008b66:	637b      	str	r3, [r7, #52]	; 0x34
 8008b68:	f04f 0200 	mov.w	r2, #0
 8008b6c:	f04f 0300 	mov.w	r3, #0
 8008b70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008b74:	4659      	mov	r1, fp
 8008b76:	00cb      	lsls	r3, r1, #3
 8008b78:	4651      	mov	r1, sl
 8008b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b7e:	4651      	mov	r1, sl
 8008b80:	00ca      	lsls	r2, r1, #3
 8008b82:	4610      	mov	r0, r2
 8008b84:	4619      	mov	r1, r3
 8008b86:	4603      	mov	r3, r0
 8008b88:	4642      	mov	r2, r8
 8008b8a:	189b      	adds	r3, r3, r2
 8008b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b90:	464b      	mov	r3, r9
 8008b92:	460a      	mov	r2, r1
 8008b94:	eb42 0303 	adc.w	r3, r2, r3
 8008b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ba8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008bac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	18db      	adds	r3, r3, r3
 8008bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	eb42 0303 	adc.w	r3, r2, r3
 8008bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008bc6:	f7f7 ff41 	bl	8000a4c <__aeabi_uldivmod>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <UART_SetConfig+0x2d4>)
 8008bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8008bd4:	095b      	lsrs	r3, r3, #5
 8008bd6:	2164      	movs	r1, #100	; 0x64
 8008bd8:	fb01 f303 	mul.w	r3, r1, r3
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	3332      	adds	r3, #50	; 0x32
 8008be2:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <UART_SetConfig+0x2d4>)
 8008be4:	fba2 2303 	umull	r2, r3, r2, r3
 8008be8:	095b      	lsrs	r3, r3, #5
 8008bea:	f003 0207 	and.w	r2, r3, #7
 8008bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4422      	add	r2, r4
 8008bf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008bf8:	e105      	b.n	8008e06 <UART_SetConfig+0x4d6>
 8008bfa:	bf00      	nop
 8008bfc:	40011000 	.word	0x40011000
 8008c00:	40011400 	.word	0x40011400
 8008c04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c1a:	4642      	mov	r2, r8
 8008c1c:	464b      	mov	r3, r9
 8008c1e:	1891      	adds	r1, r2, r2
 8008c20:	6239      	str	r1, [r7, #32]
 8008c22:	415b      	adcs	r3, r3
 8008c24:	627b      	str	r3, [r7, #36]	; 0x24
 8008c26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c2a:	4641      	mov	r1, r8
 8008c2c:	1854      	adds	r4, r2, r1
 8008c2e:	4649      	mov	r1, r9
 8008c30:	eb43 0501 	adc.w	r5, r3, r1
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	f04f 0300 	mov.w	r3, #0
 8008c3c:	00eb      	lsls	r3, r5, #3
 8008c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c42:	00e2      	lsls	r2, r4, #3
 8008c44:	4614      	mov	r4, r2
 8008c46:	461d      	mov	r5, r3
 8008c48:	4643      	mov	r3, r8
 8008c4a:	18e3      	adds	r3, r4, r3
 8008c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c50:	464b      	mov	r3, r9
 8008c52:	eb45 0303 	adc.w	r3, r5, r3
 8008c56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c6a:	f04f 0200 	mov.w	r2, #0
 8008c6e:	f04f 0300 	mov.w	r3, #0
 8008c72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008c76:	4629      	mov	r1, r5
 8008c78:	008b      	lsls	r3, r1, #2
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c80:	4621      	mov	r1, r4
 8008c82:	008a      	lsls	r2, r1, #2
 8008c84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008c88:	f7f7 fee0 	bl	8000a4c <__aeabi_uldivmod>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4b60      	ldr	r3, [pc, #384]	; (8008e14 <UART_SetConfig+0x4e4>)
 8008c92:	fba3 2302 	umull	r2, r3, r3, r2
 8008c96:	095b      	lsrs	r3, r3, #5
 8008c98:	011c      	lsls	r4, r3, #4
 8008c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ca4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ca8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008cac:	4642      	mov	r2, r8
 8008cae:	464b      	mov	r3, r9
 8008cb0:	1891      	adds	r1, r2, r2
 8008cb2:	61b9      	str	r1, [r7, #24]
 8008cb4:	415b      	adcs	r3, r3
 8008cb6:	61fb      	str	r3, [r7, #28]
 8008cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cbc:	4641      	mov	r1, r8
 8008cbe:	1851      	adds	r1, r2, r1
 8008cc0:	6139      	str	r1, [r7, #16]
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	414b      	adcs	r3, r1
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	f04f 0200 	mov.w	r2, #0
 8008ccc:	f04f 0300 	mov.w	r3, #0
 8008cd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008cd4:	4659      	mov	r1, fp
 8008cd6:	00cb      	lsls	r3, r1, #3
 8008cd8:	4651      	mov	r1, sl
 8008cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cde:	4651      	mov	r1, sl
 8008ce0:	00ca      	lsls	r2, r1, #3
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	4642      	mov	r2, r8
 8008cea:	189b      	adds	r3, r3, r2
 8008cec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008cf0:	464b      	mov	r3, r9
 8008cf2:	460a      	mov	r2, r1
 8008cf4:	eb42 0303 	adc.w	r3, r2, r3
 8008cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008d08:	f04f 0200 	mov.w	r2, #0
 8008d0c:	f04f 0300 	mov.w	r3, #0
 8008d10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d14:	4649      	mov	r1, r9
 8008d16:	008b      	lsls	r3, r1, #2
 8008d18:	4641      	mov	r1, r8
 8008d1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d1e:	4641      	mov	r1, r8
 8008d20:	008a      	lsls	r2, r1, #2
 8008d22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d26:	f7f7 fe91 	bl	8000a4c <__aeabi_uldivmod>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4b39      	ldr	r3, [pc, #228]	; (8008e14 <UART_SetConfig+0x4e4>)
 8008d30:	fba3 1302 	umull	r1, r3, r3, r2
 8008d34:	095b      	lsrs	r3, r3, #5
 8008d36:	2164      	movs	r1, #100	; 0x64
 8008d38:	fb01 f303 	mul.w	r3, r1, r3
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	011b      	lsls	r3, r3, #4
 8008d40:	3332      	adds	r3, #50	; 0x32
 8008d42:	4a34      	ldr	r2, [pc, #208]	; (8008e14 <UART_SetConfig+0x4e4>)
 8008d44:	fba2 2303 	umull	r2, r3, r2, r3
 8008d48:	095b      	lsrs	r3, r3, #5
 8008d4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d4e:	441c      	add	r4, r3
 8008d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d54:	2200      	movs	r2, #0
 8008d56:	673b      	str	r3, [r7, #112]	; 0x70
 8008d58:	677a      	str	r2, [r7, #116]	; 0x74
 8008d5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008d5e:	4642      	mov	r2, r8
 8008d60:	464b      	mov	r3, r9
 8008d62:	1891      	adds	r1, r2, r2
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	415b      	adcs	r3, r3
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d6e:	4641      	mov	r1, r8
 8008d70:	1851      	adds	r1, r2, r1
 8008d72:	6039      	str	r1, [r7, #0]
 8008d74:	4649      	mov	r1, r9
 8008d76:	414b      	adcs	r3, r1
 8008d78:	607b      	str	r3, [r7, #4]
 8008d7a:	f04f 0200 	mov.w	r2, #0
 8008d7e:	f04f 0300 	mov.w	r3, #0
 8008d82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d86:	4659      	mov	r1, fp
 8008d88:	00cb      	lsls	r3, r1, #3
 8008d8a:	4651      	mov	r1, sl
 8008d8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d90:	4651      	mov	r1, sl
 8008d92:	00ca      	lsls	r2, r1, #3
 8008d94:	4610      	mov	r0, r2
 8008d96:	4619      	mov	r1, r3
 8008d98:	4603      	mov	r3, r0
 8008d9a:	4642      	mov	r2, r8
 8008d9c:	189b      	adds	r3, r3, r2
 8008d9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008da0:	464b      	mov	r3, r9
 8008da2:	460a      	mov	r2, r1
 8008da4:	eb42 0303 	adc.w	r3, r2, r3
 8008da8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	663b      	str	r3, [r7, #96]	; 0x60
 8008db4:	667a      	str	r2, [r7, #100]	; 0x64
 8008db6:	f04f 0200 	mov.w	r2, #0
 8008dba:	f04f 0300 	mov.w	r3, #0
 8008dbe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	008b      	lsls	r3, r1, #2
 8008dc6:	4641      	mov	r1, r8
 8008dc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dcc:	4641      	mov	r1, r8
 8008dce:	008a      	lsls	r2, r1, #2
 8008dd0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008dd4:	f7f7 fe3a 	bl	8000a4c <__aeabi_uldivmod>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4b0d      	ldr	r3, [pc, #52]	; (8008e14 <UART_SetConfig+0x4e4>)
 8008dde:	fba3 1302 	umull	r1, r3, r3, r2
 8008de2:	095b      	lsrs	r3, r3, #5
 8008de4:	2164      	movs	r1, #100	; 0x64
 8008de6:	fb01 f303 	mul.w	r3, r1, r3
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	3332      	adds	r3, #50	; 0x32
 8008df0:	4a08      	ldr	r2, [pc, #32]	; (8008e14 <UART_SetConfig+0x4e4>)
 8008df2:	fba2 2303 	umull	r2, r3, r2, r3
 8008df6:	095b      	lsrs	r3, r3, #5
 8008df8:	f003 020f 	and.w	r2, r3, #15
 8008dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4422      	add	r2, r4
 8008e04:	609a      	str	r2, [r3, #8]
}
 8008e06:	bf00      	nop
 8008e08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e12:	bf00      	nop
 8008e14:	51eb851f 	.word	0x51eb851f

08008e18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e18:	b084      	sub	sp, #16
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	f107 001c 	add.w	r0, r7, #28
 8008e26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d122      	bne.n	8008e76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d105      	bne.n	8008e6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f001 fbee 	bl	800a64c <USB_CoreReset>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]
 8008e74:	e01a      	b.n	8008eac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fbe2 	bl	800a64c <USB_CoreReset>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d106      	bne.n	8008ea0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	639a      	str	r2, [r3, #56]	; 0x38
 8008e9e:	e005      	b.n	8008eac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d10b      	bne.n	8008eca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f043 0206 	orr.w	r2, r3, #6
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f043 0220 	orr.w	r2, r3, #32
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ed6:	b004      	add	sp, #16
 8008ed8:	4770      	bx	lr
	...

08008edc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d165      	bne.n	8008fbc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	4a41      	ldr	r2, [pc, #260]	; (8008ff8 <USB_SetTurnaroundTime+0x11c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d906      	bls.n	8008f06 <USB_SetTurnaroundTime+0x2a>
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	4a40      	ldr	r2, [pc, #256]	; (8008ffc <USB_SetTurnaroundTime+0x120>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d202      	bcs.n	8008f06 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008f00:	230f      	movs	r3, #15
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	e062      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	4a3c      	ldr	r2, [pc, #240]	; (8008ffc <USB_SetTurnaroundTime+0x120>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d306      	bcc.n	8008f1c <USB_SetTurnaroundTime+0x40>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	4a3b      	ldr	r2, [pc, #236]	; (8009000 <USB_SetTurnaroundTime+0x124>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d202      	bcs.n	8008f1c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008f16:	230e      	movs	r3, #14
 8008f18:	617b      	str	r3, [r7, #20]
 8008f1a:	e057      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4a38      	ldr	r2, [pc, #224]	; (8009000 <USB_SetTurnaroundTime+0x124>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d306      	bcc.n	8008f32 <USB_SetTurnaroundTime+0x56>
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	4a37      	ldr	r2, [pc, #220]	; (8009004 <USB_SetTurnaroundTime+0x128>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d202      	bcs.n	8008f32 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008f2c:	230d      	movs	r3, #13
 8008f2e:	617b      	str	r3, [r7, #20]
 8008f30:	e04c      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	4a33      	ldr	r2, [pc, #204]	; (8009004 <USB_SetTurnaroundTime+0x128>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d306      	bcc.n	8008f48 <USB_SetTurnaroundTime+0x6c>
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	4a32      	ldr	r2, [pc, #200]	; (8009008 <USB_SetTurnaroundTime+0x12c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d802      	bhi.n	8008f48 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008f42:	230c      	movs	r3, #12
 8008f44:	617b      	str	r3, [r7, #20]
 8008f46:	e041      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	4a2f      	ldr	r2, [pc, #188]	; (8009008 <USB_SetTurnaroundTime+0x12c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d906      	bls.n	8008f5e <USB_SetTurnaroundTime+0x82>
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4a2e      	ldr	r2, [pc, #184]	; (800900c <USB_SetTurnaroundTime+0x130>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d802      	bhi.n	8008f5e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008f58:	230b      	movs	r3, #11
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	e036      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	4a2a      	ldr	r2, [pc, #168]	; (800900c <USB_SetTurnaroundTime+0x130>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d906      	bls.n	8008f74 <USB_SetTurnaroundTime+0x98>
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	4a29      	ldr	r2, [pc, #164]	; (8009010 <USB_SetTurnaroundTime+0x134>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d802      	bhi.n	8008f74 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008f6e:	230a      	movs	r3, #10
 8008f70:	617b      	str	r3, [r7, #20]
 8008f72:	e02b      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	4a26      	ldr	r2, [pc, #152]	; (8009010 <USB_SetTurnaroundTime+0x134>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d906      	bls.n	8008f8a <USB_SetTurnaroundTime+0xae>
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	4a25      	ldr	r2, [pc, #148]	; (8009014 <USB_SetTurnaroundTime+0x138>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d202      	bcs.n	8008f8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008f84:	2309      	movs	r3, #9
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	e020      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	4a21      	ldr	r2, [pc, #132]	; (8009014 <USB_SetTurnaroundTime+0x138>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d306      	bcc.n	8008fa0 <USB_SetTurnaroundTime+0xc4>
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	4a20      	ldr	r2, [pc, #128]	; (8009018 <USB_SetTurnaroundTime+0x13c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d802      	bhi.n	8008fa0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008f9a:	2308      	movs	r3, #8
 8008f9c:	617b      	str	r3, [r7, #20]
 8008f9e:	e015      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	4a1d      	ldr	r2, [pc, #116]	; (8009018 <USB_SetTurnaroundTime+0x13c>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d906      	bls.n	8008fb6 <USB_SetTurnaroundTime+0xda>
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	4a1c      	ldr	r2, [pc, #112]	; (800901c <USB_SetTurnaroundTime+0x140>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d202      	bcs.n	8008fb6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008fb0:	2307      	movs	r3, #7
 8008fb2:	617b      	str	r3, [r7, #20]
 8008fb4:	e00a      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008fb6:	2306      	movs	r3, #6
 8008fb8:	617b      	str	r3, [r7, #20]
 8008fba:	e007      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008fbc:	79fb      	ldrb	r3, [r7, #7]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d102      	bne.n	8008fc8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008fc2:	2309      	movs	r3, #9
 8008fc4:	617b      	str	r3, [r7, #20]
 8008fc6:	e001      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008fc8:	2309      	movs	r3, #9
 8008fca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	68da      	ldr	r2, [r3, #12]
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	029b      	lsls	r3, r3, #10
 8008fe0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008fe4:	431a      	orrs	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	371c      	adds	r7, #28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	00d8acbf 	.word	0x00d8acbf
 8008ffc:	00e4e1c0 	.word	0x00e4e1c0
 8009000:	00f42400 	.word	0x00f42400
 8009004:	01067380 	.word	0x01067380
 8009008:	011a499f 	.word	0x011a499f
 800900c:	01312cff 	.word	0x01312cff
 8009010:	014ca43f 	.word	0x014ca43f
 8009014:	016e3600 	.word	0x016e3600
 8009018:	01a6ab1f 	.word	0x01a6ab1f
 800901c:	01e84800 	.word	0x01e84800

08009020 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f043 0201 	orr.w	r2, r3, #1
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f023 0201 	bic.w	r2, r3, #1
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d115      	bne.n	80090b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009092:	2001      	movs	r0, #1
 8009094:	f7fa fb20 	bl	80036d8 <HAL_Delay>
      ms++;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3301      	adds	r3, #1
 800909c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 fa45 	bl	800a52e <USB_GetMode>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d01e      	beq.n	80090e8 <USB_SetCurrentMode+0x84>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b31      	cmp	r3, #49	; 0x31
 80090ae:	d9f0      	bls.n	8009092 <USB_SetCurrentMode+0x2e>
 80090b0:	e01a      	b.n	80090e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d115      	bne.n	80090e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090c4:	2001      	movs	r0, #1
 80090c6:	f7fa fb07 	bl	80036d8 <HAL_Delay>
      ms++;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3301      	adds	r3, #1
 80090ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 fa2c 	bl	800a52e <USB_GetMode>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <USB_SetCurrentMode+0x84>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b31      	cmp	r3, #49	; 0x31
 80090e0:	d9f0      	bls.n	80090c4 <USB_SetCurrentMode+0x60>
 80090e2:	e001      	b.n	80090e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e005      	b.n	80090f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b32      	cmp	r3, #50	; 0x32
 80090ec:	d101      	bne.n	80090f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e000      	b.n	80090f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090fc:	b084      	sub	sp, #16
 80090fe:	b580      	push	{r7, lr}
 8009100:	b086      	sub	sp, #24
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800910a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009116:	2300      	movs	r3, #0
 8009118:	613b      	str	r3, [r7, #16]
 800911a:	e009      	b.n	8009130 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	3340      	adds	r3, #64	; 0x40
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	2200      	movs	r2, #0
 8009128:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	3301      	adds	r3, #1
 800912e:	613b      	str	r3, [r7, #16]
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2b0e      	cmp	r3, #14
 8009134:	d9f2      	bls.n	800911c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009138:	2b00      	cmp	r3, #0
 800913a:	d11c      	bne.n	8009176 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800914a:	f043 0302 	orr.w	r3, r3, #2
 800914e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009154:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009160:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	639a      	str	r2, [r3, #56]	; 0x38
 8009174:	e00b      	b.n	800918e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009186:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009194:	461a      	mov	r2, r3
 8009196:	2300      	movs	r3, #0
 8009198:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a0:	4619      	mov	r1, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a8:	461a      	mov	r2, r3
 80091aa:	680b      	ldr	r3, [r1, #0]
 80091ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d10c      	bne.n	80091ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80091ba:	2100      	movs	r1, #0
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f965 	bl	800948c <USB_SetDevSpeed>
 80091c2:	e008      	b.n	80091d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80091c4:	2101      	movs	r1, #1
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f960 	bl	800948c <USB_SetDevSpeed>
 80091cc:	e003      	b.n	80091d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80091ce:	2103      	movs	r1, #3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f95b 	bl	800948c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091d6:	2110      	movs	r1, #16
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f8f3 	bl	80093c4 <USB_FlushTxFifo>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f91f 	bl	800942c <USB_FlushRxFifo>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fe:	461a      	mov	r2, r3
 8009200:	2300      	movs	r3, #0
 8009202:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800920a:	461a      	mov	r2, r3
 800920c:	2300      	movs	r3, #0
 800920e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009216:	461a      	mov	r2, r3
 8009218:	2300      	movs	r3, #0
 800921a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800921c:	2300      	movs	r3, #0
 800921e:	613b      	str	r3, [r7, #16]
 8009220:	e043      	b.n	80092aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	4413      	add	r3, r2
 800922a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009238:	d118      	bne.n	800926c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10a      	bne.n	8009256 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924c:	461a      	mov	r2, r3
 800924e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009252:	6013      	str	r3, [r2, #0]
 8009254:	e013      	b.n	800927e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4413      	add	r3, r2
 800925e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009262:	461a      	mov	r2, r3
 8009264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009268:	6013      	str	r3, [r2, #0]
 800926a:	e008      	b.n	800927e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	461a      	mov	r2, r3
 800927a:	2300      	movs	r3, #0
 800927c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	015a      	lsls	r2, r3, #5
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	4413      	add	r3, r2
 8009286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928a:	461a      	mov	r2, r3
 800928c:	2300      	movs	r3, #0
 800928e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929c:	461a      	mov	r2, r3
 800929e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	3301      	adds	r3, #1
 80092a8:	613b      	str	r3, [r7, #16]
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d3b7      	bcc.n	8009222 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092b2:	2300      	movs	r3, #0
 80092b4:	613b      	str	r3, [r7, #16]
 80092b6:	e043      	b.n	8009340 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092ce:	d118      	bne.n	8009302 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10a      	bne.n	80092ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e2:	461a      	mov	r2, r3
 80092e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	e013      	b.n	8009314 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f8:	461a      	mov	r2, r3
 80092fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	e008      	b.n	8009314 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	015a      	lsls	r2, r3, #5
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	4413      	add	r3, r2
 800930a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930e:	461a      	mov	r2, r3
 8009310:	2300      	movs	r3, #0
 8009312:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	015a      	lsls	r2, r3, #5
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4413      	add	r3, r2
 800931c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009320:	461a      	mov	r2, r3
 8009322:	2300      	movs	r3, #0
 8009324:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009332:	461a      	mov	r2, r3
 8009334:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009338:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	3301      	adds	r3, #1
 800933e:	613b      	str	r3, [r7, #16]
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	429a      	cmp	r2, r3
 8009346:	d3b7      	bcc.n	80092b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800935a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009368:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	2b00      	cmp	r3, #0
 800936e:	d105      	bne.n	800937c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	f043 0210 	orr.w	r2, r3, #16
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	699a      	ldr	r2, [r3, #24]
 8009380:	4b0f      	ldr	r3, [pc, #60]	; (80093c0 <USB_DevInit+0x2c4>)
 8009382:	4313      	orrs	r3, r2
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938a:	2b00      	cmp	r3, #0
 800938c:	d005      	beq.n	800939a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	f043 0208 	orr.w	r2, r3, #8
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800939a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d107      	bne.n	80093b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093a8:	f043 0304 	orr.w	r3, r3, #4
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093bc:	b004      	add	sp, #16
 80093be:	4770      	bx	lr
 80093c0:	803c3800 	.word	0x803c3800

080093c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	3301      	adds	r3, #1
 80093d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4a13      	ldr	r2, [pc, #76]	; (8009428 <USB_FlushTxFifo+0x64>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d901      	bls.n	80093e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e01b      	b.n	800941c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	daf2      	bge.n	80093d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	019b      	lsls	r3, r3, #6
 80093f4:	f043 0220 	orr.w	r2, r3, #32
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3301      	adds	r3, #1
 8009400:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	4a08      	ldr	r2, [pc, #32]	; (8009428 <USB_FlushTxFifo+0x64>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d901      	bls.n	800940e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e006      	b.n	800941c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f003 0320 	and.w	r3, r3, #32
 8009416:	2b20      	cmp	r3, #32
 8009418:	d0f0      	beq.n	80093fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	00030d40 	.word	0x00030d40

0800942c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	3301      	adds	r3, #1
 800943c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	4a11      	ldr	r2, [pc, #68]	; (8009488 <USB_FlushRxFifo+0x5c>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d901      	bls.n	800944a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e018      	b.n	800947c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	daf2      	bge.n	8009438 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2210      	movs	r2, #16
 800945a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3301      	adds	r3, #1
 8009460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4a08      	ldr	r2, [pc, #32]	; (8009488 <USB_FlushRxFifo+0x5c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d901      	bls.n	800946e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e006      	b.n	800947c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f003 0310 	and.w	r3, r3, #16
 8009476:	2b10      	cmp	r3, #16
 8009478:	d0f0      	beq.n	800945c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	00030d40 	.word	0x00030d40

0800948c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	78fb      	ldrb	r3, [r7, #3]
 80094a6:	68f9      	ldr	r1, [r7, #12]
 80094a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094ac:	4313      	orrs	r3, r2
 80094ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80094be:	b480      	push	{r7}
 80094c0:	b087      	sub	sp, #28
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f003 0306 	and.w	r3, r3, #6
 80094d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d102      	bne.n	80094e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80094de:	2300      	movs	r3, #0
 80094e0:	75fb      	strb	r3, [r7, #23]
 80094e2:	e00a      	b.n	80094fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d002      	beq.n	80094f0 <USB_GetDevSpeed+0x32>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2b06      	cmp	r3, #6
 80094ee:	d102      	bne.n	80094f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80094f0:	2302      	movs	r3, #2
 80094f2:	75fb      	strb	r3, [r7, #23]
 80094f4:	e001      	b.n	80094fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80094f6:	230f      	movs	r3, #15
 80094f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	371c      	adds	r7, #28
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	785b      	ldrb	r3, [r3, #1]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d13a      	bne.n	800959a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952a:	69da      	ldr	r2, [r3, #28]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	f003 030f 	and.w	r3, r3, #15
 8009534:	2101      	movs	r1, #1
 8009536:	fa01 f303 	lsl.w	r3, r1, r3
 800953a:	b29b      	uxth	r3, r3
 800953c:	68f9      	ldr	r1, [r7, #12]
 800953e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009542:	4313      	orrs	r3, r2
 8009544:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4413      	add	r3, r2
 800954e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d155      	bne.n	8009608 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	791b      	ldrb	r3, [r3, #4]
 8009576:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009578:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	059b      	lsls	r3, r3, #22
 800957e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009580:	4313      	orrs	r3, r2
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	0151      	lsls	r1, r2, #5
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	440a      	add	r2, r1
 800958a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800958e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	e036      	b.n	8009608 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a0:	69da      	ldr	r2, [r3, #28]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	f003 030f 	and.w	r3, r3, #15
 80095aa:	2101      	movs	r1, #1
 80095ac:	fa01 f303 	lsl.w	r3, r1, r3
 80095b0:	041b      	lsls	r3, r3, #16
 80095b2:	68f9      	ldr	r1, [r7, #12]
 80095b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095b8:	4313      	orrs	r3, r2
 80095ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d11a      	bne.n	8009608 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	791b      	ldrb	r3, [r3, #4]
 80095ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80095ee:	430b      	orrs	r3, r1
 80095f0:	4313      	orrs	r3, r2
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	0151      	lsls	r1, r2, #5
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	440a      	add	r2, r1
 80095fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009606:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
	...

08009618 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	785b      	ldrb	r3, [r3, #1]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d161      	bne.n	80096f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009646:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800964a:	d11f      	bne.n	800968c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	015a      	lsls	r2, r3, #5
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	4413      	add	r3, r2
 8009654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	0151      	lsls	r1, r2, #5
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	440a      	add	r2, r1
 8009662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009666:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800966a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	0151      	lsls	r1, r2, #5
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	440a      	add	r2, r1
 8009682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009686:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800968a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	f003 030f 	and.w	r3, r3, #15
 800969c:	2101      	movs	r1, #1
 800969e:	fa01 f303 	lsl.w	r3, r1, r3
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	43db      	mvns	r3, r3
 80096a6:	68f9      	ldr	r1, [r7, #12]
 80096a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096ac:	4013      	ands	r3, r2
 80096ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096b6:	69da      	ldr	r2, [r3, #28]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	f003 030f 	and.w	r3, r3, #15
 80096c0:	2101      	movs	r1, #1
 80096c2:	fa01 f303 	lsl.w	r3, r1, r3
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	43db      	mvns	r3, r3
 80096ca:	68f9      	ldr	r1, [r7, #12]
 80096cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096d0:	4013      	ands	r3, r2
 80096d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	0159      	lsls	r1, r3, #5
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	440b      	add	r3, r1
 80096ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ee:	4619      	mov	r1, r3
 80096f0:	4b35      	ldr	r3, [pc, #212]	; (80097c8 <USB_DeactivateEndpoint+0x1b0>)
 80096f2:	4013      	ands	r3, r2
 80096f4:	600b      	str	r3, [r1, #0]
 80096f6:	e060      	b.n	80097ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800970a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800970e:	d11f      	bne.n	8009750 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	0151      	lsls	r1, r2, #5
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	440a      	add	r2, r1
 8009726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800972a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800972e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	0151      	lsls	r1, r2, #5
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	440a      	add	r2, r1
 8009746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800974a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800974e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	f003 030f 	and.w	r3, r3, #15
 8009760:	2101      	movs	r1, #1
 8009762:	fa01 f303 	lsl.w	r3, r1, r3
 8009766:	041b      	lsls	r3, r3, #16
 8009768:	43db      	mvns	r3, r3
 800976a:	68f9      	ldr	r1, [r7, #12]
 800976c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009770:	4013      	ands	r3, r2
 8009772:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800977a:	69da      	ldr	r2, [r3, #28]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	f003 030f 	and.w	r3, r3, #15
 8009784:	2101      	movs	r1, #1
 8009786:	fa01 f303 	lsl.w	r3, r1, r3
 800978a:	041b      	lsls	r3, r3, #16
 800978c:	43db      	mvns	r3, r3
 800978e:	68f9      	ldr	r1, [r7, #12]
 8009790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009794:	4013      	ands	r3, r2
 8009796:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	0159      	lsls	r1, r3, #5
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	440b      	add	r3, r1
 80097ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b2:	4619      	mov	r1, r3
 80097b4:	4b05      	ldr	r3, [pc, #20]	; (80097cc <USB_DeactivateEndpoint+0x1b4>)
 80097b6:	4013      	ands	r3, r2
 80097b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	ec337800 	.word	0xec337800
 80097cc:	eff37800 	.word	0xeff37800

080097d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08a      	sub	sp, #40	; 0x28
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	785b      	ldrb	r3, [r3, #1]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	f040 815c 	bne.w	8009aaa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d132      	bne.n	8009860 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	69ba      	ldr	r2, [r7, #24]
 800980a:	0151      	lsls	r1, r2, #5
 800980c:	69fa      	ldr	r2, [r7, #28]
 800980e:	440a      	add	r2, r1
 8009810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009814:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009818:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800981c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	4413      	add	r3, r2
 8009826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	69ba      	ldr	r2, [r7, #24]
 800982e:	0151      	lsls	r1, r2, #5
 8009830:	69fa      	ldr	r2, [r7, #28]
 8009832:	440a      	add	r2, r1
 8009834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009838:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800983c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	4413      	add	r3, r2
 8009846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	69ba      	ldr	r2, [r7, #24]
 800984e:	0151      	lsls	r1, r2, #5
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	440a      	add	r2, r1
 8009854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009858:	0cdb      	lsrs	r3, r3, #19
 800985a:	04db      	lsls	r3, r3, #19
 800985c:	6113      	str	r3, [r2, #16]
 800985e:	e074      	b.n	800994a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	4413      	add	r3, r2
 8009868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	0151      	lsls	r1, r2, #5
 8009872:	69fa      	ldr	r2, [r7, #28]
 8009874:	440a      	add	r2, r1
 8009876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800987a:	0cdb      	lsrs	r3, r3, #19
 800987c:	04db      	lsls	r3, r3, #19
 800987e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	69ba      	ldr	r2, [r7, #24]
 8009890:	0151      	lsls	r1, r2, #5
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	440a      	add	r2, r1
 8009896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800989a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800989e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	6999      	ldr	r1, [r3, #24]
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	440b      	add	r3, r1
 80098bc:	1e59      	subs	r1, r3, #1
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80098c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80098c8:	4b9d      	ldr	r3, [pc, #628]	; (8009b40 <USB_EPStartXfer+0x370>)
 80098ca:	400b      	ands	r3, r1
 80098cc:	69b9      	ldr	r1, [r7, #24]
 80098ce:	0148      	lsls	r0, r1, #5
 80098d0:	69f9      	ldr	r1, [r7, #28]
 80098d2:	4401      	add	r1, r0
 80098d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80098d8:	4313      	orrs	r3, r2
 80098da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e8:	691a      	ldr	r2, [r3, #16]
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098f2:	69b9      	ldr	r1, [r7, #24]
 80098f4:	0148      	lsls	r0, r1, #5
 80098f6:	69f9      	ldr	r1, [r7, #28]
 80098f8:	4401      	add	r1, r0
 80098fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80098fe:	4313      	orrs	r3, r2
 8009900:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	791b      	ldrb	r3, [r3, #4]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d11f      	bne.n	800994a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	015a      	lsls	r2, r3, #5
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	69ba      	ldr	r2, [r7, #24]
 800991a:	0151      	lsls	r1, r2, #5
 800991c:	69fa      	ldr	r2, [r7, #28]
 800991e:	440a      	add	r2, r1
 8009920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009924:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009928:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	69ba      	ldr	r2, [r7, #24]
 800993a:	0151      	lsls	r1, r2, #5
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	440a      	add	r2, r1
 8009940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009944:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009948:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d14b      	bne.n	80099e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	695b      	ldr	r3, [r3, #20]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d009      	beq.n	800996c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009964:	461a      	mov	r2, r3
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	791b      	ldrb	r3, [r3, #4]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d128      	bne.n	80099c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009980:	2b00      	cmp	r3, #0
 8009982:	d110      	bne.n	80099a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	69ba      	ldr	r2, [r7, #24]
 8009994:	0151      	lsls	r1, r2, #5
 8009996:	69fa      	ldr	r2, [r7, #28]
 8009998:	440a      	add	r2, r1
 800999a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800999e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	e00f      	b.n	80099c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	0151      	lsls	r1, r2, #5
 80099b8:	69fa      	ldr	r2, [r7, #28]
 80099ba:	440a      	add	r2, r1
 80099bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	015a      	lsls	r2, r3, #5
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	4413      	add	r3, r2
 80099ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	69ba      	ldr	r2, [r7, #24]
 80099d6:	0151      	lsls	r1, r2, #5
 80099d8:	69fa      	ldr	r2, [r7, #28]
 80099da:	440a      	add	r2, r1
 80099dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	e133      	b.n	8009c50 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	69ba      	ldr	r2, [r7, #24]
 80099f8:	0151      	lsls	r1, r2, #5
 80099fa:	69fa      	ldr	r2, [r7, #28]
 80099fc:	440a      	add	r2, r1
 80099fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	791b      	ldrb	r3, [r3, #4]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d015      	beq.n	8009a3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 811b 	beq.w	8009c50 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	f003 030f 	and.w	r3, r3, #15
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a30:	69f9      	ldr	r1, [r7, #28]
 8009a32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a36:	4313      	orrs	r3, r2
 8009a38:	634b      	str	r3, [r1, #52]	; 0x34
 8009a3a:	e109      	b.n	8009c50 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d110      	bne.n	8009a6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69ba      	ldr	r2, [r7, #24]
 8009a5c:	0151      	lsls	r1, r2, #5
 8009a5e:	69fa      	ldr	r2, [r7, #28]
 8009a60:	440a      	add	r2, r1
 8009a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a6a:	6013      	str	r3, [r2, #0]
 8009a6c:	e00f      	b.n	8009a8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	0151      	lsls	r1, r2, #5
 8009a80:	69fa      	ldr	r2, [r7, #28]
 8009a82:	440a      	add	r2, r1
 8009a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6919      	ldr	r1, [r3, #16]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	781a      	ldrb	r2, [r3, #0]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	b298      	uxth	r0, r3
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f000 fade 	bl	800a064 <USB_WritePacket>
 8009aa8:	e0d2      	b.n	8009c50 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	015a      	lsls	r2, r3, #5
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	69ba      	ldr	r2, [r7, #24]
 8009aba:	0151      	lsls	r1, r2, #5
 8009abc:	69fa      	ldr	r2, [r7, #28]
 8009abe:	440a      	add	r2, r1
 8009ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac4:	0cdb      	lsrs	r3, r3, #19
 8009ac6:	04db      	lsls	r3, r3, #19
 8009ac8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	015a      	lsls	r2, r3, #5
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	69ba      	ldr	r2, [r7, #24]
 8009ada:	0151      	lsls	r1, r2, #5
 8009adc:	69fa      	ldr	r2, [r7, #28]
 8009ade:	440a      	add	r2, r1
 8009ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ae4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ae8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009aec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d126      	bne.n	8009b44 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	015a      	lsls	r2, r3, #5
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	4413      	add	r3, r2
 8009afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b02:	691a      	ldr	r2, [r3, #16]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b0c:	69b9      	ldr	r1, [r7, #24]
 8009b0e:	0148      	lsls	r0, r1, #5
 8009b10:	69f9      	ldr	r1, [r7, #28]
 8009b12:	4401      	add	r1, r0
 8009b14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	69ba      	ldr	r2, [r7, #24]
 8009b2c:	0151      	lsls	r1, r2, #5
 8009b2e:	69fa      	ldr	r2, [r7, #28]
 8009b30:	440a      	add	r2, r1
 8009b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b3a:	6113      	str	r3, [r2, #16]
 8009b3c:	e03a      	b.n	8009bb4 <USB_EPStartXfer+0x3e4>
 8009b3e:	bf00      	nop
 8009b40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	699a      	ldr	r2, [r3, #24]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	1e5a      	subs	r2, r3, #1
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b58:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	8afa      	ldrh	r2, [r7, #22]
 8009b60:	fb03 f202 	mul.w	r2, r3, r2
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	015a      	lsls	r2, r3, #5
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b74:	691a      	ldr	r2, [r3, #16]
 8009b76:	8afb      	ldrh	r3, [r7, #22]
 8009b78:	04d9      	lsls	r1, r3, #19
 8009b7a:	4b38      	ldr	r3, [pc, #224]	; (8009c5c <USB_EPStartXfer+0x48c>)
 8009b7c:	400b      	ands	r3, r1
 8009b7e:	69b9      	ldr	r1, [r7, #24]
 8009b80:	0148      	lsls	r0, r1, #5
 8009b82:	69f9      	ldr	r1, [r7, #28]
 8009b84:	4401      	add	r1, r0
 8009b86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9a:	691a      	ldr	r2, [r3, #16]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	69db      	ldr	r3, [r3, #28]
 8009ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ba4:	69b9      	ldr	r1, [r7, #24]
 8009ba6:	0148      	lsls	r0, r1, #5
 8009ba8:	69f9      	ldr	r1, [r7, #28]
 8009baa:	4401      	add	r1, r0
 8009bac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009bb4:	79fb      	ldrb	r3, [r7, #7]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d10d      	bne.n	8009bd6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d009      	beq.n	8009bd6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	6919      	ldr	r1, [r3, #16]
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	015a      	lsls	r2, r3, #5
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	4413      	add	r3, r2
 8009bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bd2:	460a      	mov	r2, r1
 8009bd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	791b      	ldrb	r3, [r3, #4]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d128      	bne.n	8009c30 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d110      	bne.n	8009c10 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	69ba      	ldr	r2, [r7, #24]
 8009bfe:	0151      	lsls	r1, r2, #5
 8009c00:	69fa      	ldr	r2, [r7, #28]
 8009c02:	440a      	add	r2, r1
 8009c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c0c:	6013      	str	r3, [r2, #0]
 8009c0e:	e00f      	b.n	8009c30 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	015a      	lsls	r2, r3, #5
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	4413      	add	r3, r2
 8009c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	69ba      	ldr	r2, [r7, #24]
 8009c20:	0151      	lsls	r1, r2, #5
 8009c22:	69fa      	ldr	r2, [r7, #28]
 8009c24:	440a      	add	r2, r1
 8009c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	0151      	lsls	r1, r2, #5
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	440a      	add	r2, r1
 8009c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3720      	adds	r7, #32
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	1ff80000 	.word	0x1ff80000

08009c60 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	785b      	ldrb	r3, [r3, #1]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	f040 80ce 	bne.w	8009e1e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d132      	bne.n	8009cf0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	0151      	lsls	r1, r2, #5
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	440a      	add	r2, r1
 8009ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ca4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ca8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009cac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	693a      	ldr	r2, [r7, #16]
 8009cbe:	0151      	lsls	r1, r2, #5
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	440a      	add	r2, r1
 8009cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ccc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	015a      	lsls	r2, r3, #5
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	0151      	lsls	r1, r2, #5
 8009ce0:	697a      	ldr	r2, [r7, #20]
 8009ce2:	440a      	add	r2, r1
 8009ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ce8:	0cdb      	lsrs	r3, r3, #19
 8009cea:	04db      	lsls	r3, r3, #19
 8009cec:	6113      	str	r3, [r2, #16]
 8009cee:	e04e      	b.n	8009d8e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	0151      	lsls	r1, r2, #5
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	440a      	add	r2, r1
 8009d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d0a:	0cdb      	lsrs	r3, r3, #19
 8009d0c:	04db      	lsls	r3, r3, #19
 8009d0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	0151      	lsls	r1, r2, #5
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	440a      	add	r2, r1
 8009d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d32:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	699a      	ldr	r2, [r3, #24]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d903      	bls.n	8009d48 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	68da      	ldr	r2, [r3, #12]
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	0151      	lsls	r1, r2, #5
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	440a      	add	r2, r1
 8009d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d74:	691a      	ldr	r2, [r3, #16]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d7e:	6939      	ldr	r1, [r7, #16]
 8009d80:	0148      	lsls	r0, r1, #5
 8009d82:	6979      	ldr	r1, [r7, #20]
 8009d84:	4401      	add	r1, r0
 8009d86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d11e      	bne.n	8009dd2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	695b      	ldr	r3, [r3, #20]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009da8:	461a      	mov	r2, r3
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	0151      	lsls	r1, r2, #5
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	440a      	add	r2, r1
 8009dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	e097      	b.n	8009f02 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	015a      	lsls	r2, r3, #5
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	0151      	lsls	r1, r2, #5
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	440a      	add	r2, r1
 8009de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009df0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	699b      	ldr	r3, [r3, #24]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 8083 	beq.w	8009f02 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	f003 030f 	and.w	r3, r3, #15
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e12:	6979      	ldr	r1, [r7, #20]
 8009e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	634b      	str	r3, [r1, #52]	; 0x34
 8009e1c:	e071      	b.n	8009f02 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	015a      	lsls	r2, r3, #5
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	4413      	add	r3, r2
 8009e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	0151      	lsls	r1, r2, #5
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	440a      	add	r2, r1
 8009e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e38:	0cdb      	lsrs	r3, r3, #19
 8009e3a:	04db      	lsls	r3, r3, #19
 8009e3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	015a      	lsls	r2, r3, #5
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	4413      	add	r3, r2
 8009e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	0151      	lsls	r1, r2, #5
 8009e50:	697a      	ldr	r2, [r7, #20]
 8009e52:	440a      	add	r2, r1
 8009e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e60:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	699b      	ldr	r3, [r3, #24]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	68da      	ldr	r2, [r3, #12]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	68da      	ldr	r2, [r3, #12]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	015a      	lsls	r2, r3, #5
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	4413      	add	r3, r2
 8009e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	0151      	lsls	r1, r2, #5
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	440a      	add	r2, r1
 8009e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	015a      	lsls	r2, r3, #5
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea6:	691a      	ldr	r2, [r3, #16]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eb0:	6939      	ldr	r1, [r7, #16]
 8009eb2:	0148      	lsls	r0, r1, #5
 8009eb4:	6979      	ldr	r1, [r7, #20]
 8009eb6:	4401      	add	r1, r0
 8009eb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009ec0:	79fb      	ldrb	r3, [r7, #7]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d10d      	bne.n	8009ee2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d009      	beq.n	8009ee2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	6919      	ldr	r1, [r3, #16]
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ede:	460a      	mov	r2, r1
 8009ee0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	015a      	lsls	r2, r3, #5
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	4413      	add	r3, r2
 8009eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	0151      	lsls	r1, r2, #5
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	440a      	add	r2, r1
 8009ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009efc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	371c      	adds	r7, #28
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	785b      	ldrb	r3, [r3, #1]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d14a      	bne.n	8009fc4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f46:	f040 8086 	bne.w	800a056 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	015a      	lsls	r2, r3, #5
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	4413      	add	r3, r2
 8009f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	7812      	ldrb	r2, [r2, #0]
 8009f5e:	0151      	lsls	r1, r2, #5
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	440a      	add	r2, r1
 8009f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f6c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	7812      	ldrb	r2, [r2, #0]
 8009f82:	0151      	lsls	r1, r2, #5
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	440a      	add	r2, r1
 8009f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	3301      	adds	r3, #1
 8009f96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d902      	bls.n	8009fa8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8009fa6:	e056      	b.n	800a056 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fc0:	d0e7      	beq.n	8009f92 <USB_EPStopXfer+0x82>
 8009fc2:	e048      	b.n	800a056 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	015a      	lsls	r2, r3, #5
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	4413      	add	r3, r2
 8009fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fdc:	d13b      	bne.n	800a056 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	7812      	ldrb	r2, [r2, #0]
 8009ff2:	0151      	lsls	r1, r2, #5
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	440a      	add	r2, r1
 8009ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ffc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a000:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	7812      	ldrb	r2, [r2, #0]
 800a016:	0151      	lsls	r1, r2, #5
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	440a      	add	r2, r1
 800a01c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a020:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a024:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3301      	adds	r3, #1
 800a02a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a032:	4293      	cmp	r3, r2
 800a034:	d902      	bls.n	800a03c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	75fb      	strb	r3, [r7, #23]
          break;
 800a03a:	e00c      	b.n	800a056 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	015a      	lsls	r2, r3, #5
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	4413      	add	r3, r2
 800a046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a054:	d0e7      	beq.n	800a026 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a056:	7dfb      	ldrb	r3, [r7, #23]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	371c      	adds	r7, #28
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a064:	b480      	push	{r7}
 800a066:	b089      	sub	sp, #36	; 0x24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	4611      	mov	r1, r2
 800a070:	461a      	mov	r2, r3
 800a072:	460b      	mov	r3, r1
 800a074:	71fb      	strb	r3, [r7, #7]
 800a076:	4613      	mov	r3, r2
 800a078:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a082:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a086:	2b00      	cmp	r3, #0
 800a088:	d123      	bne.n	800a0d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a08a:	88bb      	ldrh	r3, [r7, #4]
 800a08c:	3303      	adds	r3, #3
 800a08e:	089b      	lsrs	r3, r3, #2
 800a090:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a092:	2300      	movs	r3, #0
 800a094:	61bb      	str	r3, [r7, #24]
 800a096:	e018      	b.n	800a0ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a098:	79fb      	ldrb	r3, [r7, #7]
 800a09a:	031a      	lsls	r2, r3, #12
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	61bb      	str	r3, [r7, #24]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d3e2      	bcc.n	800a098 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3724      	adds	r7, #36	; 0x24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b08b      	sub	sp, #44	; 0x2c
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a0f6:	88fb      	ldrh	r3, [r7, #6]
 800a0f8:	089b      	lsrs	r3, r3, #2
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a0fe:	88fb      	ldrh	r3, [r7, #6]
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a106:	2300      	movs	r3, #0
 800a108:	623b      	str	r3, [r7, #32]
 800a10a:	e014      	b.n	800a136 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	601a      	str	r2, [r3, #0]
    pDest++;
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	3301      	adds	r3, #1
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a120:	3301      	adds	r3, #1
 800a122:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	3301      	adds	r3, #1
 800a128:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	3301      	adds	r3, #1
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	3301      	adds	r3, #1
 800a134:	623b      	str	r3, [r7, #32]
 800a136:	6a3a      	ldr	r2, [r7, #32]
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d3e6      	bcc.n	800a10c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a13e:	8bfb      	ldrh	r3, [r7, #30]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d01e      	beq.n	800a182 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a14e:	461a      	mov	r2, r3
 800a150:	f107 0310 	add.w	r3, r7, #16
 800a154:	6812      	ldr	r2, [r2, #0]
 800a156:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	fa22 f303 	lsr.w	r3, r2, r3
 800a164:	b2da      	uxtb	r2, r3
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	701a      	strb	r2, [r3, #0]
      i++;
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	3301      	adds	r3, #1
 800a16e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	3301      	adds	r3, #1
 800a174:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a176:	8bfb      	ldrh	r3, [r7, #30]
 800a178:	3b01      	subs	r3, #1
 800a17a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a17c:	8bfb      	ldrh	r3, [r7, #30]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1ea      	bne.n	800a158 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a184:	4618      	mov	r0, r3
 800a186:	372c      	adds	r7, #44	; 0x2c
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	785b      	ldrb	r3, [r3, #1]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d12c      	bne.n	800a206 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	015a      	lsls	r2, r3, #5
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	db12      	blt.n	800a1e4 <USB_EPSetStall+0x54>
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00f      	beq.n	800a1e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	0151      	lsls	r1, r2, #5
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	440a      	add	r2, r1
 800a1da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a1e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	0151      	lsls	r1, r2, #5
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	440a      	add	r2, r1
 800a1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a202:	6013      	str	r3, [r2, #0]
 800a204:	e02b      	b.n	800a25e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	015a      	lsls	r2, r3, #5
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	4413      	add	r3, r2
 800a20e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	db12      	blt.n	800a23e <USB_EPSetStall+0xae>
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00f      	beq.n	800a23e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4413      	add	r3, r2
 800a226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	0151      	lsls	r1, r2, #5
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	440a      	add	r2, r1
 800a234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a238:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a23c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	0151      	lsls	r1, r2, #5
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	440a      	add	r2, r1
 800a254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a25c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	785b      	ldrb	r3, [r3, #1]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d128      	bne.n	800a2da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	0151      	lsls	r1, r2, #5
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	440a      	add	r2, r1
 800a29e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	791b      	ldrb	r3, [r3, #4]
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	d003      	beq.n	800a2b8 <USB_EPClearStall+0x4c>
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	791b      	ldrb	r3, [r3, #4]
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d138      	bne.n	800a32a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	0151      	lsls	r1, r2, #5
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	440a      	add	r2, r1
 800a2ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	e027      	b.n	800a32a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	0151      	lsls	r1, r2, #5
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	440a      	add	r2, r1
 800a2f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	791b      	ldrb	r3, [r3, #4]
 800a2fe:	2b03      	cmp	r3, #3
 800a300:	d003      	beq.n	800a30a <USB_EPClearStall+0x9e>
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	791b      	ldrb	r3, [r3, #4]
 800a306:	2b02      	cmp	r3, #2
 800a308:	d10f      	bne.n	800a32a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	4413      	add	r3, r2
 800a312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	0151      	lsls	r1, r2, #5
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	440a      	add	r2, r1
 800a320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a328:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a356:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a35a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	011b      	lsls	r3, r3, #4
 800a368:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a36c:	68f9      	ldr	r1, [r7, #12]
 800a36e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a372:	4313      	orrs	r3, r2
 800a374:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3714      	adds	r7, #20
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a39e:	f023 0303 	bic.w	r3, r3, #3
 800a3a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3b2:	f023 0302 	bic.w	r3, r3, #2
 800a3b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b085      	sub	sp, #20
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3e0:	f023 0303 	bic.w	r3, r3, #3
 800a3e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3f4:	f043 0302 	orr.w	r3, r3, #2
 800a3f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	4013      	ands	r3, r2
 800a41e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a420:	68fb      	ldr	r3, [r7, #12]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a42e:	b480      	push	{r7}
 800a430:	b085      	sub	sp, #20
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a44a:	69db      	ldr	r3, [r3, #28]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	4013      	ands	r3, r2
 800a450:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	0c1b      	lsrs	r3, r3, #16
}
 800a456:	4618      	mov	r0, r3
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a462:	b480      	push	{r7}
 800a464:	b085      	sub	sp, #20
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a47e:	69db      	ldr	r3, [r3, #28]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	4013      	ands	r3, r2
 800a484:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	b29b      	uxth	r3, r3
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a496:	b480      	push	{r7}
 800a498:	b085      	sub	sp, #20
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a4a6:	78fb      	ldrb	r3, [r7, #3]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a4c4:	68bb      	ldr	r3, [r7, #8]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b087      	sub	sp, #28
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a4f6:	78fb      	ldrb	r3, [r7, #3]
 800a4f8:	f003 030f 	and.w	r3, r3, #15
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a502:	01db      	lsls	r3, r3, #7
 800a504:	b2db      	uxtb	r3, r3
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	4313      	orrs	r3, r2
 800a50a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a50c:	78fb      	ldrb	r3, [r7, #3]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	4013      	ands	r3, r2
 800a51e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a520:	68bb      	ldr	r3, [r7, #8]
}
 800a522:	4618      	mov	r0, r3
 800a524:	371c      	adds	r7, #28
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a52e:	b480      	push	{r7}
 800a530:	b083      	sub	sp, #12
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	f003 0301 	and.w	r3, r3, #1
}
 800a53e:	4618      	mov	r0, r3
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b085      	sub	sp, #20
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a564:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a568:	f023 0307 	bic.w	r3, r3, #7
 800a56c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a57c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a580:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a590:	b480      	push	{r7}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	460b      	mov	r3, r1
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	333c      	adds	r3, #60	; 0x3c
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	4a26      	ldr	r2, [pc, #152]	; (800a648 <USB_EP0_OutStart+0xb8>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d90a      	bls.n	800a5ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5c4:	d101      	bne.n	800a5ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	e037      	b.n	800a63a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	697a      	ldr	r2, [r7, #20]
 800a5e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5f8:	f043 0318 	orr.w	r3, r3, #24
 800a5fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a60c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a610:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a612:	7afb      	ldrb	r3, [r7, #11]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d10f      	bne.n	800a638 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a61e:	461a      	mov	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a632:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a636:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	371c      	adds	r7, #28
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	4f54300a 	.word	0x4f54300a

0800a64c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a654:	2300      	movs	r3, #0
 800a656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3301      	adds	r3, #1
 800a65c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	4a13      	ldr	r2, [pc, #76]	; (800a6b0 <USB_CoreReset+0x64>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d901      	bls.n	800a66a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a666:	2303      	movs	r3, #3
 800a668:	e01b      	b.n	800a6a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	daf2      	bge.n	800a658 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a672:	2300      	movs	r3, #0
 800a674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	f043 0201 	orr.w	r2, r3, #1
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3301      	adds	r3, #1
 800a686:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	4a09      	ldr	r2, [pc, #36]	; (800a6b0 <USB_CoreReset+0x64>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d901      	bls.n	800a694 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e006      	b.n	800a6a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	f003 0301 	and.w	r3, r3, #1
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d0f0      	beq.n	800a682 <USB_CoreReset+0x36>

  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	00030d40 	.word	0x00030d40

0800a6b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a6c0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a6c4:	f002 fca2 	bl	800d00c <USBD_static_malloc>
 800a6c8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d109      	bne.n	800a6e4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	32b0      	adds	r2, #176	; 0xb0
 800a6da:	2100      	movs	r1, #0
 800a6dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	e0d4      	b.n	800a88e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a6e4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f002 fd56 	bl	800d19c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	32b0      	adds	r2, #176	; 0xb0
 800a6fa:	68f9      	ldr	r1, [r7, #12]
 800a6fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	32b0      	adds	r2, #176	; 0xb0
 800a70a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	7c1b      	ldrb	r3, [r3, #16]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d138      	bne.n	800a78e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a71c:	4b5e      	ldr	r3, [pc, #376]	; (800a898 <USBD_CDC_Init+0x1e4>)
 800a71e:	7819      	ldrb	r1, [r3, #0]
 800a720:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a724:	2202      	movs	r2, #2
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f002 fb4d 	bl	800cdc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a72c:	4b5a      	ldr	r3, [pc, #360]	; (800a898 <USBD_CDC_Init+0x1e4>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	f003 020f 	and.w	r2, r3, #15
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	4613      	mov	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	440b      	add	r3, r1
 800a740:	3324      	adds	r3, #36	; 0x24
 800a742:	2201      	movs	r2, #1
 800a744:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a746:	4b55      	ldr	r3, [pc, #340]	; (800a89c <USBD_CDC_Init+0x1e8>)
 800a748:	7819      	ldrb	r1, [r3, #0]
 800a74a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a74e:	2202      	movs	r2, #2
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f002 fb38 	bl	800cdc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a756:	4b51      	ldr	r3, [pc, #324]	; (800a89c <USBD_CDC_Init+0x1e8>)
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	f003 020f 	and.w	r2, r3, #15
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	440b      	add	r3, r1
 800a76a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a76e:	2201      	movs	r2, #1
 800a770:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a772:	4b4b      	ldr	r3, [pc, #300]	; (800a8a0 <USBD_CDC_Init+0x1ec>)
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	f003 020f 	and.w	r2, r3, #15
 800a77a:	6879      	ldr	r1, [r7, #4]
 800a77c:	4613      	mov	r3, r2
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4413      	add	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	440b      	add	r3, r1
 800a786:	3326      	adds	r3, #38	; 0x26
 800a788:	2210      	movs	r2, #16
 800a78a:	801a      	strh	r2, [r3, #0]
 800a78c:	e035      	b.n	800a7fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a78e:	4b42      	ldr	r3, [pc, #264]	; (800a898 <USBD_CDC_Init+0x1e4>)
 800a790:	7819      	ldrb	r1, [r3, #0]
 800a792:	2340      	movs	r3, #64	; 0x40
 800a794:	2202      	movs	r2, #2
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f002 fb15 	bl	800cdc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a79c:	4b3e      	ldr	r3, [pc, #248]	; (800a898 <USBD_CDC_Init+0x1e4>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	f003 020f 	and.w	r2, r3, #15
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	440b      	add	r3, r1
 800a7b0:	3324      	adds	r3, #36	; 0x24
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a7b6:	4b39      	ldr	r3, [pc, #228]	; (800a89c <USBD_CDC_Init+0x1e8>)
 800a7b8:	7819      	ldrb	r1, [r3, #0]
 800a7ba:	2340      	movs	r3, #64	; 0x40
 800a7bc:	2202      	movs	r2, #2
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f002 fb01 	bl	800cdc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a7c4:	4b35      	ldr	r3, [pc, #212]	; (800a89c <USBD_CDC_Init+0x1e8>)
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	f003 020f 	and.w	r2, r3, #15
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	440b      	add	r3, r1
 800a7d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7dc:	2201      	movs	r2, #1
 800a7de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a7e0:	4b2f      	ldr	r3, [pc, #188]	; (800a8a0 <USBD_CDC_Init+0x1ec>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	f003 020f 	and.w	r2, r3, #15
 800a7e8:	6879      	ldr	r1, [r7, #4]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	440b      	add	r3, r1
 800a7f4:	3326      	adds	r3, #38	; 0x26
 800a7f6:	2210      	movs	r2, #16
 800a7f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a7fa:	4b29      	ldr	r3, [pc, #164]	; (800a8a0 <USBD_CDC_Init+0x1ec>)
 800a7fc:	7819      	ldrb	r1, [r3, #0]
 800a7fe:	2308      	movs	r3, #8
 800a800:	2203      	movs	r2, #3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f002 fadf 	bl	800cdc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a808:	4b25      	ldr	r3, [pc, #148]	; (800a8a0 <USBD_CDC_Init+0x1ec>)
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	f003 020f 	and.w	r2, r3, #15
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	440b      	add	r3, r1
 800a81c:	3324      	adds	r3, #36	; 0x24
 800a81e:	2201      	movs	r2, #1
 800a820:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	33b0      	adds	r3, #176	; 0xb0
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a854:	2b00      	cmp	r3, #0
 800a856:	d101      	bne.n	800a85c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a858:	2302      	movs	r3, #2
 800a85a:	e018      	b.n	800a88e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	7c1b      	ldrb	r3, [r3, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10a      	bne.n	800a87a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a864:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <USBD_CDC_Init+0x1e8>)
 800a866:	7819      	ldrb	r1, [r3, #0]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a86e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f002 fb96 	bl	800cfa4 <USBD_LL_PrepareReceive>
 800a878:	e008      	b.n	800a88c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a87a:	4b08      	ldr	r3, [pc, #32]	; (800a89c <USBD_CDC_Init+0x1e8>)
 800a87c:	7819      	ldrb	r1, [r3, #0]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a884:	2340      	movs	r3, #64	; 0x40
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f002 fb8c 	bl	800cfa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	20000093 	.word	0x20000093
 800a89c:	20000094 	.word	0x20000094
 800a8a0:	20000095 	.word	0x20000095

0800a8a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a8b0:	4b3a      	ldr	r3, [pc, #232]	; (800a99c <USBD_CDC_DeInit+0xf8>)
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f002 faab 	bl	800ce12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a8bc:	4b37      	ldr	r3, [pc, #220]	; (800a99c <USBD_CDC_DeInit+0xf8>)
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	f003 020f 	and.w	r2, r3, #15
 800a8c4:	6879      	ldr	r1, [r7, #4]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	440b      	add	r3, r1
 800a8d0:	3324      	adds	r3, #36	; 0x24
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a8d6:	4b32      	ldr	r3, [pc, #200]	; (800a9a0 <USBD_CDC_DeInit+0xfc>)
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f002 fa98 	bl	800ce12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a8e2:	4b2f      	ldr	r3, [pc, #188]	; (800a9a0 <USBD_CDC_DeInit+0xfc>)
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	f003 020f 	and.w	r2, r3, #15
 800a8ea:	6879      	ldr	r1, [r7, #4]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	440b      	add	r3, r1
 800a8f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a8fe:	4b29      	ldr	r3, [pc, #164]	; (800a9a4 <USBD_CDC_DeInit+0x100>)
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f002 fa84 	bl	800ce12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a90a:	4b26      	ldr	r3, [pc, #152]	; (800a9a4 <USBD_CDC_DeInit+0x100>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	f003 020f 	and.w	r2, r3, #15
 800a912:	6879      	ldr	r1, [r7, #4]
 800a914:	4613      	mov	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	440b      	add	r3, r1
 800a91e:	3324      	adds	r3, #36	; 0x24
 800a920:	2200      	movs	r2, #0
 800a922:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a924:	4b1f      	ldr	r3, [pc, #124]	; (800a9a4 <USBD_CDC_DeInit+0x100>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	f003 020f 	and.w	r2, r3, #15
 800a92c:	6879      	ldr	r1, [r7, #4]
 800a92e:	4613      	mov	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	440b      	add	r3, r1
 800a938:	3326      	adds	r3, #38	; 0x26
 800a93a:	2200      	movs	r2, #0
 800a93c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	32b0      	adds	r2, #176	; 0xb0
 800a948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d01f      	beq.n	800a990 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	33b0      	adds	r3, #176	; 0xb0
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	32b0      	adds	r2, #176	; 0xb0
 800a96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a972:	4618      	mov	r0, r3
 800a974:	f002 fb58 	bl	800d028 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	32b0      	adds	r2, #176	; 0xb0
 800a982:	2100      	movs	r1, #0
 800a984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	20000093 	.word	0x20000093
 800a9a0:	20000094 	.word	0x20000094
 800a9a4:	20000095 	.word	0x20000095

0800a9a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	32b0      	adds	r2, #176	; 0xb0
 800a9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e0bf      	b.n	800ab58 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d050      	beq.n	800aa86 <USBD_CDC_Setup+0xde>
 800a9e4:	2b20      	cmp	r3, #32
 800a9e6:	f040 80af 	bne.w	800ab48 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	88db      	ldrh	r3, [r3, #6]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d03a      	beq.n	800aa68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	b25b      	sxtb	r3, r3
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	da1b      	bge.n	800aa34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	33b0      	adds	r3, #176	; 0xb0
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	4413      	add	r3, r2
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aa12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	88d2      	ldrh	r2, [r2, #6]
 800aa18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	88db      	ldrh	r3, [r3, #6]
 800aa1e:	2b07      	cmp	r3, #7
 800aa20:	bf28      	it	cs
 800aa22:	2307      	movcs	r3, #7
 800aa24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	89fa      	ldrh	r2, [r7, #14]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f001 fd89 	bl	800c544 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aa32:	e090      	b.n	800ab56 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	785a      	ldrb	r2, [r3, #1]
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	88db      	ldrh	r3, [r3, #6]
 800aa42:	2b3f      	cmp	r3, #63	; 0x3f
 800aa44:	d803      	bhi.n	800aa4e <USBD_CDC_Setup+0xa6>
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	88db      	ldrh	r3, [r3, #6]
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	e000      	b.n	800aa50 <USBD_CDC_Setup+0xa8>
 800aa4e:	2240      	movs	r2, #64	; 0x40
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aa56:	6939      	ldr	r1, [r7, #16]
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800aa5e:	461a      	mov	r2, r3
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f001 fd9b 	bl	800c59c <USBD_CtlPrepareRx>
      break;
 800aa66:	e076      	b.n	800ab56 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	33b0      	adds	r3, #176	; 0xb0
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4413      	add	r3, r2
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	7850      	ldrb	r0, [r2, #1]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	4798      	blx	r3
      break;
 800aa84:	e067      	b.n	800ab56 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	785b      	ldrb	r3, [r3, #1]
 800aa8a:	2b0b      	cmp	r3, #11
 800aa8c:	d851      	bhi.n	800ab32 <USBD_CDC_Setup+0x18a>
 800aa8e:	a201      	add	r2, pc, #4	; (adr r2, 800aa94 <USBD_CDC_Setup+0xec>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aac5 	.word	0x0800aac5
 800aa98:	0800ab41 	.word	0x0800ab41
 800aa9c:	0800ab33 	.word	0x0800ab33
 800aaa0:	0800ab33 	.word	0x0800ab33
 800aaa4:	0800ab33 	.word	0x0800ab33
 800aaa8:	0800ab33 	.word	0x0800ab33
 800aaac:	0800ab33 	.word	0x0800ab33
 800aab0:	0800ab33 	.word	0x0800ab33
 800aab4:	0800ab33 	.word	0x0800ab33
 800aab8:	0800ab33 	.word	0x0800ab33
 800aabc:	0800aaef 	.word	0x0800aaef
 800aac0:	0800ab19 	.word	0x0800ab19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b03      	cmp	r3, #3
 800aace:	d107      	bne.n	800aae0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aad0:	f107 030a 	add.w	r3, r7, #10
 800aad4:	2202      	movs	r2, #2
 800aad6:	4619      	mov	r1, r3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f001 fd33 	bl	800c544 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aade:	e032      	b.n	800ab46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aae0:	6839      	ldr	r1, [r7, #0]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f001 fcbd 	bl	800c462 <USBD_CtlError>
            ret = USBD_FAIL;
 800aae8:	2303      	movs	r3, #3
 800aaea:	75fb      	strb	r3, [r7, #23]
          break;
 800aaec:	e02b      	b.n	800ab46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d107      	bne.n	800ab0a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aafa:	f107 030d 	add.w	r3, r7, #13
 800aafe:	2201      	movs	r2, #1
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f001 fd1e 	bl	800c544 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab08:	e01d      	b.n	800ab46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f001 fca8 	bl	800c462 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab12:	2303      	movs	r3, #3
 800ab14:	75fb      	strb	r3, [r7, #23]
          break;
 800ab16:	e016      	b.n	800ab46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d00f      	beq.n	800ab44 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f001 fc9b 	bl	800c462 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab30:	e008      	b.n	800ab44 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f001 fc94 	bl	800c462 <USBD_CtlError>
          ret = USBD_FAIL;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	75fb      	strb	r3, [r7, #23]
          break;
 800ab3e:	e002      	b.n	800ab46 <USBD_CDC_Setup+0x19e>
          break;
 800ab40:	bf00      	nop
 800ab42:	e008      	b.n	800ab56 <USBD_CDC_Setup+0x1ae>
          break;
 800ab44:	bf00      	nop
      }
      break;
 800ab46:	e006      	b.n	800ab56 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f001 fc89 	bl	800c462 <USBD_CtlError>
      ret = USBD_FAIL;
 800ab50:	2303      	movs	r3, #3
 800ab52:	75fb      	strb	r3, [r7, #23]
      break;
 800ab54:	bf00      	nop
  }

  return (uint8_t)ret;
 800ab56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	32b0      	adds	r2, #176	; 0xb0
 800ab7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d101      	bne.n	800ab8a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e065      	b.n	800ac56 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	32b0      	adds	r2, #176	; 0xb0
 800ab94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab9a:	78fb      	ldrb	r3, [r7, #3]
 800ab9c:	f003 020f 	and.w	r2, r3, #15
 800aba0:	6879      	ldr	r1, [r7, #4]
 800aba2:	4613      	mov	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	440b      	add	r3, r1
 800abac:	3318      	adds	r3, #24
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d02f      	beq.n	800ac14 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800abb4:	78fb      	ldrb	r3, [r7, #3]
 800abb6:	f003 020f 	and.w	r2, r3, #15
 800abba:	6879      	ldr	r1, [r7, #4]
 800abbc:	4613      	mov	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	440b      	add	r3, r1
 800abc6:	3318      	adds	r3, #24
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	78fb      	ldrb	r3, [r7, #3]
 800abcc:	f003 010f 	and.w	r1, r3, #15
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	460b      	mov	r3, r1
 800abd4:	00db      	lsls	r3, r3, #3
 800abd6:	440b      	add	r3, r1
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4403      	add	r3, r0
 800abdc:	3348      	adds	r3, #72	; 0x48
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	fbb2 f1f3 	udiv	r1, r2, r3
 800abe4:	fb01 f303 	mul.w	r3, r1, r3
 800abe8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800abea:	2b00      	cmp	r3, #0
 800abec:	d112      	bne.n	800ac14 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800abee:	78fb      	ldrb	r3, [r7, #3]
 800abf0:	f003 020f 	and.w	r2, r3, #15
 800abf4:	6879      	ldr	r1, [r7, #4]
 800abf6:	4613      	mov	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	440b      	add	r3, r1
 800ac00:	3318      	adds	r3, #24
 800ac02:	2200      	movs	r2, #0
 800ac04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac06:	78f9      	ldrb	r1, [r7, #3]
 800ac08:	2300      	movs	r3, #0
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f002 f9a8 	bl	800cf62 <USBD_LL_Transmit>
 800ac12:	e01f      	b.n	800ac54 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	33b0      	adds	r3, #176	; 0xb0
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d010      	beq.n	800ac54 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	33b0      	adds	r3, #176	; 0xb0
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ac50:	78fa      	ldrb	r2, [r7, #3]
 800ac52:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	32b0      	adds	r2, #176	; 0xb0
 800ac74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	32b0      	adds	r2, #176	; 0xb0
 800ac84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	e01a      	b.n	800acc6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac90:	78fb      	ldrb	r3, [r7, #3]
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f002 f9a6 	bl	800cfe6 <USBD_LL_GetRxDataSize>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	33b0      	adds	r3, #176	; 0xb0
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800acc0:	4611      	mov	r1, r2
 800acc2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	32b0      	adds	r2, #176	; 0xb0
 800ace0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d101      	bne.n	800acf0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800acec:	2303      	movs	r3, #3
 800acee:	e025      	b.n	800ad3c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	33b0      	adds	r3, #176	; 0xb0
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d01a      	beq.n	800ad3a <USBD_CDC_EP0_RxReady+0x6c>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ad0a:	2bff      	cmp	r3, #255	; 0xff
 800ad0c:	d015      	beq.n	800ad3a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	33b0      	adds	r3, #176	; 0xb0
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ad26:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad2e:	b292      	uxth	r2, r2
 800ad30:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	22ff      	movs	r2, #255	; 0xff
 800ad36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b086      	sub	sp, #24
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad4c:	2182      	movs	r1, #130	; 0x82
 800ad4e:	4818      	ldr	r0, [pc, #96]	; (800adb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad50:	f000 fd4f 	bl	800b7f2 <USBD_GetEpDesc>
 800ad54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad56:	2101      	movs	r1, #1
 800ad58:	4815      	ldr	r0, [pc, #84]	; (800adb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad5a:	f000 fd4a 	bl	800b7f2 <USBD_GetEpDesc>
 800ad5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad60:	2181      	movs	r1, #129	; 0x81
 800ad62:	4813      	ldr	r0, [pc, #76]	; (800adb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad64:	f000 fd45 	bl	800b7f2 <USBD_GetEpDesc>
 800ad68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2210      	movs	r2, #16
 800ad74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d006      	beq.n	800ad8a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad84:	711a      	strb	r2, [r3, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d006      	beq.n	800ad9e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad98:	711a      	strb	r2, [r3, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2243      	movs	r2, #67	; 0x43
 800ada2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ada4:	4b02      	ldr	r3, [pc, #8]	; (800adb0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20000050 	.word	0x20000050

0800adb4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800adbc:	2182      	movs	r1, #130	; 0x82
 800adbe:	4818      	ldr	r0, [pc, #96]	; (800ae20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800adc0:	f000 fd17 	bl	800b7f2 <USBD_GetEpDesc>
 800adc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800adc6:	2101      	movs	r1, #1
 800adc8:	4815      	ldr	r0, [pc, #84]	; (800ae20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800adca:	f000 fd12 	bl	800b7f2 <USBD_GetEpDesc>
 800adce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800add0:	2181      	movs	r1, #129	; 0x81
 800add2:	4813      	ldr	r0, [pc, #76]	; (800ae20 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800add4:	f000 fd0d 	bl	800b7f2 <USBD_GetEpDesc>
 800add8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	2210      	movs	r2, #16
 800ade4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d006      	beq.n	800adfa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	2200      	movs	r2, #0
 800adf0:	711a      	strb	r2, [r3, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f042 0202 	orr.w	r2, r2, #2
 800adf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d006      	beq.n	800ae0e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	711a      	strb	r2, [r3, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f042 0202 	orr.w	r2, r2, #2
 800ae0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2243      	movs	r2, #67	; 0x43
 800ae12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae14:	4b02      	ldr	r3, [pc, #8]	; (800ae20 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	20000050 	.word	0x20000050

0800ae24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae2c:	2182      	movs	r1, #130	; 0x82
 800ae2e:	4818      	ldr	r0, [pc, #96]	; (800ae90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae30:	f000 fcdf 	bl	800b7f2 <USBD_GetEpDesc>
 800ae34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae36:	2101      	movs	r1, #1
 800ae38:	4815      	ldr	r0, [pc, #84]	; (800ae90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae3a:	f000 fcda 	bl	800b7f2 <USBD_GetEpDesc>
 800ae3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae40:	2181      	movs	r1, #129	; 0x81
 800ae42:	4813      	ldr	r0, [pc, #76]	; (800ae90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae44:	f000 fcd5 	bl	800b7f2 <USBD_GetEpDesc>
 800ae48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	2210      	movs	r2, #16
 800ae54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d006      	beq.n	800ae6a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae64:	711a      	strb	r2, [r3, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d006      	beq.n	800ae7e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae78:	711a      	strb	r2, [r3, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2243      	movs	r2, #67	; 0x43
 800ae82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae84:	4b02      	ldr	r3, [pc, #8]	; (800ae90 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	20000050 	.word	0x20000050

0800ae94 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	220a      	movs	r2, #10
 800aea0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aea2:	4b03      	ldr	r3, [pc, #12]	; (800aeb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	2000000c 	.word	0x2000000c

0800aeb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d101      	bne.n	800aec8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aec4:	2303      	movs	r3, #3
 800aec6:	e009      	b.n	800aedc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	33b0      	adds	r3, #176	; 0xb0
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	32b0      	adds	r2, #176	; 0xb0
 800aefe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af02:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d101      	bne.n	800af0e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800af0a:	2303      	movs	r3, #3
 800af0c:	e008      	b.n	800af20 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	371c      	adds	r7, #28
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	32b0      	adds	r2, #176	; 0xb0
 800af40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d101      	bne.n	800af50 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e004      	b.n	800af5a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
	...

0800af68 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	32b0      	adds	r2, #176	; 0xb0
 800af7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800af80:	2301      	movs	r3, #1
 800af82:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	32b0      	adds	r2, #176	; 0xb0
 800af8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d101      	bne.n	800af9a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800af96:	2303      	movs	r3, #3
 800af98:	e025      	b.n	800afe6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d11f      	bne.n	800afe4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800afac:	4b10      	ldr	r3, [pc, #64]	; (800aff0 <USBD_CDC_TransmitPacket+0x88>)
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	f003 020f 	and.w	r2, r3, #15
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	4613      	mov	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	4413      	add	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	4403      	add	r3, r0
 800afc6:	3318      	adds	r3, #24
 800afc8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800afca:	4b09      	ldr	r3, [pc, #36]	; (800aff0 <USBD_CDC_TransmitPacket+0x88>)
 800afcc:	7819      	ldrb	r1, [r3, #0]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f001 ffc1 	bl	800cf62 <USBD_LL_Transmit>

    ret = USBD_OK;
 800afe0:	2300      	movs	r3, #0
 800afe2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20000093 	.word	0x20000093

0800aff4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	32b0      	adds	r2, #176	; 0xb0
 800b006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	32b0      	adds	r2, #176	; 0xb0
 800b016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d101      	bne.n	800b022 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b01e:	2303      	movs	r3, #3
 800b020:	e018      	b.n	800b054 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	7c1b      	ldrb	r3, [r3, #16]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10a      	bne.n	800b040 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b02a:	4b0c      	ldr	r3, [pc, #48]	; (800b05c <USBD_CDC_ReceivePacket+0x68>)
 800b02c:	7819      	ldrb	r1, [r3, #0]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b034:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f001 ffb3 	bl	800cfa4 <USBD_LL_PrepareReceive>
 800b03e:	e008      	b.n	800b052 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b040:	4b06      	ldr	r3, [pc, #24]	; (800b05c <USBD_CDC_ReceivePacket+0x68>)
 800b042:	7819      	ldrb	r1, [r3, #0]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b04a:	2340      	movs	r3, #64	; 0x40
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 ffa9 	bl	800cfa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	20000094 	.word	0x20000094

0800b060 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	4613      	mov	r3, r2
 800b06c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b074:	2303      	movs	r3, #3
 800b076:	e01f      	b.n	800b0b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	79fa      	ldrb	r2, [r7, #7]
 800b0aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f001 fe23 	bl	800ccf8 <USBD_LL_Init>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3718      	adds	r7, #24
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d101      	bne.n	800b0d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	e025      	b.n	800b124 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	32ae      	adds	r2, #174	; 0xae
 800b0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00f      	beq.n	800b114 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	32ae      	adds	r2, #174	; 0xae
 800b0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b104:	f107 020e 	add.w	r2, r7, #14
 800b108:	4610      	mov	r0, r2
 800b10a:	4798      	blx	r3
 800b10c:	4602      	mov	r2, r0
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f001 fe2b 	bl	800cd90 <USBD_LL_Start>
 800b13a:	4603      	mov	r3, r0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b14c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b14e:	4618      	mov	r0, r3
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	460b      	mov	r3, r1
 800b164:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b170:	2b00      	cmp	r3, #0
 800b172:	d009      	beq.n	800b188 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	78fa      	ldrb	r2, [r7, #3]
 800b17e:	4611      	mov	r1, r2
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	4798      	blx	r3
 800b184:	4603      	mov	r3, r0
 800b186:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b188:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	460b      	mov	r3, r1
 800b19c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	78fa      	ldrb	r2, [r7, #3]
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	4798      	blx	r3
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d001      	beq.n	800b1bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b084      	sub	sp, #16
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f001 f908 	bl	800c3ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b1fa:	f003 031f 	and.w	r3, r3, #31
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d01a      	beq.n	800b238 <USBD_LL_SetupStage+0x72>
 800b202:	2b02      	cmp	r3, #2
 800b204:	d822      	bhi.n	800b24c <USBD_LL_SetupStage+0x86>
 800b206:	2b00      	cmp	r3, #0
 800b208:	d002      	beq.n	800b210 <USBD_LL_SetupStage+0x4a>
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d00a      	beq.n	800b224 <USBD_LL_SetupStage+0x5e>
 800b20e:	e01d      	b.n	800b24c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b216:	4619      	mov	r1, r3
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fb5f 	bl	800b8dc <USBD_StdDevReq>
 800b21e:	4603      	mov	r3, r0
 800b220:	73fb      	strb	r3, [r7, #15]
      break;
 800b222:	e020      	b.n	800b266 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b22a:	4619      	mov	r1, r3
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fbc7 	bl	800b9c0 <USBD_StdItfReq>
 800b232:	4603      	mov	r3, r0
 800b234:	73fb      	strb	r3, [r7, #15]
      break;
 800b236:	e016      	b.n	800b266 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fc29 	bl	800ba98 <USBD_StdEPReq>
 800b246:	4603      	mov	r3, r0
 800b248:	73fb      	strb	r3, [r7, #15]
      break;
 800b24a:	e00c      	b.n	800b266 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b252:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b256:	b2db      	uxtb	r3, r3
 800b258:	4619      	mov	r1, r3
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f001 fdf8 	bl	800ce50 <USBD_LL_StallEP>
 800b260:	4603      	mov	r3, r0
 800b262:	73fb      	strb	r3, [r7, #15]
      break;
 800b264:	bf00      	nop
  }

  return ret;
 800b266:	7bfb      	ldrb	r3, [r7, #15]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	460b      	mov	r3, r1
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b27e:	2300      	movs	r3, #0
 800b280:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b282:	7afb      	ldrb	r3, [r7, #11]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d16e      	bne.n	800b366 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b28e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b296:	2b03      	cmp	r3, #3
 800b298:	f040 8098 	bne.w	800b3cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	689a      	ldr	r2, [r3, #8]
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d913      	bls.n	800b2d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	689a      	ldr	r2, [r3, #8]
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	1ad2      	subs	r2, r2, r3
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	68da      	ldr	r2, [r3, #12]
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	bf28      	it	cs
 800b2c2:	4613      	movcs	r3, r2
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	6879      	ldr	r1, [r7, #4]
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f001 f984 	bl	800c5d6 <USBD_CtlContinueRx>
 800b2ce:	e07d      	b.n	800b3cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b2d6:	f003 031f 	and.w	r3, r3, #31
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d014      	beq.n	800b308 <USBD_LL_DataOutStage+0x98>
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d81d      	bhi.n	800b31e <USBD_LL_DataOutStage+0xae>
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d002      	beq.n	800b2ec <USBD_LL_DataOutStage+0x7c>
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d003      	beq.n	800b2f2 <USBD_LL_DataOutStage+0x82>
 800b2ea:	e018      	b.n	800b31e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	75bb      	strb	r3, [r7, #22]
            break;
 800b2f0:	e018      	b.n	800b324 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f000 fa5e 	bl	800b7be <USBD_CoreFindIF>
 800b302:	4603      	mov	r3, r0
 800b304:	75bb      	strb	r3, [r7, #22]
            break;
 800b306:	e00d      	b.n	800b324 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	4619      	mov	r1, r3
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f000 fa60 	bl	800b7d8 <USBD_CoreFindEP>
 800b318:	4603      	mov	r3, r0
 800b31a:	75bb      	strb	r3, [r7, #22]
            break;
 800b31c:	e002      	b.n	800b324 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b31e:	2300      	movs	r3, #0
 800b320:	75bb      	strb	r3, [r7, #22]
            break;
 800b322:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b324:	7dbb      	ldrb	r3, [r7, #22]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d119      	bne.n	800b35e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b03      	cmp	r3, #3
 800b334:	d113      	bne.n	800b35e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b336:	7dba      	ldrb	r2, [r7, #22]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	32ae      	adds	r2, #174	; 0xae
 800b33c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00b      	beq.n	800b35e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b346:	7dba      	ldrb	r2, [r7, #22]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b34e:	7dba      	ldrb	r2, [r7, #22]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	32ae      	adds	r2, #174	; 0xae
 800b354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f001 f94a 	bl	800c5f8 <USBD_CtlSendStatus>
 800b364:	e032      	b.n	800b3cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b366:	7afb      	ldrb	r3, [r7, #11]
 800b368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	4619      	mov	r1, r3
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f000 fa31 	bl	800b7d8 <USBD_CoreFindEP>
 800b376:	4603      	mov	r3, r0
 800b378:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b37a:	7dbb      	ldrb	r3, [r7, #22]
 800b37c:	2bff      	cmp	r3, #255	; 0xff
 800b37e:	d025      	beq.n	800b3cc <USBD_LL_DataOutStage+0x15c>
 800b380:	7dbb      	ldrb	r3, [r7, #22]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d122      	bne.n	800b3cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b03      	cmp	r3, #3
 800b390:	d117      	bne.n	800b3c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b392:	7dba      	ldrb	r2, [r7, #22]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	32ae      	adds	r2, #174	; 0xae
 800b398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00f      	beq.n	800b3c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b3a2:	7dba      	ldrb	r2, [r7, #22]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b3aa:	7dba      	ldrb	r2, [r7, #22]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	32ae      	adds	r2, #174	; 0xae
 800b3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b4:	699b      	ldr	r3, [r3, #24]
 800b3b6:	7afa      	ldrb	r2, [r7, #11]
 800b3b8:	4611      	mov	r1, r2
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	4798      	blx	r3
 800b3be:	4603      	mov	r3, r0
 800b3c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b3c2:	7dfb      	ldrb	r3, [r7, #23]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b3c8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ca:	e000      	b.n	800b3ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3718      	adds	r7, #24
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b086      	sub	sp, #24
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	60f8      	str	r0, [r7, #12]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	607a      	str	r2, [r7, #4]
 800b3e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b3e4:	7afb      	ldrb	r3, [r7, #11]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d16f      	bne.n	800b4ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	3314      	adds	r3, #20
 800b3ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d15a      	bne.n	800b4b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	689a      	ldr	r2, [r3, #8]
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	429a      	cmp	r2, r3
 800b404:	d914      	bls.n	800b430 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	689a      	ldr	r2, [r3, #8]
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	1ad2      	subs	r2, r2, r3
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	461a      	mov	r2, r3
 800b41a:	6879      	ldr	r1, [r7, #4]
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f001 f8ac 	bl	800c57a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b422:	2300      	movs	r3, #0
 800b424:	2200      	movs	r2, #0
 800b426:	2100      	movs	r1, #0
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f001 fdbb 	bl	800cfa4 <USBD_LL_PrepareReceive>
 800b42e:	e03f      	b.n	800b4b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	68da      	ldr	r2, [r3, #12]
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d11c      	bne.n	800b476 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b444:	429a      	cmp	r2, r3
 800b446:	d316      	bcc.n	800b476 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	685a      	ldr	r2, [r3, #4]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b452:	429a      	cmp	r2, r3
 800b454:	d20f      	bcs.n	800b476 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b456:	2200      	movs	r2, #0
 800b458:	2100      	movs	r1, #0
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f001 f88d 	bl	800c57a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b468:	2300      	movs	r3, #0
 800b46a:	2200      	movs	r2, #0
 800b46c:	2100      	movs	r1, #0
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f001 fd98 	bl	800cfa4 <USBD_LL_PrepareReceive>
 800b474:	e01c      	b.n	800b4b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b03      	cmp	r3, #3
 800b480:	d10f      	bne.n	800b4a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d009      	beq.n	800b4a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4a2:	2180      	movs	r1, #128	; 0x80
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f001 fcd3 	bl	800ce50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f001 f8b7 	bl	800c61e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d03a      	beq.n	800b530 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f7ff fe42 	bl	800b144 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b4c8:	e032      	b.n	800b530 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b4ca:	7afb      	ldrb	r3, [r7, #11]
 800b4cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f000 f97f 	bl	800b7d8 <USBD_CoreFindEP>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
 800b4e0:	2bff      	cmp	r3, #255	; 0xff
 800b4e2:	d025      	beq.n	800b530 <USBD_LL_DataInStage+0x15a>
 800b4e4:	7dfb      	ldrb	r3, [r7, #23]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d122      	bne.n	800b530 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d11c      	bne.n	800b530 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b4f6:	7dfa      	ldrb	r2, [r7, #23]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	32ae      	adds	r2, #174	; 0xae
 800b4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d014      	beq.n	800b530 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b506:	7dfa      	ldrb	r2, [r7, #23]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b50e:	7dfa      	ldrb	r2, [r7, #23]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	32ae      	adds	r2, #174	; 0xae
 800b514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	7afa      	ldrb	r2, [r7, #11]
 800b51c:	4611      	mov	r1, r2
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	4798      	blx	r3
 800b522:	4603      	mov	r3, r0
 800b524:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b526:	7dbb      	ldrb	r3, [r7, #22]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b52c:	7dbb      	ldrb	r3, [r7, #22]
 800b52e:	e000      	b.n	800b532 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b084      	sub	sp, #16
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b542:	2300      	movs	r3, #0
 800b544:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b572:	2b00      	cmp	r3, #0
 800b574:	d014      	beq.n	800b5a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00e      	beq.n	800b5a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	6852      	ldr	r2, [r2, #4]
 800b58e:	b2d2      	uxtb	r2, r2
 800b590:	4611      	mov	r1, r2
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b59c:	2303      	movs	r3, #3
 800b59e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5a0:	2340      	movs	r3, #64	; 0x40
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f001 fc0d 	bl	800cdc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2240      	movs	r2, #64	; 0x40
 800b5b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5bc:	2340      	movs	r3, #64	; 0x40
 800b5be:	2200      	movs	r2, #0
 800b5c0:	2180      	movs	r1, #128	; 0x80
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 fbff 	bl	800cdc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2240      	movs	r2, #64	; 0x40
 800b5d2:	621a      	str	r2, [r3, #32]

  return ret;
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b083      	sub	sp, #12
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	78fa      	ldrb	r2, [r7, #3]
 800b5ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b5fe:	b480      	push	{r7}
 800b600:	b083      	sub	sp, #12
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2204      	movs	r2, #4
 800b618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr

0800b62a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b62a:	b480      	push	{r7}
 800b62c:	b083      	sub	sp, #12
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	2b04      	cmp	r3, #4
 800b63c:	d106      	bne.n	800b64c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b644:	b2da      	uxtb	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b082      	sub	sp, #8
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b03      	cmp	r3, #3
 800b66c:	d110      	bne.n	800b690 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00b      	beq.n	800b690 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b67e:	69db      	ldr	r3, [r3, #28]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d005      	beq.n	800b690 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b68a:	69db      	ldr	r3, [r3, #28]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	32ae      	adds	r2, #174	; 0xae
 800b6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d101      	bne.n	800b6bc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b6b8:	2303      	movs	r3, #3
 800b6ba:	e01c      	b.n	800b6f6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b03      	cmp	r3, #3
 800b6c6:	d115      	bne.n	800b6f4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	32ae      	adds	r2, #174	; 0xae
 800b6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d6:	6a1b      	ldr	r3, [r3, #32]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00b      	beq.n	800b6f4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	32ae      	adds	r2, #174	; 0xae
 800b6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ea:	6a1b      	ldr	r3, [r3, #32]
 800b6ec:	78fa      	ldrb	r2, [r7, #3]
 800b6ee:	4611      	mov	r1, r2
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b082      	sub	sp, #8
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	460b      	mov	r3, r1
 800b708:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	32ae      	adds	r2, #174	; 0xae
 800b714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d101      	bne.n	800b720 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b71c:	2303      	movs	r3, #3
 800b71e:	e01c      	b.n	800b75a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b726:	b2db      	uxtb	r3, r3
 800b728:	2b03      	cmp	r3, #3
 800b72a:	d115      	bne.n	800b758 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	32ae      	adds	r2, #174	; 0xae
 800b736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00b      	beq.n	800b758 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	32ae      	adds	r2, #174	; 0xae
 800b74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b750:	78fa      	ldrb	r2, [r7, #3]
 800b752:	4611      	mov	r1, r2
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b762:	b480      	push	{r7}
 800b764:	b083      	sub	sp, #12
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b780:	2300      	movs	r3, #0
 800b782:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00e      	beq.n	800b7b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	6852      	ldr	r2, [r2, #4]
 800b7a2:	b2d2      	uxtb	r2, r2
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	4798      	blx	r3
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b083      	sub	sp, #12
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b7ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b7e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b086      	sub	sp, #24
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b806:	2300      	movs	r3, #0
 800b808:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	885b      	ldrh	r3, [r3, #2]
 800b80e:	b29a      	uxth	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	b29b      	uxth	r3, r3
 800b816:	429a      	cmp	r2, r3
 800b818:	d920      	bls.n	800b85c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	b29b      	uxth	r3, r3
 800b820:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b822:	e013      	b.n	800b84c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b824:	f107 030a 	add.w	r3, r7, #10
 800b828:	4619      	mov	r1, r3
 800b82a:	6978      	ldr	r0, [r7, #20]
 800b82c:	f000 f81b 	bl	800b866 <USBD_GetNextDesc>
 800b830:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	785b      	ldrb	r3, [r3, #1]
 800b836:	2b05      	cmp	r3, #5
 800b838:	d108      	bne.n	800b84c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	789b      	ldrb	r3, [r3, #2]
 800b842:	78fa      	ldrb	r2, [r7, #3]
 800b844:	429a      	cmp	r2, r3
 800b846:	d008      	beq.n	800b85a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b848:	2300      	movs	r3, #0
 800b84a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	885b      	ldrh	r3, [r3, #2]
 800b850:	b29a      	uxth	r2, r3
 800b852:	897b      	ldrh	r3, [r7, #10]
 800b854:	429a      	cmp	r2, r3
 800b856:	d8e5      	bhi.n	800b824 <USBD_GetEpDesc+0x32>
 800b858:	e000      	b.n	800b85c <USBD_GetEpDesc+0x6a>
          break;
 800b85a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b85c:	693b      	ldr	r3, [r7, #16]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3718      	adds	r7, #24
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b866:	b480      	push	{r7}
 800b868:	b085      	sub	sp, #20
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	881a      	ldrh	r2, [r3, #0]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	4413      	add	r3, r2
 800b880:	b29a      	uxth	r2, r3
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	461a      	mov	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	4413      	add	r3, r2
 800b890:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b892:	68fb      	ldr	r3, [r7, #12]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3714      	adds	r7, #20
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b8be:	8a3b      	ldrh	r3, [r7, #16]
 800b8c0:	021b      	lsls	r3, r3, #8
 800b8c2:	b21a      	sxth	r2, r3
 800b8c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	b21b      	sxth	r3, r3
 800b8cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b8ce:	89fb      	ldrh	r3, [r7, #14]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	371c      	adds	r7, #28
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8f2:	2b40      	cmp	r3, #64	; 0x40
 800b8f4:	d005      	beq.n	800b902 <USBD_StdDevReq+0x26>
 800b8f6:	2b40      	cmp	r3, #64	; 0x40
 800b8f8:	d857      	bhi.n	800b9aa <USBD_StdDevReq+0xce>
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00f      	beq.n	800b91e <USBD_StdDevReq+0x42>
 800b8fe:	2b20      	cmp	r3, #32
 800b900:	d153      	bne.n	800b9aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	32ae      	adds	r2, #174	; 0xae
 800b90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	4798      	blx	r3
 800b918:	4603      	mov	r3, r0
 800b91a:	73fb      	strb	r3, [r7, #15]
      break;
 800b91c:	e04a      	b.n	800b9b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	785b      	ldrb	r3, [r3, #1]
 800b922:	2b09      	cmp	r3, #9
 800b924:	d83b      	bhi.n	800b99e <USBD_StdDevReq+0xc2>
 800b926:	a201      	add	r2, pc, #4	; (adr r2, 800b92c <USBD_StdDevReq+0x50>)
 800b928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b92c:	0800b981 	.word	0x0800b981
 800b930:	0800b995 	.word	0x0800b995
 800b934:	0800b99f 	.word	0x0800b99f
 800b938:	0800b98b 	.word	0x0800b98b
 800b93c:	0800b99f 	.word	0x0800b99f
 800b940:	0800b95f 	.word	0x0800b95f
 800b944:	0800b955 	.word	0x0800b955
 800b948:	0800b99f 	.word	0x0800b99f
 800b94c:	0800b977 	.word	0x0800b977
 800b950:	0800b969 	.word	0x0800b969
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b954:	6839      	ldr	r1, [r7, #0]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fa3c 	bl	800bdd4 <USBD_GetDescriptor>
          break;
 800b95c:	e024      	b.n	800b9a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b95e:	6839      	ldr	r1, [r7, #0]
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fba1 	bl	800c0a8 <USBD_SetAddress>
          break;
 800b966:	e01f      	b.n	800b9a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fbe0 	bl	800c130 <USBD_SetConfig>
 800b970:	4603      	mov	r3, r0
 800b972:	73fb      	strb	r3, [r7, #15]
          break;
 800b974:	e018      	b.n	800b9a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b976:	6839      	ldr	r1, [r7, #0]
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 fc83 	bl	800c284 <USBD_GetConfig>
          break;
 800b97e:	e013      	b.n	800b9a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fcb4 	bl	800c2f0 <USBD_GetStatus>
          break;
 800b988:	e00e      	b.n	800b9a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fce3 	bl	800c358 <USBD_SetFeature>
          break;
 800b992:	e009      	b.n	800b9a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b994:	6839      	ldr	r1, [r7, #0]
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fd07 	bl	800c3aa <USBD_ClrFeature>
          break;
 800b99c:	e004      	b.n	800b9a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b99e:	6839      	ldr	r1, [r7, #0]
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fd5e 	bl	800c462 <USBD_CtlError>
          break;
 800b9a6:	bf00      	nop
      }
      break;
 800b9a8:	e004      	b.n	800b9b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b9aa:	6839      	ldr	r1, [r7, #0]
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fd58 	bl	800c462 <USBD_CtlError>
      break;
 800b9b2:	bf00      	nop
  }

  return ret;
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop

0800b9c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9d6:	2b40      	cmp	r3, #64	; 0x40
 800b9d8:	d005      	beq.n	800b9e6 <USBD_StdItfReq+0x26>
 800b9da:	2b40      	cmp	r3, #64	; 0x40
 800b9dc:	d852      	bhi.n	800ba84 <USBD_StdItfReq+0xc4>
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d001      	beq.n	800b9e6 <USBD_StdItfReq+0x26>
 800b9e2:	2b20      	cmp	r3, #32
 800b9e4:	d14e      	bne.n	800ba84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d840      	bhi.n	800ba76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	889b      	ldrh	r3, [r3, #4]
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d836      	bhi.n	800ba6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	889b      	ldrh	r3, [r3, #4]
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7ff fed9 	bl	800b7be <USBD_CoreFindIF>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba10:	7bbb      	ldrb	r3, [r7, #14]
 800ba12:	2bff      	cmp	r3, #255	; 0xff
 800ba14:	d01d      	beq.n	800ba52 <USBD_StdItfReq+0x92>
 800ba16:	7bbb      	ldrb	r3, [r7, #14]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d11a      	bne.n	800ba52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ba1c:	7bba      	ldrb	r2, [r7, #14]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	32ae      	adds	r2, #174	; 0xae
 800ba22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d00f      	beq.n	800ba4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ba2c:	7bba      	ldrb	r2, [r7, #14]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba34:	7bba      	ldrb	r2, [r7, #14]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	32ae      	adds	r2, #174	; 0xae
 800ba3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	4798      	blx	r3
 800ba46:	4603      	mov	r3, r0
 800ba48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba4a:	e004      	b.n	800ba56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba50:	e001      	b.n	800ba56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ba52:	2303      	movs	r3, #3
 800ba54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	88db      	ldrh	r3, [r3, #6]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d110      	bne.n	800ba80 <USBD_StdItfReq+0xc0>
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d10d      	bne.n	800ba80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 fdc7 	bl	800c5f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ba6a:	e009      	b.n	800ba80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fcf7 	bl	800c462 <USBD_CtlError>
          break;
 800ba74:	e004      	b.n	800ba80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ba76:	6839      	ldr	r1, [r7, #0]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fcf2 	bl	800c462 <USBD_CtlError>
          break;
 800ba7e:	e000      	b.n	800ba82 <USBD_StdItfReq+0xc2>
          break;
 800ba80:	bf00      	nop
      }
      break;
 800ba82:	e004      	b.n	800ba8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ba84:	6839      	ldr	r1, [r7, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 fceb 	bl	800c462 <USBD_CtlError>
      break;
 800ba8c:	bf00      	nop
  }

  return ret;
 800ba8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800baa2:	2300      	movs	r3, #0
 800baa4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	889b      	ldrh	r3, [r3, #4]
 800baaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bab4:	2b40      	cmp	r3, #64	; 0x40
 800bab6:	d007      	beq.n	800bac8 <USBD_StdEPReq+0x30>
 800bab8:	2b40      	cmp	r3, #64	; 0x40
 800baba:	f200 817f 	bhi.w	800bdbc <USBD_StdEPReq+0x324>
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d02a      	beq.n	800bb18 <USBD_StdEPReq+0x80>
 800bac2:	2b20      	cmp	r3, #32
 800bac4:	f040 817a 	bne.w	800bdbc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bac8:	7bbb      	ldrb	r3, [r7, #14]
 800baca:	4619      	mov	r1, r3
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f7ff fe83 	bl	800b7d8 <USBD_CoreFindEP>
 800bad2:	4603      	mov	r3, r0
 800bad4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bad6:	7b7b      	ldrb	r3, [r7, #13]
 800bad8:	2bff      	cmp	r3, #255	; 0xff
 800bada:	f000 8174 	beq.w	800bdc6 <USBD_StdEPReq+0x32e>
 800bade:	7b7b      	ldrb	r3, [r7, #13]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f040 8170 	bne.w	800bdc6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bae6:	7b7a      	ldrb	r2, [r7, #13]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800baee:	7b7a      	ldrb	r2, [r7, #13]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	32ae      	adds	r2, #174	; 0xae
 800baf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f000 8163 	beq.w	800bdc6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bb00:	7b7a      	ldrb	r2, [r7, #13]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	32ae      	adds	r2, #174	; 0xae
 800bb06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	4798      	blx	r3
 800bb12:	4603      	mov	r3, r0
 800bb14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bb16:	e156      	b.n	800bdc6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	785b      	ldrb	r3, [r3, #1]
 800bb1c:	2b03      	cmp	r3, #3
 800bb1e:	d008      	beq.n	800bb32 <USBD_StdEPReq+0x9a>
 800bb20:	2b03      	cmp	r3, #3
 800bb22:	f300 8145 	bgt.w	800bdb0 <USBD_StdEPReq+0x318>
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 809b 	beq.w	800bc62 <USBD_StdEPReq+0x1ca>
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d03c      	beq.n	800bbaa <USBD_StdEPReq+0x112>
 800bb30:	e13e      	b.n	800bdb0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d002      	beq.n	800bb44 <USBD_StdEPReq+0xac>
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	d016      	beq.n	800bb70 <USBD_StdEPReq+0xd8>
 800bb42:	e02c      	b.n	800bb9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb44:	7bbb      	ldrb	r3, [r7, #14]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00d      	beq.n	800bb66 <USBD_StdEPReq+0xce>
 800bb4a:	7bbb      	ldrb	r3, [r7, #14]
 800bb4c:	2b80      	cmp	r3, #128	; 0x80
 800bb4e:	d00a      	beq.n	800bb66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
 800bb52:	4619      	mov	r1, r3
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f001 f97b 	bl	800ce50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb5a:	2180      	movs	r1, #128	; 0x80
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f001 f977 	bl	800ce50 <USBD_LL_StallEP>
 800bb62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb64:	e020      	b.n	800bba8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bb66:	6839      	ldr	r1, [r7, #0]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fc7a 	bl	800c462 <USBD_CtlError>
              break;
 800bb6e:	e01b      	b.n	800bba8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	885b      	ldrh	r3, [r3, #2]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10e      	bne.n	800bb96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bb78:	7bbb      	ldrb	r3, [r7, #14]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00b      	beq.n	800bb96 <USBD_StdEPReq+0xfe>
 800bb7e:	7bbb      	ldrb	r3, [r7, #14]
 800bb80:	2b80      	cmp	r3, #128	; 0x80
 800bb82:	d008      	beq.n	800bb96 <USBD_StdEPReq+0xfe>
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	88db      	ldrh	r3, [r3, #6]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d104      	bne.n	800bb96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb8c:	7bbb      	ldrb	r3, [r7, #14]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f001 f95d 	bl	800ce50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fd2e 	bl	800c5f8 <USBD_CtlSendStatus>

              break;
 800bb9c:	e004      	b.n	800bba8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fc5e 	bl	800c462 <USBD_CtlError>
              break;
 800bba6:	bf00      	nop
          }
          break;
 800bba8:	e107      	b.n	800bdba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d002      	beq.n	800bbbc <USBD_StdEPReq+0x124>
 800bbb6:	2b03      	cmp	r3, #3
 800bbb8:	d016      	beq.n	800bbe8 <USBD_StdEPReq+0x150>
 800bbba:	e04b      	b.n	800bc54 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbbc:	7bbb      	ldrb	r3, [r7, #14]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00d      	beq.n	800bbde <USBD_StdEPReq+0x146>
 800bbc2:	7bbb      	ldrb	r3, [r7, #14]
 800bbc4:	2b80      	cmp	r3, #128	; 0x80
 800bbc6:	d00a      	beq.n	800bbde <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbc8:	7bbb      	ldrb	r3, [r7, #14]
 800bbca:	4619      	mov	r1, r3
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f001 f93f 	bl	800ce50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbd2:	2180      	movs	r1, #128	; 0x80
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f001 f93b 	bl	800ce50 <USBD_LL_StallEP>
 800bbda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbdc:	e040      	b.n	800bc60 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bbde:	6839      	ldr	r1, [r7, #0]
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 fc3e 	bl	800c462 <USBD_CtlError>
              break;
 800bbe6:	e03b      	b.n	800bc60 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	885b      	ldrh	r3, [r3, #2]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d136      	bne.n	800bc5e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bbf0:	7bbb      	ldrb	r3, [r7, #14]
 800bbf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d004      	beq.n	800bc04 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bbfa:	7bbb      	ldrb	r3, [r7, #14]
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f001 f945 	bl	800ce8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fcf7 	bl	800c5f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc0a:	7bbb      	ldrb	r3, [r7, #14]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f7ff fde2 	bl	800b7d8 <USBD_CoreFindEP>
 800bc14:	4603      	mov	r3, r0
 800bc16:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc18:	7b7b      	ldrb	r3, [r7, #13]
 800bc1a:	2bff      	cmp	r3, #255	; 0xff
 800bc1c:	d01f      	beq.n	800bc5e <USBD_StdEPReq+0x1c6>
 800bc1e:	7b7b      	ldrb	r3, [r7, #13]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d11c      	bne.n	800bc5e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bc24:	7b7a      	ldrb	r2, [r7, #13]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bc2c:	7b7a      	ldrb	r2, [r7, #13]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	32ae      	adds	r2, #174	; 0xae
 800bc32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d010      	beq.n	800bc5e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bc3c:	7b7a      	ldrb	r2, [r7, #13]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	32ae      	adds	r2, #174	; 0xae
 800bc42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	4798      	blx	r3
 800bc4e:	4603      	mov	r3, r0
 800bc50:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bc52:	e004      	b.n	800bc5e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 fc03 	bl	800c462 <USBD_CtlError>
              break;
 800bc5c:	e000      	b.n	800bc60 <USBD_StdEPReq+0x1c8>
              break;
 800bc5e:	bf00      	nop
          }
          break;
 800bc60:	e0ab      	b.n	800bdba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d002      	beq.n	800bc74 <USBD_StdEPReq+0x1dc>
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d032      	beq.n	800bcd8 <USBD_StdEPReq+0x240>
 800bc72:	e097      	b.n	800bda4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc74:	7bbb      	ldrb	r3, [r7, #14]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d007      	beq.n	800bc8a <USBD_StdEPReq+0x1f2>
 800bc7a:	7bbb      	ldrb	r3, [r7, #14]
 800bc7c:	2b80      	cmp	r3, #128	; 0x80
 800bc7e:	d004      	beq.n	800bc8a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 fbed 	bl	800c462 <USBD_CtlError>
                break;
 800bc88:	e091      	b.n	800bdae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	da0b      	bge.n	800bcaa <USBD_StdEPReq+0x212>
 800bc92:	7bbb      	ldrb	r3, [r7, #14]
 800bc94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc98:	4613      	mov	r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	4413      	add	r3, r2
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	3310      	adds	r3, #16
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	4413      	add	r3, r2
 800bca6:	3304      	adds	r3, #4
 800bca8:	e00b      	b.n	800bcc2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcaa:	7bbb      	ldrb	r3, [r7, #14]
 800bcac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4413      	add	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	2202      	movs	r2, #2
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fc37 	bl	800c544 <USBD_CtlSendData>
              break;
 800bcd6:	e06a      	b.n	800bdae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bcd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	da11      	bge.n	800bd04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bce0:	7bbb      	ldrb	r3, [r7, #14]
 800bce2:	f003 020f 	and.w	r2, r3, #15
 800bce6:	6879      	ldr	r1, [r7, #4]
 800bce8:	4613      	mov	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	440b      	add	r3, r1
 800bcf2:	3324      	adds	r3, #36	; 0x24
 800bcf4:	881b      	ldrh	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d117      	bne.n	800bd2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bcfa:	6839      	ldr	r1, [r7, #0]
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fbb0 	bl	800c462 <USBD_CtlError>
                  break;
 800bd02:	e054      	b.n	800bdae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd04:	7bbb      	ldrb	r3, [r7, #14]
 800bd06:	f003 020f 	and.w	r2, r3, #15
 800bd0a:	6879      	ldr	r1, [r7, #4]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	4413      	add	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	440b      	add	r3, r1
 800bd16:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd1a:	881b      	ldrh	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d104      	bne.n	800bd2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd20:	6839      	ldr	r1, [r7, #0]
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 fb9d 	bl	800c462 <USBD_CtlError>
                  break;
 800bd28:	e041      	b.n	800bdae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	da0b      	bge.n	800bd4a <USBD_StdEPReq+0x2b2>
 800bd32:	7bbb      	ldrb	r3, [r7, #14]
 800bd34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd38:	4613      	mov	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4413      	add	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	3310      	adds	r3, #16
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	4413      	add	r3, r2
 800bd46:	3304      	adds	r3, #4
 800bd48:	e00b      	b.n	800bd62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd4a:	7bbb      	ldrb	r3, [r7, #14]
 800bd4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd50:	4613      	mov	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4413      	add	r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	4413      	add	r3, r2
 800bd60:	3304      	adds	r3, #4
 800bd62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd64:	7bbb      	ldrb	r3, [r7, #14]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d002      	beq.n	800bd70 <USBD_StdEPReq+0x2d8>
 800bd6a:	7bbb      	ldrb	r3, [r7, #14]
 800bd6c:	2b80      	cmp	r3, #128	; 0x80
 800bd6e:	d103      	bne.n	800bd78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2200      	movs	r2, #0
 800bd74:	601a      	str	r2, [r3, #0]
 800bd76:	e00e      	b.n	800bd96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f001 f8a5 	bl	800cecc <USBD_LL_IsStallEP>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d003      	beq.n	800bd90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	601a      	str	r2, [r3, #0]
 800bd8e:	e002      	b.n	800bd96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	2200      	movs	r2, #0
 800bd94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	2202      	movs	r2, #2
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fbd1 	bl	800c544 <USBD_CtlSendData>
              break;
 800bda2:	e004      	b.n	800bdae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bda4:	6839      	ldr	r1, [r7, #0]
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 fb5b 	bl	800c462 <USBD_CtlError>
              break;
 800bdac:	bf00      	nop
          }
          break;
 800bdae:	e004      	b.n	800bdba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bdb0:	6839      	ldr	r1, [r7, #0]
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 fb55 	bl	800c462 <USBD_CtlError>
          break;
 800bdb8:	bf00      	nop
      }
      break;
 800bdba:	e005      	b.n	800bdc8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bdbc:	6839      	ldr	r1, [r7, #0]
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 fb4f 	bl	800c462 <USBD_CtlError>
      break;
 800bdc4:	e000      	b.n	800bdc8 <USBD_StdEPReq+0x330>
      break;
 800bdc6:	bf00      	nop
  }

  return ret;
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
	...

0800bdd4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bdde:	2300      	movs	r3, #0
 800bde0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bde6:	2300      	movs	r3, #0
 800bde8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	885b      	ldrh	r3, [r3, #2]
 800bdee:	0a1b      	lsrs	r3, r3, #8
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	2b06      	cmp	r3, #6
 800bdf6:	f200 8128 	bhi.w	800c04a <USBD_GetDescriptor+0x276>
 800bdfa:	a201      	add	r2, pc, #4	; (adr r2, 800be00 <USBD_GetDescriptor+0x2c>)
 800bdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be00:	0800be1d 	.word	0x0800be1d
 800be04:	0800be35 	.word	0x0800be35
 800be08:	0800be75 	.word	0x0800be75
 800be0c:	0800c04b 	.word	0x0800c04b
 800be10:	0800c04b 	.word	0x0800c04b
 800be14:	0800bfeb 	.word	0x0800bfeb
 800be18:	0800c017 	.word	0x0800c017
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	7c12      	ldrb	r2, [r2, #16]
 800be28:	f107 0108 	add.w	r1, r7, #8
 800be2c:	4610      	mov	r0, r2
 800be2e:	4798      	blx	r3
 800be30:	60f8      	str	r0, [r7, #12]
      break;
 800be32:	e112      	b.n	800c05a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	7c1b      	ldrb	r3, [r3, #16]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10d      	bne.n	800be58 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be44:	f107 0208 	add.w	r2, r7, #8
 800be48:	4610      	mov	r0, r2
 800be4a:	4798      	blx	r3
 800be4c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	3301      	adds	r3, #1
 800be52:	2202      	movs	r2, #2
 800be54:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be56:	e100      	b.n	800c05a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be60:	f107 0208 	add.w	r2, r7, #8
 800be64:	4610      	mov	r0, r2
 800be66:	4798      	blx	r3
 800be68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3301      	adds	r3, #1
 800be6e:	2202      	movs	r2, #2
 800be70:	701a      	strb	r2, [r3, #0]
      break;
 800be72:	e0f2      	b.n	800c05a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	885b      	ldrh	r3, [r3, #2]
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	2b05      	cmp	r3, #5
 800be7c:	f200 80ac 	bhi.w	800bfd8 <USBD_GetDescriptor+0x204>
 800be80:	a201      	add	r2, pc, #4	; (adr r2, 800be88 <USBD_GetDescriptor+0xb4>)
 800be82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be86:	bf00      	nop
 800be88:	0800bea1 	.word	0x0800bea1
 800be8c:	0800bed5 	.word	0x0800bed5
 800be90:	0800bf09 	.word	0x0800bf09
 800be94:	0800bf3d 	.word	0x0800bf3d
 800be98:	0800bf71 	.word	0x0800bf71
 800be9c:	0800bfa5 	.word	0x0800bfa5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00b      	beq.n	800bec4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	7c12      	ldrb	r2, [r2, #16]
 800beb8:	f107 0108 	add.w	r1, r7, #8
 800bebc:	4610      	mov	r0, r2
 800bebe:	4798      	blx	r3
 800bec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bec2:	e091      	b.n	800bfe8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 facb 	bl	800c462 <USBD_CtlError>
            err++;
 800becc:	7afb      	ldrb	r3, [r7, #11]
 800bece:	3301      	adds	r3, #1
 800bed0:	72fb      	strb	r3, [r7, #11]
          break;
 800bed2:	e089      	b.n	800bfe8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00b      	beq.n	800bef8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	7c12      	ldrb	r2, [r2, #16]
 800beec:	f107 0108 	add.w	r1, r7, #8
 800bef0:	4610      	mov	r0, r2
 800bef2:	4798      	blx	r3
 800bef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bef6:	e077      	b.n	800bfe8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fab1 	bl	800c462 <USBD_CtlError>
            err++;
 800bf00:	7afb      	ldrb	r3, [r7, #11]
 800bf02:	3301      	adds	r3, #1
 800bf04:	72fb      	strb	r3, [r7, #11]
          break;
 800bf06:	e06f      	b.n	800bfe8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00b      	beq.n	800bf2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf1a:	68db      	ldr	r3, [r3, #12]
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	7c12      	ldrb	r2, [r2, #16]
 800bf20:	f107 0108 	add.w	r1, r7, #8
 800bf24:	4610      	mov	r0, r2
 800bf26:	4798      	blx	r3
 800bf28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf2a:	e05d      	b.n	800bfe8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fa97 	bl	800c462 <USBD_CtlError>
            err++;
 800bf34:	7afb      	ldrb	r3, [r7, #11]
 800bf36:	3301      	adds	r3, #1
 800bf38:	72fb      	strb	r3, [r7, #11]
          break;
 800bf3a:	e055      	b.n	800bfe8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf42:	691b      	ldr	r3, [r3, #16]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d00b      	beq.n	800bf60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	7c12      	ldrb	r2, [r2, #16]
 800bf54:	f107 0108 	add.w	r1, r7, #8
 800bf58:	4610      	mov	r0, r2
 800bf5a:	4798      	blx	r3
 800bf5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf5e:	e043      	b.n	800bfe8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fa7d 	bl	800c462 <USBD_CtlError>
            err++;
 800bf68:	7afb      	ldrb	r3, [r7, #11]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf6e:	e03b      	b.n	800bfe8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf76:	695b      	ldr	r3, [r3, #20]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00b      	beq.n	800bf94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf82:	695b      	ldr	r3, [r3, #20]
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	7c12      	ldrb	r2, [r2, #16]
 800bf88:	f107 0108 	add.w	r1, r7, #8
 800bf8c:	4610      	mov	r0, r2
 800bf8e:	4798      	blx	r3
 800bf90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf92:	e029      	b.n	800bfe8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fa63 	bl	800c462 <USBD_CtlError>
            err++;
 800bf9c:	7afb      	ldrb	r3, [r7, #11]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	72fb      	strb	r3, [r7, #11]
          break;
 800bfa2:	e021      	b.n	800bfe8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfaa:	699b      	ldr	r3, [r3, #24]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00b      	beq.n	800bfc8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfb6:	699b      	ldr	r3, [r3, #24]
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	7c12      	ldrb	r2, [r2, #16]
 800bfbc:	f107 0108 	add.w	r1, r7, #8
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	4798      	blx	r3
 800bfc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfc6:	e00f      	b.n	800bfe8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfc8:	6839      	ldr	r1, [r7, #0]
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fa49 	bl	800c462 <USBD_CtlError>
            err++;
 800bfd0:	7afb      	ldrb	r3, [r7, #11]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	72fb      	strb	r3, [r7, #11]
          break;
 800bfd6:	e007      	b.n	800bfe8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fa41 	bl	800c462 <USBD_CtlError>
          err++;
 800bfe0:	7afb      	ldrb	r3, [r7, #11]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bfe6:	bf00      	nop
      }
      break;
 800bfe8:	e037      	b.n	800c05a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	7c1b      	ldrb	r3, [r3, #16]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d109      	bne.n	800c006 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bffa:	f107 0208 	add.w	r2, r7, #8
 800bffe:	4610      	mov	r0, r2
 800c000:	4798      	blx	r3
 800c002:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c004:	e029      	b.n	800c05a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c006:	6839      	ldr	r1, [r7, #0]
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 fa2a 	bl	800c462 <USBD_CtlError>
        err++;
 800c00e:	7afb      	ldrb	r3, [r7, #11]
 800c010:	3301      	adds	r3, #1
 800c012:	72fb      	strb	r3, [r7, #11]
      break;
 800c014:	e021      	b.n	800c05a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	7c1b      	ldrb	r3, [r3, #16]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10d      	bne.n	800c03a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c026:	f107 0208 	add.w	r2, r7, #8
 800c02a:	4610      	mov	r0, r2
 800c02c:	4798      	blx	r3
 800c02e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	3301      	adds	r3, #1
 800c034:	2207      	movs	r2, #7
 800c036:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c038:	e00f      	b.n	800c05a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fa10 	bl	800c462 <USBD_CtlError>
        err++;
 800c042:	7afb      	ldrb	r3, [r7, #11]
 800c044:	3301      	adds	r3, #1
 800c046:	72fb      	strb	r3, [r7, #11]
      break;
 800c048:	e007      	b.n	800c05a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fa08 	bl	800c462 <USBD_CtlError>
      err++;
 800c052:	7afb      	ldrb	r3, [r7, #11]
 800c054:	3301      	adds	r3, #1
 800c056:	72fb      	strb	r3, [r7, #11]
      break;
 800c058:	bf00      	nop
  }

  if (err != 0U)
 800c05a:	7afb      	ldrb	r3, [r7, #11]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d11e      	bne.n	800c09e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	88db      	ldrh	r3, [r3, #6]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d016      	beq.n	800c096 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c068:	893b      	ldrh	r3, [r7, #8]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00e      	beq.n	800c08c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	88da      	ldrh	r2, [r3, #6]
 800c072:	893b      	ldrh	r3, [r7, #8]
 800c074:	4293      	cmp	r3, r2
 800c076:	bf28      	it	cs
 800c078:	4613      	movcs	r3, r2
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c07e:	893b      	ldrh	r3, [r7, #8]
 800c080:	461a      	mov	r2, r3
 800c082:	68f9      	ldr	r1, [r7, #12]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 fa5d 	bl	800c544 <USBD_CtlSendData>
 800c08a:	e009      	b.n	800c0a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c08c:	6839      	ldr	r1, [r7, #0]
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f9e7 	bl	800c462 <USBD_CtlError>
 800c094:	e004      	b.n	800c0a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 faae 	bl	800c5f8 <USBD_CtlSendStatus>
 800c09c:	e000      	b.n	800c0a0 <USBD_GetDescriptor+0x2cc>
    return;
 800c09e:	bf00      	nop
  }
}
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop

0800c0a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	889b      	ldrh	r3, [r3, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d131      	bne.n	800c11e <USBD_SetAddress+0x76>
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	88db      	ldrh	r3, [r3, #6]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d12d      	bne.n	800c11e <USBD_SetAddress+0x76>
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	885b      	ldrh	r3, [r3, #2]
 800c0c6:	2b7f      	cmp	r3, #127	; 0x7f
 800c0c8:	d829      	bhi.n	800c11e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	885b      	ldrh	r3, [r3, #2]
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d104      	bne.n	800c0ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 f9bc 	bl	800c462 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ea:	e01d      	b.n	800c128 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	7bfa      	ldrb	r2, [r7, #15]
 800c0f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0f4:	7bfb      	ldrb	r3, [r7, #15]
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 ff13 	bl	800cf24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fa7a 	bl	800c5f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c104:	7bfb      	ldrb	r3, [r7, #15]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d004      	beq.n	800c114 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2202      	movs	r2, #2
 800c10e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c112:	e009      	b.n	800c128 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c11c:	e004      	b.n	800c128 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 f99e 	bl	800c462 <USBD_CtlError>
  }
}
 800c126:	bf00      	nop
 800c128:	bf00      	nop
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	885b      	ldrh	r3, [r3, #2]
 800c142:	b2da      	uxtb	r2, r3
 800c144:	4b4e      	ldr	r3, [pc, #312]	; (800c280 <USBD_SetConfig+0x150>)
 800c146:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c148:	4b4d      	ldr	r3, [pc, #308]	; (800c280 <USBD_SetConfig+0x150>)
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d905      	bls.n	800c15c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c150:	6839      	ldr	r1, [r7, #0]
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 f985 	bl	800c462 <USBD_CtlError>
    return USBD_FAIL;
 800c158:	2303      	movs	r3, #3
 800c15a:	e08c      	b.n	800c276 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c162:	b2db      	uxtb	r3, r3
 800c164:	2b02      	cmp	r3, #2
 800c166:	d002      	beq.n	800c16e <USBD_SetConfig+0x3e>
 800c168:	2b03      	cmp	r3, #3
 800c16a:	d029      	beq.n	800c1c0 <USBD_SetConfig+0x90>
 800c16c:	e075      	b.n	800c25a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c16e:	4b44      	ldr	r3, [pc, #272]	; (800c280 <USBD_SetConfig+0x150>)
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d020      	beq.n	800c1b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c176:	4b42      	ldr	r3, [pc, #264]	; (800c280 <USBD_SetConfig+0x150>)
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	461a      	mov	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c180:	4b3f      	ldr	r3, [pc, #252]	; (800c280 <USBD_SetConfig+0x150>)
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7fe ffe7 	bl	800b15a <USBD_SetClassConfig>
 800c18c:	4603      	mov	r3, r0
 800c18e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c190:	7bfb      	ldrb	r3, [r7, #15]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d008      	beq.n	800c1a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c196:	6839      	ldr	r1, [r7, #0]
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 f962 	bl	800c462 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2202      	movs	r2, #2
 800c1a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1a6:	e065      	b.n	800c274 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fa25 	bl	800c5f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2203      	movs	r2, #3
 800c1b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c1b6:	e05d      	b.n	800c274 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 fa1d 	bl	800c5f8 <USBD_CtlSendStatus>
      break;
 800c1be:	e059      	b.n	800c274 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c1c0:	4b2f      	ldr	r3, [pc, #188]	; (800c280 <USBD_SetConfig+0x150>)
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d112      	bne.n	800c1ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c1d0:	4b2b      	ldr	r3, [pc, #172]	; (800c280 <USBD_SetConfig+0x150>)
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1da:	4b29      	ldr	r3, [pc, #164]	; (800c280 <USBD_SetConfig+0x150>)
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	4619      	mov	r1, r3
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f7fe ffd6 	bl	800b192 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 fa06 	bl	800c5f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1ec:	e042      	b.n	800c274 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c1ee:	4b24      	ldr	r3, [pc, #144]	; (800c280 <USBD_SetConfig+0x150>)
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d02a      	beq.n	800c252 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	b2db      	uxtb	r3, r3
 800c202:	4619      	mov	r1, r3
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7fe ffc4 	bl	800b192 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c20a:	4b1d      	ldr	r3, [pc, #116]	; (800c280 <USBD_SetConfig+0x150>)
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	461a      	mov	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c214:	4b1a      	ldr	r3, [pc, #104]	; (800c280 <USBD_SetConfig+0x150>)
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	4619      	mov	r1, r3
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f7fe ff9d 	bl	800b15a <USBD_SetClassConfig>
 800c220:	4603      	mov	r3, r0
 800c222:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c224:	7bfb      	ldrb	r3, [r7, #15]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00f      	beq.n	800c24a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c22a:	6839      	ldr	r1, [r7, #0]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f918 	bl	800c462 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	b2db      	uxtb	r3, r3
 800c238:	4619      	mov	r1, r3
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7fe ffa9 	bl	800b192 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2202      	movs	r2, #2
 800c244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c248:	e014      	b.n	800c274 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 f9d4 	bl	800c5f8 <USBD_CtlSendStatus>
      break;
 800c250:	e010      	b.n	800c274 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 f9d0 	bl	800c5f8 <USBD_CtlSendStatus>
      break;
 800c258:	e00c      	b.n	800c274 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c25a:	6839      	ldr	r1, [r7, #0]
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 f900 	bl	800c462 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c262:	4b07      	ldr	r3, [pc, #28]	; (800c280 <USBD_SetConfig+0x150>)
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	4619      	mov	r1, r3
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f7fe ff92 	bl	800b192 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c26e:	2303      	movs	r3, #3
 800c270:	73fb      	strb	r3, [r7, #15]
      break;
 800c272:	bf00      	nop
  }

  return ret;
 800c274:	7bfb      	ldrb	r3, [r7, #15]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	2000061c 	.word	0x2000061c

0800c284 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	88db      	ldrh	r3, [r3, #6]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d004      	beq.n	800c2a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c296:	6839      	ldr	r1, [r7, #0]
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 f8e2 	bl	800c462 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c29e:	e023      	b.n	800c2e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	dc02      	bgt.n	800c2b2 <USBD_GetConfig+0x2e>
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	dc03      	bgt.n	800c2b8 <USBD_GetConfig+0x34>
 800c2b0:	e015      	b.n	800c2de <USBD_GetConfig+0x5a>
 800c2b2:	2b03      	cmp	r3, #3
 800c2b4:	d00b      	beq.n	800c2ce <USBD_GetConfig+0x4a>
 800c2b6:	e012      	b.n	800c2de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	3308      	adds	r3, #8
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f93c 	bl	800c544 <USBD_CtlSendData>
        break;
 800c2cc:	e00c      	b.n	800c2e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	3304      	adds	r3, #4
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 f934 	bl	800c544 <USBD_CtlSendData>
        break;
 800c2dc:	e004      	b.n	800c2e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c2de:	6839      	ldr	r1, [r7, #0]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 f8be 	bl	800c462 <USBD_CtlError>
        break;
 800c2e6:	bf00      	nop
}
 800c2e8:	bf00      	nop
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c300:	b2db      	uxtb	r3, r3
 800c302:	3b01      	subs	r3, #1
 800c304:	2b02      	cmp	r3, #2
 800c306:	d81e      	bhi.n	800c346 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	88db      	ldrh	r3, [r3, #6]
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	d004      	beq.n	800c31a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f8a5 	bl	800c462 <USBD_CtlError>
        break;
 800c318:	e01a      	b.n	800c350 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2201      	movs	r2, #1
 800c31e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c326:	2b00      	cmp	r3, #0
 800c328:	d005      	beq.n	800c336 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	f043 0202 	orr.w	r2, r3, #2
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	330c      	adds	r3, #12
 800c33a:	2202      	movs	r2, #2
 800c33c:	4619      	mov	r1, r3
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 f900 	bl	800c544 <USBD_CtlSendData>
      break;
 800c344:	e004      	b.n	800c350 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 f88a 	bl	800c462 <USBD_CtlError>
      break;
 800c34e:	bf00      	nop
  }
}
 800c350:	bf00      	nop
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	885b      	ldrh	r3, [r3, #2]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d107      	bne.n	800c37a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 f940 	bl	800c5f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c378:	e013      	b.n	800c3a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	885b      	ldrh	r3, [r3, #2]
 800c37e:	2b02      	cmp	r3, #2
 800c380:	d10b      	bne.n	800c39a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	889b      	ldrh	r3, [r3, #4]
 800c386:	0a1b      	lsrs	r3, r3, #8
 800c388:	b29b      	uxth	r3, r3
 800c38a:	b2da      	uxtb	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 f930 	bl	800c5f8 <USBD_CtlSendStatus>
}
 800c398:	e003      	b.n	800c3a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c39a:	6839      	ldr	r1, [r7, #0]
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 f860 	bl	800c462 <USBD_CtlError>
}
 800c3a2:	bf00      	nop
 800c3a4:	3708      	adds	r7, #8
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b082      	sub	sp, #8
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d80b      	bhi.n	800c3da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	885b      	ldrh	r3, [r3, #2]
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d10c      	bne.n	800c3e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 f910 	bl	800c5f8 <USBD_CtlSendStatus>
      }
      break;
 800c3d8:	e004      	b.n	800c3e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c3da:	6839      	ldr	r1, [r7, #0]
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 f840 	bl	800c462 <USBD_CtlError>
      break;
 800c3e2:	e000      	b.n	800c3e6 <USBD_ClrFeature+0x3c>
      break;
 800c3e4:	bf00      	nop
  }
}
 800c3e6:	bf00      	nop
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b084      	sub	sp, #16
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	781a      	ldrb	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	3301      	adds	r3, #1
 800c408:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	781a      	ldrb	r2, [r3, #0]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	3301      	adds	r3, #1
 800c416:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f7ff fa41 	bl	800b8a0 <SWAPBYTE>
 800c41e:	4603      	mov	r3, r0
 800c420:	461a      	mov	r2, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3301      	adds	r3, #1
 800c42a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3301      	adds	r3, #1
 800c430:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f7ff fa34 	bl	800b8a0 <SWAPBYTE>
 800c438:	4603      	mov	r3, r0
 800c43a:	461a      	mov	r2, r3
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	3301      	adds	r3, #1
 800c444:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3301      	adds	r3, #1
 800c44a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f7ff fa27 	bl	800b8a0 <SWAPBYTE>
 800c452:	4603      	mov	r3, r0
 800c454:	461a      	mov	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	80da      	strh	r2, [r3, #6]
}
 800c45a:	bf00      	nop
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b082      	sub	sp, #8
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c46c:	2180      	movs	r1, #128	; 0x80
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fcee 	bl	800ce50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c474:	2100      	movs	r1, #0
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 fcea 	bl	800ce50 <USBD_LL_StallEP>
}
 800c47c:	bf00      	nop
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b086      	sub	sp, #24
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c490:	2300      	movs	r3, #0
 800c492:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d036      	beq.n	800c508 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c49e:	6938      	ldr	r0, [r7, #16]
 800c4a0:	f000 f836 	bl	800c510 <USBD_GetLen>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	005b      	lsls	r3, r3, #1
 800c4ac:	b29a      	uxth	r2, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c4b2:	7dfb      	ldrb	r3, [r7, #23]
 800c4b4:	68ba      	ldr	r2, [r7, #8]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	7812      	ldrb	r2, [r2, #0]
 800c4bc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c4c4:	7dfb      	ldrb	r3, [r7, #23]
 800c4c6:	68ba      	ldr	r2, [r7, #8]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	2203      	movs	r2, #3
 800c4cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c4ce:	7dfb      	ldrb	r3, [r7, #23]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c4d4:	e013      	b.n	800c4fe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c4d6:	7dfb      	ldrb	r3, [r7, #23]
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	4413      	add	r3, r2
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	7812      	ldrb	r2, [r2, #0]
 800c4e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	613b      	str	r3, [r7, #16]
    idx++;
 800c4e8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c4ee:	7dfb      	ldrb	r3, [r7, #23]
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	701a      	strb	r2, [r3, #0]
    idx++;
 800c4f8:	7dfb      	ldrb	r3, [r7, #23]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1e7      	bne.n	800c4d6 <USBD_GetString+0x52>
 800c506:	e000      	b.n	800c50a <USBD_GetString+0x86>
    return;
 800c508:	bf00      	nop
  }
}
 800c50a:	3718      	adds	r7, #24
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c518:	2300      	movs	r3, #0
 800c51a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c520:	e005      	b.n	800c52e <USBD_GetLen+0x1e>
  {
    len++;
 800c522:	7bfb      	ldrb	r3, [r7, #15]
 800c524:	3301      	adds	r3, #1
 800c526:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	3301      	adds	r3, #1
 800c52c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1f5      	bne.n	800c522 <USBD_GetLen+0x12>
  }

  return len;
 800c536:	7bfb      	ldrb	r3, [r7, #15]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3714      	adds	r7, #20
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2202      	movs	r2, #2
 800c554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	2100      	movs	r1, #0
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f000 fcf9 	bl	800cf62 <USBD_LL_Transmit>

  return USBD_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b084      	sub	sp, #16
 800c57e:	af00      	add	r7, sp, #0
 800c580:	60f8      	str	r0, [r7, #12]
 800c582:	60b9      	str	r1, [r7, #8]
 800c584:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	2100      	movs	r1, #0
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f000 fce8 	bl	800cf62 <USBD_LL_Transmit>

  return USBD_OK;
 800c592:	2300      	movs	r3, #0
}
 800c594:	4618      	mov	r0, r3
 800c596:	3710      	adds	r7, #16
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2203      	movs	r2, #3
 800c5ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	68ba      	ldr	r2, [r7, #8]
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f000 fcec 	bl	800cfa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b084      	sub	sp, #16
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	60f8      	str	r0, [r7, #12]
 800c5de:	60b9      	str	r1, [r7, #8]
 800c5e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	68ba      	ldr	r2, [r7, #8]
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f000 fcdb 	bl	800cfa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5ee:	2300      	movs	r3, #0
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3710      	adds	r7, #16
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2204      	movs	r2, #4
 800c604:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c608:	2300      	movs	r3, #0
 800c60a:	2200      	movs	r2, #0
 800c60c:	2100      	movs	r1, #0
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fca7 	bl	800cf62 <USBD_LL_Transmit>

  return USBD_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3708      	adds	r7, #8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c61e:	b580      	push	{r7, lr}
 800c620:	b082      	sub	sp, #8
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2205      	movs	r2, #5
 800c62a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c62e:	2300      	movs	r3, #0
 800c630:	2200      	movs	r2, #0
 800c632:	2100      	movs	r1, #0
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fcb5 	bl	800cfa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c648:	2200      	movs	r2, #0
 800c64a:	4912      	ldr	r1, [pc, #72]	; (800c694 <MX_USB_DEVICE_Init+0x50>)
 800c64c:	4812      	ldr	r0, [pc, #72]	; (800c698 <MX_USB_DEVICE_Init+0x54>)
 800c64e:	f7fe fd07 	bl	800b060 <USBD_Init>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c658:	f7f6 fc46 	bl	8002ee8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c65c:	490f      	ldr	r1, [pc, #60]	; (800c69c <MX_USB_DEVICE_Init+0x58>)
 800c65e:	480e      	ldr	r0, [pc, #56]	; (800c698 <MX_USB_DEVICE_Init+0x54>)
 800c660:	f7fe fd2e 	bl	800b0c0 <USBD_RegisterClass>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d001      	beq.n	800c66e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c66a:	f7f6 fc3d 	bl	8002ee8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c66e:	490c      	ldr	r1, [pc, #48]	; (800c6a0 <MX_USB_DEVICE_Init+0x5c>)
 800c670:	4809      	ldr	r0, [pc, #36]	; (800c698 <MX_USB_DEVICE_Init+0x54>)
 800c672:	f7fe fc1f 	bl	800aeb4 <USBD_CDC_RegisterInterface>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d001      	beq.n	800c680 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c67c:	f7f6 fc34 	bl	8002ee8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c680:	4805      	ldr	r0, [pc, #20]	; (800c698 <MX_USB_DEVICE_Init+0x54>)
 800c682:	f7fe fd53 	bl	800b12c <USBD_Start>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d001      	beq.n	800c690 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c68c:	f7f6 fc2c 	bl	8002ee8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c690:	bf00      	nop
 800c692:	bd80      	pop	{r7, pc}
 800c694:	200000ac 	.word	0x200000ac
 800c698:	20000620 	.word	0x20000620
 800c69c:	20000018 	.word	0x20000018
 800c6a0:	20000098 	.word	0x20000098

0800c6a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	4905      	ldr	r1, [pc, #20]	; (800c6c0 <CDC_Init_FS+0x1c>)
 800c6ac:	4805      	ldr	r0, [pc, #20]	; (800c6c4 <CDC_Init_FS+0x20>)
 800c6ae:	f7fe fc1b 	bl	800aee8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c6b2:	4905      	ldr	r1, [pc, #20]	; (800c6c8 <CDC_Init_FS+0x24>)
 800c6b4:	4803      	ldr	r0, [pc, #12]	; (800c6c4 <CDC_Init_FS+0x20>)
 800c6b6:	f7fe fc39 	bl	800af2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c6ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	200010fc 	.word	0x200010fc
 800c6c4:	20000620 	.word	0x20000620
 800c6c8:	200008fc 	.word	0x200008fc

0800c6cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c6d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	6039      	str	r1, [r7, #0]
 800c6e6:	71fb      	strb	r3, [r7, #7]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c6ec:	79fb      	ldrb	r3, [r7, #7]
 800c6ee:	2b23      	cmp	r3, #35	; 0x23
 800c6f0:	d84a      	bhi.n	800c788 <CDC_Control_FS+0xac>
 800c6f2:	a201      	add	r2, pc, #4	; (adr r2, 800c6f8 <CDC_Control_FS+0x1c>)
 800c6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f8:	0800c789 	.word	0x0800c789
 800c6fc:	0800c789 	.word	0x0800c789
 800c700:	0800c789 	.word	0x0800c789
 800c704:	0800c789 	.word	0x0800c789
 800c708:	0800c789 	.word	0x0800c789
 800c70c:	0800c789 	.word	0x0800c789
 800c710:	0800c789 	.word	0x0800c789
 800c714:	0800c789 	.word	0x0800c789
 800c718:	0800c789 	.word	0x0800c789
 800c71c:	0800c789 	.word	0x0800c789
 800c720:	0800c789 	.word	0x0800c789
 800c724:	0800c789 	.word	0x0800c789
 800c728:	0800c789 	.word	0x0800c789
 800c72c:	0800c789 	.word	0x0800c789
 800c730:	0800c789 	.word	0x0800c789
 800c734:	0800c789 	.word	0x0800c789
 800c738:	0800c789 	.word	0x0800c789
 800c73c:	0800c789 	.word	0x0800c789
 800c740:	0800c789 	.word	0x0800c789
 800c744:	0800c789 	.word	0x0800c789
 800c748:	0800c789 	.word	0x0800c789
 800c74c:	0800c789 	.word	0x0800c789
 800c750:	0800c789 	.word	0x0800c789
 800c754:	0800c789 	.word	0x0800c789
 800c758:	0800c789 	.word	0x0800c789
 800c75c:	0800c789 	.word	0x0800c789
 800c760:	0800c789 	.word	0x0800c789
 800c764:	0800c789 	.word	0x0800c789
 800c768:	0800c789 	.word	0x0800c789
 800c76c:	0800c789 	.word	0x0800c789
 800c770:	0800c789 	.word	0x0800c789
 800c774:	0800c789 	.word	0x0800c789
 800c778:	0800c789 	.word	0x0800c789
 800c77c:	0800c789 	.word	0x0800c789
 800c780:	0800c789 	.word	0x0800c789
 800c784:	0800c789 	.word	0x0800c789
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c788:	bf00      	nop
  }

  return (USBD_OK);
 800c78a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c7a2:	6879      	ldr	r1, [r7, #4]
 800c7a4:	4805      	ldr	r0, [pc, #20]	; (800c7bc <CDC_Receive_FS+0x24>)
 800c7a6:	f7fe fbc1 	bl	800af2c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c7aa:	4804      	ldr	r0, [pc, #16]	; (800c7bc <CDC_Receive_FS+0x24>)
 800c7ac:	f7fe fc22 	bl	800aff4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c7b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	20000620 	.word	0x20000620

0800c7c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c7d0:	4b0d      	ldr	r3, [pc, #52]	; (800c808 <CDC_Transmit_FS+0x48>)
 800c7d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d001      	beq.n	800c7e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e00b      	b.n	800c7fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c7e6:	887b      	ldrh	r3, [r7, #2]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	6879      	ldr	r1, [r7, #4]
 800c7ec:	4806      	ldr	r0, [pc, #24]	; (800c808 <CDC_Transmit_FS+0x48>)
 800c7ee:	f7fe fb7b 	bl	800aee8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c7f2:	4805      	ldr	r0, [pc, #20]	; (800c808 <CDC_Transmit_FS+0x48>)
 800c7f4:	f7fe fbb8 	bl	800af68 <USBD_CDC_TransmitPacket>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	20000620 	.word	0x20000620

0800c80c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b087      	sub	sp, #28
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	4613      	mov	r3, r2
 800c818:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c81a:	2300      	movs	r3, #0
 800c81c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c81e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c822:	4618      	mov	r0, r3
 800c824:	371c      	adds	r7, #28
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr
	...

0800c830 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	4603      	mov	r3, r0
 800c838:	6039      	str	r1, [r7, #0]
 800c83a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	2212      	movs	r2, #18
 800c840:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c842:	4b03      	ldr	r3, [pc, #12]	; (800c850 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c844:	4618      	mov	r0, r3
 800c846:	370c      	adds	r7, #12
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr
 800c850:	200000c8 	.word	0x200000c8

0800c854 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	4603      	mov	r3, r0
 800c85c:	6039      	str	r1, [r7, #0]
 800c85e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	2204      	movs	r2, #4
 800c864:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c866:	4b03      	ldr	r3, [pc, #12]	; (800c874 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c868:	4618      	mov	r0, r3
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr
 800c874:	200000dc 	.word	0x200000dc

0800c878 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	4603      	mov	r3, r0
 800c880:	6039      	str	r1, [r7, #0]
 800c882:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c884:	79fb      	ldrb	r3, [r7, #7]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d105      	bne.n	800c896 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c88a:	683a      	ldr	r2, [r7, #0]
 800c88c:	4907      	ldr	r1, [pc, #28]	; (800c8ac <USBD_FS_ProductStrDescriptor+0x34>)
 800c88e:	4808      	ldr	r0, [pc, #32]	; (800c8b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c890:	f7ff fdf8 	bl	800c484 <USBD_GetString>
 800c894:	e004      	b.n	800c8a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	4904      	ldr	r1, [pc, #16]	; (800c8ac <USBD_FS_ProductStrDescriptor+0x34>)
 800c89a:	4805      	ldr	r0, [pc, #20]	; (800c8b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c89c:	f7ff fdf2 	bl	800c484 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8a0:	4b02      	ldr	r3, [pc, #8]	; (800c8ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	200018fc 	.word	0x200018fc
 800c8b0:	0800dbdc 	.word	0x0800dbdc

0800c8b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	6039      	str	r1, [r7, #0]
 800c8be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c8c0:	683a      	ldr	r2, [r7, #0]
 800c8c2:	4904      	ldr	r1, [pc, #16]	; (800c8d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c8c4:	4804      	ldr	r0, [pc, #16]	; (800c8d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c8c6:	f7ff fddd 	bl	800c484 <USBD_GetString>
  return USBD_StrDesc;
 800c8ca:	4b02      	ldr	r3, [pc, #8]	; (800c8d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	200018fc 	.word	0x200018fc
 800c8d8:	0800dbf4 	.word	0x0800dbf4

0800c8dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	6039      	str	r1, [r7, #0]
 800c8e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	221a      	movs	r2, #26
 800c8ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c8ee:	f000 f843 	bl	800c978 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c8f2:	4b02      	ldr	r3, [pc, #8]	; (800c8fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	200000e0 	.word	0x200000e0

0800c900 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	4603      	mov	r3, r0
 800c908:	6039      	str	r1, [r7, #0]
 800c90a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c90c:	79fb      	ldrb	r3, [r7, #7]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d105      	bne.n	800c91e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c912:	683a      	ldr	r2, [r7, #0]
 800c914:	4907      	ldr	r1, [pc, #28]	; (800c934 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c916:	4808      	ldr	r0, [pc, #32]	; (800c938 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c918:	f7ff fdb4 	bl	800c484 <USBD_GetString>
 800c91c:	e004      	b.n	800c928 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c91e:	683a      	ldr	r2, [r7, #0]
 800c920:	4904      	ldr	r1, [pc, #16]	; (800c934 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c922:	4805      	ldr	r0, [pc, #20]	; (800c938 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c924:	f7ff fdae 	bl	800c484 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c928:	4b02      	ldr	r3, [pc, #8]	; (800c934 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	200018fc 	.word	0x200018fc
 800c938:	0800dc08 	.word	0x0800dc08

0800c93c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	4603      	mov	r3, r0
 800c944:	6039      	str	r1, [r7, #0]
 800c946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c948:	79fb      	ldrb	r3, [r7, #7]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d105      	bne.n	800c95a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	4907      	ldr	r1, [pc, #28]	; (800c970 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c952:	4808      	ldr	r0, [pc, #32]	; (800c974 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c954:	f7ff fd96 	bl	800c484 <USBD_GetString>
 800c958:	e004      	b.n	800c964 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	4904      	ldr	r1, [pc, #16]	; (800c970 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c95e:	4805      	ldr	r0, [pc, #20]	; (800c974 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c960:	f7ff fd90 	bl	800c484 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c964:	4b02      	ldr	r3, [pc, #8]	; (800c970 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c966:	4618      	mov	r0, r3
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	200018fc 	.word	0x200018fc
 800c974:	0800dc14 	.word	0x0800dc14

0800c978 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c97e:	4b0f      	ldr	r3, [pc, #60]	; (800c9bc <Get_SerialNum+0x44>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c984:	4b0e      	ldr	r3, [pc, #56]	; (800c9c0 <Get_SerialNum+0x48>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c98a:	4b0e      	ldr	r3, [pc, #56]	; (800c9c4 <Get_SerialNum+0x4c>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	4413      	add	r3, r2
 800c996:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d009      	beq.n	800c9b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c99e:	2208      	movs	r2, #8
 800c9a0:	4909      	ldr	r1, [pc, #36]	; (800c9c8 <Get_SerialNum+0x50>)
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	f000 f814 	bl	800c9d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c9a8:	2204      	movs	r2, #4
 800c9aa:	4908      	ldr	r1, [pc, #32]	; (800c9cc <Get_SerialNum+0x54>)
 800c9ac:	68b8      	ldr	r0, [r7, #8]
 800c9ae:	f000 f80f 	bl	800c9d0 <IntToUnicode>
  }
}
 800c9b2:	bf00      	nop
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	1fff7a10 	.word	0x1fff7a10
 800c9c0:	1fff7a14 	.word	0x1fff7a14
 800c9c4:	1fff7a18 	.word	0x1fff7a18
 800c9c8:	200000e2 	.word	0x200000e2
 800c9cc:	200000f2 	.word	0x200000f2

0800c9d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b087      	sub	sp, #28
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	75fb      	strb	r3, [r7, #23]
 800c9e6:	e027      	b.n	800ca38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	0f1b      	lsrs	r3, r3, #28
 800c9ec:	2b09      	cmp	r3, #9
 800c9ee:	d80b      	bhi.n	800ca08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	0f1b      	lsrs	r3, r3, #28
 800c9f4:	b2da      	uxtb	r2, r3
 800c9f6:	7dfb      	ldrb	r3, [r7, #23]
 800c9f8:	005b      	lsls	r3, r3, #1
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	440b      	add	r3, r1
 800ca00:	3230      	adds	r2, #48	; 0x30
 800ca02:	b2d2      	uxtb	r2, r2
 800ca04:	701a      	strb	r2, [r3, #0]
 800ca06:	e00a      	b.n	800ca1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	0f1b      	lsrs	r3, r3, #28
 800ca0c:	b2da      	uxtb	r2, r3
 800ca0e:	7dfb      	ldrb	r3, [r7, #23]
 800ca10:	005b      	lsls	r3, r3, #1
 800ca12:	4619      	mov	r1, r3
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	440b      	add	r3, r1
 800ca18:	3237      	adds	r2, #55	; 0x37
 800ca1a:	b2d2      	uxtb	r2, r2
 800ca1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	011b      	lsls	r3, r3, #4
 800ca22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca24:	7dfb      	ldrb	r3, [r7, #23]
 800ca26:	005b      	lsls	r3, r3, #1
 800ca28:	3301      	adds	r3, #1
 800ca2a:	68ba      	ldr	r2, [r7, #8]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	2200      	movs	r2, #0
 800ca30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	3301      	adds	r3, #1
 800ca36:	75fb      	strb	r3, [r7, #23]
 800ca38:	7dfa      	ldrb	r2, [r7, #23]
 800ca3a:	79fb      	ldrb	r3, [r7, #7]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d3d3      	bcc.n	800c9e8 <IntToUnicode+0x18>
  }
}
 800ca40:	bf00      	nop
 800ca42:	bf00      	nop
 800ca44:	371c      	adds	r7, #28
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
	...

0800ca50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08a      	sub	sp, #40	; 0x28
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca58:	f107 0314 	add.w	r3, r7, #20
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	601a      	str	r2, [r3, #0]
 800ca60:	605a      	str	r2, [r3, #4]
 800ca62:	609a      	str	r2, [r3, #8]
 800ca64:	60da      	str	r2, [r3, #12]
 800ca66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca70:	d147      	bne.n	800cb02 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca72:	2300      	movs	r3, #0
 800ca74:	613b      	str	r3, [r7, #16]
 800ca76:	4b25      	ldr	r3, [pc, #148]	; (800cb0c <HAL_PCD_MspInit+0xbc>)
 800ca78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca7a:	4a24      	ldr	r2, [pc, #144]	; (800cb0c <HAL_PCD_MspInit+0xbc>)
 800ca7c:	f043 0301 	orr.w	r3, r3, #1
 800ca80:	6313      	str	r3, [r2, #48]	; 0x30
 800ca82:	4b22      	ldr	r3, [pc, #136]	; (800cb0c <HAL_PCD_MspInit+0xbc>)
 800ca84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca86:	f003 0301 	and.w	r3, r3, #1
 800ca8a:	613b      	str	r3, [r7, #16]
 800ca8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ca8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ca94:	2300      	movs	r3, #0
 800ca96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ca9c:	f107 0314 	add.w	r3, r7, #20
 800caa0:	4619      	mov	r1, r3
 800caa2:	481b      	ldr	r0, [pc, #108]	; (800cb10 <HAL_PCD_MspInit+0xc0>)
 800caa4:	f7f7 fb50 	bl	8004148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800caa8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800caac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caae:	2302      	movs	r3, #2
 800cab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cab6:	2300      	movs	r3, #0
 800cab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800caba:	230a      	movs	r3, #10
 800cabc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cabe:	f107 0314 	add.w	r3, r7, #20
 800cac2:	4619      	mov	r1, r3
 800cac4:	4812      	ldr	r0, [pc, #72]	; (800cb10 <HAL_PCD_MspInit+0xc0>)
 800cac6:	f7f7 fb3f 	bl	8004148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800caca:	4b10      	ldr	r3, [pc, #64]	; (800cb0c <HAL_PCD_MspInit+0xbc>)
 800cacc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cace:	4a0f      	ldr	r2, [pc, #60]	; (800cb0c <HAL_PCD_MspInit+0xbc>)
 800cad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cad4:	6353      	str	r3, [r2, #52]	; 0x34
 800cad6:	2300      	movs	r3, #0
 800cad8:	60fb      	str	r3, [r7, #12]
 800cada:	4b0c      	ldr	r3, [pc, #48]	; (800cb0c <HAL_PCD_MspInit+0xbc>)
 800cadc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cade:	4a0b      	ldr	r2, [pc, #44]	; (800cb0c <HAL_PCD_MspInit+0xbc>)
 800cae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cae4:	6453      	str	r3, [r2, #68]	; 0x44
 800cae6:	4b09      	ldr	r3, [pc, #36]	; (800cb0c <HAL_PCD_MspInit+0xbc>)
 800cae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800caee:	60fb      	str	r3, [r7, #12]
 800caf0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800caf2:	2200      	movs	r2, #0
 800caf4:	2100      	movs	r1, #0
 800caf6:	2043      	movs	r0, #67	; 0x43
 800caf8:	f7f6 feed 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cafc:	2043      	movs	r0, #67	; 0x43
 800cafe:	f7f6 ff06 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cb02:	bf00      	nop
 800cb04:	3728      	adds	r7, #40	; 0x28
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	40023800 	.word	0x40023800
 800cb10:	40020000 	.word	0x40020000

0800cb14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cb28:	4619      	mov	r1, r3
 800cb2a:	4610      	mov	r0, r2
 800cb2c:	f7fe fb4b 	bl	800b1c6 <USBD_LL_SetupStage>
}
 800cb30:	bf00      	nop
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	460b      	mov	r3, r1
 800cb42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cb4a:	78fa      	ldrb	r2, [r7, #3]
 800cb4c:	6879      	ldr	r1, [r7, #4]
 800cb4e:	4613      	mov	r3, r2
 800cb50:	00db      	lsls	r3, r3, #3
 800cb52:	4413      	add	r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	440b      	add	r3, r1
 800cb58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	78fb      	ldrb	r3, [r7, #3]
 800cb60:	4619      	mov	r1, r3
 800cb62:	f7fe fb85 	bl	800b270 <USBD_LL_DataOutStage>
}
 800cb66:	bf00      	nop
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b082      	sub	sp, #8
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	460b      	mov	r3, r1
 800cb78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cb80:	78fa      	ldrb	r2, [r7, #3]
 800cb82:	6879      	ldr	r1, [r7, #4]
 800cb84:	4613      	mov	r3, r2
 800cb86:	00db      	lsls	r3, r3, #3
 800cb88:	4413      	add	r3, r2
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	440b      	add	r3, r1
 800cb8e:	334c      	adds	r3, #76	; 0x4c
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	78fb      	ldrb	r3, [r7, #3]
 800cb94:	4619      	mov	r1, r3
 800cb96:	f7fe fc1e 	bl	800b3d6 <USBD_LL_DataInStage>
}
 800cb9a:	bf00      	nop
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b082      	sub	sp, #8
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fe fd52 	bl	800b65a <USBD_LL_SOF>
}
 800cbb6:	bf00      	nop
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b084      	sub	sp, #16
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d102      	bne.n	800cbd8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	73fb      	strb	r3, [r7, #15]
 800cbd6:	e008      	b.n	800cbea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d102      	bne.n	800cbe6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	73fb      	strb	r3, [r7, #15]
 800cbe4:	e001      	b.n	800cbea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cbe6:	f7f6 f97f 	bl	8002ee8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cbf0:	7bfa      	ldrb	r2, [r7, #15]
 800cbf2:	4611      	mov	r1, r2
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fe fcf2 	bl	800b5de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7fe fc9a 	bl	800b53a <USBD_LL_Reset>
}
 800cc06:	bf00      	nop
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
	...

0800cc10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7fe fced 	bl	800b5fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	6812      	ldr	r2, [r2, #0]
 800cc32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc36:	f043 0301 	orr.w	r3, r3, #1
 800cc3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6a1b      	ldr	r3, [r3, #32]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d005      	beq.n	800cc50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc44:	4b04      	ldr	r3, [pc, #16]	; (800cc58 <HAL_PCD_SuspendCallback+0x48>)
 800cc46:	691b      	ldr	r3, [r3, #16]
 800cc48:	4a03      	ldr	r2, [pc, #12]	; (800cc58 <HAL_PCD_SuspendCallback+0x48>)
 800cc4a:	f043 0306 	orr.w	r3, r3, #6
 800cc4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cc50:	bf00      	nop
 800cc52:	3708      	adds	r7, #8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	e000ed00 	.word	0xe000ed00

0800cc5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fe fcdd 	bl	800b62a <USBD_LL_Resume>
}
 800cc70:	bf00      	nop
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	460b      	mov	r3, r1
 800cc82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cc8a:	78fa      	ldrb	r2, [r7, #3]
 800cc8c:	4611      	mov	r1, r2
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fe fd35 	bl	800b6fe <USBD_LL_IsoOUTIncomplete>
}
 800cc94:	bf00      	nop
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	460b      	mov	r3, r1
 800cca6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ccae:	78fa      	ldrb	r2, [r7, #3]
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fe fcf1 	bl	800b69a <USBD_LL_IsoINIncomplete>
}
 800ccb8:	bf00      	nop
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fe fd47 	bl	800b762 <USBD_LL_DevConnected>
}
 800ccd4:	bf00      	nop
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fe fd44 	bl	800b778 <USBD_LL_DevDisconnected>
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d13c      	bne.n	800cd82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cd08:	4a20      	ldr	r2, [pc, #128]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4a1e      	ldr	r2, [pc, #120]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd14:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cd18:	4b1c      	ldr	r3, [pc, #112]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cd1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cd20:	4b1a      	ldr	r3, [pc, #104]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd22:	2204      	movs	r2, #4
 800cd24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cd26:	4b19      	ldr	r3, [pc, #100]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd28:	2202      	movs	r2, #2
 800cd2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cd2c:	4b17      	ldr	r3, [pc, #92]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cd32:	4b16      	ldr	r3, [pc, #88]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd34:	2202      	movs	r2, #2
 800cd36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cd38:	4b14      	ldr	r3, [pc, #80]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cd3e:	4b13      	ldr	r3, [pc, #76]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd40:	2200      	movs	r2, #0
 800cd42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cd44:	4b11      	ldr	r3, [pc, #68]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd46:	2200      	movs	r2, #0
 800cd48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cd4a:	4b10      	ldr	r3, [pc, #64]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cd50:	4b0e      	ldr	r3, [pc, #56]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cd56:	480d      	ldr	r0, [pc, #52]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd58:	f7f8 f9c0 	bl	80050dc <HAL_PCD_Init>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d001      	beq.n	800cd66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cd62:	f7f6 f8c1 	bl	8002ee8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cd66:	2180      	movs	r1, #128	; 0x80
 800cd68:	4808      	ldr	r0, [pc, #32]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd6a:	f7f9 fc18 	bl	800659e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cd6e:	2240      	movs	r2, #64	; 0x40
 800cd70:	2100      	movs	r1, #0
 800cd72:	4806      	ldr	r0, [pc, #24]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd74:	f7f9 fbcc 	bl	8006510 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cd78:	2280      	movs	r2, #128	; 0x80
 800cd7a:	2101      	movs	r1, #1
 800cd7c:	4803      	ldr	r0, [pc, #12]	; (800cd8c <USBD_LL_Init+0x94>)
 800cd7e:	f7f9 fbc7 	bl	8006510 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cd82:	2300      	movs	r3, #0
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3708      	adds	r7, #8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	20001afc 	.word	0x20001afc

0800cd90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7f8 fab5 	bl	8005316 <HAL_PCD_Start>
 800cdac:	4603      	mov	r3, r0
 800cdae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdb0:	7bfb      	ldrb	r3, [r7, #15]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f000 f942 	bl	800d03c <USBD_Get_USB_Status>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b084      	sub	sp, #16
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	4608      	mov	r0, r1
 800cdd0:	4611      	mov	r1, r2
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	70fb      	strb	r3, [r7, #3]
 800cdd8:	460b      	mov	r3, r1
 800cdda:	70bb      	strb	r3, [r7, #2]
 800cddc:	4613      	mov	r3, r2
 800cdde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cde0:	2300      	movs	r3, #0
 800cde2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cdee:	78bb      	ldrb	r3, [r7, #2]
 800cdf0:	883a      	ldrh	r2, [r7, #0]
 800cdf2:	78f9      	ldrb	r1, [r7, #3]
 800cdf4:	f7f8 ff86 	bl	8005d04 <HAL_PCD_EP_Open>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdfc:	7bfb      	ldrb	r3, [r7, #15]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 f91c 	bl	800d03c <USBD_Get_USB_Status>
 800ce04:	4603      	mov	r3, r0
 800ce06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b084      	sub	sp, #16
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce2c:	78fa      	ldrb	r2, [r7, #3]
 800ce2e:	4611      	mov	r1, r2
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7f8 ffcf 	bl	8005dd4 <HAL_PCD_EP_Close>
 800ce36:	4603      	mov	r3, r0
 800ce38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce3a:	7bfb      	ldrb	r3, [r7, #15]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 f8fd 	bl	800d03c <USBD_Get_USB_Status>
 800ce42:	4603      	mov	r3, r0
 800ce44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce60:	2300      	movs	r3, #0
 800ce62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce6a:	78fa      	ldrb	r2, [r7, #3]
 800ce6c:	4611      	mov	r1, r2
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7f9 f8a7 	bl	8005fc2 <HAL_PCD_EP_SetStall>
 800ce74:	4603      	mov	r3, r0
 800ce76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce78:	7bfb      	ldrb	r3, [r7, #15]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 f8de 	bl	800d03c <USBD_Get_USB_Status>
 800ce80:	4603      	mov	r3, r0
 800ce82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3710      	adds	r7, #16
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b084      	sub	sp, #16
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	460b      	mov	r3, r1
 800ce98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cea8:	78fa      	ldrb	r2, [r7, #3]
 800ceaa:	4611      	mov	r1, r2
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7f9 f8ec 	bl	800608a <HAL_PCD_EP_ClrStall>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceb6:	7bfb      	ldrb	r3, [r7, #15]
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f000 f8bf 	bl	800d03c <USBD_Get_USB_Status>
 800cebe:	4603      	mov	r3, r0
 800cec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cec2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cecc:	b480      	push	{r7}
 800cece:	b085      	sub	sp, #20
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	460b      	mov	r3, r1
 800ced6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cede:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	da0b      	bge.n	800cf00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cee8:	78fb      	ldrb	r3, [r7, #3]
 800ceea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ceee:	68f9      	ldr	r1, [r7, #12]
 800cef0:	4613      	mov	r3, r2
 800cef2:	00db      	lsls	r3, r3, #3
 800cef4:	4413      	add	r3, r2
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	440b      	add	r3, r1
 800cefa:	333e      	adds	r3, #62	; 0x3e
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	e00b      	b.n	800cf18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf00:	78fb      	ldrb	r3, [r7, #3]
 800cf02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf06:	68f9      	ldr	r1, [r7, #12]
 800cf08:	4613      	mov	r3, r2
 800cf0a:	00db      	lsls	r3, r3, #3
 800cf0c:	4413      	add	r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	440b      	add	r3, r1
 800cf12:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800cf16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3714      	adds	r7, #20
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf30:	2300      	movs	r3, #0
 800cf32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf34:	2300      	movs	r3, #0
 800cf36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf3e:	78fa      	ldrb	r2, [r7, #3]
 800cf40:	4611      	mov	r1, r2
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7f8 feb9 	bl	8005cba <HAL_PCD_SetAddress>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf4c:	7bfb      	ldrb	r3, [r7, #15]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f000 f874 	bl	800d03c <USBD_Get_USB_Status>
 800cf54:	4603      	mov	r3, r0
 800cf56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf58:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b086      	sub	sp, #24
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	607a      	str	r2, [r7, #4]
 800cf6c:	603b      	str	r3, [r7, #0]
 800cf6e:	460b      	mov	r3, r1
 800cf70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf72:	2300      	movs	r3, #0
 800cf74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf76:	2300      	movs	r3, #0
 800cf78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cf80:	7af9      	ldrb	r1, [r7, #11]
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	f7f8 ffd2 	bl	8005f2e <HAL_PCD_EP_Transmit>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf8e:	7dfb      	ldrb	r3, [r7, #23]
 800cf90:	4618      	mov	r0, r3
 800cf92:	f000 f853 	bl	800d03c <USBD_Get_USB_Status>
 800cf96:	4603      	mov	r3, r0
 800cf98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3718      	adds	r7, #24
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b086      	sub	sp, #24
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	607a      	str	r2, [r7, #4]
 800cfae:	603b      	str	r3, [r7, #0]
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cfc2:	7af9      	ldrb	r1, [r7, #11]
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	f7f8 ff4e 	bl	8005e68 <HAL_PCD_EP_Receive>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfd0:	7dfb      	ldrb	r3, [r7, #23]
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f000 f832 	bl	800d03c <USBD_Get_USB_Status>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cfdc:	7dbb      	ldrb	r3, [r7, #22]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3718      	adds	r7, #24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b082      	sub	sp, #8
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	460b      	mov	r3, r1
 800cff0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cff8:	78fa      	ldrb	r2, [r7, #3]
 800cffa:	4611      	mov	r1, r2
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7f8 ff7e 	bl	8005efe <HAL_PCD_EP_GetRxCount>
 800d002:	4603      	mov	r3, r0
}
 800d004:	4618      	mov	r0, r3
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d014:	4b03      	ldr	r3, [pc, #12]	; (800d024 <USBD_static_malloc+0x18>)
}
 800d016:	4618      	mov	r0, r3
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	20002008 	.word	0x20002008

0800d028 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]

}
 800d030:	bf00      	nop
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	4603      	mov	r3, r0
 800d044:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d04a:	79fb      	ldrb	r3, [r7, #7]
 800d04c:	2b03      	cmp	r3, #3
 800d04e:	d817      	bhi.n	800d080 <USBD_Get_USB_Status+0x44>
 800d050:	a201      	add	r2, pc, #4	; (adr r2, 800d058 <USBD_Get_USB_Status+0x1c>)
 800d052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d056:	bf00      	nop
 800d058:	0800d069 	.word	0x0800d069
 800d05c:	0800d06f 	.word	0x0800d06f
 800d060:	0800d075 	.word	0x0800d075
 800d064:	0800d07b 	.word	0x0800d07b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d068:	2300      	movs	r3, #0
 800d06a:	73fb      	strb	r3, [r7, #15]
    break;
 800d06c:	e00b      	b.n	800d086 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d06e:	2303      	movs	r3, #3
 800d070:	73fb      	strb	r3, [r7, #15]
    break;
 800d072:	e008      	b.n	800d086 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d074:	2301      	movs	r3, #1
 800d076:	73fb      	strb	r3, [r7, #15]
    break;
 800d078:	e005      	b.n	800d086 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d07a:	2303      	movs	r3, #3
 800d07c:	73fb      	strb	r3, [r7, #15]
    break;
 800d07e:	e002      	b.n	800d086 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d080:	2303      	movs	r3, #3
 800d082:	73fb      	strb	r3, [r7, #15]
    break;
 800d084:	bf00      	nop
  }
  return usb_status;
 800d086:	7bfb      	ldrb	r3, [r7, #15]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3714      	adds	r7, #20
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <_ZdlPvj>:
 800d094:	f000 b816 	b.w	800d0c4 <_ZdlPv>

0800d098 <_Znwj>:
 800d098:	2801      	cmp	r0, #1
 800d09a:	bf38      	it	cc
 800d09c:	2001      	movcc	r0, #1
 800d09e:	b510      	push	{r4, lr}
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f000 f85c 	bl	800d160 <malloc>
 800d0a8:	b930      	cbnz	r0, 800d0b8 <_Znwj+0x20>
 800d0aa:	f000 f81f 	bl	800d0ec <_ZSt15get_new_handlerv>
 800d0ae:	b908      	cbnz	r0, 800d0b4 <_Znwj+0x1c>
 800d0b0:	f000 f824 	bl	800d0fc <abort>
 800d0b4:	4780      	blx	r0
 800d0b6:	e7f4      	b.n	800d0a2 <_Znwj+0xa>
 800d0b8:	bd10      	pop	{r4, pc}

0800d0ba <_Znaj>:
 800d0ba:	f7ff bfed 	b.w	800d098 <_Znwj>

0800d0be <__cxa_pure_virtual>:
 800d0be:	b508      	push	{r3, lr}
 800d0c0:	f000 f80e 	bl	800d0e0 <_ZSt9terminatev>

0800d0c4 <_ZdlPv>:
 800d0c4:	f000 b854 	b.w	800d170 <free>

0800d0c8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d0c8:	b508      	push	{r3, lr}
 800d0ca:	4780      	blx	r0
 800d0cc:	f000 f816 	bl	800d0fc <abort>

0800d0d0 <_ZSt13get_terminatev>:
 800d0d0:	4b02      	ldr	r3, [pc, #8]	; (800d0dc <_ZSt13get_terminatev+0xc>)
 800d0d2:	6818      	ldr	r0, [r3, #0]
 800d0d4:	f3bf 8f5b 	dmb	ish
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	200000fc 	.word	0x200000fc

0800d0e0 <_ZSt9terminatev>:
 800d0e0:	b508      	push	{r3, lr}
 800d0e2:	f7ff fff5 	bl	800d0d0 <_ZSt13get_terminatev>
 800d0e6:	f7ff ffef 	bl	800d0c8 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800d0ec <_ZSt15get_new_handlerv>:
 800d0ec:	4b02      	ldr	r3, [pc, #8]	; (800d0f8 <_ZSt15get_new_handlerv+0xc>)
 800d0ee:	6818      	ldr	r0, [r3, #0]
 800d0f0:	f3bf 8f5b 	dmb	ish
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	20002228 	.word	0x20002228

0800d0fc <abort>:
 800d0fc:	b508      	push	{r3, lr}
 800d0fe:	2006      	movs	r0, #6
 800d100:	f000 f96c 	bl	800d3dc <raise>
 800d104:	2001      	movs	r0, #1
 800d106:	f7f6 f9f9 	bl	80034fc <_exit>
	...

0800d10c <__errno>:
 800d10c:	4b01      	ldr	r3, [pc, #4]	; (800d114 <__errno+0x8>)
 800d10e:	6818      	ldr	r0, [r3, #0]
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	20000100 	.word	0x20000100

0800d118 <__libc_init_array>:
 800d118:	b570      	push	{r4, r5, r6, lr}
 800d11a:	4d0d      	ldr	r5, [pc, #52]	; (800d150 <__libc_init_array+0x38>)
 800d11c:	4c0d      	ldr	r4, [pc, #52]	; (800d154 <__libc_init_array+0x3c>)
 800d11e:	1b64      	subs	r4, r4, r5
 800d120:	10a4      	asrs	r4, r4, #2
 800d122:	2600      	movs	r6, #0
 800d124:	42a6      	cmp	r6, r4
 800d126:	d109      	bne.n	800d13c <__libc_init_array+0x24>
 800d128:	4d0b      	ldr	r5, [pc, #44]	; (800d158 <__libc_init_array+0x40>)
 800d12a:	4c0c      	ldr	r4, [pc, #48]	; (800d15c <__libc_init_array+0x44>)
 800d12c:	f000 fce2 	bl	800daf4 <_init>
 800d130:	1b64      	subs	r4, r4, r5
 800d132:	10a4      	asrs	r4, r4, #2
 800d134:	2600      	movs	r6, #0
 800d136:	42a6      	cmp	r6, r4
 800d138:	d105      	bne.n	800d146 <__libc_init_array+0x2e>
 800d13a:	bd70      	pop	{r4, r5, r6, pc}
 800d13c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d140:	4798      	blx	r3
 800d142:	3601      	adds	r6, #1
 800d144:	e7ee      	b.n	800d124 <__libc_init_array+0xc>
 800d146:	f855 3b04 	ldr.w	r3, [r5], #4
 800d14a:	4798      	blx	r3
 800d14c:	3601      	adds	r6, #1
 800d14e:	e7f2      	b.n	800d136 <__libc_init_array+0x1e>
 800d150:	0800dd5c 	.word	0x0800dd5c
 800d154:	0800dd5c 	.word	0x0800dd5c
 800d158:	0800dd5c 	.word	0x0800dd5c
 800d15c:	0800dd64 	.word	0x0800dd64

0800d160 <malloc>:
 800d160:	4b02      	ldr	r3, [pc, #8]	; (800d16c <malloc+0xc>)
 800d162:	4601      	mov	r1, r0
 800d164:	6818      	ldr	r0, [r3, #0]
 800d166:	f000 b88d 	b.w	800d284 <_malloc_r>
 800d16a:	bf00      	nop
 800d16c:	20000100 	.word	0x20000100

0800d170 <free>:
 800d170:	4b02      	ldr	r3, [pc, #8]	; (800d17c <free+0xc>)
 800d172:	4601      	mov	r1, r0
 800d174:	6818      	ldr	r0, [r3, #0]
 800d176:	f000 b819 	b.w	800d1ac <_free_r>
 800d17a:	bf00      	nop
 800d17c:	20000100 	.word	0x20000100

0800d180 <memcpy>:
 800d180:	440a      	add	r2, r1
 800d182:	4291      	cmp	r1, r2
 800d184:	f100 33ff 	add.w	r3, r0, #4294967295
 800d188:	d100      	bne.n	800d18c <memcpy+0xc>
 800d18a:	4770      	bx	lr
 800d18c:	b510      	push	{r4, lr}
 800d18e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d192:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d196:	4291      	cmp	r1, r2
 800d198:	d1f9      	bne.n	800d18e <memcpy+0xe>
 800d19a:	bd10      	pop	{r4, pc}

0800d19c <memset>:
 800d19c:	4402      	add	r2, r0
 800d19e:	4603      	mov	r3, r0
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d100      	bne.n	800d1a6 <memset+0xa>
 800d1a4:	4770      	bx	lr
 800d1a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d1aa:	e7f9      	b.n	800d1a0 <memset+0x4>

0800d1ac <_free_r>:
 800d1ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1ae:	2900      	cmp	r1, #0
 800d1b0:	d044      	beq.n	800d23c <_free_r+0x90>
 800d1b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1b6:	9001      	str	r0, [sp, #4]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	f1a1 0404 	sub.w	r4, r1, #4
 800d1be:	bfb8      	it	lt
 800d1c0:	18e4      	addlt	r4, r4, r3
 800d1c2:	f000 f947 	bl	800d454 <__malloc_lock>
 800d1c6:	4a1e      	ldr	r2, [pc, #120]	; (800d240 <_free_r+0x94>)
 800d1c8:	9801      	ldr	r0, [sp, #4]
 800d1ca:	6813      	ldr	r3, [r2, #0]
 800d1cc:	b933      	cbnz	r3, 800d1dc <_free_r+0x30>
 800d1ce:	6063      	str	r3, [r4, #4]
 800d1d0:	6014      	str	r4, [r2, #0]
 800d1d2:	b003      	add	sp, #12
 800d1d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1d8:	f000 b942 	b.w	800d460 <__malloc_unlock>
 800d1dc:	42a3      	cmp	r3, r4
 800d1de:	d908      	bls.n	800d1f2 <_free_r+0x46>
 800d1e0:	6825      	ldr	r5, [r4, #0]
 800d1e2:	1961      	adds	r1, r4, r5
 800d1e4:	428b      	cmp	r3, r1
 800d1e6:	bf01      	itttt	eq
 800d1e8:	6819      	ldreq	r1, [r3, #0]
 800d1ea:	685b      	ldreq	r3, [r3, #4]
 800d1ec:	1949      	addeq	r1, r1, r5
 800d1ee:	6021      	streq	r1, [r4, #0]
 800d1f0:	e7ed      	b.n	800d1ce <_free_r+0x22>
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	b10b      	cbz	r3, 800d1fc <_free_r+0x50>
 800d1f8:	42a3      	cmp	r3, r4
 800d1fa:	d9fa      	bls.n	800d1f2 <_free_r+0x46>
 800d1fc:	6811      	ldr	r1, [r2, #0]
 800d1fe:	1855      	adds	r5, r2, r1
 800d200:	42a5      	cmp	r5, r4
 800d202:	d10b      	bne.n	800d21c <_free_r+0x70>
 800d204:	6824      	ldr	r4, [r4, #0]
 800d206:	4421      	add	r1, r4
 800d208:	1854      	adds	r4, r2, r1
 800d20a:	42a3      	cmp	r3, r4
 800d20c:	6011      	str	r1, [r2, #0]
 800d20e:	d1e0      	bne.n	800d1d2 <_free_r+0x26>
 800d210:	681c      	ldr	r4, [r3, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	6053      	str	r3, [r2, #4]
 800d216:	4421      	add	r1, r4
 800d218:	6011      	str	r1, [r2, #0]
 800d21a:	e7da      	b.n	800d1d2 <_free_r+0x26>
 800d21c:	d902      	bls.n	800d224 <_free_r+0x78>
 800d21e:	230c      	movs	r3, #12
 800d220:	6003      	str	r3, [r0, #0]
 800d222:	e7d6      	b.n	800d1d2 <_free_r+0x26>
 800d224:	6825      	ldr	r5, [r4, #0]
 800d226:	1961      	adds	r1, r4, r5
 800d228:	428b      	cmp	r3, r1
 800d22a:	bf04      	itt	eq
 800d22c:	6819      	ldreq	r1, [r3, #0]
 800d22e:	685b      	ldreq	r3, [r3, #4]
 800d230:	6063      	str	r3, [r4, #4]
 800d232:	bf04      	itt	eq
 800d234:	1949      	addeq	r1, r1, r5
 800d236:	6021      	streq	r1, [r4, #0]
 800d238:	6054      	str	r4, [r2, #4]
 800d23a:	e7ca      	b.n	800d1d2 <_free_r+0x26>
 800d23c:	b003      	add	sp, #12
 800d23e:	bd30      	pop	{r4, r5, pc}
 800d240:	2000222c 	.word	0x2000222c

0800d244 <sbrk_aligned>:
 800d244:	b570      	push	{r4, r5, r6, lr}
 800d246:	4e0e      	ldr	r6, [pc, #56]	; (800d280 <sbrk_aligned+0x3c>)
 800d248:	460c      	mov	r4, r1
 800d24a:	6831      	ldr	r1, [r6, #0]
 800d24c:	4605      	mov	r5, r0
 800d24e:	b911      	cbnz	r1, 800d256 <sbrk_aligned+0x12>
 800d250:	f000 f88c 	bl	800d36c <_sbrk_r>
 800d254:	6030      	str	r0, [r6, #0]
 800d256:	4621      	mov	r1, r4
 800d258:	4628      	mov	r0, r5
 800d25a:	f000 f887 	bl	800d36c <_sbrk_r>
 800d25e:	1c43      	adds	r3, r0, #1
 800d260:	d00a      	beq.n	800d278 <sbrk_aligned+0x34>
 800d262:	1cc4      	adds	r4, r0, #3
 800d264:	f024 0403 	bic.w	r4, r4, #3
 800d268:	42a0      	cmp	r0, r4
 800d26a:	d007      	beq.n	800d27c <sbrk_aligned+0x38>
 800d26c:	1a21      	subs	r1, r4, r0
 800d26e:	4628      	mov	r0, r5
 800d270:	f000 f87c 	bl	800d36c <_sbrk_r>
 800d274:	3001      	adds	r0, #1
 800d276:	d101      	bne.n	800d27c <sbrk_aligned+0x38>
 800d278:	f04f 34ff 	mov.w	r4, #4294967295
 800d27c:	4620      	mov	r0, r4
 800d27e:	bd70      	pop	{r4, r5, r6, pc}
 800d280:	20002230 	.word	0x20002230

0800d284 <_malloc_r>:
 800d284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d288:	1ccd      	adds	r5, r1, #3
 800d28a:	f025 0503 	bic.w	r5, r5, #3
 800d28e:	3508      	adds	r5, #8
 800d290:	2d0c      	cmp	r5, #12
 800d292:	bf38      	it	cc
 800d294:	250c      	movcc	r5, #12
 800d296:	2d00      	cmp	r5, #0
 800d298:	4607      	mov	r7, r0
 800d29a:	db01      	blt.n	800d2a0 <_malloc_r+0x1c>
 800d29c:	42a9      	cmp	r1, r5
 800d29e:	d905      	bls.n	800d2ac <_malloc_r+0x28>
 800d2a0:	230c      	movs	r3, #12
 800d2a2:	603b      	str	r3, [r7, #0]
 800d2a4:	2600      	movs	r6, #0
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ac:	4e2e      	ldr	r6, [pc, #184]	; (800d368 <_malloc_r+0xe4>)
 800d2ae:	f000 f8d1 	bl	800d454 <__malloc_lock>
 800d2b2:	6833      	ldr	r3, [r6, #0]
 800d2b4:	461c      	mov	r4, r3
 800d2b6:	bb34      	cbnz	r4, 800d306 <_malloc_r+0x82>
 800d2b8:	4629      	mov	r1, r5
 800d2ba:	4638      	mov	r0, r7
 800d2bc:	f7ff ffc2 	bl	800d244 <sbrk_aligned>
 800d2c0:	1c43      	adds	r3, r0, #1
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	d14d      	bne.n	800d362 <_malloc_r+0xde>
 800d2c6:	6834      	ldr	r4, [r6, #0]
 800d2c8:	4626      	mov	r6, r4
 800d2ca:	2e00      	cmp	r6, #0
 800d2cc:	d140      	bne.n	800d350 <_malloc_r+0xcc>
 800d2ce:	6823      	ldr	r3, [r4, #0]
 800d2d0:	4631      	mov	r1, r6
 800d2d2:	4638      	mov	r0, r7
 800d2d4:	eb04 0803 	add.w	r8, r4, r3
 800d2d8:	f000 f848 	bl	800d36c <_sbrk_r>
 800d2dc:	4580      	cmp	r8, r0
 800d2de:	d13a      	bne.n	800d356 <_malloc_r+0xd2>
 800d2e0:	6821      	ldr	r1, [r4, #0]
 800d2e2:	3503      	adds	r5, #3
 800d2e4:	1a6d      	subs	r5, r5, r1
 800d2e6:	f025 0503 	bic.w	r5, r5, #3
 800d2ea:	3508      	adds	r5, #8
 800d2ec:	2d0c      	cmp	r5, #12
 800d2ee:	bf38      	it	cc
 800d2f0:	250c      	movcc	r5, #12
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	4638      	mov	r0, r7
 800d2f6:	f7ff ffa5 	bl	800d244 <sbrk_aligned>
 800d2fa:	3001      	adds	r0, #1
 800d2fc:	d02b      	beq.n	800d356 <_malloc_r+0xd2>
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	442b      	add	r3, r5
 800d302:	6023      	str	r3, [r4, #0]
 800d304:	e00e      	b.n	800d324 <_malloc_r+0xa0>
 800d306:	6822      	ldr	r2, [r4, #0]
 800d308:	1b52      	subs	r2, r2, r5
 800d30a:	d41e      	bmi.n	800d34a <_malloc_r+0xc6>
 800d30c:	2a0b      	cmp	r2, #11
 800d30e:	d916      	bls.n	800d33e <_malloc_r+0xba>
 800d310:	1961      	adds	r1, r4, r5
 800d312:	42a3      	cmp	r3, r4
 800d314:	6025      	str	r5, [r4, #0]
 800d316:	bf18      	it	ne
 800d318:	6059      	strne	r1, [r3, #4]
 800d31a:	6863      	ldr	r3, [r4, #4]
 800d31c:	bf08      	it	eq
 800d31e:	6031      	streq	r1, [r6, #0]
 800d320:	5162      	str	r2, [r4, r5]
 800d322:	604b      	str	r3, [r1, #4]
 800d324:	4638      	mov	r0, r7
 800d326:	f104 060b 	add.w	r6, r4, #11
 800d32a:	f000 f899 	bl	800d460 <__malloc_unlock>
 800d32e:	f026 0607 	bic.w	r6, r6, #7
 800d332:	1d23      	adds	r3, r4, #4
 800d334:	1af2      	subs	r2, r6, r3
 800d336:	d0b6      	beq.n	800d2a6 <_malloc_r+0x22>
 800d338:	1b9b      	subs	r3, r3, r6
 800d33a:	50a3      	str	r3, [r4, r2]
 800d33c:	e7b3      	b.n	800d2a6 <_malloc_r+0x22>
 800d33e:	6862      	ldr	r2, [r4, #4]
 800d340:	42a3      	cmp	r3, r4
 800d342:	bf0c      	ite	eq
 800d344:	6032      	streq	r2, [r6, #0]
 800d346:	605a      	strne	r2, [r3, #4]
 800d348:	e7ec      	b.n	800d324 <_malloc_r+0xa0>
 800d34a:	4623      	mov	r3, r4
 800d34c:	6864      	ldr	r4, [r4, #4]
 800d34e:	e7b2      	b.n	800d2b6 <_malloc_r+0x32>
 800d350:	4634      	mov	r4, r6
 800d352:	6876      	ldr	r6, [r6, #4]
 800d354:	e7b9      	b.n	800d2ca <_malloc_r+0x46>
 800d356:	230c      	movs	r3, #12
 800d358:	603b      	str	r3, [r7, #0]
 800d35a:	4638      	mov	r0, r7
 800d35c:	f000 f880 	bl	800d460 <__malloc_unlock>
 800d360:	e7a1      	b.n	800d2a6 <_malloc_r+0x22>
 800d362:	6025      	str	r5, [r4, #0]
 800d364:	e7de      	b.n	800d324 <_malloc_r+0xa0>
 800d366:	bf00      	nop
 800d368:	2000222c 	.word	0x2000222c

0800d36c <_sbrk_r>:
 800d36c:	b538      	push	{r3, r4, r5, lr}
 800d36e:	4d06      	ldr	r5, [pc, #24]	; (800d388 <_sbrk_r+0x1c>)
 800d370:	2300      	movs	r3, #0
 800d372:	4604      	mov	r4, r0
 800d374:	4608      	mov	r0, r1
 800d376:	602b      	str	r3, [r5, #0]
 800d378:	f7f6 f8ca 	bl	8003510 <_sbrk>
 800d37c:	1c43      	adds	r3, r0, #1
 800d37e:	d102      	bne.n	800d386 <_sbrk_r+0x1a>
 800d380:	682b      	ldr	r3, [r5, #0]
 800d382:	b103      	cbz	r3, 800d386 <_sbrk_r+0x1a>
 800d384:	6023      	str	r3, [r4, #0]
 800d386:	bd38      	pop	{r3, r4, r5, pc}
 800d388:	20002234 	.word	0x20002234

0800d38c <_raise_r>:
 800d38c:	291f      	cmp	r1, #31
 800d38e:	b538      	push	{r3, r4, r5, lr}
 800d390:	4604      	mov	r4, r0
 800d392:	460d      	mov	r5, r1
 800d394:	d904      	bls.n	800d3a0 <_raise_r+0x14>
 800d396:	2316      	movs	r3, #22
 800d398:	6003      	str	r3, [r0, #0]
 800d39a:	f04f 30ff 	mov.w	r0, #4294967295
 800d39e:	bd38      	pop	{r3, r4, r5, pc}
 800d3a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d3a2:	b112      	cbz	r2, 800d3aa <_raise_r+0x1e>
 800d3a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3a8:	b94b      	cbnz	r3, 800d3be <_raise_r+0x32>
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f000 f830 	bl	800d410 <_getpid_r>
 800d3b0:	462a      	mov	r2, r5
 800d3b2:	4601      	mov	r1, r0
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3ba:	f000 b817 	b.w	800d3ec <_kill_r>
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d00a      	beq.n	800d3d8 <_raise_r+0x4c>
 800d3c2:	1c59      	adds	r1, r3, #1
 800d3c4:	d103      	bne.n	800d3ce <_raise_r+0x42>
 800d3c6:	2316      	movs	r3, #22
 800d3c8:	6003      	str	r3, [r0, #0]
 800d3ca:	2001      	movs	r0, #1
 800d3cc:	e7e7      	b.n	800d39e <_raise_r+0x12>
 800d3ce:	2400      	movs	r4, #0
 800d3d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	4798      	blx	r3
 800d3d8:	2000      	movs	r0, #0
 800d3da:	e7e0      	b.n	800d39e <_raise_r+0x12>

0800d3dc <raise>:
 800d3dc:	4b02      	ldr	r3, [pc, #8]	; (800d3e8 <raise+0xc>)
 800d3de:	4601      	mov	r1, r0
 800d3e0:	6818      	ldr	r0, [r3, #0]
 800d3e2:	f7ff bfd3 	b.w	800d38c <_raise_r>
 800d3e6:	bf00      	nop
 800d3e8:	20000100 	.word	0x20000100

0800d3ec <_kill_r>:
 800d3ec:	b538      	push	{r3, r4, r5, lr}
 800d3ee:	4d07      	ldr	r5, [pc, #28]	; (800d40c <_kill_r+0x20>)
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	4604      	mov	r4, r0
 800d3f4:	4608      	mov	r0, r1
 800d3f6:	4611      	mov	r1, r2
 800d3f8:	602b      	str	r3, [r5, #0]
 800d3fa:	f7f6 f86f 	bl	80034dc <_kill>
 800d3fe:	1c43      	adds	r3, r0, #1
 800d400:	d102      	bne.n	800d408 <_kill_r+0x1c>
 800d402:	682b      	ldr	r3, [r5, #0]
 800d404:	b103      	cbz	r3, 800d408 <_kill_r+0x1c>
 800d406:	6023      	str	r3, [r4, #0]
 800d408:	bd38      	pop	{r3, r4, r5, pc}
 800d40a:	bf00      	nop
 800d40c:	20002234 	.word	0x20002234

0800d410 <_getpid_r>:
 800d410:	f7f6 b85c 	b.w	80034cc <_getpid>

0800d414 <siprintf>:
 800d414:	b40e      	push	{r1, r2, r3}
 800d416:	b500      	push	{lr}
 800d418:	b09c      	sub	sp, #112	; 0x70
 800d41a:	ab1d      	add	r3, sp, #116	; 0x74
 800d41c:	9002      	str	r0, [sp, #8]
 800d41e:	9006      	str	r0, [sp, #24]
 800d420:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d424:	4809      	ldr	r0, [pc, #36]	; (800d44c <siprintf+0x38>)
 800d426:	9107      	str	r1, [sp, #28]
 800d428:	9104      	str	r1, [sp, #16]
 800d42a:	4909      	ldr	r1, [pc, #36]	; (800d450 <siprintf+0x3c>)
 800d42c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d430:	9105      	str	r1, [sp, #20]
 800d432:	6800      	ldr	r0, [r0, #0]
 800d434:	9301      	str	r3, [sp, #4]
 800d436:	a902      	add	r1, sp, #8
 800d438:	f000 f874 	bl	800d524 <_svfiprintf_r>
 800d43c:	9b02      	ldr	r3, [sp, #8]
 800d43e:	2200      	movs	r2, #0
 800d440:	701a      	strb	r2, [r3, #0]
 800d442:	b01c      	add	sp, #112	; 0x70
 800d444:	f85d eb04 	ldr.w	lr, [sp], #4
 800d448:	b003      	add	sp, #12
 800d44a:	4770      	bx	lr
 800d44c:	20000100 	.word	0x20000100
 800d450:	ffff0208 	.word	0xffff0208

0800d454 <__malloc_lock>:
 800d454:	4801      	ldr	r0, [pc, #4]	; (800d45c <__malloc_lock+0x8>)
 800d456:	f000 baf9 	b.w	800da4c <__retarget_lock_acquire_recursive>
 800d45a:	bf00      	nop
 800d45c:	20002238 	.word	0x20002238

0800d460 <__malloc_unlock>:
 800d460:	4801      	ldr	r0, [pc, #4]	; (800d468 <__malloc_unlock+0x8>)
 800d462:	f000 baf4 	b.w	800da4e <__retarget_lock_release_recursive>
 800d466:	bf00      	nop
 800d468:	20002238 	.word	0x20002238

0800d46c <__ssputs_r>:
 800d46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d470:	688e      	ldr	r6, [r1, #8]
 800d472:	429e      	cmp	r6, r3
 800d474:	4682      	mov	sl, r0
 800d476:	460c      	mov	r4, r1
 800d478:	4690      	mov	r8, r2
 800d47a:	461f      	mov	r7, r3
 800d47c:	d838      	bhi.n	800d4f0 <__ssputs_r+0x84>
 800d47e:	898a      	ldrh	r2, [r1, #12]
 800d480:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d484:	d032      	beq.n	800d4ec <__ssputs_r+0x80>
 800d486:	6825      	ldr	r5, [r4, #0]
 800d488:	6909      	ldr	r1, [r1, #16]
 800d48a:	eba5 0901 	sub.w	r9, r5, r1
 800d48e:	6965      	ldr	r5, [r4, #20]
 800d490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d498:	3301      	adds	r3, #1
 800d49a:	444b      	add	r3, r9
 800d49c:	106d      	asrs	r5, r5, #1
 800d49e:	429d      	cmp	r5, r3
 800d4a0:	bf38      	it	cc
 800d4a2:	461d      	movcc	r5, r3
 800d4a4:	0553      	lsls	r3, r2, #21
 800d4a6:	d531      	bpl.n	800d50c <__ssputs_r+0xa0>
 800d4a8:	4629      	mov	r1, r5
 800d4aa:	f7ff feeb 	bl	800d284 <_malloc_r>
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	b950      	cbnz	r0, 800d4c8 <__ssputs_r+0x5c>
 800d4b2:	230c      	movs	r3, #12
 800d4b4:	f8ca 3000 	str.w	r3, [sl]
 800d4b8:	89a3      	ldrh	r3, [r4, #12]
 800d4ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4be:	81a3      	strh	r3, [r4, #12]
 800d4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4c8:	6921      	ldr	r1, [r4, #16]
 800d4ca:	464a      	mov	r2, r9
 800d4cc:	f7ff fe58 	bl	800d180 <memcpy>
 800d4d0:	89a3      	ldrh	r3, [r4, #12]
 800d4d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d4d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4da:	81a3      	strh	r3, [r4, #12]
 800d4dc:	6126      	str	r6, [r4, #16]
 800d4de:	6165      	str	r5, [r4, #20]
 800d4e0:	444e      	add	r6, r9
 800d4e2:	eba5 0509 	sub.w	r5, r5, r9
 800d4e6:	6026      	str	r6, [r4, #0]
 800d4e8:	60a5      	str	r5, [r4, #8]
 800d4ea:	463e      	mov	r6, r7
 800d4ec:	42be      	cmp	r6, r7
 800d4ee:	d900      	bls.n	800d4f2 <__ssputs_r+0x86>
 800d4f0:	463e      	mov	r6, r7
 800d4f2:	6820      	ldr	r0, [r4, #0]
 800d4f4:	4632      	mov	r2, r6
 800d4f6:	4641      	mov	r1, r8
 800d4f8:	f000 faaa 	bl	800da50 <memmove>
 800d4fc:	68a3      	ldr	r3, [r4, #8]
 800d4fe:	1b9b      	subs	r3, r3, r6
 800d500:	60a3      	str	r3, [r4, #8]
 800d502:	6823      	ldr	r3, [r4, #0]
 800d504:	4433      	add	r3, r6
 800d506:	6023      	str	r3, [r4, #0]
 800d508:	2000      	movs	r0, #0
 800d50a:	e7db      	b.n	800d4c4 <__ssputs_r+0x58>
 800d50c:	462a      	mov	r2, r5
 800d50e:	f000 fab9 	bl	800da84 <_realloc_r>
 800d512:	4606      	mov	r6, r0
 800d514:	2800      	cmp	r0, #0
 800d516:	d1e1      	bne.n	800d4dc <__ssputs_r+0x70>
 800d518:	6921      	ldr	r1, [r4, #16]
 800d51a:	4650      	mov	r0, sl
 800d51c:	f7ff fe46 	bl	800d1ac <_free_r>
 800d520:	e7c7      	b.n	800d4b2 <__ssputs_r+0x46>
	...

0800d524 <_svfiprintf_r>:
 800d524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d528:	4698      	mov	r8, r3
 800d52a:	898b      	ldrh	r3, [r1, #12]
 800d52c:	061b      	lsls	r3, r3, #24
 800d52e:	b09d      	sub	sp, #116	; 0x74
 800d530:	4607      	mov	r7, r0
 800d532:	460d      	mov	r5, r1
 800d534:	4614      	mov	r4, r2
 800d536:	d50e      	bpl.n	800d556 <_svfiprintf_r+0x32>
 800d538:	690b      	ldr	r3, [r1, #16]
 800d53a:	b963      	cbnz	r3, 800d556 <_svfiprintf_r+0x32>
 800d53c:	2140      	movs	r1, #64	; 0x40
 800d53e:	f7ff fea1 	bl	800d284 <_malloc_r>
 800d542:	6028      	str	r0, [r5, #0]
 800d544:	6128      	str	r0, [r5, #16]
 800d546:	b920      	cbnz	r0, 800d552 <_svfiprintf_r+0x2e>
 800d548:	230c      	movs	r3, #12
 800d54a:	603b      	str	r3, [r7, #0]
 800d54c:	f04f 30ff 	mov.w	r0, #4294967295
 800d550:	e0d1      	b.n	800d6f6 <_svfiprintf_r+0x1d2>
 800d552:	2340      	movs	r3, #64	; 0x40
 800d554:	616b      	str	r3, [r5, #20]
 800d556:	2300      	movs	r3, #0
 800d558:	9309      	str	r3, [sp, #36]	; 0x24
 800d55a:	2320      	movs	r3, #32
 800d55c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d560:	f8cd 800c 	str.w	r8, [sp, #12]
 800d564:	2330      	movs	r3, #48	; 0x30
 800d566:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d710 <_svfiprintf_r+0x1ec>
 800d56a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d56e:	f04f 0901 	mov.w	r9, #1
 800d572:	4623      	mov	r3, r4
 800d574:	469a      	mov	sl, r3
 800d576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d57a:	b10a      	cbz	r2, 800d580 <_svfiprintf_r+0x5c>
 800d57c:	2a25      	cmp	r2, #37	; 0x25
 800d57e:	d1f9      	bne.n	800d574 <_svfiprintf_r+0x50>
 800d580:	ebba 0b04 	subs.w	fp, sl, r4
 800d584:	d00b      	beq.n	800d59e <_svfiprintf_r+0x7a>
 800d586:	465b      	mov	r3, fp
 800d588:	4622      	mov	r2, r4
 800d58a:	4629      	mov	r1, r5
 800d58c:	4638      	mov	r0, r7
 800d58e:	f7ff ff6d 	bl	800d46c <__ssputs_r>
 800d592:	3001      	adds	r0, #1
 800d594:	f000 80aa 	beq.w	800d6ec <_svfiprintf_r+0x1c8>
 800d598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d59a:	445a      	add	r2, fp
 800d59c:	9209      	str	r2, [sp, #36]	; 0x24
 800d59e:	f89a 3000 	ldrb.w	r3, [sl]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	f000 80a2 	beq.w	800d6ec <_svfiprintf_r+0x1c8>
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5b2:	f10a 0a01 	add.w	sl, sl, #1
 800d5b6:	9304      	str	r3, [sp, #16]
 800d5b8:	9307      	str	r3, [sp, #28]
 800d5ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5be:	931a      	str	r3, [sp, #104]	; 0x68
 800d5c0:	4654      	mov	r4, sl
 800d5c2:	2205      	movs	r2, #5
 800d5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5c8:	4851      	ldr	r0, [pc, #324]	; (800d710 <_svfiprintf_r+0x1ec>)
 800d5ca:	f7f2 fe01 	bl	80001d0 <memchr>
 800d5ce:	9a04      	ldr	r2, [sp, #16]
 800d5d0:	b9d8      	cbnz	r0, 800d60a <_svfiprintf_r+0xe6>
 800d5d2:	06d0      	lsls	r0, r2, #27
 800d5d4:	bf44      	itt	mi
 800d5d6:	2320      	movmi	r3, #32
 800d5d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5dc:	0711      	lsls	r1, r2, #28
 800d5de:	bf44      	itt	mi
 800d5e0:	232b      	movmi	r3, #43	; 0x2b
 800d5e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ea:	2b2a      	cmp	r3, #42	; 0x2a
 800d5ec:	d015      	beq.n	800d61a <_svfiprintf_r+0xf6>
 800d5ee:	9a07      	ldr	r2, [sp, #28]
 800d5f0:	4654      	mov	r4, sl
 800d5f2:	2000      	movs	r0, #0
 800d5f4:	f04f 0c0a 	mov.w	ip, #10
 800d5f8:	4621      	mov	r1, r4
 800d5fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5fe:	3b30      	subs	r3, #48	; 0x30
 800d600:	2b09      	cmp	r3, #9
 800d602:	d94e      	bls.n	800d6a2 <_svfiprintf_r+0x17e>
 800d604:	b1b0      	cbz	r0, 800d634 <_svfiprintf_r+0x110>
 800d606:	9207      	str	r2, [sp, #28]
 800d608:	e014      	b.n	800d634 <_svfiprintf_r+0x110>
 800d60a:	eba0 0308 	sub.w	r3, r0, r8
 800d60e:	fa09 f303 	lsl.w	r3, r9, r3
 800d612:	4313      	orrs	r3, r2
 800d614:	9304      	str	r3, [sp, #16]
 800d616:	46a2      	mov	sl, r4
 800d618:	e7d2      	b.n	800d5c0 <_svfiprintf_r+0x9c>
 800d61a:	9b03      	ldr	r3, [sp, #12]
 800d61c:	1d19      	adds	r1, r3, #4
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	9103      	str	r1, [sp, #12]
 800d622:	2b00      	cmp	r3, #0
 800d624:	bfbb      	ittet	lt
 800d626:	425b      	neglt	r3, r3
 800d628:	f042 0202 	orrlt.w	r2, r2, #2
 800d62c:	9307      	strge	r3, [sp, #28]
 800d62e:	9307      	strlt	r3, [sp, #28]
 800d630:	bfb8      	it	lt
 800d632:	9204      	strlt	r2, [sp, #16]
 800d634:	7823      	ldrb	r3, [r4, #0]
 800d636:	2b2e      	cmp	r3, #46	; 0x2e
 800d638:	d10c      	bne.n	800d654 <_svfiprintf_r+0x130>
 800d63a:	7863      	ldrb	r3, [r4, #1]
 800d63c:	2b2a      	cmp	r3, #42	; 0x2a
 800d63e:	d135      	bne.n	800d6ac <_svfiprintf_r+0x188>
 800d640:	9b03      	ldr	r3, [sp, #12]
 800d642:	1d1a      	adds	r2, r3, #4
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	9203      	str	r2, [sp, #12]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	bfb8      	it	lt
 800d64c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d650:	3402      	adds	r4, #2
 800d652:	9305      	str	r3, [sp, #20]
 800d654:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d720 <_svfiprintf_r+0x1fc>
 800d658:	7821      	ldrb	r1, [r4, #0]
 800d65a:	2203      	movs	r2, #3
 800d65c:	4650      	mov	r0, sl
 800d65e:	f7f2 fdb7 	bl	80001d0 <memchr>
 800d662:	b140      	cbz	r0, 800d676 <_svfiprintf_r+0x152>
 800d664:	2340      	movs	r3, #64	; 0x40
 800d666:	eba0 000a 	sub.w	r0, r0, sl
 800d66a:	fa03 f000 	lsl.w	r0, r3, r0
 800d66e:	9b04      	ldr	r3, [sp, #16]
 800d670:	4303      	orrs	r3, r0
 800d672:	3401      	adds	r4, #1
 800d674:	9304      	str	r3, [sp, #16]
 800d676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d67a:	4826      	ldr	r0, [pc, #152]	; (800d714 <_svfiprintf_r+0x1f0>)
 800d67c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d680:	2206      	movs	r2, #6
 800d682:	f7f2 fda5 	bl	80001d0 <memchr>
 800d686:	2800      	cmp	r0, #0
 800d688:	d038      	beq.n	800d6fc <_svfiprintf_r+0x1d8>
 800d68a:	4b23      	ldr	r3, [pc, #140]	; (800d718 <_svfiprintf_r+0x1f4>)
 800d68c:	bb1b      	cbnz	r3, 800d6d6 <_svfiprintf_r+0x1b2>
 800d68e:	9b03      	ldr	r3, [sp, #12]
 800d690:	3307      	adds	r3, #7
 800d692:	f023 0307 	bic.w	r3, r3, #7
 800d696:	3308      	adds	r3, #8
 800d698:	9303      	str	r3, [sp, #12]
 800d69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d69c:	4433      	add	r3, r6
 800d69e:	9309      	str	r3, [sp, #36]	; 0x24
 800d6a0:	e767      	b.n	800d572 <_svfiprintf_r+0x4e>
 800d6a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6a6:	460c      	mov	r4, r1
 800d6a8:	2001      	movs	r0, #1
 800d6aa:	e7a5      	b.n	800d5f8 <_svfiprintf_r+0xd4>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	3401      	adds	r4, #1
 800d6b0:	9305      	str	r3, [sp, #20]
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	f04f 0c0a 	mov.w	ip, #10
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6be:	3a30      	subs	r2, #48	; 0x30
 800d6c0:	2a09      	cmp	r2, #9
 800d6c2:	d903      	bls.n	800d6cc <_svfiprintf_r+0x1a8>
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d0c5      	beq.n	800d654 <_svfiprintf_r+0x130>
 800d6c8:	9105      	str	r1, [sp, #20]
 800d6ca:	e7c3      	b.n	800d654 <_svfiprintf_r+0x130>
 800d6cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e7f0      	b.n	800d6b8 <_svfiprintf_r+0x194>
 800d6d6:	ab03      	add	r3, sp, #12
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	462a      	mov	r2, r5
 800d6dc:	4b0f      	ldr	r3, [pc, #60]	; (800d71c <_svfiprintf_r+0x1f8>)
 800d6de:	a904      	add	r1, sp, #16
 800d6e0:	4638      	mov	r0, r7
 800d6e2:	f3af 8000 	nop.w
 800d6e6:	1c42      	adds	r2, r0, #1
 800d6e8:	4606      	mov	r6, r0
 800d6ea:	d1d6      	bne.n	800d69a <_svfiprintf_r+0x176>
 800d6ec:	89ab      	ldrh	r3, [r5, #12]
 800d6ee:	065b      	lsls	r3, r3, #25
 800d6f0:	f53f af2c 	bmi.w	800d54c <_svfiprintf_r+0x28>
 800d6f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6f6:	b01d      	add	sp, #116	; 0x74
 800d6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6fc:	ab03      	add	r3, sp, #12
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	462a      	mov	r2, r5
 800d702:	4b06      	ldr	r3, [pc, #24]	; (800d71c <_svfiprintf_r+0x1f8>)
 800d704:	a904      	add	r1, sp, #16
 800d706:	4638      	mov	r0, r7
 800d708:	f000 f87a 	bl	800d800 <_printf_i>
 800d70c:	e7eb      	b.n	800d6e6 <_svfiprintf_r+0x1c2>
 800d70e:	bf00      	nop
 800d710:	0800dd20 	.word	0x0800dd20
 800d714:	0800dd2a 	.word	0x0800dd2a
 800d718:	00000000 	.word	0x00000000
 800d71c:	0800d46d 	.word	0x0800d46d
 800d720:	0800dd26 	.word	0x0800dd26

0800d724 <_printf_common>:
 800d724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d728:	4616      	mov	r6, r2
 800d72a:	4699      	mov	r9, r3
 800d72c:	688a      	ldr	r2, [r1, #8]
 800d72e:	690b      	ldr	r3, [r1, #16]
 800d730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d734:	4293      	cmp	r3, r2
 800d736:	bfb8      	it	lt
 800d738:	4613      	movlt	r3, r2
 800d73a:	6033      	str	r3, [r6, #0]
 800d73c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d740:	4607      	mov	r7, r0
 800d742:	460c      	mov	r4, r1
 800d744:	b10a      	cbz	r2, 800d74a <_printf_common+0x26>
 800d746:	3301      	adds	r3, #1
 800d748:	6033      	str	r3, [r6, #0]
 800d74a:	6823      	ldr	r3, [r4, #0]
 800d74c:	0699      	lsls	r1, r3, #26
 800d74e:	bf42      	ittt	mi
 800d750:	6833      	ldrmi	r3, [r6, #0]
 800d752:	3302      	addmi	r3, #2
 800d754:	6033      	strmi	r3, [r6, #0]
 800d756:	6825      	ldr	r5, [r4, #0]
 800d758:	f015 0506 	ands.w	r5, r5, #6
 800d75c:	d106      	bne.n	800d76c <_printf_common+0x48>
 800d75e:	f104 0a19 	add.w	sl, r4, #25
 800d762:	68e3      	ldr	r3, [r4, #12]
 800d764:	6832      	ldr	r2, [r6, #0]
 800d766:	1a9b      	subs	r3, r3, r2
 800d768:	42ab      	cmp	r3, r5
 800d76a:	dc26      	bgt.n	800d7ba <_printf_common+0x96>
 800d76c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d770:	1e13      	subs	r3, r2, #0
 800d772:	6822      	ldr	r2, [r4, #0]
 800d774:	bf18      	it	ne
 800d776:	2301      	movne	r3, #1
 800d778:	0692      	lsls	r2, r2, #26
 800d77a:	d42b      	bmi.n	800d7d4 <_printf_common+0xb0>
 800d77c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d780:	4649      	mov	r1, r9
 800d782:	4638      	mov	r0, r7
 800d784:	47c0      	blx	r8
 800d786:	3001      	adds	r0, #1
 800d788:	d01e      	beq.n	800d7c8 <_printf_common+0xa4>
 800d78a:	6823      	ldr	r3, [r4, #0]
 800d78c:	68e5      	ldr	r5, [r4, #12]
 800d78e:	6832      	ldr	r2, [r6, #0]
 800d790:	f003 0306 	and.w	r3, r3, #6
 800d794:	2b04      	cmp	r3, #4
 800d796:	bf08      	it	eq
 800d798:	1aad      	subeq	r5, r5, r2
 800d79a:	68a3      	ldr	r3, [r4, #8]
 800d79c:	6922      	ldr	r2, [r4, #16]
 800d79e:	bf0c      	ite	eq
 800d7a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7a4:	2500      	movne	r5, #0
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	bfc4      	itt	gt
 800d7aa:	1a9b      	subgt	r3, r3, r2
 800d7ac:	18ed      	addgt	r5, r5, r3
 800d7ae:	2600      	movs	r6, #0
 800d7b0:	341a      	adds	r4, #26
 800d7b2:	42b5      	cmp	r5, r6
 800d7b4:	d11a      	bne.n	800d7ec <_printf_common+0xc8>
 800d7b6:	2000      	movs	r0, #0
 800d7b8:	e008      	b.n	800d7cc <_printf_common+0xa8>
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	4652      	mov	r2, sl
 800d7be:	4649      	mov	r1, r9
 800d7c0:	4638      	mov	r0, r7
 800d7c2:	47c0      	blx	r8
 800d7c4:	3001      	adds	r0, #1
 800d7c6:	d103      	bne.n	800d7d0 <_printf_common+0xac>
 800d7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7d0:	3501      	adds	r5, #1
 800d7d2:	e7c6      	b.n	800d762 <_printf_common+0x3e>
 800d7d4:	18e1      	adds	r1, r4, r3
 800d7d6:	1c5a      	adds	r2, r3, #1
 800d7d8:	2030      	movs	r0, #48	; 0x30
 800d7da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7de:	4422      	add	r2, r4
 800d7e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7e8:	3302      	adds	r3, #2
 800d7ea:	e7c7      	b.n	800d77c <_printf_common+0x58>
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	4622      	mov	r2, r4
 800d7f0:	4649      	mov	r1, r9
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	47c0      	blx	r8
 800d7f6:	3001      	adds	r0, #1
 800d7f8:	d0e6      	beq.n	800d7c8 <_printf_common+0xa4>
 800d7fa:	3601      	adds	r6, #1
 800d7fc:	e7d9      	b.n	800d7b2 <_printf_common+0x8e>
	...

0800d800 <_printf_i>:
 800d800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d804:	7e0f      	ldrb	r7, [r1, #24]
 800d806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d808:	2f78      	cmp	r7, #120	; 0x78
 800d80a:	4691      	mov	r9, r2
 800d80c:	4680      	mov	r8, r0
 800d80e:	460c      	mov	r4, r1
 800d810:	469a      	mov	sl, r3
 800d812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d816:	d807      	bhi.n	800d828 <_printf_i+0x28>
 800d818:	2f62      	cmp	r7, #98	; 0x62
 800d81a:	d80a      	bhi.n	800d832 <_printf_i+0x32>
 800d81c:	2f00      	cmp	r7, #0
 800d81e:	f000 80d8 	beq.w	800d9d2 <_printf_i+0x1d2>
 800d822:	2f58      	cmp	r7, #88	; 0x58
 800d824:	f000 80a3 	beq.w	800d96e <_printf_i+0x16e>
 800d828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d82c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d830:	e03a      	b.n	800d8a8 <_printf_i+0xa8>
 800d832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d836:	2b15      	cmp	r3, #21
 800d838:	d8f6      	bhi.n	800d828 <_printf_i+0x28>
 800d83a:	a101      	add	r1, pc, #4	; (adr r1, 800d840 <_printf_i+0x40>)
 800d83c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d840:	0800d899 	.word	0x0800d899
 800d844:	0800d8ad 	.word	0x0800d8ad
 800d848:	0800d829 	.word	0x0800d829
 800d84c:	0800d829 	.word	0x0800d829
 800d850:	0800d829 	.word	0x0800d829
 800d854:	0800d829 	.word	0x0800d829
 800d858:	0800d8ad 	.word	0x0800d8ad
 800d85c:	0800d829 	.word	0x0800d829
 800d860:	0800d829 	.word	0x0800d829
 800d864:	0800d829 	.word	0x0800d829
 800d868:	0800d829 	.word	0x0800d829
 800d86c:	0800d9b9 	.word	0x0800d9b9
 800d870:	0800d8dd 	.word	0x0800d8dd
 800d874:	0800d99b 	.word	0x0800d99b
 800d878:	0800d829 	.word	0x0800d829
 800d87c:	0800d829 	.word	0x0800d829
 800d880:	0800d9db 	.word	0x0800d9db
 800d884:	0800d829 	.word	0x0800d829
 800d888:	0800d8dd 	.word	0x0800d8dd
 800d88c:	0800d829 	.word	0x0800d829
 800d890:	0800d829 	.word	0x0800d829
 800d894:	0800d9a3 	.word	0x0800d9a3
 800d898:	682b      	ldr	r3, [r5, #0]
 800d89a:	1d1a      	adds	r2, r3, #4
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	602a      	str	r2, [r5, #0]
 800d8a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e0a3      	b.n	800d9f4 <_printf_i+0x1f4>
 800d8ac:	6820      	ldr	r0, [r4, #0]
 800d8ae:	6829      	ldr	r1, [r5, #0]
 800d8b0:	0606      	lsls	r6, r0, #24
 800d8b2:	f101 0304 	add.w	r3, r1, #4
 800d8b6:	d50a      	bpl.n	800d8ce <_printf_i+0xce>
 800d8b8:	680e      	ldr	r6, [r1, #0]
 800d8ba:	602b      	str	r3, [r5, #0]
 800d8bc:	2e00      	cmp	r6, #0
 800d8be:	da03      	bge.n	800d8c8 <_printf_i+0xc8>
 800d8c0:	232d      	movs	r3, #45	; 0x2d
 800d8c2:	4276      	negs	r6, r6
 800d8c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8c8:	485e      	ldr	r0, [pc, #376]	; (800da44 <_printf_i+0x244>)
 800d8ca:	230a      	movs	r3, #10
 800d8cc:	e019      	b.n	800d902 <_printf_i+0x102>
 800d8ce:	680e      	ldr	r6, [r1, #0]
 800d8d0:	602b      	str	r3, [r5, #0]
 800d8d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d8d6:	bf18      	it	ne
 800d8d8:	b236      	sxthne	r6, r6
 800d8da:	e7ef      	b.n	800d8bc <_printf_i+0xbc>
 800d8dc:	682b      	ldr	r3, [r5, #0]
 800d8de:	6820      	ldr	r0, [r4, #0]
 800d8e0:	1d19      	adds	r1, r3, #4
 800d8e2:	6029      	str	r1, [r5, #0]
 800d8e4:	0601      	lsls	r1, r0, #24
 800d8e6:	d501      	bpl.n	800d8ec <_printf_i+0xec>
 800d8e8:	681e      	ldr	r6, [r3, #0]
 800d8ea:	e002      	b.n	800d8f2 <_printf_i+0xf2>
 800d8ec:	0646      	lsls	r6, r0, #25
 800d8ee:	d5fb      	bpl.n	800d8e8 <_printf_i+0xe8>
 800d8f0:	881e      	ldrh	r6, [r3, #0]
 800d8f2:	4854      	ldr	r0, [pc, #336]	; (800da44 <_printf_i+0x244>)
 800d8f4:	2f6f      	cmp	r7, #111	; 0x6f
 800d8f6:	bf0c      	ite	eq
 800d8f8:	2308      	moveq	r3, #8
 800d8fa:	230a      	movne	r3, #10
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d902:	6865      	ldr	r5, [r4, #4]
 800d904:	60a5      	str	r5, [r4, #8]
 800d906:	2d00      	cmp	r5, #0
 800d908:	bfa2      	ittt	ge
 800d90a:	6821      	ldrge	r1, [r4, #0]
 800d90c:	f021 0104 	bicge.w	r1, r1, #4
 800d910:	6021      	strge	r1, [r4, #0]
 800d912:	b90e      	cbnz	r6, 800d918 <_printf_i+0x118>
 800d914:	2d00      	cmp	r5, #0
 800d916:	d04d      	beq.n	800d9b4 <_printf_i+0x1b4>
 800d918:	4615      	mov	r5, r2
 800d91a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d91e:	fb03 6711 	mls	r7, r3, r1, r6
 800d922:	5dc7      	ldrb	r7, [r0, r7]
 800d924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d928:	4637      	mov	r7, r6
 800d92a:	42bb      	cmp	r3, r7
 800d92c:	460e      	mov	r6, r1
 800d92e:	d9f4      	bls.n	800d91a <_printf_i+0x11a>
 800d930:	2b08      	cmp	r3, #8
 800d932:	d10b      	bne.n	800d94c <_printf_i+0x14c>
 800d934:	6823      	ldr	r3, [r4, #0]
 800d936:	07de      	lsls	r6, r3, #31
 800d938:	d508      	bpl.n	800d94c <_printf_i+0x14c>
 800d93a:	6923      	ldr	r3, [r4, #16]
 800d93c:	6861      	ldr	r1, [r4, #4]
 800d93e:	4299      	cmp	r1, r3
 800d940:	bfde      	ittt	le
 800d942:	2330      	movle	r3, #48	; 0x30
 800d944:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d948:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d94c:	1b52      	subs	r2, r2, r5
 800d94e:	6122      	str	r2, [r4, #16]
 800d950:	f8cd a000 	str.w	sl, [sp]
 800d954:	464b      	mov	r3, r9
 800d956:	aa03      	add	r2, sp, #12
 800d958:	4621      	mov	r1, r4
 800d95a:	4640      	mov	r0, r8
 800d95c:	f7ff fee2 	bl	800d724 <_printf_common>
 800d960:	3001      	adds	r0, #1
 800d962:	d14c      	bne.n	800d9fe <_printf_i+0x1fe>
 800d964:	f04f 30ff 	mov.w	r0, #4294967295
 800d968:	b004      	add	sp, #16
 800d96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d96e:	4835      	ldr	r0, [pc, #212]	; (800da44 <_printf_i+0x244>)
 800d970:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d974:	6829      	ldr	r1, [r5, #0]
 800d976:	6823      	ldr	r3, [r4, #0]
 800d978:	f851 6b04 	ldr.w	r6, [r1], #4
 800d97c:	6029      	str	r1, [r5, #0]
 800d97e:	061d      	lsls	r5, r3, #24
 800d980:	d514      	bpl.n	800d9ac <_printf_i+0x1ac>
 800d982:	07df      	lsls	r7, r3, #31
 800d984:	bf44      	itt	mi
 800d986:	f043 0320 	orrmi.w	r3, r3, #32
 800d98a:	6023      	strmi	r3, [r4, #0]
 800d98c:	b91e      	cbnz	r6, 800d996 <_printf_i+0x196>
 800d98e:	6823      	ldr	r3, [r4, #0]
 800d990:	f023 0320 	bic.w	r3, r3, #32
 800d994:	6023      	str	r3, [r4, #0]
 800d996:	2310      	movs	r3, #16
 800d998:	e7b0      	b.n	800d8fc <_printf_i+0xfc>
 800d99a:	6823      	ldr	r3, [r4, #0]
 800d99c:	f043 0320 	orr.w	r3, r3, #32
 800d9a0:	6023      	str	r3, [r4, #0]
 800d9a2:	2378      	movs	r3, #120	; 0x78
 800d9a4:	4828      	ldr	r0, [pc, #160]	; (800da48 <_printf_i+0x248>)
 800d9a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d9aa:	e7e3      	b.n	800d974 <_printf_i+0x174>
 800d9ac:	0659      	lsls	r1, r3, #25
 800d9ae:	bf48      	it	mi
 800d9b0:	b2b6      	uxthmi	r6, r6
 800d9b2:	e7e6      	b.n	800d982 <_printf_i+0x182>
 800d9b4:	4615      	mov	r5, r2
 800d9b6:	e7bb      	b.n	800d930 <_printf_i+0x130>
 800d9b8:	682b      	ldr	r3, [r5, #0]
 800d9ba:	6826      	ldr	r6, [r4, #0]
 800d9bc:	6961      	ldr	r1, [r4, #20]
 800d9be:	1d18      	adds	r0, r3, #4
 800d9c0:	6028      	str	r0, [r5, #0]
 800d9c2:	0635      	lsls	r5, r6, #24
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	d501      	bpl.n	800d9cc <_printf_i+0x1cc>
 800d9c8:	6019      	str	r1, [r3, #0]
 800d9ca:	e002      	b.n	800d9d2 <_printf_i+0x1d2>
 800d9cc:	0670      	lsls	r0, r6, #25
 800d9ce:	d5fb      	bpl.n	800d9c8 <_printf_i+0x1c8>
 800d9d0:	8019      	strh	r1, [r3, #0]
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	6123      	str	r3, [r4, #16]
 800d9d6:	4615      	mov	r5, r2
 800d9d8:	e7ba      	b.n	800d950 <_printf_i+0x150>
 800d9da:	682b      	ldr	r3, [r5, #0]
 800d9dc:	1d1a      	adds	r2, r3, #4
 800d9de:	602a      	str	r2, [r5, #0]
 800d9e0:	681d      	ldr	r5, [r3, #0]
 800d9e2:	6862      	ldr	r2, [r4, #4]
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	f7f2 fbf2 	bl	80001d0 <memchr>
 800d9ec:	b108      	cbz	r0, 800d9f2 <_printf_i+0x1f2>
 800d9ee:	1b40      	subs	r0, r0, r5
 800d9f0:	6060      	str	r0, [r4, #4]
 800d9f2:	6863      	ldr	r3, [r4, #4]
 800d9f4:	6123      	str	r3, [r4, #16]
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9fc:	e7a8      	b.n	800d950 <_printf_i+0x150>
 800d9fe:	6923      	ldr	r3, [r4, #16]
 800da00:	462a      	mov	r2, r5
 800da02:	4649      	mov	r1, r9
 800da04:	4640      	mov	r0, r8
 800da06:	47d0      	blx	sl
 800da08:	3001      	adds	r0, #1
 800da0a:	d0ab      	beq.n	800d964 <_printf_i+0x164>
 800da0c:	6823      	ldr	r3, [r4, #0]
 800da0e:	079b      	lsls	r3, r3, #30
 800da10:	d413      	bmi.n	800da3a <_printf_i+0x23a>
 800da12:	68e0      	ldr	r0, [r4, #12]
 800da14:	9b03      	ldr	r3, [sp, #12]
 800da16:	4298      	cmp	r0, r3
 800da18:	bfb8      	it	lt
 800da1a:	4618      	movlt	r0, r3
 800da1c:	e7a4      	b.n	800d968 <_printf_i+0x168>
 800da1e:	2301      	movs	r3, #1
 800da20:	4632      	mov	r2, r6
 800da22:	4649      	mov	r1, r9
 800da24:	4640      	mov	r0, r8
 800da26:	47d0      	blx	sl
 800da28:	3001      	adds	r0, #1
 800da2a:	d09b      	beq.n	800d964 <_printf_i+0x164>
 800da2c:	3501      	adds	r5, #1
 800da2e:	68e3      	ldr	r3, [r4, #12]
 800da30:	9903      	ldr	r1, [sp, #12]
 800da32:	1a5b      	subs	r3, r3, r1
 800da34:	42ab      	cmp	r3, r5
 800da36:	dcf2      	bgt.n	800da1e <_printf_i+0x21e>
 800da38:	e7eb      	b.n	800da12 <_printf_i+0x212>
 800da3a:	2500      	movs	r5, #0
 800da3c:	f104 0619 	add.w	r6, r4, #25
 800da40:	e7f5      	b.n	800da2e <_printf_i+0x22e>
 800da42:	bf00      	nop
 800da44:	0800dd31 	.word	0x0800dd31
 800da48:	0800dd42 	.word	0x0800dd42

0800da4c <__retarget_lock_acquire_recursive>:
 800da4c:	4770      	bx	lr

0800da4e <__retarget_lock_release_recursive>:
 800da4e:	4770      	bx	lr

0800da50 <memmove>:
 800da50:	4288      	cmp	r0, r1
 800da52:	b510      	push	{r4, lr}
 800da54:	eb01 0402 	add.w	r4, r1, r2
 800da58:	d902      	bls.n	800da60 <memmove+0x10>
 800da5a:	4284      	cmp	r4, r0
 800da5c:	4623      	mov	r3, r4
 800da5e:	d807      	bhi.n	800da70 <memmove+0x20>
 800da60:	1e43      	subs	r3, r0, #1
 800da62:	42a1      	cmp	r1, r4
 800da64:	d008      	beq.n	800da78 <memmove+0x28>
 800da66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da6e:	e7f8      	b.n	800da62 <memmove+0x12>
 800da70:	4402      	add	r2, r0
 800da72:	4601      	mov	r1, r0
 800da74:	428a      	cmp	r2, r1
 800da76:	d100      	bne.n	800da7a <memmove+0x2a>
 800da78:	bd10      	pop	{r4, pc}
 800da7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da82:	e7f7      	b.n	800da74 <memmove+0x24>

0800da84 <_realloc_r>:
 800da84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da88:	4680      	mov	r8, r0
 800da8a:	4614      	mov	r4, r2
 800da8c:	460e      	mov	r6, r1
 800da8e:	b921      	cbnz	r1, 800da9a <_realloc_r+0x16>
 800da90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da94:	4611      	mov	r1, r2
 800da96:	f7ff bbf5 	b.w	800d284 <_malloc_r>
 800da9a:	b92a      	cbnz	r2, 800daa8 <_realloc_r+0x24>
 800da9c:	f7ff fb86 	bl	800d1ac <_free_r>
 800daa0:	4625      	mov	r5, r4
 800daa2:	4628      	mov	r0, r5
 800daa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa8:	f000 f81b 	bl	800dae2 <_malloc_usable_size_r>
 800daac:	4284      	cmp	r4, r0
 800daae:	4607      	mov	r7, r0
 800dab0:	d802      	bhi.n	800dab8 <_realloc_r+0x34>
 800dab2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dab6:	d812      	bhi.n	800dade <_realloc_r+0x5a>
 800dab8:	4621      	mov	r1, r4
 800daba:	4640      	mov	r0, r8
 800dabc:	f7ff fbe2 	bl	800d284 <_malloc_r>
 800dac0:	4605      	mov	r5, r0
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d0ed      	beq.n	800daa2 <_realloc_r+0x1e>
 800dac6:	42bc      	cmp	r4, r7
 800dac8:	4622      	mov	r2, r4
 800daca:	4631      	mov	r1, r6
 800dacc:	bf28      	it	cs
 800dace:	463a      	movcs	r2, r7
 800dad0:	f7ff fb56 	bl	800d180 <memcpy>
 800dad4:	4631      	mov	r1, r6
 800dad6:	4640      	mov	r0, r8
 800dad8:	f7ff fb68 	bl	800d1ac <_free_r>
 800dadc:	e7e1      	b.n	800daa2 <_realloc_r+0x1e>
 800dade:	4635      	mov	r5, r6
 800dae0:	e7df      	b.n	800daa2 <_realloc_r+0x1e>

0800dae2 <_malloc_usable_size_r>:
 800dae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dae6:	1f18      	subs	r0, r3, #4
 800dae8:	2b00      	cmp	r3, #0
 800daea:	bfbc      	itt	lt
 800daec:	580b      	ldrlt	r3, [r1, r0]
 800daee:	18c0      	addlt	r0, r0, r3
 800daf0:	4770      	bx	lr
	...

0800daf4 <_init>:
 800daf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf6:	bf00      	nop
 800daf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dafa:	bc08      	pop	{r3}
 800dafc:	469e      	mov	lr, r3
 800dafe:	4770      	bx	lr

0800db00 <_fini>:
 800db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db02:	bf00      	nop
 800db04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db06:	bc08      	pop	{r3}
 800db08:	469e      	mov	lr, r3
 800db0a:	4770      	bx	lr
