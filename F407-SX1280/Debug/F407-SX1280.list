
F407-SX1280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca68  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800cbf0  0800cbf0  0001cbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd28  0800cd28  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd28  0800cd28  0001cd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd30  0800cd30  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800cd30  0800cd30  0001cd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800cd3c  0800cd3c  0001cd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800cd44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          0000210c  20000188  20000188  00020188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002294  20002294  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e8ca  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057c8  00000000  00000000  0004ea82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e90  00000000  00000000  00054250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001cc0  00000000  00000000  000560e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a8db  00000000  00000000  00057da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002711b  00000000  00000000  0008267b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddde6  00000000  00000000  000a9796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018757c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000885c  00000000  00000000  001875cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cbd8 	.word	0x0800cbd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	0800cbd8 	.word	0x0800cbd8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <_ZN14RoboIME_SX128012GPIOCallbackEv>:
SX1280Hal radio0(&hspi2, SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, SX1280_RST_GPIO_Port, SX1280_RST_Pin, &callbacks);
// Feedback Radio
//SX1280Hal radio1(&hspi2, SX_FB_NSS_GPIO_Port, SX_FB_NSS_Pin, SX_FB_BUSY_GPIO_Port, SX_FB_BUSY_Pin, SX_FB_RST_GPIO_Port, SX_FB_RST_Pin, &callbacks);

//Public methods
void RoboIME_SX1280::GPIOCallback(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	radio0.HalInterruptCallback();
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <_ZN14RoboIME_SX128012GPIOCallbackEv+0x20>)
 8000cb2:	f000 feae 	bl	8001a12 <_ZN9SX1280Hal20HalInterruptCallbackEv>
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <_ZN14RoboIME_SX128012GPIOCallbackEv+0x24>)
 8000cbc:	f003 fa51 	bl	8004162 <HAL_GPIO_TogglePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200001a8 	.word	0x200001a8
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <_ZN14RoboIME_SX128014setupDataRadioEv>:
int RoboIME_SX1280::setupDataRadio(){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	6078      	str	r0, [r7, #4]
	/* Modulation Params*/

	   ModulationParams.Params.Flrc.BitrateBandwidth  = ( RadioFlrcBitrates_t )       FLRC_BR_1_300_BW_1_2;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2245      	movs	r2, #69	; 0x45
 8000cdc:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	   ModulationParams.Params.Flrc.CodingRate        = ( RadioFlrcCodingRates_t )   FLRC_CR_1_0;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	   ModulationParams.Params.Flrc.ModulationShaping = ( RadioModShapings_t )        RADIO_MOD_SHAPING_BT_1_0;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2210      	movs	r2, #16
 8000cec:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

	   PacketParams.Params.Flrc.PreambleLength        = ( RadioPreambleLengths_t )     PREAMBLE_LENGTH_32_BITS;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2270      	movs	r2, #112	; 0x70
 8000cf4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	   PacketParams.Params.Flrc.SyncWordLength        = ( RadioFlrcSyncWordLengths_t )FLRC_SYNCWORD_LENGTH_4_BYTE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	   PacketParams.Params.Flrc.SyncWordMatch         = ( RadioSyncWordRxMatchs_t )   RADIO_RX_MATCH_SYNCWORD_1;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2210      	movs	r2, #16
 8000d04:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	   PacketParams.Params.Flrc.HeaderType            = ( RadioPacketLengthModes_t )  RADIO_PACKET_VARIABLE_LENGTH;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	   PacketParams.Params.Flrc.PayloadLength         =                               bufferSize-1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	227f      	movs	r2, #127	; 0x7f
 8000d14:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	   PacketParams.Params.Flrc.CrcLength             = ( RadioCrcTypes_t )           RADIO_CRC_3_BYTES;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2230      	movs	r2, #48	; 0x30
 8000d1c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	   PacketParams.Params.Flrc.Whitening             = ( RadioWhiteningModes_t )	  RADIO_WHITENING_OFF;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2208      	movs	r2, #8
 8000d24:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	   ModulationParams.PacketType = PACKET_TYPE_FLRC;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	   PacketParams.PacketType     = PACKET_TYPE_FLRC;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2203      	movs	r2, #3
 8000d34:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82


   	HAL_Delay(500);
 8000d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d3c:	f002 fb92 	bl	8003464 <HAL_Delay>
   	radio0.Init();
 8000d40:	481d      	ldr	r0, [pc, #116]	; (8000db8 <_ZN14RoboIME_SX128014setupDataRadioEv+0xe8>)
 8000d42:	f000 fe97 	bl	8001a74 <_ZN6SX12804InitEv>
   	radio0.SetRegulatorMode(USE_LDO);
 8000d46:	2100      	movs	r1, #0
 8000d48:	481b      	ldr	r0, [pc, #108]	; (8000db8 <_ZN14RoboIME_SX128014setupDataRadioEv+0xe8>)
 8000d4a:	f001 fa24 	bl	8002196 <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>
   	radio0.SetStandby( STDBY_XOSC);
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4819      	ldr	r0, [pc, #100]	; (8000db8 <_ZN14RoboIME_SX128014setupDataRadioEv+0xe8>)
 8000d52:	f000 feff 	bl	8001b54 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>
   	//radio0.SetLNAGainSetting(LNA_HIGH_SENSITIVITY_MODE);
   	radio0.SetPacketType( ModulationParams.PacketType );
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4816      	ldr	r0, [pc, #88]	; (8000db8 <_ZN14RoboIME_SX128014setupDataRadioEv+0xe8>)
 8000d60:	f000 ff83 	bl	8001c6a <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
   	radio0.SetModulationParams( &ModulationParams );
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	339f      	adds	r3, #159	; 0x9f
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4813      	ldr	r0, [pc, #76]	; (8000db8 <_ZN14RoboIME_SX128014setupDataRadioEv+0xe8>)
 8000d6c:	f001 f82a 	bl	8001dc4 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>
   	radio0.SetPacketParams( &PacketParams );
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3382      	adds	r3, #130	; 0x82
 8000d74:	4619      	mov	r1, r3
 8000d76:	4810      	ldr	r0, [pc, #64]	; (8000db8 <_ZN14RoboIME_SX128014setupDataRadioEv+0xe8>)
 8000d78:	f001 f8a0 	bl	8001ebc <_ZN6SX128015SetPacketParamsEP14PacketParams_t>
   	radio0.SetRfFrequency( 2350000000UL );
 8000d7c:	490f      	ldr	r1, [pc, #60]	; (8000dbc <_ZN14RoboIME_SX128014setupDataRadioEv+0xec>)
 8000d7e:	480e      	ldr	r0, [pc, #56]	; (8000db8 <_ZN14RoboIME_SX128014setupDataRadioEv+0xe8>)
 8000d80:	f000 ffb6 	bl	8001cf0 <_ZN6SX128014SetRfFrequencyEm>
   	radio0.SetBufferBaseAddresses( 0x00, 0x00 );
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <_ZN14RoboIME_SX128014setupDataRadioEv+0xe8>)
 8000d8a:	f001 f801 	bl	8001d90 <_ZN6SX128022SetBufferBaseAddressesEhh>
   	//radio0.SetSyncWord( 1, syncWord ); // NAO USEI
   	// only used in GFSK, FLRC
   	//uint8_t crcSeedLocal[2] = {0x45, 0x67}; // NAO USEI
   	//radio0.SetCrcSeed( crcSeedLocal ); // NAO USEI
   	//radio0.SetCrcPolynomial( 0x0123 ); // NAOP USEI
   	radio0.SetTxParams( 0, RADIO_RAMP_20_US );
 8000d8e:	22e0      	movs	r2, #224	; 0xe0
 8000d90:	2100      	movs	r1, #0
 8000d92:	4809      	ldr	r0, [pc, #36]	; (8000db8 <_ZN14RoboIME_SX128014setupDataRadioEv+0xe8>)
 8000d94:	f000 ffe0 	bl	8001d58 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>
   	uint16_t RxIrqMask = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT;
 8000d98:	f244 0302 	movw	r3, #16386	; 0x4002
 8000d9c:	81fb      	strh	r3, [r7, #14]
   	radio0.SetDioIrqParams( RxIrqMask, RxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8000d9e:	89fa      	ldrh	r2, [r7, #14]
 8000da0:	89f9      	ldrh	r1, [r7, #14]
 8000da2:	2300      	movs	r3, #0
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2300      	movs	r3, #0
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <_ZN14RoboIME_SX128014setupDataRadioEv+0xe8>)
 8000daa:	f001 f983 	bl	80020b4 <_ZN6SX128015SetDioIrqParamsEtttt>
   //	radio0.SetPollingMode( );

   	//radio0.ProcessIrqs( );

   	return 0;
 8000dae:	2300      	movs	r3, #0



}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200001a8 	.word	0x200001a8
 8000dbc:	8c122780 	.word	0x8c122780

08000dc0 <_ZN14RoboIME_SX128011sendPayloadEPhh>:

   	//radio0.ProcessIrqs( );

   	return 0;
}
uint8_t RoboIME_SX1280::sendPayload(uint8_t* payload, uint8_t payloadSize){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af02      	add	r7, sp, #8
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	71fb      	strb	r3, [r7, #7]
	radio0.SetDioIrqParams( TxIrqMask, TxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	; 0xac
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <_ZN14RoboIME_SX128011sendPayloadEPhh+0x4c>)
 8000de2:	f001 f967 	bl	80020b4 <_ZN6SX128015SetDioIrqParamsEtttt>
	radio0.SendPayload( payload, payloadSize,( TickTime_t ){ RADIO_TICK_SIZE_1000_US,TX_TIMEOUT_VALUE } );
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <_ZN14RoboIME_SX128011sendPayloadEPhh+0x50>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	79fa      	ldrb	r2, [r7, #7]
 8000dee:	2300      	movs	r3, #0
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <_ZN14RoboIME_SX128011sendPayloadEPhh+0x4c>)
 8000df8:	f001 fa1c 	bl	8002234 <_ZN6SX128011SendPayloadEPhh10TickTime_sh>
	radio0.GetIrqStatus();
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <_ZN14RoboIME_SX128011sendPayloadEPhh+0x4c>)
 8000dfe:	f001 f994 	bl	800212a <_ZN6SX128012GetIrqStatusEv>
		 		else if (AppState == APP_TX_TIMEOUT)
				{
		 			return 0;
				}
		 		}*/
	return 1;
 8000e02:	2301      	movs	r3, #1

}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200001a8 	.word	0x200001a8
 8000e10:	0800cbf0 	.word	0x0800cbf0

08000e14 <_ZN14RoboIME_SX128014receivePayloadEPh>:
uint8_t RoboIME_SX1280::receivePayload(uint8_t* payload){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af02      	add	r7, sp, #8
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	uint8_t actualBufferSize;
  	radio0.SetDioIrqParams( RxIrqMask, RxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	; 0xae
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	4823      	ldr	r0, [pc, #140]	; (8000ec0 <_ZN14RoboIME_SX128014receivePayloadEPh+0xac>)
 8000e32:	f001 f93f 	bl	80020b4 <_ZN6SX128015SetDioIrqParamsEtttt>
   	radio0.SetRx( ( TickTime_t ) { RADIO_TICK_SIZE_1000_US, 0x0000 } );
 8000e36:	2302      	movs	r3, #2
 8000e38:	733b      	strb	r3, [r7, #12]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	81fb      	strh	r3, [r7, #14]
 8000e3e:	68f9      	ldr	r1, [r7, #12]
 8000e40:	481f      	ldr	r0, [pc, #124]	; (8000ec0 <_ZN14RoboIME_SX128014receivePayloadEPh+0xac>)
 8000e42:	f000 fedc 	bl	8001bfe <_ZN6SX12805SetRxE10TickTime_s>
	oldCount = payloadTemp[0];
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	781a      	ldrb	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
//HAL_Delay(5);
		if(AppState == APP_RX)
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <_ZN14RoboIME_SX128014receivePayloadEPh+0xb0>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d128      	bne.n	8000eaa <_ZN14RoboIME_SX128014receivePayloadEPh+0x96>
		{
			radio0.GetPayload(payloadTemp, &actualBufferSize, bufferSize);
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	f107 020b 	add.w	r2, r7, #11
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <_ZN14RoboIME_SX128014receivePayloadEPh+0xac>)
 8000e62:	f001 f9c3 	bl	80021ec <_ZN6SX128010GetPayloadEPhS0_h>
			if (payloadTemp[0] != oldCount && payloadTemp[1] == roboId)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	781a      	ldrb	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d013      	beq.n	8000e9c <_ZN14RoboIME_SX128014receivePayloadEPh+0x88>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	785a      	ldrb	r2, [r3, #1]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d10c      	bne.n	8000e9c <_ZN14RoboIME_SX128014receivePayloadEPh+0x88>
			{
				memcpy(payload, payloadTemp, bufferSize);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	4619      	mov	r1, r3
 8000e88:	6838      	ldr	r0, [r7, #0]
 8000e8a:	f00b fdf1 	bl	800ca70 <memcpy>
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000e8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <_ZN14RoboIME_SX128014receivePayloadEPh+0xb4>)
 8000e94:	f003 f965 	bl	8004162 <HAL_GPIO_TogglePin>
				return actualBufferSize;
 8000e98:	7afb      	ldrb	r3, [r7, #11]
 8000e9a:	e00c      	b.n	8000eb6 <_ZN14RoboIME_SX128014receivePayloadEPh+0xa2>
			}
			else
			{
				 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <_ZN14RoboIME_SX128014receivePayloadEPh+0xb4>)
 8000ea2:	f003 f95e 	bl	8004162 <HAL_GPIO_TogglePin>
				 return 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e005      	b.n	8000eb6 <_ZN14RoboIME_SX128014receivePayloadEPh+0xa2>
			}
		}
		else if (AppState == APP_RX_TIMEOUT)
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <_ZN14RoboIME_SX128014receivePayloadEPh+0xb0>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d101      	bne.n	8000eb6 <_ZN14RoboIME_SX128014receivePayloadEPh+0xa2>
		{
			return 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e7ff      	b.n	8000eb6 <_ZN14RoboIME_SX128014receivePayloadEPh+0xa2>
		}

}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200001a8 	.word	0x200001a8
 8000ec4:	200001a4 	.word	0x200001a4
 8000ec8:	40020c00 	.word	0x40020c00

08000ecc <_ZN14RoboIME_SX128010setRobotIdEh>:
void RoboIME_SX1280::setPayload( uint8_t *buffer, uint8_t size, uint8_t offset ){

	radio0.SetPayload( buffer, size, offset );
}
int RoboIME_SX1280::setRobotId(uint8_t id){
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
	roboId = id;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	78fa      	ldrb	r2, [r7, #3]
 8000edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <_Z8OnTxDonev>:
			return 0;
		}
	}
}
void OnTxDone( void )
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
    AppState = APP_TX;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <_Z8OnTxDonev+0x14>)
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	701a      	strb	r2, [r3, #0]
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	200001a4 	.word	0x200001a4

08000f08 <_Z8OnRxDonev>:

void  OnRxDone( void )
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
    AppState = APP_RX;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <_Z8OnRxDonev+0x14>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	200001a4 	.word	0x200001a4

08000f20 <_Z11OnTxTimeoutv>:

void OnTxTimeout( void )
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
    AppState = APP_TX_TIMEOUT;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <_Z11OnTxTimeoutv+0x14>)
 8000f26:	2205      	movs	r2, #5
 8000f28:	701a      	strb	r2, [r3, #0]
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	200001a4 	.word	0x200001a4

08000f38 <_Z11OnRxTimeoutv>:

void OnRxTimeout( void )
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
    AppState = APP_RX_TIMEOUT;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <_Z11OnRxTimeoutv+0x14>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	701a      	strb	r2, [r3, #0]
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	200001a4 	.word	0x200001a4

08000f50 <_Z9OnRxError14IrqErrorCode_t>:

void  OnRxError( IrqErrorCode_t errorCode )
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
    AppState = APP_RX_ERROR;
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <_Z9OnRxError14IrqErrorCode_t+0x1c>)
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	701a      	strb	r2, [r3, #0]

}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	200001a4 	.word	0x200001a4

08000f70 <_Z41__static_initialization_and_destruction_0ii>:
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af06      	add	r7, sp, #24
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d117      	bne.n	8000fb0 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d112      	bne.n	8000fb0 <_Z41__static_initialization_and_destruction_0ii+0x40>
SX1280Hal radio0(&hspi2, SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, SX1280_RST_GPIO_Port, SX1280_RST_Pin, &callbacks);
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000f8c:	9304      	str	r3, [sp, #16]
 8000f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f92:	9303      	str	r3, [sp, #12]
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa6:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000faa:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000fac:	f000 f99c 	bl	80012e8 <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d107      	bne.n	8000fc6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d102      	bne.n	8000fc6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000fc2:	f000 f9cd 	bl	8001360 <_ZN9SX1280HalD1Ev>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	20000474 	.word	0x20000474
 8000fe0:	200001a8 	.word	0x200001a8

08000fe4 <_GLOBAL__sub_I_AppState>:
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fec:	2001      	movs	r0, #1
 8000fee:	f7ff ffbf 	bl	8000f70 <_Z41__static_initialization_and_destruction_0ii>
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_GLOBAL__sub_D_AppState>:
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff ffb7 	bl	8000f70 <_Z41__static_initialization_and_destruction_0ii>
 8001002:	bd80      	pop	{r7, pc}

08001004 <_ZN14RoboIME_SX1280C1Ev>:
#include "string.h"
#include <cstring>
#include "SerialDebug.hpp"
#include "sx1280/sx1280-hal.h"

class RoboIME_SX1280 {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f244 0201 	movw	r2, #16385	; 0x4001
 8001012:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f244 0202 	movw	r2, #16386	; 0x4002
 800101c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <HAL_UART_TxCpltCallback>:
	if(htim==&htim6){

	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
		//debug.serialTxCpltCallback();
	}
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin){
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001054:	d103      	bne.n	800105e <HAL_GPIO_EXTI_Callback+0x1a>
	case GPIO_PIN_8:
		radio.GPIOCallback();
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <HAL_GPIO_EXTI_Callback+0x24>)
 8001058:	f7ff fe26 	bl	8000ca8 <_ZN14RoboIME_SX128012GPIOCallbackEv>
		break;
 800105c:	e000      	b.n	8001060 <HAL_GPIO_EXTI_Callback+0x1c>
	default:
		break;
 800105e:	bf00      	nop
	}
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000020c 	.word	0x2000020c

0800106c <start>:

void start(){
 800106c:	b580      	push	{r7, lr}
 800106e:	b0a4      	sub	sp, #144	; 0x90
 8001070:	af00      	add	r7, sp, #0

	radio.setupDataRadio();
 8001072:	4837      	ldr	r0, [pc, #220]	; (8001150 <start+0xe4>)
 8001074:	f7ff fe2c 	bl	8000cd0 <_ZN14RoboIME_SX128014setupDataRadioEv>
   /*Radio Type*/
    bool isMaster = false;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87


	uint8_t Buffer[radio.bufferSize];
	memset( BufferReceived, 0x00, radio.bufferSize );
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	2100      	movs	r1, #0
 8001082:	4834      	ldr	r0, [pc, #208]	; (8001154 <start+0xe8>)
 8001084:	f00b fd02 	bl	800ca8c <memset>
	HAL_Delay(5);
 8001088:	2005      	movs	r0, #5
 800108a:	f002 f9eb 	bl	8003464 <HAL_Delay>

//	char *data = "hello adfa \n";
int count = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
while(1)
{

	if(isMaster == true)
 8001094:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001098:	2b01      	cmp	r3, #1
 800109a:	d140      	bne.n	800111e <start+0xb2>
	{
		/*		MASTER    */

		// Send the next PING frame
		Buffer[0] = count;
 800109c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	713b      	strb	r3, [r7, #4]
		Buffer[1] = 2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	717b      	strb	r3, [r7, #5]
		Buffer[2] = 3;
 80010a8:	2303      	movs	r3, #3
 80010aa:	71bb      	strb	r3, [r7, #6]
		Buffer[3] = 4;
 80010ac:	2304      	movs	r3, #4
 80010ae:	71fb      	strb	r3, [r7, #7]
		Buffer[4] = 5;
 80010b0:	2305      	movs	r3, #5
 80010b2:	723b      	strb	r3, [r7, #8]
		Buffer[5] = 6;
 80010b4:	2306      	movs	r3, #6
 80010b6:	727b      	strb	r3, [r7, #9]
		Buffer[6] = 7;
 80010b8:	2307      	movs	r3, #7
 80010ba:	72bb      	strb	r3, [r7, #10]
		Buffer[7] = 8;
 80010bc:	2308      	movs	r3, #8
 80010be:	72fb      	strb	r3, [r7, #11]
		for(int i = 8; i < 16; i++ )
 80010c0:	2308      	movs	r3, #8
 80010c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80010c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010ca:	2b0f      	cmp	r3, #15
 80010cc:	dc0e      	bgt.n	80010ec <start+0x80>
		{
			Buffer[i] = i;
 80010ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010d2:	b2d9      	uxtb	r1, r3
 80010d4:	1d3a      	adds	r2, r7, #4
 80010d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010da:	4413      	add	r3, r2
 80010dc:	460a      	mov	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
		for(int i = 8; i < 16; i++ )
 80010e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010e4:	3301      	adds	r3, #1
 80010e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80010ea:	e7ec      	b.n	80010c6 <start+0x5a>
		}

		/*Data Radio*/
		if(radio.sendPayload(Buffer, radio.bufferSize))
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	4619      	mov	r1, r3
 80010f2:	4817      	ldr	r0, [pc, #92]	; (8001150 <start+0xe4>)
 80010f4:	f7ff fe64 	bl	8000dc0 <_ZN14RoboIME_SX128011sendPayloadEPhh>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	bf14      	ite	ne
 80010fe:	2301      	movne	r3, #1
 8001100:	2300      	moveq	r3, #0
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0c5      	beq.n	8001094 <start+0x28>
		{
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin); // verde
 8001108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110c:	4812      	ldr	r0, [pc, #72]	; (8001158 <start+0xec>)
 800110e:	f003 f828 	bl	8004162 <HAL_GPIO_TogglePin>
			count ++;
 8001112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001116:	3301      	adds	r3, #1
 8001118:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800111c:	e7ba      	b.n	8001094 <start+0x28>

	else
	{
		/*   SLAVE    */

		radio.setRobotId(2);
 800111e:	2102      	movs	r1, #2
 8001120:	480b      	ldr	r0, [pc, #44]	; (8001150 <start+0xe4>)
 8001122:	f7ff fed3 	bl	8000ecc <_ZN14RoboIME_SX128010setRobotIdEh>
		HAL_Delay(3);
 8001126:	2003      	movs	r0, #3
 8001128:	f002 f99c 	bl	8003464 <HAL_Delay>
			if(radio.receivePayload(BufferReceived))
 800112c:	4909      	ldr	r1, [pc, #36]	; (8001154 <start+0xe8>)
 800112e:	4808      	ldr	r0, [pc, #32]	; (8001150 <start+0xe4>)
 8001130:	f7ff fe70 	bl	8000e14 <_ZN14RoboIME_SX128014receivePayloadEPh>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	bf14      	ite	ne
 800113a:	2301      	movne	r3, #1
 800113c:	2300      	moveq	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0a7      	beq.n	8001094 <start+0x28>
			{
				 CDC_Transmit_FS(BufferReceived, radio.bufferSize);
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	4803      	ldr	r0, [pc, #12]	; (8001154 <start+0xe8>)
 8001148:	f00a ffd6 	bl	800c0f8 <CDC_Transmit_FS>
			}


	}
	}
 800114c:	e7a2      	b.n	8001094 <start+0x28>
 800114e:	bf00      	nop
 8001150:	2000020c 	.word	0x2000020c
 8001154:	20000300 	.word	0x20000300
 8001158:	40020c00 	.word	0x40020c00

0800115c <_Z41__static_initialization_and_destruction_0ii>:
}
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d107      	bne.n	800117c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001172:	4293      	cmp	r3, r2
 8001174:	d102      	bne.n	800117c <_Z41__static_initialization_and_destruction_0ii+0x20>
RoboIME_SX1280 radio;
 8001176:	4803      	ldr	r0, [pc, #12]	; (8001184 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001178:	f7ff ff44 	bl	8001004 <_ZN14RoboIME_SX1280C1Ev>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000020c 	.word	0x2000020c

08001188 <_GLOBAL__sub_I_radio>:
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
 800118c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff ffe3 	bl	800115c <_Z41__static_initialization_and_destruction_0ii>
 8001196:	bd80      	pop	{r7, pc}

08001198 <_ZN5RadioC1EP16RadioCallbacks_t>:
     *
     * \param [in]  callbacks     The structure of callbacks function pointers
     *                            to be called on radio interrupts
     *
     */
    Radio( RadioCallbacks_t *callbacks )
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
    {
 80011a2:	4a17      	ldr	r2, [pc, #92]	; (8001200 <_ZN5RadioC1EP16RadioCallbacks_t+0x68>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	601a      	str	r2, [r3, #0]
        this->txDone = callbacks->txDone;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	605a      	str	r2, [r3, #4]
        this->rxDone = callbacks->rxDone;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	609a      	str	r2, [r3, #8]
        this->rxSyncWordDone = callbacks->rxSyncWordDone;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	60da      	str	r2, [r3, #12]
        this->rxHeaderDone = callbacks->rxHeaderDone;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	611a      	str	r2, [r3, #16]
        this->txTimeout = callbacks->txTimeout;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	615a      	str	r2, [r3, #20]
        this->rxTimeout = callbacks->rxTimeout;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	695a      	ldr	r2, [r3, #20]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
        this->rxError = callbacks->rxError;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	61da      	str	r2, [r3, #28]
        this->rangingDone = callbacks->rangingDone;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	69da      	ldr	r2, [r3, #28]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	621a      	str	r2, [r3, #32]
        this->cadDone = callbacks->cadDone;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24
    }
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	0800cc8c 	.word	0x0800cc8c

08001204 <_ZN5RadioD1Ev>:
    virtual ~Radio( void ){ };
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <_ZN5RadioD1Ev+0x1c>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	0800cc8c 	.word	0x0800cc8c

08001224 <_ZN5RadioD0Ev>:
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ffe9 	bl	8001204 <_ZN5RadioD1Ev>
 8001232:	2128      	movs	r1, #40	; 0x28
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f00b fbc9 	bl	800c9cc <_ZdlPvj>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_ZN6SX1280C1EP16RadioCallbacks_t>:
     * \brief Instantiates a SX1280 object and provides API functions to communicates with the radio
     *
     * \param [in]  callbacks      Pointer to the callbacks structure defining
     *                             all callbacks function pointers
     */
    SX1280( RadioCallbacks_t *callbacks ):
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
        // The class members are value-initialiazed in member-initilaizer list
        Radio( callbacks ), OperatingMode( MODE_STDBY_RC ), PacketType( PACKET_TYPE_NONE ),
        LoRaBandwidth( LORA_BW_1600 ), IrqState( false ), PollingMode( false )
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6839      	ldr	r1, [r7, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ffa0 	bl	8001198 <_ZN5RadioC1EP16RadioCallbacks_t>
 8001258:	4a10      	ldr	r2, [pc, #64]	; (800129c <_ZN6SX1280C1EP16RadioCallbacks_t+0x58>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2202      	movs	r2, #2
 8001262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	220f      	movs	r2, #15
 800126a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	220a      	movs	r2, #10
 8001272:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    {
        this->dioIrq        = &SX1280::OnDioIrq;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <_ZN6SX1280C1EP16RadioCallbacks_t+0x5c>)
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	631a      	str	r2, [r3, #48]	; 0x30

        // Warning: this constructor set the LoRaBandwidth member to a valid
        // value, but it is not related to the actual radio configuration!
    }
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	0800ccc8 	.word	0x0800ccc8
 80012a0:	0800228d 	.word	0x0800228d

080012a4 <_ZN6SX1280D1Ev>:

    virtual ~SX1280( )
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    {
 80012ac:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <_ZN6SX1280D1Ev+0x20>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffa5 	bl	8001204 <_ZN5RadioD1Ev>
    }
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	0800ccc8 	.word	0x0800ccc8

080012c8 <_ZN6SX1280D0Ev>:
    virtual ~SX1280( )
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    }
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ffe7 	bl	80012a4 <_ZN6SX1280D1Ev>
 80012d6:	2138      	movs	r1, #56	; 0x38
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f00b fb77 	bl	800c9cc <_ZdlPvj>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t>:
// This code handles cases where assert_param is undefined
#ifndef assert_param
#define assert_param( ... )
#endif

SX1280Hal::SX1280Hal( SPI_HandleTypeDef* hspi,
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	807b      	strh	r3, [r7, #2]
                      RadioCallbacks_t *callbacks )
        :   SX1280( callbacks ),
            RadioNssPort( nssPort ), RadioNssPin( nssPin ),
            RadioResetPort( rstPort ), RadioResetPin( rstPin ),
            RadioCtsnPort( nullptr ), RadioCtsnPin( 0 ),
            BUSYPort( busyPort ), BUSYPin( busyPin )
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ffa2 	bl	8001244 <_ZN6SX1280C1EP16RadioCallbacks_t>
 8001300:	4a16      	ldr	r2, [pc, #88]	; (800135c <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t+0x74>)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	63da      	str	r2, [r3, #60]	; 0x3c
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6a3a      	ldr	r2, [r7, #32]
 8001318:	645a      	str	r2, [r3, #68]	; 0x44
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800131e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	64da      	str	r2, [r3, #76]	; 0x4c
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2200      	movs	r2, #0
 800132c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	655a      	str	r2, [r3, #84]	; 0x54
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	8bba      	ldrh	r2, [r7, #28]
 800133a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	65da      	str	r2, [r3, #92]	; 0x5c
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	661a      	str	r2, [r3, #96]	; 0x60
{
    RadioSpi = hspi;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	639a      	str	r2, [r3, #56]	; 0x38

    //HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
    //HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_SET);
}
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	0800cc44 	.word	0x0800cc44

08001360 <_ZN9SX1280HalD1Ev>:

SX1280Hal::~SX1280Hal( void )
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	4a05      	ldr	r2, [pc, #20]	; (8001380 <_ZN9SX1280HalD1Ev+0x20>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff97 	bl	80012a4 <_ZN6SX1280D1Ev>
{
};
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	0800cc44 	.word	0x0800cc44

08001384 <_ZN9SX1280HalD0Ev>:
SX1280Hal::~SX1280Hal( void )
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
};
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ffe7 	bl	8001360 <_ZN9SX1280HalD1Ev>
 8001392:	2164      	movs	r1, #100	; 0x64
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f00b fb19 	bl	800c9cc <_ZdlPvj>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_ZN9SX1280Hal9IoIrqInitEM6SX1280FvvE>:

void SX1280Hal::IoIrqInit( DioIrqHandler irqHandler )
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	e883 0006 	stmia.w	r3, {r1, r2}
    assert_param( RadioSpi != NULL);
    // BUSY.mode( PullNone );
    //Conexão entre interrupt do HAL e da biblioteca
    //irqHandler é o ponteiro para a função que deve ser chamada em caso de interrupt
    RadioIrqHandler = irqHandler;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	335c      	adds	r3, #92	; 0x5c
 80013b6:	1d3a      	adds	r2, r7, #4
 80013b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013bc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <_ZN9SX1280Hal5ResetEv>:

void SX1280Hal::Reset( void )
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	//Por que desliga o IRQ?
	/* Habilitar o delay de outra forma*/
    //__disable_irq( );
    HAL_Delay( 20 );
 80013d4:	2014      	movs	r0, #20
 80013d6:	f002 f845 	bl	8003464 <HAL_Delay>
    HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_RESET);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	f002 fea2 	bl	8004130 <HAL_GPIO_WritePin>
    HAL_Delay( 50 );
 80013ec:	2032      	movs	r0, #50	; 0x32
 80013ee:	f002 f839 	bl	8003464 <HAL_Delay>
    HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_SET);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80013fc:	2201      	movs	r2, #1
 80013fe:	4619      	mov	r1, r3
 8001400:	f002 fe96 	bl	8004130 <HAL_GPIO_WritePin>
    HAL_Delay( 20 );
 8001404:	2014      	movs	r0, #20
 8001406:	f002 f82d 	bl	8003464 <HAL_Delay>
   // __enable_irq( );
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_ZN9SX1280Hal6WakeupEv>:

void SX1280Hal::Wakeup( void )
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141a:	b672      	cpsid	i
}
 800141c:	bf00      	nop
    __disable_irq( );

    //Don't wait for BUSY here

    if( RadioSpi != NULL )
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001422:	2b00      	cmp	r3, #0
 8001424:	d019      	beq.n	800145a <_ZN9SX1280Hal6WakeupEv+0x48>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	f002 fe7c 	bl	8004130 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_GET_STATUS );
 8001438:	21c0      	movs	r1, #192	; 0xc0
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fad4 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 8001440:	2100      	movs	r1, #0
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 fad0 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001452:	2201      	movs	r2, #1
 8001454:	4619      	mov	r1, r3
 8001456:	f002 fe6b 	bl	8004130 <HAL_GPIO_WritePin>
    }

    // Wait for chip to be ready.
    WaitOnBusy( );
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001464:	4619      	mov	r1, r3
 8001466:	4610      	mov	r0, r2
 8001468:	f002 fe4a 	bl	8004100 <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	bf14      	ite	ne
 8001472:	2301      	movne	r3, #1
 8001474:	2300      	moveq	r3, #0
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d000      	beq.n	800147e <_ZN9SX1280Hal6WakeupEv+0x6c>
 800147c:	e7ed      	b.n	800145a <_ZN9SX1280Hal6WakeupEv+0x48>
  __ASM volatile ("cpsie i" : : : "memory");
 800147e:	b662      	cpsie	i
}
 8001480:	bf00      	nop

    __enable_irq( );
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht>:

void SX1280Hal::WriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	461a      	mov	r2, r3
 8001496:	460b      	mov	r3, r1
 8001498:	72fb      	strb	r3, [r7, #11]
 800149a:	4613      	mov	r3, r2
 800149c:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80014a8:	4619      	mov	r1, r3
 80014aa:	4610      	mov	r0, r2
 80014ac:	f002 fe28 	bl	8004100 <HAL_GPIO_ReadPin>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bf14      	ite	ne
 80014b6:	2301      	movne	r3, #1
 80014b8:	2300      	moveq	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d000      	beq.n	80014c2 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x38>
 80014c0:	e7ed      	b.n	800149e <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x14>

    if( RadioSpi != NULL )
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d028      	beq.n	800151c <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x92>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014d4:	2200      	movs	r2, #0
 80014d6:	4619      	mov	r1, r3
 80014d8:	f002 fe2a 	bl	8004130 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( ( uint8_t )command );
 80014dc:	7afb      	ldrb	r3, [r7, #11]
 80014de:	4619      	mov	r1, r3
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 fa81 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80014e6:	2300      	movs	r3, #0
 80014e8:	82fb      	strh	r3, [r7, #22]
 80014ea:	8afa      	ldrh	r2, [r7, #22]
 80014ec:	893b      	ldrh	r3, [r7, #8]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d20b      	bcs.n	800150a <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x80>
        {
            SpiTransmitReceiveByte( buffer[i] );
 80014f2:	8afb      	ldrh	r3, [r7, #22]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f000 fa73 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 8001502:	8afb      	ldrh	r3, [r7, #22]
 8001504:	3301      	adds	r3, #1
 8001506:	82fb      	strh	r3, [r7, #22]
 8001508:	e7ef      	b.n	80014ea <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x60>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001514:	2201      	movs	r2, #1
 8001516:	4619      	mov	r1, r3
 8001518:	f002 fe0a 	bl	8004130 <HAL_GPIO_WritePin>
    }

    if( command != RADIO_SET_SLEEP )
 800151c:	7afb      	ldrb	r3, [r7, #11]
 800151e:	2b84      	cmp	r3, #132	; 0x84
 8001520:	d011      	beq.n	8001546 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0xbc>
    {
        WaitOnBusy( );
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f002 fde6 	bl	8004100 <HAL_GPIO_ReadPin>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	bf14      	ite	ne
 800153a:	2301      	movne	r3, #1
 800153c:	2300      	moveq	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d000      	beq.n	8001546 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0xbc>
 8001544:	e7ed      	b.n	8001522 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x98>
    }
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht>:

void SX1280Hal::ReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800154e:	b590      	push	{r4, r7, lr}
 8001550:	b087      	sub	sp, #28
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	461a      	mov	r2, r3
 800155a:	460b      	mov	r3, r1
 800155c:	72fb      	strb	r3, [r7, #11]
 800155e:	4613      	mov	r3, r2
 8001560:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f002 fdc6 	bl	8004100 <HAL_GPIO_ReadPin>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d000      	beq.n	8001586 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x38>
 8001584:	e7ed      	b.n	8001562 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x14>

    if( RadioSpi != NULL )
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158a:	2b00      	cmp	r3, #0
 800158c:	d042      	beq.n	8001614 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xc6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	f002 fdc8 	bl	8004130 <HAL_GPIO_WritePin>
        if( command == RADIO_GET_STATUS )
 80015a0:	7afb      	ldrb	r3, [r7, #11]
 80015a2:	2bc0      	cmp	r3, #192	; 0xc0
 80015a4:	d111      	bne.n	80015ca <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x7c>
        {
            buffer[0] = SpiTransmitReceiveByte( ( uint8_t )command );
 80015a6:	7afb      	ldrb	r3, [r7, #11]
 80015a8:	4619      	mov	r1, r3
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 fa1c 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	701a      	strb	r2, [r3, #0]
            SpiTransmitReceiveByte( 0 );
 80015b8:	2100      	movs	r1, #0
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 fa14 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            SpiTransmitReceiveByte( 0 );
 80015c0:	2100      	movs	r1, #0
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 fa10 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80015c8:	e01b      	b.n	8001602 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xb4>
        }
        else
        {
            SpiTransmitReceiveByte( ( uint8_t )command );
 80015ca:	7afb      	ldrb	r3, [r7, #11]
 80015cc:	4619      	mov	r1, r3
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 fa0a 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            SpiTransmitReceiveByte( 0 );
 80015d4:	2100      	movs	r1, #0
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fa06 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            for( uint16_t i = 0; i < size; i++ )
 80015dc:	2300      	movs	r3, #0
 80015de:	82fb      	strh	r3, [r7, #22]
 80015e0:	8afa      	ldrh	r2, [r7, #22]
 80015e2:	893b      	ldrh	r3, [r7, #8]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d20c      	bcs.n	8001602 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xb4>
            {
                 buffer[i] = SpiTransmitReceiveByte( 0 );
 80015e8:	8afb      	ldrh	r3, [r7, #22]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	18d4      	adds	r4, r2, r3
 80015ee:	2100      	movs	r1, #0
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 f9f9 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80015f6:	4603      	mov	r3, r0
 80015f8:	7023      	strb	r3, [r4, #0]
            for( uint16_t i = 0; i < size; i++ )
 80015fa:	8afb      	ldrh	r3, [r7, #22]
 80015fc:	3301      	adds	r3, #1
 80015fe:	82fb      	strh	r3, [r7, #22]
 8001600:	e7ee      	b.n	80015e0 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x92>
            }
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800160c:	2201      	movs	r2, #1
 800160e:	4619      	mov	r1, r3
 8001610:	f002 fd8e 	bl	8004130 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800161e:	4619      	mov	r1, r3
 8001620:	4610      	mov	r0, r2
 8001622:	f002 fd6d 	bl	8004100 <HAL_GPIO_ReadPin>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf14      	ite	ne
 800162c:	2301      	movne	r3, #1
 800162e:	2300      	moveq	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d000      	beq.n	8001638 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xea>
 8001636:	e7ed      	b.n	8001614 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xc6>
}
 8001638:	bf00      	nop
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}

08001640 <_ZN9SX1280Hal13WriteRegisterEtPht>:

void SX1280Hal::WriteRegister( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	460b      	mov	r3, r1
 800164e:	817b      	strh	r3, [r7, #10]
 8001650:	4613      	mov	r3, r2
 8001652:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800165e:	4619      	mov	r1, r3
 8001660:	4610      	mov	r0, r2
 8001662:	f002 fd4d 	bl	8004100 <HAL_GPIO_ReadPin>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf14      	ite	ne
 800166c:	2301      	movne	r3, #1
 800166e:	2300      	moveq	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d000      	beq.n	8001678 <_ZN9SX1280Hal13WriteRegisterEtPht+0x38>
 8001676:	e7ed      	b.n	8001654 <_ZN9SX1280Hal13WriteRegisterEtPht+0x14>

    if( RadioSpi != NULL )
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167c:	2b00      	cmp	r3, #0
 800167e:	d035      	beq.n	80016ec <_ZN9SX1280Hal13WriteRegisterEtPht+0xac>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800168a:	2200      	movs	r2, #0
 800168c:	4619      	mov	r1, r3
 800168e:	f002 fd4f 	bl	8004130 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_WRITE_REGISTER );
 8001692:	2118      	movs	r1, #24
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 f9a7 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( ( address & 0xFF00 ) >> 8 );
 800169a:	897b      	ldrh	r3, [r7, #10]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 f99f 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( address & 0x00FF );
 80016aa:	897b      	ldrh	r3, [r7, #10]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4619      	mov	r1, r3
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f999 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80016b6:	2300      	movs	r3, #0
 80016b8:	82fb      	strh	r3, [r7, #22]
 80016ba:	8afa      	ldrh	r2, [r7, #22]
 80016bc:	893b      	ldrh	r3, [r7, #8]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d20b      	bcs.n	80016da <_ZN9SX1280Hal13WriteRegisterEtPht+0x9a>
        {
            SpiTransmitReceiveByte( buffer[i] );
 80016c2:	8afb      	ldrh	r3, [r7, #22]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	4619      	mov	r1, r3
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f000 f98b 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80016d2:	8afb      	ldrh	r3, [r7, #22]
 80016d4:	3301      	adds	r3, #1
 80016d6:	82fb      	strh	r3, [r7, #22]
 80016d8:	e7ef      	b.n	80016ba <_ZN9SX1280Hal13WriteRegisterEtPht+0x7a>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016e4:	2201      	movs	r2, #1
 80016e6:	4619      	mov	r1, r3
 80016e8:	f002 fd22 	bl	8004130 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80016f6:	4619      	mov	r1, r3
 80016f8:	4610      	mov	r0, r2
 80016fa:	f002 fd01 	bl	8004100 <HAL_GPIO_ReadPin>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf14      	ite	ne
 8001704:	2301      	movne	r3, #1
 8001706:	2300      	moveq	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d000      	beq.n	8001710 <_ZN9SX1280Hal13WriteRegisterEtPht+0xd0>
 800170e:	e7ed      	b.n	80016ec <_ZN9SX1280Hal13WriteRegisterEtPht+0xac>
}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZN9SX1280Hal13WriteRegisterEth>:

void SX1280Hal::WriteRegister( uint16_t address, uint8_t value )
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
    WriteRegister( address, &value, 1 );
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3318      	adds	r3, #24
 800172e:	681c      	ldr	r4, [r3, #0]
 8001730:	1c7a      	adds	r2, r7, #1
 8001732:	8879      	ldrh	r1, [r7, #2]
 8001734:	2301      	movs	r3, #1
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	47a0      	blx	r4
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}

08001742 <_ZN9SX1280Hal12ReadRegisterEtPht>:

void SX1280Hal::ReadRegister( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001742:	b590      	push	{r4, r7, lr}
 8001744:	b087      	sub	sp, #28
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	461a      	mov	r2, r3
 800174e:	460b      	mov	r3, r1
 8001750:	817b      	strh	r3, [r7, #10]
 8001752:	4613      	mov	r3, r2
 8001754:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f002 fccc 	bl	8004100 <HAL_GPIO_ReadPin>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf14      	ite	ne
 800176e:	2301      	movne	r3, #1
 8001770:	2300      	moveq	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d000      	beq.n	800177a <_ZN9SX1280Hal12ReadRegisterEtPht+0x38>
 8001778:	e7ed      	b.n	8001756 <_ZN9SX1280Hal12ReadRegisterEtPht+0x14>

    if( RadioSpi != NULL )
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177e:	2b00      	cmp	r3, #0
 8001780:	d03a      	beq.n	80017f8 <_ZN9SX1280Hal12ReadRegisterEtPht+0xb6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800178c:	2200      	movs	r2, #0
 800178e:	4619      	mov	r1, r3
 8001790:	f002 fcce 	bl	8004130 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_READ_REGISTER );
 8001794:	2119      	movs	r1, #25
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f926 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( ( address & 0xFF00 ) >> 8 );
 800179c:	897b      	ldrh	r3, [r7, #10]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	4619      	mov	r1, r3
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f91e 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( address & 0x00FF );
 80017ac:	897b      	ldrh	r3, [r7, #10]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	4619      	mov	r1, r3
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f918 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 80017b8:	2100      	movs	r1, #0
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f914 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80017c0:	2300      	movs	r3, #0
 80017c2:	82fb      	strh	r3, [r7, #22]
 80017c4:	8afa      	ldrh	r2, [r7, #22]
 80017c6:	893b      	ldrh	r3, [r7, #8]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d20c      	bcs.n	80017e6 <_ZN9SX1280Hal12ReadRegisterEtPht+0xa4>
        {
            buffer[i] = SpiTransmitReceiveByte( 0 );
 80017cc:	8afb      	ldrh	r3, [r7, #22]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	18d4      	adds	r4, r2, r3
 80017d2:	2100      	movs	r1, #0
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 f907 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80017da:	4603      	mov	r3, r0
 80017dc:	7023      	strb	r3, [r4, #0]
        for( uint16_t i = 0; i < size; i++ )
 80017de:	8afb      	ldrh	r3, [r7, #22]
 80017e0:	3301      	adds	r3, #1
 80017e2:	82fb      	strh	r3, [r7, #22]
 80017e4:	e7ee      	b.n	80017c4 <_ZN9SX1280Hal12ReadRegisterEtPht+0x82>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017f0:	2201      	movs	r2, #1
 80017f2:	4619      	mov	r1, r3
 80017f4:	f002 fc9c 	bl	8004130 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001802:	4619      	mov	r1, r3
 8001804:	4610      	mov	r0, r2
 8001806:	f002 fc7b 	bl	8004100 <HAL_GPIO_ReadPin>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d000      	beq.n	800181c <_ZN9SX1280Hal12ReadRegisterEtPht+0xda>
 800181a:	e7ed      	b.n	80017f8 <_ZN9SX1280Hal12ReadRegisterEtPht+0xb6>
}
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd90      	pop	{r4, r7, pc}

08001824 <_ZN9SX1280Hal12ReadRegisterEt>:

uint8_t SX1280Hal::ReadRegister( uint16_t address )
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
    uint8_t data;

    ReadRegister( address, &data, 1 );
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	3320      	adds	r3, #32
 8001836:	681c      	ldr	r4, [r3, #0]
 8001838:	f107 020f 	add.w	r2, r7, #15
 800183c:	8879      	ldrh	r1, [r7, #2]
 800183e:	2301      	movs	r3, #1
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	47a0      	blx	r4
    return data;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bd90      	pop	{r4, r7, pc}

0800184e <_ZN9SX1280Hal11WriteBufferEhPhh>:

void SX1280Hal::WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	461a      	mov	r2, r3
 800185a:	460b      	mov	r3, r1
 800185c:	72fb      	strb	r3, [r7, #11]
 800185e:	4613      	mov	r3, r2
 8001860:	72bb      	strb	r3, [r7, #10]
    WaitOnBusy( );
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800186c:	4619      	mov	r1, r3
 800186e:	4610      	mov	r0, r2
 8001870:	f002 fc46 	bl	8004100 <HAL_GPIO_ReadPin>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	bf14      	ite	ne
 800187a:	2301      	movne	r3, #1
 800187c:	2300      	moveq	r3, #0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d000      	beq.n	8001886 <_ZN9SX1280Hal11WriteBufferEhPhh+0x38>
 8001884:	e7ed      	b.n	8001862 <_ZN9SX1280Hal11WriteBufferEhPhh+0x14>

    if( RadioSpi != NULL )
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188a:	2b00      	cmp	r3, #0
 800188c:	d02d      	beq.n	80018ea <_ZN9SX1280Hal11WriteBufferEhPhh+0x9c>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001898:	2200      	movs	r2, #0
 800189a:	4619      	mov	r1, r3
 800189c:	f002 fc48 	bl	8004130 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_WRITE_BUFFER );
 80018a0:	211a      	movs	r1, #26
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 f8a0 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( offset );
 80018a8:	7afb      	ldrb	r3, [r7, #11]
 80018aa:	4619      	mov	r1, r3
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 f89b 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80018b2:	2300      	movs	r3, #0
 80018b4:	82fb      	strh	r3, [r7, #22]
 80018b6:	7abb      	ldrb	r3, [r7, #10]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	8afa      	ldrh	r2, [r7, #22]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d20b      	bcs.n	80018d8 <_ZN9SX1280Hal11WriteBufferEhPhh+0x8a>
        {
            SpiTransmitReceiveByte( buffer[i] );
 80018c0:	8afb      	ldrh	r3, [r7, #22]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 f88c 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80018d0:	8afb      	ldrh	r3, [r7, #22]
 80018d2:	3301      	adds	r3, #1
 80018d4:	82fb      	strh	r3, [r7, #22]
 80018d6:	e7ee      	b.n	80018b6 <_ZN9SX1280Hal11WriteBufferEhPhh+0x68>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018e2:	2201      	movs	r2, #1
 80018e4:	4619      	mov	r1, r3
 80018e6:	f002 fc23 	bl	8004130 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80018f4:	4619      	mov	r1, r3
 80018f6:	4610      	mov	r0, r2
 80018f8:	f002 fc02 	bl	8004100 <HAL_GPIO_ReadPin>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bf14      	ite	ne
 8001902:	2301      	movne	r3, #1
 8001904:	2300      	moveq	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d000      	beq.n	800190e <_ZN9SX1280Hal11WriteBufferEhPhh+0xc0>
 800190c:	e7ed      	b.n	80018ea <_ZN9SX1280Hal11WriteBufferEhPhh+0x9c>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_ZN9SX1280Hal10ReadBufferEhPhh>:

void SX1280Hal::ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001916:	b590      	push	{r4, r7, lr}
 8001918:	b087      	sub	sp, #28
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	461a      	mov	r2, r3
 8001922:	460b      	mov	r3, r1
 8001924:	72fb      	strb	r3, [r7, #11]
 8001926:	4613      	mov	r3, r2
 8001928:	72bb      	strb	r3, [r7, #10]
    WaitOnBusy( );
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001934:	4619      	mov	r1, r3
 8001936:	4610      	mov	r0, r2
 8001938:	f002 fbe2 	bl	8004100 <HAL_GPIO_ReadPin>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	bf14      	ite	ne
 8001942:	2301      	movne	r3, #1
 8001944:	2300      	moveq	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d000      	beq.n	800194e <_ZN9SX1280Hal10ReadBufferEhPhh+0x38>
 800194c:	e7ed      	b.n	800192a <_ZN9SX1280Hal10ReadBufferEhPhh+0x14>

    if( RadioSpi != NULL )
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001952:	2b00      	cmp	r3, #0
 8001954:	d032      	beq.n	80019bc <_ZN9SX1280Hal10ReadBufferEhPhh+0xa6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001960:	2200      	movs	r2, #0
 8001962:	4619      	mov	r1, r3
 8001964:	f002 fbe4 	bl	8004130 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_READ_BUFFER );
 8001968:	211b      	movs	r1, #27
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 f83c 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( offset );
 8001970:	7afb      	ldrb	r3, [r7, #11]
 8001972:	4619      	mov	r1, r3
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 f837 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 800197a:	2100      	movs	r1, #0
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 f833 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 8001982:	2300      	movs	r3, #0
 8001984:	82fb      	strh	r3, [r7, #22]
 8001986:	7abb      	ldrb	r3, [r7, #10]
 8001988:	b29b      	uxth	r3, r3
 800198a:	8afa      	ldrh	r2, [r7, #22]
 800198c:	429a      	cmp	r2, r3
 800198e:	d20c      	bcs.n	80019aa <_ZN9SX1280Hal10ReadBufferEhPhh+0x94>
        {
            buffer[i] = SpiTransmitReceiveByte( 0 );
 8001990:	8afb      	ldrh	r3, [r7, #22]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	18d4      	adds	r4, r2, r3
 8001996:	2100      	movs	r1, #0
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f825 	bl	80019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 800199e:	4603      	mov	r3, r0
 80019a0:	7023      	strb	r3, [r4, #0]
        for( uint16_t i = 0; i < size; i++ )
 80019a2:	8afb      	ldrh	r3, [r7, #22]
 80019a4:	3301      	adds	r3, #1
 80019a6:	82fb      	strh	r3, [r7, #22]
 80019a8:	e7ed      	b.n	8001986 <_ZN9SX1280Hal10ReadBufferEhPhh+0x70>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019b4:	2201      	movs	r2, #1
 80019b6:	4619      	mov	r1, r3
 80019b8:	f002 fbba 	bl	8004130 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80019c6:	4619      	mov	r1, r3
 80019c8:	4610      	mov	r0, r2
 80019ca:	f002 fb99 	bl	8004100 <HAL_GPIO_ReadPin>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf14      	ite	ne
 80019d4:	2301      	movne	r3, #1
 80019d6:	2300      	moveq	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d000      	beq.n	80019e0 <_ZN9SX1280Hal10ReadBufferEhPhh+0xca>
 80019de:	e7ed      	b.n	80019bc <_ZN9SX1280Hal10ReadBufferEhPhh+0xa6>
}
 80019e0:	bf00      	nop
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd90      	pop	{r4, r7, pc}

080019e8 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>:

uint8_t SX1280Hal::SpiTransmitReceiveByte( uint8_t byte )
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
	//Se for IT ou DMA a função acaba antes de terminar de transmitir
	uint8_t receivedByte;
	HAL_SPI_TransmitReceive(RadioSpi, &byte, &receivedByte, 1, 100);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019f8:	f107 020f 	add.w	r2, r7, #15
 80019fc:	1cf9      	adds	r1, r7, #3
 80019fe:	2364      	movs	r3, #100	; 0x64
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2301      	movs	r3, #1
 8001a04:	f005 faa3 	bl	8006f4e <HAL_SPI_TransmitReceive>
	return receivedByte;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_ZN9SX1280Hal20HalInterruptCallbackEv>:

void SX1280Hal::HalInterruptCallback(void){
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
	if(RadioIrqHandler != NULL){
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d107      	bne.n	8001a32 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x20>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x20>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x22>
 8001a32:	2300      	movs	r3, #0
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d019      	beq.n	8001a6c <_ZN9SX1280Hal20HalInterruptCallbackEv+0x5a>
		(this->*RadioIrqHandler)();
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001a3e:	1052      	asrs	r2, r2, #1
 8001a40:	1899      	adds	r1, r3, r2
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x42>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	e009      	b.n	8001a68 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x56>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001a5a:	1052      	asrs	r2, r2, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a64:	4413      	add	r3, r2
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4608      	mov	r0, r1
 8001a6a:	4798      	blx	r3
	}
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_ZN6SX12804InitEv>:
 * \brief Radio hardware registers initialization
 */
const RadioRegisters_t RadioRegsInit[] = RADIO_INIT_REGISTERS_VALUE;

void SX1280::Init( void )
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
    Reset( );
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3308      	adds	r3, #8
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
    IoIrqInit( dioIrq );
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3334      	adds	r3, #52	; 0x34
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	322c      	adds	r2, #44	; 0x2c
 8001a94:	ca06      	ldmia	r2, {r1, r2}
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
    Wakeup( );
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3338      	adds	r3, #56	; 0x38
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
    SetRegistersDefault( );
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f804 	bl	8001ab4 <_ZN6SX128019SetRegistersDefaultEv>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_ZN6SX128019SetRegistersDefaultEv>:

void SX1280::SetRegistersDefault( void )
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    for( int16_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8001abc:	2300      	movs	r3, #0
 8001abe:	81fb      	strh	r3, [r7, #14]
    {
        WriteRegister( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    }
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_ZN6SX128018GetFirmwareVersionEv>:

uint16_t SX1280::GetFirmwareVersion( void )
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3324      	adds	r3, #36	; 0x24
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f240 1153 	movw	r1, #339	; 0x153
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	b21c      	sxth	r4, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3324      	adds	r3, #36	; 0x24
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	4323      	orrs	r3, r4
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	b29b      	uxth	r3, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd90      	pop	{r4, r7, pc}

08001b0c <_ZN6SX12809GetStatusEv>:

RadioStatus_t SX1280::GetStatus( void )
{
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    uint8_t stat = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
    RadioStatus_t status;

    ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3314      	adds	r3, #20
 8001b1e:	681c      	ldr	r4, [r3, #0]
 8001b20:	f107 020f 	add.w	r2, r7, #15
 8001b24:	2301      	movs	r3, #1
 8001b26:	21c0      	movs	r1, #192	; 0xc0
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	47a0      	blx	r4
    status.Value = stat;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	733b      	strb	r3, [r7, #12]
    return( status );
 8001b30:	7b3b      	ldrb	r3, [r7, #12]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd90      	pop	{r4, r7, pc}

08001b3a <_ZN6SX12809GetOpModeEv>:

RadioOperatingModes_t SX1280::GetOpMode( void )
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
    return( OperatingMode );
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>:
    OperatingMode = MODE_SLEEP;
    WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
}

void SX1280::SetStandby( RadioStandbyModes_t standbyConfig )
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	70fb      	strb	r3, [r7, #3]
    WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3310      	adds	r3, #16
 8001b66:	681c      	ldr	r4, [r3, #0]
 8001b68:	1cfa      	adds	r2, r7, #3
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	47a0      	blx	r4
    if( standbyConfig == STDBY_RC )
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d104      	bne.n	8001b82 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x2e>
    {
        OperatingMode = MODE_STDBY_RC;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8001b80:	e003      	b.n	8001b8a <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x36>
        OperatingMode = MODE_STDBY_XOSC;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2203      	movs	r2, #3
 8001b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}

08001b92 <_ZN6SX12805SetTxE10TickTime_s>:
    WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SX1280::SetTx( TickTime_t timeout )
{
 8001b92:	b590      	push	{r4, r7, lr}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    buf[0] = timeout.PeriodBase;
 8001b9c:	783b      	ldrb	r3, [r7, #0]
 8001b9e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	73bb      	strb	r3, [r7, #14]

    ClearIrqStatus( IRQ_RADIO_ALL );
 8001bb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fad2 	bl	800215e <_ZN6SX128014ClearIrqStatusEt>

    // If the radio is doing ranging operations, then apply the specific calls
    // prior to SetTx
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
 8001bba:	2101      	movs	r1, #1
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f86b 	bl	8001c98 <_ZN6SX128013GetPacketTypeEb>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <_ZN6SX12805SetTxE10TickTime_s+0x48>
    {
        SetRangingRole( RADIO_RANGING_ROLE_MASTER );
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fb43 	bl	8002260 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    }
    WriteCommand( RADIO_SET_TX, buf, 3 );
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3310      	adds	r3, #16
 8001be0:	681c      	ldr	r4, [r3, #0]
 8001be2:	f107 020c 	add.w	r2, r7, #12
 8001be6:	2303      	movs	r3, #3
 8001be8:	2183      	movs	r1, #131	; 0x83
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	47a0      	blx	r4
    OperatingMode = MODE_TX;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2206      	movs	r2, #6
 8001bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}

08001bfe <_ZN6SX12805SetRxE10TickTime_s>:

void SX1280::SetRx( TickTime_t timeout )
{
 8001bfe:	b590      	push	{r4, r7, lr}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    buf[0] = timeout.PeriodBase;
 8001c08:	783b      	ldrb	r3, [r7, #0]
 8001c0a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8001c16:	887b      	ldrh	r3, [r7, #2]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	73bb      	strb	r3, [r7, #14]

    ClearIrqStatus( IRQ_RADIO_ALL );
 8001c1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fa9c 	bl	800215e <_ZN6SX128014ClearIrqStatusEt>

    // If the radio is doing ranging operations, then apply the specific calls
    // prior to SetRx
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
 8001c26:	2101      	movs	r1, #1
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f835 	bl	8001c98 <_ZN6SX128013GetPacketTypeEb>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	bf0c      	ite	eq
 8001c34:	2301      	moveq	r3, #1
 8001c36:	2300      	movne	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <_ZN6SX12805SetRxE10TickTime_s+0x48>
    {
        SetRangingRole( RADIO_RANGING_ROLE_SLAVE );
 8001c3e:	2100      	movs	r1, #0
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fb0d 	bl	8002260 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    }
    WriteCommand( RADIO_SET_RX, buf, 3 );
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3310      	adds	r3, #16
 8001c4c:	681c      	ldr	r4, [r3, #0]
 8001c4e:	f107 020c 	add.w	r2, r7, #12
 8001c52:	2303      	movs	r3, #3
 8001c54:	2182      	movs	r1, #130	; 0x82
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	47a0      	blx	r4
    OperatingMode = MODE_RX;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2205      	movs	r2, #5
 8001c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd90      	pop	{r4, r7, pc}

08001c6a <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>:
{
    WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX1280::SetPacketType( RadioPacketTypes_t packetType )
{
 8001c6a:	b590      	push	{r4, r7, lr}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	70fb      	strb	r3, [r7, #3]
    // Save packet type internally to avoid questioning the radio
    this->PacketType = packetType;
 8001c76:	78fa      	ldrb	r2, [r7, #3]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3310      	adds	r3, #16
 8001c84:	681c      	ldr	r4, [r3, #0]
 8001c86:	1cfa      	adds	r2, r7, #3
 8001c88:	2301      	movs	r3, #1
 8001c8a:	218a      	movs	r1, #138	; 0x8a
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	47a0      	blx	r4
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}

08001c98 <_ZN6SX128013GetPacketTypeEb>:

RadioPacketTypes_t SX1280::GetPacketType( bool returnLocalCopy )
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
    RadioPacketTypes_t packetType = PACKET_TYPE_NONE;
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	73fb      	strb	r3, [r7, #15]
    if( returnLocalCopy == false )
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d114      	bne.n	8001cd8 <_ZN6SX128013GetPacketTypeEb+0x40>
    {
        ReadCommand( RADIO_GET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	3314      	adds	r3, #20
 8001cb4:	681c      	ldr	r4, [r3, #0]
 8001cb6:	f107 020f 	add.w	r2, r7, #15
 8001cba:	2301      	movs	r3, #1
 8001cbc:	2103      	movs	r1, #3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	47a0      	blx	r4
        if( this->PacketType != packetType )
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d008      	beq.n	8001ce0 <_ZN6SX128013GetPacketTypeEb+0x48>
        {
            this->PacketType = packetType;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001cd6:	e003      	b.n	8001ce0 <_ZN6SX128013GetPacketTypeEb+0x48>
        }
    }
    else
    {
        packetType = this->PacketType;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001cde:	73fb      	strb	r3, [r7, #15]
    }
    return packetType;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd90      	pop	{r4, r7, pc}
 8001cea:	0000      	movs	r0, r0
 8001cec:	0000      	movs	r0, r0
	...

08001cf0 <_ZN6SX128014SetRfFrequencyEm>:

void SX1280::SetRfFrequency( uint32_t rfFrequency )
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    uint32_t freq = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]

    freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
 8001cfe:	6838      	ldr	r0, [r7, #0]
 8001d00:	f7fe fba4 	bl	800044c <__aeabi_ui2d>
 8001d04:	a312      	add	r3, pc, #72	; (adr r3, 8001d50 <_ZN6SX128014SetRfFrequencyEm+0x60>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	f7fe fd43 	bl	8000794 <__aeabi_ddiv>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe fe25 	bl	8000964 <__aeabi_d2uiz>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	0c1b      	lsrs	r3, r3, #16
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq & 0xFF );
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	72bb      	strb	r3, [r7, #10]
    WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3310      	adds	r3, #16
 8001d3a:	681c      	ldr	r4, [r3, #0]
 8001d3c:	f107 0208 	add.w	r2, r7, #8
 8001d40:	2303      	movs	r3, #3
 8001d42:	2186      	movs	r1, #134	; 0x86
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	47a0      	blx	r4
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd90      	pop	{r4, r7, pc}
 8001d50:	00000000 	.word	0x00000000
 8001d54:	4068cba8 	.word	0x4068cba8

08001d58 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>:

void SX1280::SetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
 8001d64:	4613      	mov	r3, r2
 8001d66:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[2];

    // The power value to send on SPI/UART is in the range [0..31] and the
    // physical output power is in the range [-18..13]dBm
    buf[0] = power + 18;
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	3312      	adds	r3, #18
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8001d70:	78bb      	ldrb	r3, [r7, #2]
 8001d72:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3310      	adds	r3, #16
 8001d7a:	681c      	ldr	r4, [r3, #0]
 8001d7c:	f107 020c 	add.w	r2, r7, #12
 8001d80:	2302      	movs	r3, #2
 8001d82:	218e      	movs	r1, #142	; 0x8e
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	47a0      	blx	r4
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}

08001d90 <_ZN6SX128022SetBufferBaseAddressesEhh>:
    WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
    OperatingMode = MODE_CAD;
}

void SX1280::SetBufferBaseAddresses( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	70fb      	strb	r3, [r7, #3]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8001da4:	78bb      	ldrb	r3, [r7, #2]
 8001da6:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3310      	adds	r3, #16
 8001dae:	681c      	ldr	r4, [r3, #0]
 8001db0:	f107 020c 	add.w	r2, r7, #12
 8001db4:	2302      	movs	r3, #2
 8001db6:	218f      	movs	r1, #143	; 0x8f
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	47a0      	blx	r4
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}

08001dc4 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>:

void SX1280::SetModulationParams( ModulationParams_t *modParams )
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != modParams->PacketType )
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d005      	beq.n	8001de8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x24>
    {
        this->SetPacketType( modParams->PacketType );
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff41 	bl	8001c6a <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( modParams->PacketType )
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d857      	bhi.n	8001ea0 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
 8001df0:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x34>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e39 	.word	0x08001e39
 8001dfc:	08001e4d 	.word	0x08001e4d
 8001e00:	08001e4d 	.word	0x08001e4d
 8001e04:	08001e6b 	.word	0x08001e6b
 8001e08:	08001e7f 	.word	0x08001e7f
 8001e0c:	08001ea1 	.word	0x08001ea1
 8001e10:	08001ea1 	.word	0x08001ea1
 8001e14:	08001ea1 	.word	0x08001ea1
 8001e18:	08001ea1 	.word	0x08001ea1
 8001e1c:	08001ea1 	.word	0x08001ea1
 8001e20:	08001ea1 	.word	0x08001ea1
 8001e24:	08001ea1 	.word	0x08001ea1
 8001e28:	08001ea1 	.word	0x08001ea1
 8001e2c:	08001ea1 	.word	0x08001ea1
 8001e30:	08001ea1 	.word	0x08001ea1
 8001e34:	08001e93 	.word	0x08001e93
    {
        case PACKET_TYPE_GFSK:
            buf[0] = modParams->Params.Gfsk.BitrateBandwidth;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	785b      	ldrb	r3, [r3, #1]
 8001e3c:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Gfsk.ModulationIndex;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	789b      	ldrb	r3, [r3, #2]
 8001e42:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Gfsk.ModulationShaping;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	78db      	ldrb	r3, [r3, #3]
 8001e48:	73bb      	strb	r3, [r7, #14]
            break;
 8001e4a:	e029      	b.n	8001ea0 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_LORA:
        case PACKET_TYPE_RANGING:
            buf[0] = modParams->Params.LoRa.SpreadingFactor;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	791b      	ldrb	r3, [r3, #4]
 8001e50:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.LoRa.Bandwidth;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	795b      	ldrb	r3, [r3, #5]
 8001e56:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.LoRa.CodingRate;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	799b      	ldrb	r3, [r3, #6]
 8001e5c:	73bb      	strb	r3, [r7, #14]
            this->LoRaBandwidth = modParams->Params.LoRa.Bandwidth;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	795a      	ldrb	r2, [r3, #5]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            break;
 8001e68:	e01a      	b.n	8001ea0 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_FLRC:
            buf[0] = modParams->Params.Flrc.BitrateBandwidth;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	79db      	ldrb	r3, [r3, #7]
 8001e6e:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Flrc.CodingRate;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	7a1b      	ldrb	r3, [r3, #8]
 8001e74:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Flrc.ModulationShaping;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	7a5b      	ldrb	r3, [r3, #9]
 8001e7a:	73bb      	strb	r3, [r7, #14]
            break;
 8001e7c:	e010      	b.n	8001ea0 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_BLE:
            buf[0] = modParams->Params.Ble.BitrateBandwidth;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	7a9b      	ldrb	r3, [r3, #10]
 8001e82:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Ble.ModulationIndex;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	7adb      	ldrb	r3, [r3, #11]
 8001e88:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Ble.ModulationShaping;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	7b1b      	ldrb	r3, [r3, #12]
 8001e8e:	73bb      	strb	r3, [r7, #14]
            break;
 8001e90:	e006      	b.n	8001ea0 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_NONE:
            buf[0] = NULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	733b      	strb	r3, [r7, #12]
            buf[1] = NULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	737b      	strb	r3, [r7, #13]
            buf[2] = NULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73bb      	strb	r3, [r7, #14]
            break;
 8001e9e:	bf00      	nop
    }
    WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3310      	adds	r3, #16
 8001ea6:	681c      	ldr	r4, [r3, #0]
 8001ea8:	f107 020c 	add.w	r2, r7, #12
 8001eac:	2303      	movs	r3, #3
 8001eae:	218b      	movs	r1, #139	; 0x8b
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	47a0      	blx	r4
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd90      	pop	{r4, r7, pc}

08001ebc <_ZN6SX128015SetPacketParamsEP14PacketParams_t>:

void SX1280::SetPacketParams( PacketParams_t *packetParams )
{
 8001ebc:	b590      	push	{r4, r7, lr}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
    uint8_t buf[7];
    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != packetParams->PacketType )
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d005      	beq.n	8001ee0 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x24>
    {
        this->SetPacketType( packetParams->PacketType );
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff fec5 	bl	8001c6a <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( packetParams->PacketType )
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	f200 8085 	bhi.w	8001ff4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
 8001eea:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x34>)
 8001eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef0:	08001f31 	.word	0x08001f31
 8001ef4:	08001f5d 	.word	0x08001f5d
 8001ef8:	08001f5d 	.word	0x08001f5d
 8001efc:	08001f85 	.word	0x08001f85
 8001f00:	08001fb1 	.word	0x08001fb1
 8001f04:	08001ff5 	.word	0x08001ff5
 8001f08:	08001ff5 	.word	0x08001ff5
 8001f0c:	08001ff5 	.word	0x08001ff5
 8001f10:	08001ff5 	.word	0x08001ff5
 8001f14:	08001ff5 	.word	0x08001ff5
 8001f18:	08001ff5 	.word	0x08001ff5
 8001f1c:	08001ff5 	.word	0x08001ff5
 8001f20:	08001ff5 	.word	0x08001ff5
 8001f24:	08001ff5 	.word	0x08001ff5
 8001f28:	08001ff5 	.word	0x08001ff5
 8001f2c:	08001fd7 	.word	0x08001fd7
    {
        case PACKET_TYPE_GFSK:
            buf[0] = packetParams->Params.Gfsk.PreambleLength;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	785b      	ldrb	r3, [r3, #1]
 8001f34:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Gfsk.SyncWordLength;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	789b      	ldrb	r3, [r3, #2]
 8001f3a:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Gfsk.SyncWordMatch;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	78db      	ldrb	r3, [r3, #3]
 8001f40:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Gfsk.HeaderType;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	791b      	ldrb	r3, [r3, #4]
 8001f46:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.Gfsk.PayloadLength;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	795b      	ldrb	r3, [r3, #5]
 8001f4c:	733b      	strb	r3, [r7, #12]
            buf[5] = packetParams->Params.Gfsk.CrcLength;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	799b      	ldrb	r3, [r3, #6]
 8001f52:	737b      	strb	r3, [r7, #13]
            buf[6] = packetParams->Params.Gfsk.Whitening;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	79db      	ldrb	r3, [r3, #7]
 8001f58:	73bb      	strb	r3, [r7, #14]
            break;
 8001f5a:	e04b      	b.n	8001ff4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_LORA:
        case PACKET_TYPE_RANGING:
            buf[0] = packetParams->Params.LoRa.PreambleLength;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	7a1b      	ldrb	r3, [r3, #8]
 8001f60:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.LoRa.HeaderType;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	7a5b      	ldrb	r3, [r3, #9]
 8001f66:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.LoRa.PayloadLength;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	7a9b      	ldrb	r3, [r3, #10]
 8001f6c:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.LoRa.Crc;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7adb      	ldrb	r3, [r3, #11]
 8001f72:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.LoRa.InvertIQ;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	7b1b      	ldrb	r3, [r3, #12]
 8001f78:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73bb      	strb	r3, [r7, #14]
            break;
 8001f82:	e037      	b.n	8001ff4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_FLRC:
            buf[0] = packetParams->Params.Flrc.PreambleLength;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	7b5b      	ldrb	r3, [r3, #13]
 8001f88:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Flrc.SyncWordLength;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	7b9b      	ldrb	r3, [r3, #14]
 8001f8e:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Flrc.SyncWordMatch;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	7bdb      	ldrb	r3, [r3, #15]
 8001f94:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Flrc.HeaderType;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	7c1b      	ldrb	r3, [r3, #16]
 8001f9a:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.Flrc.PayloadLength;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	7c5b      	ldrb	r3, [r3, #17]
 8001fa0:	733b      	strb	r3, [r7, #12]
            buf[5] = packetParams->Params.Flrc.CrcLength;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	7c9b      	ldrb	r3, [r3, #18]
 8001fa6:	737b      	strb	r3, [r7, #13]
            buf[6] = packetParams->Params.Flrc.Whitening;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	7cdb      	ldrb	r3, [r3, #19]
 8001fac:	73bb      	strb	r3, [r7, #14]
            break;
 8001fae:	e021      	b.n	8001ff4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_BLE:
            buf[0] = packetParams->Params.Ble.ConnectionState;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	7d1b      	ldrb	r3, [r3, #20]
 8001fb4:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Ble.CrcLength;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	7d5b      	ldrb	r3, [r3, #21]
 8001fba:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Ble.BleTestPayload;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	7d9b      	ldrb	r3, [r3, #22]
 8001fc0:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Ble.Whitening;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	7ddb      	ldrb	r3, [r3, #23]
 8001fc6:	72fb      	strb	r3, [r7, #11]
            buf[4] = NULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73bb      	strb	r3, [r7, #14]
            break;
 8001fd4:	e00e      	b.n	8001ff4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_NONE:
            buf[0] = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	723b      	strb	r3, [r7, #8]
            buf[1] = NULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	727b      	strb	r3, [r7, #9]
            buf[2] = NULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	72bb      	strb	r3, [r7, #10]
            buf[3] = NULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	72fb      	strb	r3, [r7, #11]
            buf[4] = NULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73bb      	strb	r3, [r7, #14]
            break;
 8001ff2:	bf00      	nop
    }
    WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3310      	adds	r3, #16
 8001ffa:	681c      	ldr	r4, [r3, #0]
 8001ffc:	f107 0208 	add.w	r2, r7, #8
 8002000:	2307      	movs	r3, #7
 8002002:	218c      	movs	r1, #140	; 0x8c
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	47a0      	blx	r4
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	bd90      	pop	{r4, r7, pc}

08002010 <_ZN6SX128017GetRxBufferStatusEPhS0_>:
{
    this->WriteRegister( REG_LR_PREAMBLELENGTH, ( this->ReadRegister( REG_LR_PREAMBLELENGTH ) & MASK_FORCE_PREAMBLELENGTH ) | preambleLength );
}

void SX1280::GetRxBufferStatus( uint8_t *rxPayloadLength, uint8_t *rxStartBufferPointer )
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
    uint8_t status[2];

    ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3314      	adds	r3, #20
 8002022:	681c      	ldr	r4, [r3, #0]
 8002024:	f107 0214 	add.w	r2, r7, #20
 8002028:	2302      	movs	r3, #2
 800202a:	2117      	movs	r1, #23
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	47a0      	blx	r4

    // In case of LORA fixed header, the rxPayloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( this -> GetPacketType( true ) == PACKET_TYPE_LORA ) && ( ReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 8002030:	2101      	movs	r1, #1
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff fe30 	bl	8001c98 <_ZN6SX128013GetPacketTypeEb>
 8002038:	4603      	mov	r3, r0
 800203a:	2b01      	cmp	r3, #1
 800203c:	d10e      	bne.n	800205c <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4c>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3324      	adds	r3, #36	; 0x24
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f640 1103 	movw	r1, #2307	; 0x903
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	4798      	blx	r3
 800204e:	4603      	mov	r3, r0
 8002050:	09db      	lsrs	r3, r3, #7
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4c>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4e>
 800205c:	2300      	movs	r3, #0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00c      	beq.n	800207c <_ZN6SX128017GetRxBufferStatusEPhS0_+0x6c>
    {
        *rxPayloadLength = ReadRegister( REG_LR_PAYLOADLENGTH );
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3324      	adds	r3, #36	; 0x24
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f640 1101 	movw	r1, #2305	; 0x901
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	4798      	blx	r3
 8002072:	4603      	mov	r3, r0
 8002074:	461a      	mov	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e014      	b.n	80020a6 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x96>
    }
    else if( this -> GetPacketType( true ) == PACKET_TYPE_BLE )
 800207c:	2101      	movs	r1, #1
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f7ff fe0a 	bl	8001c98 <_ZN6SX128013GetPacketTypeEb>
 8002084:	4603      	mov	r3, r0
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf0c      	ite	eq
 800208a:	2301      	moveq	r3, #1
 800208c:	2300      	movne	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x90>
    {
        // In the case of BLE, the size returned in status[0] do not include the 2-byte length PDU header
        // so it is added there
        *rxPayloadLength = status[0] + 2;
 8002094:	7d3b      	ldrb	r3, [r7, #20]
 8002096:	3302      	adds	r3, #2
 8002098:	b2da      	uxtb	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	701a      	strb	r2, [r3, #0]
 800209e:	e002      	b.n	80020a6 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x96>
    }
    else
    {
        *rxPayloadLength = status[0];
 80020a0:	7d3a      	ldrb	r2, [r7, #20]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	701a      	strb	r2, [r3, #0]
    }

    *rxStartBufferPointer = status[1];
 80020a6:	7d7a      	ldrb	r2, [r7, #21]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	701a      	strb	r2, [r3, #0]
}
 80020ac:	bf00      	nop
 80020ae:	371c      	adds	r7, #28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd90      	pop	{r4, r7, pc}

080020b4 <_ZN6SX128015SetDioIrqParamsEtttt>:

    return ( int8_t ) ( -raw / 2 );
}

void SX1280::SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	817b      	strh	r3, [r7, #10]
 80020c6:	460b      	mov	r3, r1
 80020c8:	813b      	strh	r3, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80020ce:	897b      	ldrh	r3, [r7, #10]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	743b      	strb	r3, [r7, #16]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80020d8:	897b      	ldrh	r3, [r7, #10]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80020de:	893b      	ldrh	r3, [r7, #8]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80020e8:	893b      	ldrh	r3, [r7, #8]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80020fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	b29b      	uxth	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	75bb      	strb	r3, [r7, #22]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8002108:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800210a:	b2db      	uxtb	r3, r3
 800210c:	75fb      	strb	r3, [r7, #23]
    WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3310      	adds	r3, #16
 8002114:	681c      	ldr	r4, [r3, #0]
 8002116:	f107 0210 	add.w	r2, r7, #16
 800211a:	2308      	movs	r3, #8
 800211c:	218d      	movs	r1, #141	; 0x8d
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	47a0      	blx	r4
}
 8002122:	bf00      	nop
 8002124:	371c      	adds	r7, #28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}

0800212a <_ZN6SX128012GetIrqStatusEv>:

uint16_t SX1280::GetIrqStatus( void )
{
 800212a:	b590      	push	{r4, r7, lr}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
    uint8_t irqStatus[2];
    ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3314      	adds	r3, #20
 8002138:	681c      	ldr	r4, [r3, #0]
 800213a:	f107 020c 	add.w	r2, r7, #12
 800213e:	2302      	movs	r3, #2
 8002140:	2115      	movs	r1, #21
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	47a0      	blx	r4
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8002146:	7b3b      	ldrb	r3, [r7, #12]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	b21a      	sxth	r2, r3
 800214c:	7b7b      	ldrb	r3, [r7, #13]
 800214e:	b21b      	sxth	r3, r3
 8002150:	4313      	orrs	r3, r2
 8002152:	b21b      	sxth	r3, r3
 8002154:	b29b      	uxth	r3, r3
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bd90      	pop	{r4, r7, pc}

0800215e <_ZN6SX128014ClearIrqStatusEt>:

void SX1280::ClearIrqStatus( uint16_t irqMask )
{
 800215e:	b590      	push	{r4, r7, lr}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	b29b      	uxth	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
 8002174:	887b      	ldrh	r3, [r7, #2]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3310      	adds	r3, #16
 8002180:	681c      	ldr	r4, [r3, #0]
 8002182:	f107 020c 	add.w	r2, r7, #12
 8002186:	2302      	movs	r3, #2
 8002188:	2197      	movs	r1, #151	; 0x97
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	47a0      	blx	r4
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bd90      	pop	{r4, r7, pc}

08002196 <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>:
                  ( calibParam.RC64KEnable );
    WriteCommand( RADIO_CALIBRATE, &cal, 1 );
}

void SX1280::SetRegulatorMode( RadioRegulatorModes_t mode )
{
 8002196:	b590      	push	{r4, r7, lr}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	70fb      	strb	r3, [r7, #3]
    WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3310      	adds	r3, #16
 80021a8:	681c      	ldr	r4, [r3, #0]
 80021aa:	1cfa      	adds	r2, r7, #3
 80021ac:	2301      	movs	r3, #1
 80021ae:	2196      	movs	r1, #150	; 0x96
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	47a0      	blx	r4
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd90      	pop	{r4, r7, pc}

080021bc <_ZN6SX128010SetPayloadEPhhh>:
{
    WriteCommand( RADIO_SET_LONGPREAMBLE, ( uint8_t * )&enable, 1 );
}

void SX1280::SetPayload( uint8_t *buffer, uint8_t size, uint8_t offset )
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	460b      	mov	r3, r1
 80021cc:	71fb      	strb	r3, [r7, #7]
 80021ce:	4613      	mov	r3, r2
 80021d0:	71bb      	strb	r3, [r7, #6]
    WriteBuffer( offset, buffer, size );
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3328      	adds	r3, #40	; 0x28
 80021d8:	681c      	ldr	r4, [r3, #0]
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	79b9      	ldrb	r1, [r7, #6]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	47a0      	blx	r4
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd90      	pop	{r4, r7, pc}

080021ec <_ZN6SX128010GetPayloadEPhS0_h>:

uint8_t SX1280::GetPayload( uint8_t *buffer, uint8_t *size , uint8_t maxSize )
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	70fb      	strb	r3, [r7, #3]
    uint8_t offset;

    GetRxBufferStatus( size, &offset );
 80021fa:	f107 0317 	add.w	r3, r7, #23
 80021fe:	461a      	mov	r2, r3
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f7ff ff04 	bl	8002010 <_ZN6SX128017GetRxBufferStatusEPhS0_>
    if( *size > maxSize )
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	429a      	cmp	r2, r3
 8002210:	d201      	bcs.n	8002216 <_ZN6SX128010GetPayloadEPhS0_h+0x2a>
    {
        return 1;
 8002212:	2301      	movs	r3, #1
 8002214:	e00a      	b.n	800222c <_ZN6SX128010GetPayloadEPhS0_h+0x40>
    }
    ReadBuffer( offset, buffer, *size );
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	332c      	adds	r3, #44	; 0x2c
 800221c:	681c      	ldr	r4, [r3, #0]
 800221e:	7df9      	ldrb	r1, [r7, #23]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	47a0      	blx	r4
    return 0;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	bd90      	pop	{r4, r7, pc}

08002234 <_ZN6SX128011SendPayloadEPhh10TickTime_sh>:

void SX1280::SendPayload( uint8_t *payload, uint8_t size, TickTime_t timeout, uint8_t offset )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	71fb      	strb	r3, [r7, #7]
    SetPayload( payload, size, offset );
 8002244:	7e3b      	ldrb	r3, [r7, #24]
 8002246:	79fa      	ldrb	r2, [r7, #7]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f7ff ffb6 	bl	80021bc <_ZN6SX128010SetPayloadEPhhh>
    SetTx( timeout );
 8002250:	6839      	ldr	r1, [r7, #0]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f7ff fc9d 	bl	8001b92 <_ZN6SX12805SetTxE10TickTime_s>
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>:
    // Silently set 8 as minimum value
    WriteRegister( REG_LR_RANGINGFILTERWINDOWSIZE, ( num < DEFAULT_RANGING_FILTER_SIZE ) ? DEFAULT_RANGING_FILTER_SIZE : num );
}

void SX1280::SetRangingRole( RadioRangingRoles_t role )
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[1];

    buf[0] = role;
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	733b      	strb	r3, [r7, #12]
    WriteCommand( RADIO_SET_RANGING_ROLE, &buf[0], 1 );
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3310      	adds	r3, #16
 8002276:	681c      	ldr	r4, [r3, #0]
 8002278:	f107 020c 	add.w	r2, r7, #12
 800227c:	2301      	movs	r3, #1
 800227e:	21a3      	movs	r1, #163	; 0xa3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	47a0      	blx	r4
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	bd90      	pop	{r4, r7, pc}

0800228c <_ZN6SX12808OnDioIrqEv>:
{
    this->PollingMode = false;
}

void SX1280::OnDioIrq( void )
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
    /*
     * When polling mode is activated, it is up to the application to call
     * ProcessIrqs( ). Otherwise, the driver automatically calls ProcessIrqs( )
     * on radio interrupt.
     */
    if( this->PollingMode == true )
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800229a:	2b01      	cmp	r3, #1
 800229c:	d104      	bne.n	80022a8 <_ZN6SX12808OnDioIrqEv+0x1c>
    {
        this->IrqState = true;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    }
    else
    {
        this->ProcessIrqs( );
    }
}
 80022a6:	e002      	b.n	80022ae <_ZN6SX12808OnDioIrqEv+0x22>
        this->ProcessIrqs( );
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f805 	bl	80022b8 <_ZN6SX128011ProcessIrqsEv>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <_ZN6SX128011ProcessIrqsEv>:

void SX1280::ProcessIrqs( void )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
    RadioPacketTypes_t packetType = PACKET_TYPE_NONE;
 80022c0:	230f      	movs	r3, #15
 80022c2:	73fb      	strb	r3, [r7, #15]

    if( this->PollingMode == true )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d10d      	bne.n	80022ea <_ZN6SX128011ProcessIrqsEv+0x32>
    {
        if( this->IrqState == true )
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	f040 81c1 	bne.w	800265c <_ZN6SX128011ProcessIrqsEv+0x3a4>
  __ASM volatile ("cpsid i" : : : "memory");
 80022da:	b672      	cpsid	i
}
 80022dc:	bf00      	nop
        {
            __disable_irq( );
            this->IrqState = false;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  __ASM volatile ("cpsie i" : : : "memory");
 80022e6:	b662      	cpsie	i
}
 80022e8:	bf00      	nop
        {
            return;
        }
    }

    packetType = GetPacketType( true );
 80022ea:	2101      	movs	r1, #1
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff fcd3 	bl	8001c98 <_ZN6SX128013GetPacketTypeEb>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]
    uint16_t irqRegs = GetIrqStatus( );
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ff17 	bl	800212a <_ZN6SX128012GetIrqStatusEv>
 80022fc:	4603      	mov	r3, r0
 80022fe:	81bb      	strh	r3, [r7, #12]
    ClearIrqStatus( IRQ_RADIO_ALL );
 8002300:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff2a 	bl	800215e <_ZN6SX128014ClearIrqStatusEt>
    }
    TEST_PIN_1 = 0;
    TEST_PIN_2 = 0;
#endif

    switch( packetType )
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b04      	cmp	r3, #4
 800230e:	f200 81a7 	bhi.w	8002660 <_ZN6SX128011ProcessIrqsEv+0x3a8>
 8002312:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <_ZN6SX128011ProcessIrqsEv+0x60>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	0800232d 	.word	0x0800232d
 800231c:	0800242b 	.word	0x0800242b
 8002320:	08002573 	.word	0x08002573
 8002324:	0800232d 	.word	0x0800232d
 8002328:	0800232d 	.word	0x0800232d
    {
        case PACKET_TYPE_GFSK:
        case PACKET_TYPE_FLRC:
        case PACKET_TYPE_BLE:
            switch( OperatingMode )
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002332:	2b05      	cmp	r3, #5
 8002334:	d002      	beq.n	800233c <_ZN6SX128011ProcessIrqsEv+0x84>
 8002336:	2b06      	cmp	r3, #6
 8002338:	d05a      	beq.n	80023f0 <_ZN6SX128011ProcessIrqsEv+0x138>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 800233a:	e075      	b.n	8002428 <_ZN6SX128011ProcessIrqsEv+0x170>
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 800233c:	89bb      	ldrh	r3, [r7, #12]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d022      	beq.n	800238c <_ZN6SX128011ProcessIrqsEv+0xd4>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 8002346:	89bb      	ldrh	r3, [r7, #12]
 8002348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <_ZN6SX128011ProcessIrqsEv+0xaa>
                            if( rxError != NULL )
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d019      	beq.n	800238c <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxError( IRQ_CRC_ERROR_CODE );
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2002      	movs	r0, #2
 800235e:	4798      	blx	r3
 8002360:	e014      	b.n	800238c <_ZN6SX128011ProcessIrqsEv+0xd4>
                        else if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
 8002362:	89bb      	ldrh	r3, [r7, #12]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <_ZN6SX128011ProcessIrqsEv+0xc6>
                            if( rxError != NULL )
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00b      	beq.n	800238c <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxError( IRQ_SYNCWORD_ERROR_CODE );
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	2001      	movs	r0, #1
 800237a:	4798      	blx	r3
 800237c:	e006      	b.n	800238c <_ZN6SX128011ProcessIrqsEv+0xd4>
                            if( rxDone != NULL )
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxDone( );
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4798      	blx	r3
                    if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
 800238c:	89bb      	ldrh	r3, [r7, #12]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <_ZN6SX128011ProcessIrqsEv+0xec>
                        if( rxSyncWordDone != NULL )
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <_ZN6SX128011ProcessIrqsEv+0xec>
                            rxSyncWordDone( );
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	4798      	blx	r3
                    if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
 80023a4:	89bb      	ldrh	r3, [r7, #12]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <_ZN6SX128011ProcessIrqsEv+0x106>
                        if( rxError != NULL )
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <_ZN6SX128011ProcessIrqsEv+0x106>
                            rxError( IRQ_SYNCWORD_ERROR_CODE );
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	2001      	movs	r0, #1
 80023bc:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80023be:	89bb      	ldrh	r3, [r7, #12]
 80023c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <_ZN6SX128011ProcessIrqsEv+0x11e>
                        if( rxTimeout != NULL )
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <_ZN6SX128011ProcessIrqsEv+0x11e>
                            rxTimeout( );
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4798      	blx	r3
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80023d6:	89bb      	ldrh	r3, [r7, #12]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d020      	beq.n	8002422 <_ZN6SX128011ProcessIrqsEv+0x16a>
                        if( txDone != NULL )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01c      	beq.n	8002422 <_ZN6SX128011ProcessIrqsEv+0x16a>
                            txDone( );
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4798      	blx	r3
                    break;
 80023ee:	e018      	b.n	8002422 <_ZN6SX128011ProcessIrqsEv+0x16a>
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80023f0:	89bb      	ldrh	r3, [r7, #12]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <_ZN6SX128011ProcessIrqsEv+0x150>
                        if( txDone != NULL )
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <_ZN6SX128011ProcessIrqsEv+0x150>
                            txDone( );
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002408:	89bb      	ldrh	r3, [r7, #12]
 800240a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <_ZN6SX128011ProcessIrqsEv+0x16e>
                        if( txTimeout != NULL )
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <_ZN6SX128011ProcessIrqsEv+0x16e>
                            txTimeout( );
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	4798      	blx	r3
                    break;
 8002420:	e001      	b.n	8002426 <_ZN6SX128011ProcessIrqsEv+0x16e>
                    break;
 8002422:	bf00      	nop
 8002424:	e11d      	b.n	8002662 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 8002426:	bf00      	nop
            }
            break;
 8002428:	e11b      	b.n	8002662 <_ZN6SX128011ProcessIrqsEv+0x3aa>
        case PACKET_TYPE_LORA:
            switch( OperatingMode )
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002430:	2b07      	cmp	r3, #7
 8002432:	d06d      	beq.n	8002510 <_ZN6SX128011ProcessIrqsEv+0x258>
 8002434:	2b07      	cmp	r3, #7
 8002436:	f300 8094 	bgt.w	8002562 <_ZN6SX128011ProcessIrqsEv+0x2aa>
 800243a:	2b05      	cmp	r3, #5
 800243c:	d002      	beq.n	8002444 <_ZN6SX128011ProcessIrqsEv+0x18c>
 800243e:	2b06      	cmp	r3, #6
 8002440:	d04d      	beq.n	80024de <_ZN6SX128011ProcessIrqsEv+0x226>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 8002442:	e08e      	b.n	8002562 <_ZN6SX128011ProcessIrqsEv+0x2aa>
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8002444:	89bb      	ldrh	r3, [r7, #12]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d014      	beq.n	8002478 <_ZN6SX128011ProcessIrqsEv+0x1c0>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 800244e:	89bb      	ldrh	r3, [r7, #12]
 8002450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <_ZN6SX128011ProcessIrqsEv+0x1b2>
                            if( rxError != NULL )
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <_ZN6SX128011ProcessIrqsEv+0x1c0>
                                rxError( IRQ_CRC_ERROR_CODE );
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	2002      	movs	r0, #2
 8002466:	4798      	blx	r3
 8002468:	e006      	b.n	8002478 <_ZN6SX128011ProcessIrqsEv+0x1c0>
                            if( rxDone != NULL )
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <_ZN6SX128011ProcessIrqsEv+0x1c0>
                                rxDone( );
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 8002478:	89bb      	ldrh	r3, [r7, #12]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <_ZN6SX128011ProcessIrqsEv+0x1d8>
                        if( rxHeaderDone != NULL )
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <_ZN6SX128011ProcessIrqsEv+0x1d8>
                            rxHeaderDone( );
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 8002490:	89bb      	ldrh	r3, [r7, #12]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <_ZN6SX128011ProcessIrqsEv+0x1f2>
                        if( rxError != NULL )
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <_ZN6SX128011ProcessIrqsEv+0x1f2>
                            rxError( IRQ_HEADER_ERROR_CODE );
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	2000      	movs	r0, #0
 80024a8:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80024aa:	89bb      	ldrh	r3, [r7, #12]
 80024ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <_ZN6SX128011ProcessIrqsEv+0x20a>
                        if( rxTimeout != NULL )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <_ZN6SX128011ProcessIrqsEv+0x20a>
                            rxTimeout( );
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
 80024c2:	89bb      	ldrh	r3, [r7, #12]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d04c      	beq.n	8002566 <_ZN6SX128011ProcessIrqsEv+0x2ae>
                        if( rxError != NULL )
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d048      	beq.n	8002566 <_ZN6SX128011ProcessIrqsEv+0x2ae>
                            rxError( IRQ_RANGING_ON_LORA_ERROR_CODE );
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2003      	movs	r0, #3
 80024da:	4798      	blx	r3
                    break;
 80024dc:	e043      	b.n	8002566 <_ZN6SX128011ProcessIrqsEv+0x2ae>
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80024de:	89bb      	ldrh	r3, [r7, #12]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d006      	beq.n	80024f6 <_ZN6SX128011ProcessIrqsEv+0x23e>
                        if( txDone != NULL )
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <_ZN6SX128011ProcessIrqsEv+0x23e>
                            txDone( );
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80024f6:	89bb      	ldrh	r3, [r7, #12]
 80024f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d034      	beq.n	800256a <_ZN6SX128011ProcessIrqsEv+0x2b2>
                        if( txTimeout != NULL )
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d030      	beq.n	800256a <_ZN6SX128011ProcessIrqsEv+0x2b2>
                            txTimeout( );
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	4798      	blx	r3
                    break;
 800250e:	e02c      	b.n	800256a <_ZN6SX128011ProcessIrqsEv+0x2b2>
                    if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 8002510:	89bb      	ldrh	r3, [r7, #12]
 8002512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d016      	beq.n	8002548 <_ZN6SX128011ProcessIrqsEv+0x290>
                        if( ( irqRegs & IRQ_CAD_DETECTED ) == IRQ_CAD_DETECTED )
 800251a:	89bb      	ldrh	r3, [r7, #12]
 800251c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <_ZN6SX128011ProcessIrqsEv+0x27e>
                            if( cadDone != NULL )
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <_ZN6SX128011ProcessIrqsEv+0x2b6>
                                cadDone( true );
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	2001      	movs	r0, #1
 8002532:	4798      	blx	r3
                    break;
 8002534:	e01b      	b.n	800256e <_ZN6SX128011ProcessIrqsEv+0x2b6>
                            if( cadDone != NULL )
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	2b00      	cmp	r3, #0
 800253c:	d017      	beq.n	800256e <_ZN6SX128011ProcessIrqsEv+0x2b6>
                                cadDone( false );
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	2000      	movs	r0, #0
 8002544:	4798      	blx	r3
                    break;
 8002546:	e012      	b.n	800256e <_ZN6SX128011ProcessIrqsEv+0x2b6>
                    else if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002548:	89bb      	ldrh	r3, [r7, #12]
 800254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <_ZN6SX128011ProcessIrqsEv+0x2b6>
                        if( rxTimeout != NULL )
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <_ZN6SX128011ProcessIrqsEv+0x2b6>
                            rxTimeout( );
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	4798      	blx	r3
                    break;
 8002560:	e005      	b.n	800256e <_ZN6SX128011ProcessIrqsEv+0x2b6>
                    break;
 8002562:	bf00      	nop
 8002564:	e07d      	b.n	8002662 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 8002566:	bf00      	nop
 8002568:	e07b      	b.n	8002662 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 800256a:	bf00      	nop
 800256c:	e079      	b.n	8002662 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 800256e:	bf00      	nop
            }
            break;
 8002570:	e077      	b.n	8002662 <_ZN6SX128011ProcessIrqsEv+0x3aa>
        case PACKET_TYPE_RANGING:
            switch( OperatingMode )
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002578:	2b05      	cmp	r3, #5
 800257a:	d002      	beq.n	8002582 <_ZN6SX128011ProcessIrqsEv+0x2ca>
 800257c:	2b06      	cmp	r3, #6
 800257e:	d04e      	beq.n	800261e <_ZN6SX128011ProcessIrqsEv+0x366>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 8002580:	e06b      	b.n	800265a <_ZN6SX128011ProcessIrqsEv+0x3a2>
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
 8002582:	89bb      	ldrh	r3, [r7, #12]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <_ZN6SX128011ProcessIrqsEv+0x2e4>
                        if( rangingDone != NULL )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <_ZN6SX128011ProcessIrqsEv+0x2e4>
                            rangingDone( IRQ_RANGING_SLAVE_ERROR_CODE );
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	2000      	movs	r0, #0
 800259a:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_VALID ) == IRQ_RANGING_SLAVE_REQUEST_VALID )
 800259c:	89bb      	ldrh	r3, [r7, #12]
 800259e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <_ZN6SX128011ProcessIrqsEv+0x2fe>
                        if( rangingDone != NULL )
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <_ZN6SX128011ProcessIrqsEv+0x2fe>
                            rangingDone( IRQ_RANGING_SLAVE_VALID_CODE );
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	2001      	movs	r0, #1
 80025b4:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_RESPONSE_DONE ) == IRQ_RANGING_SLAVE_RESPONSE_DONE )
 80025b6:	89bb      	ldrh	r3, [r7, #12]
 80025b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <_ZN6SX128011ProcessIrqsEv+0x318>
                        if( rangingDone != NULL )
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <_ZN6SX128011ProcessIrqsEv+0x318>
                            rangingDone( IRQ_RANGING_SLAVE_VALID_CODE );
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	2001      	movs	r0, #1
 80025ce:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80025d0:	89bb      	ldrh	r3, [r7, #12]
 80025d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <_ZN6SX128011ProcessIrqsEv+0x332>
                        if( rangingDone != NULL )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <_ZN6SX128011ProcessIrqsEv+0x332>
                            rangingDone( IRQ_RANGING_SLAVE_ERROR_CODE );
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	2000      	movs	r0, #0
 80025e8:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 80025ea:	89bb      	ldrh	r3, [r7, #12]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d006      	beq.n	8002602 <_ZN6SX128011ProcessIrqsEv+0x34a>
                        if( rxHeaderDone != NULL )
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <_ZN6SX128011ProcessIrqsEv+0x34a>
                            rxHeaderDone( );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 8002602:	89bb      	ldrh	r3, [r7, #12]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d023      	beq.n	8002654 <_ZN6SX128011ProcessIrqsEv+0x39c>
                        if( rxError != NULL )
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01f      	beq.n	8002654 <_ZN6SX128011ProcessIrqsEv+0x39c>
                            rxError( IRQ_HEADER_ERROR_CODE );
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2000      	movs	r0, #0
 800261a:	4798      	blx	r3
                    break;
 800261c:	e01a      	b.n	8002654 <_ZN6SX128011ProcessIrqsEv+0x39c>
                    if( ( irqRegs & IRQ_RANGING_MASTER_TIMEOUT ) == IRQ_RANGING_MASTER_TIMEOUT )
 800261e:	89bb      	ldrh	r3, [r7, #12]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <_ZN6SX128011ProcessIrqsEv+0x380>
                        if( rangingDone != NULL )
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <_ZN6SX128011ProcessIrqsEv+0x380>
                            rangingDone( IRQ_RANGING_MASTER_ERROR_CODE );
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	2002      	movs	r0, #2
 8002636:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_MASTER_RESULT_VALID ) == IRQ_RANGING_MASTER_RESULT_VALID )
 8002638:	89bb      	ldrh	r3, [r7, #12]
 800263a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <_ZN6SX128011ProcessIrqsEv+0x3a0>
                        if( rangingDone != NULL )
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <_ZN6SX128011ProcessIrqsEv+0x3a0>
                            rangingDone( IRQ_RANGING_MASTER_VALID_CODE );
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	2003      	movs	r0, #3
 8002650:	4798      	blx	r3
                    break;
 8002652:	e001      	b.n	8002658 <_ZN6SX128011ProcessIrqsEv+0x3a0>
                    break;
 8002654:	bf00      	nop
 8002656:	e004      	b.n	8002662 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 8002658:	bf00      	nop
            }
            break;
 800265a:	e002      	b.n	8002662 <_ZN6SX128011ProcessIrqsEv+0x3aa>
            return;
 800265c:	bf00      	nop
 800265e:	e000      	b.n	8002662 <_ZN6SX128011ProcessIrqsEv+0x3aa>
        default:
            // Unexpected IRQ: silently returns
            break;
 8002660:	bf00      	nop
    }
}
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800266c:	f000 fe88 	bl	8003380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002670:	f000 f816 	bl	80026a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002674:	f000 f9d8 	bl	8002a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8002678:	f000 f9a6 	bl	80029c8 <MX_DMA_Init>
  MX_I2C1_Init();
 800267c:	f000 f87a 	bl	8002774 <MX_I2C1_Init>
  MX_I2S3_Init();
 8002680:	f000 f8a6 	bl	80027d0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8002684:	f000 f8d4 	bl	8002830 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8002688:	f009 fc78 	bl	800bf7c <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 800268c:	f000 f972 	bl	8002974 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8002690:	f000 f93a 	bl	8002908 <MX_TIM6_Init>
  MX_SPI2_Init();
 8002694:	f000 f902 	bl	800289c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  start();
 8002698:	f7fe fce8 	bl	800106c <start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800269c:	e7fe      	b.n	800269c <main+0x34>
	...

080026a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b094      	sub	sp, #80	; 0x50
 80026a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026a6:	f107 0320 	add.w	r3, r7, #32
 80026aa:	2230      	movs	r2, #48	; 0x30
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f00a f9ec 	bl	800ca8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	4b28      	ldr	r3, [pc, #160]	; (800276c <SystemClock_Config+0xcc>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	4a27      	ldr	r2, [pc, #156]	; (800276c <SystemClock_Config+0xcc>)
 80026ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d2:	6413      	str	r3, [r2, #64]	; 0x40
 80026d4:	4b25      	ldr	r3, [pc, #148]	; (800276c <SystemClock_Config+0xcc>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e0:	2300      	movs	r3, #0
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	4b22      	ldr	r3, [pc, #136]	; (8002770 <SystemClock_Config+0xd0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a21      	ldr	r2, [pc, #132]	; (8002770 <SystemClock_Config+0xd0>)
 80026ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <SystemClock_Config+0xd0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026fc:	2301      	movs	r3, #1
 80026fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002706:	2302      	movs	r3, #2
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800270a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800270e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002710:	2308      	movs	r3, #8
 8002712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002714:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002718:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800271a:	2302      	movs	r3, #2
 800271c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800271e:	2307      	movs	r3, #7
 8002720:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002722:	f107 0320 	add.w	r3, r7, #32
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fdb0 	bl	800628c <HAL_RCC_OscConfig>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002732:	f000 fad5 	bl	8002ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002736:	230f      	movs	r3, #15
 8002738:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800273a:	2302      	movs	r3, #2
 800273c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002742:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800274c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800274e:	f107 030c 	add.w	r3, r7, #12
 8002752:	2105      	movs	r1, #5
 8002754:	4618      	mov	r0, r3
 8002756:	f004 f811 	bl	800677c <HAL_RCC_ClockConfig>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002760:	f000 fabe 	bl	8002ce0 <Error_Handler>
  }
}
 8002764:	bf00      	nop
 8002766:	3750      	adds	r7, #80	; 0x50
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000

08002774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <MX_I2C1_Init+0x50>)
 800277a:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <MX_I2C1_Init+0x54>)
 800277c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_I2C1_Init+0x50>)
 8002780:	4a12      	ldr	r2, [pc, #72]	; (80027cc <MX_I2C1_Init+0x58>)
 8002782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <MX_I2C1_Init+0x50>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <MX_I2C1_Init+0x50>)
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <MX_I2C1_Init+0x50>)
 8002792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <MX_I2C1_Init+0x50>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MX_I2C1_Init+0x50>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <MX_I2C1_Init+0x50>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_I2C1_Init+0x50>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <MX_I2C1_Init+0x50>)
 80027b2:	f001 fd09 	bl	80041c8 <HAL_I2C_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027bc:	f000 fa90 	bl	8002ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000380 	.word	0x20000380
 80027c8:	40005400 	.word	0x40005400
 80027cc:	000186a0 	.word	0x000186a0

080027d0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <MX_I2S3_Init+0x54>)
 80027d6:	4a14      	ldr	r2, [pc, #80]	; (8002828 <MX_I2S3_Init+0x58>)
 80027d8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <MX_I2S3_Init+0x54>)
 80027dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <MX_I2S3_Init+0x54>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <MX_I2S3_Init+0x54>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <MX_I2S3_Init+0x54>)
 80027f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <MX_I2S3_Init+0x54>)
 80027f8:	4a0c      	ldr	r2, [pc, #48]	; (800282c <MX_I2S3_Init+0x5c>)
 80027fa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <MX_I2S3_Init+0x54>)
 80027fe:	2200      	movs	r2, #0
 8002800:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <MX_I2S3_Init+0x54>)
 8002804:	2200      	movs	r2, #0
 8002806:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <MX_I2S3_Init+0x54>)
 800280a:	2200      	movs	r2, #0
 800280c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800280e:	4805      	ldr	r0, [pc, #20]	; (8002824 <MX_I2S3_Init+0x54>)
 8002810:	f001 fe1e 	bl	8004450 <HAL_I2S_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800281a:	f000 fa61 	bl	8002ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200003d4 	.word	0x200003d4
 8002828:	40003c00 	.word	0x40003c00
 800282c:	00017700 	.word	0x00017700

08002830 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <MX_SPI1_Init+0x64>)
 8002836:	4a18      	ldr	r2, [pc, #96]	; (8002898 <MX_SPI1_Init+0x68>)
 8002838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800283a:	4b16      	ldr	r3, [pc, #88]	; (8002894 <MX_SPI1_Init+0x64>)
 800283c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002842:	4b14      	ldr	r3, [pc, #80]	; (8002894 <MX_SPI1_Init+0x64>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <MX_SPI1_Init+0x64>)
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <MX_SPI1_Init+0x64>)
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <MX_SPI1_Init+0x64>)
 8002856:	2200      	movs	r2, #0
 8002858:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <MX_SPI1_Init+0x64>)
 800285c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002860:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <MX_SPI1_Init+0x64>)
 8002864:	2200      	movs	r2, #0
 8002866:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <MX_SPI1_Init+0x64>)
 800286a:	2200      	movs	r2, #0
 800286c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <MX_SPI1_Init+0x64>)
 8002870:	2200      	movs	r2, #0
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <MX_SPI1_Init+0x64>)
 8002876:	2200      	movs	r2, #0
 8002878:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <MX_SPI1_Init+0x64>)
 800287c:	220a      	movs	r2, #10
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002880:	4804      	ldr	r0, [pc, #16]	; (8002894 <MX_SPI1_Init+0x64>)
 8002882:	f004 fadb 	bl	8006e3c <HAL_SPI_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800288c:	f000 fa28 	bl	8002ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}
 8002894:	2000041c 	.word	0x2000041c
 8002898:	40013000 	.word	0x40013000

0800289c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <MX_SPI2_Init+0x64>)
 80028a2:	4a18      	ldr	r2, [pc, #96]	; (8002904 <MX_SPI2_Init+0x68>)
 80028a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <MX_SPI2_Init+0x64>)
 80028a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028ae:	4b14      	ldr	r3, [pc, #80]	; (8002900 <MX_SPI2_Init+0x64>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <MX_SPI2_Init+0x64>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <MX_SPI2_Init+0x64>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <MX_SPI2_Init+0x64>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_SPI2_Init+0x64>)
 80028c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_SPI2_Init+0x64>)
 80028d0:	2208      	movs	r2, #8
 80028d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <MX_SPI2_Init+0x64>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_SPI2_Init+0x64>)
 80028dc:	2200      	movs	r2, #0
 80028de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <MX_SPI2_Init+0x64>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <MX_SPI2_Init+0x64>)
 80028e8:	220a      	movs	r2, #10
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028ec:	4804      	ldr	r0, [pc, #16]	; (8002900 <MX_SPI2_Init+0x64>)
 80028ee:	f004 faa5 	bl	8006e3c <HAL_SPI_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80028f8:	f000 f9f2 	bl	8002ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000474 	.word	0x20000474
 8002904:	40003800 	.word	0x40003800

08002908 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800290e:	463b      	mov	r3, r7
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <MX_TIM6_Init+0x64>)
 8002918:	4a15      	ldr	r2, [pc, #84]	; (8002970 <MX_TIM6_Init+0x68>)
 800291a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 167;
 800291c:	4b13      	ldr	r3, [pc, #76]	; (800296c <MX_TIM6_Init+0x64>)
 800291e:	22a7      	movs	r2, #167	; 0xa7
 8002920:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <MX_TIM6_Init+0x64>)
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8002928:	4b10      	ldr	r3, [pc, #64]	; (800296c <MX_TIM6_Init+0x64>)
 800292a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800292e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <MX_TIM6_Init+0x64>)
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002936:	480d      	ldr	r0, [pc, #52]	; (800296c <MX_TIM6_Init+0x64>)
 8002938:	f004 fe94 	bl	8007664 <HAL_TIM_Base_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002942:	f000 f9cd 	bl	8002ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800294e:	463b      	mov	r3, r7
 8002950:	4619      	mov	r1, r3
 8002952:	4806      	ldr	r0, [pc, #24]	; (800296c <MX_TIM6_Init+0x64>)
 8002954:	f004 ff76 	bl	8007844 <HAL_TIMEx_MasterConfigSynchronization>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800295e:	f000 f9bf 	bl	8002ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	2000058c 	.word	0x2000058c
 8002970:	40001000 	.word	0x40001000

08002974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <MX_USART2_UART_Init+0x50>)
 800297c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002980:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 800299a:	220c      	movs	r2, #12
 800299c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029ac:	f004 ffc6 	bl	800793c <HAL_UART_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029b6:	f000 f993 	bl	8002ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200005d4 	.word	0x200005d4
 80029c4:	40004400 	.word	0x40004400

080029c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <MX_DMA_Init+0x5c>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <MX_DMA_Init+0x5c>)
 80029d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <MX_DMA_Init+0x5c>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	200e      	movs	r0, #14
 80029f0:	f000 fe37 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80029f4:	200e      	movs	r0, #14
 80029f6:	f000 fe50 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2100      	movs	r1, #0
 80029fe:	200f      	movs	r0, #15
 8002a00:	f000 fe2f 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002a04:	200f      	movs	r0, #15
 8002a06:	f000 fe48 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2011      	movs	r0, #17
 8002a10:	f000 fe27 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002a14:	2011      	movs	r0, #17
 8002a16:	f000 fe40 	bl	800369a <HAL_NVIC_EnableIRQ>

}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800

08002a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08c      	sub	sp, #48	; 0x30
 8002a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2e:	f107 031c 	add.w	r3, r7, #28
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	60da      	str	r2, [r3, #12]
 8002a3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	4ba1      	ldr	r3, [pc, #644]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4aa0      	ldr	r2, [pc, #640]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002a48:	f043 0310 	orr.w	r3, r3, #16
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b9e      	ldr	r3, [pc, #632]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	4b9a      	ldr	r3, [pc, #616]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a99      	ldr	r2, [pc, #612]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b97      	ldr	r3, [pc, #604]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b93      	ldr	r3, [pc, #588]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a92      	ldr	r2, [pc, #584]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b90      	ldr	r3, [pc, #576]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b8c      	ldr	r3, [pc, #560]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a8b      	ldr	r2, [pc, #556]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b89      	ldr	r3, [pc, #548]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	4b85      	ldr	r3, [pc, #532]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a84      	ldr	r2, [pc, #528]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b82      	ldr	r3, [pc, #520]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	4b7e      	ldr	r3, [pc, #504]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a7d      	ldr	r2, [pc, #500]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002ad4:	f043 0308 	orr.w	r3, r3, #8
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b7b      	ldr	r3, [pc, #492]	; (8002cc8 <MX_GPIO_Init+0x2a0>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|SX_FB_RST_Pin|SX_FB_NSS_Pin, GPIO_PIN_RESET);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f242 4108 	movw	r1, #9224	; 0x2408
 8002aec:	4877      	ldr	r0, [pc, #476]	; (8002ccc <MX_GPIO_Init+0x2a4>)
 8002aee:	f001 fb1f 	bl	8004130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002af2:	2201      	movs	r2, #1
 8002af4:	2101      	movs	r1, #1
 8002af6:	4876      	ldr	r0, [pc, #472]	; (8002cd0 <MX_GPIO_Init+0x2a8>)
 8002af8:	f001 fb1a 	bl	8004130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, GPIO_PIN_SET);
 8002afc:	2201      	movs	r2, #1
 8002afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b02:	4874      	ldr	r0, [pc, #464]	; (8002cd4 <MX_GPIO_Init+0x2ac>)
 8002b04:	f001 fb14 	bl	8004130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b0e:	4872      	ldr	r0, [pc, #456]	; (8002cd8 <MX_GPIO_Init+0x2b0>)
 8002b10:	f001 fb0e 	bl	8004130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002b14:	2200      	movs	r2, #0
 8002b16:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002b1a:	486f      	ldr	r0, [pc, #444]	; (8002cd8 <MX_GPIO_Init+0x2b0>)
 8002b1c:	f001 fb08 	bl	8004130 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin SX_FB_RST_Pin SX_FB_NSS_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|SX_FB_RST_Pin|SX_FB_NSS_Pin;
 8002b20:	f242 4308 	movw	r3, #9224	; 0x2408
 8002b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b26:	2301      	movs	r3, #1
 8002b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b32:	f107 031c 	add.w	r3, r7, #28
 8002b36:	4619      	mov	r1, r3
 8002b38:	4864      	ldr	r0, [pc, #400]	; (8002ccc <MX_GPIO_Init+0x2a4>)
 8002b3a:	f001 f945 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b42:	2301      	movs	r3, #1
 8002b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 031c 	add.w	r3, r7, #28
 8002b52:	4619      	mov	r1, r3
 8002b54:	485e      	ldr	r0, [pc, #376]	; (8002cd0 <MX_GPIO_Init+0x2a8>)
 8002b56:	f001 f937 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002b5a:	2308      	movs	r3, #8
 8002b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b6a:	2305      	movs	r3, #5
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002b6e:	f107 031c 	add.w	r3, r7, #28
 8002b72:	4619      	mov	r1, r3
 8002b74:	4856      	ldr	r0, [pc, #344]	; (8002cd0 <MX_GPIO_Init+0x2a8>)
 8002b76:	f001 f927 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b7e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b88:	f107 031c 	add.w	r3, r7, #28
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4853      	ldr	r0, [pc, #332]	; (8002cdc <MX_GPIO_Init+0x2b4>)
 8002b90:	f001 f91a 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002b94:	2304      	movs	r3, #4
 8002b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002ba0:	f107 031c 	add.w	r3, r7, #28
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	484b      	ldr	r0, [pc, #300]	; (8002cd4 <MX_GPIO_Init+0x2ac>)
 8002ba8:	f001 f90e 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_FB_BUSY_Pin */
  GPIO_InitStruct.Pin = SX_FB_BUSY_Pin;
 8002bac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX_FB_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002bba:	f107 031c 	add.w	r3, r7, #28
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4842      	ldr	r0, [pc, #264]	; (8002ccc <MX_GPIO_Init+0x2a4>)
 8002bc2:	f001 f901 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_FB_INT_Pin */
  GPIO_InitStruct.Pin = SX_FB_INT_Pin;
 8002bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bcc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX_FB_INT_GPIO_Port, &GPIO_InitStruct);
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	4619      	mov	r1, r3
 8002bdc:	483b      	ldr	r0, [pc, #236]	; (8002ccc <MX_GPIO_Init+0x2a4>)
 8002bde:	f001 f8f3 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2302      	movs	r3, #2
 8002bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bf4:	2305      	movs	r3, #5
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002bf8:	f107 031c 	add.w	r3, r7, #28
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4835      	ldr	r0, [pc, #212]	; (8002cd4 <MX_GPIO_Init+0x2ac>)
 8002c00:	f001 f8e2 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_NSS_Pin */
  GPIO_InitStruct.Pin = SX1280_NSS_Pin;
 8002c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c12:	2300      	movs	r3, #0
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX1280_NSS_GPIO_Port, &GPIO_InitStruct);
 8002c16:	f107 031c 	add.w	r3, r7, #28
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	482d      	ldr	r0, [pc, #180]	; (8002cd4 <MX_GPIO_Init+0x2ac>)
 8002c1e:	f001 f8d3 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_INT_Pin */
  GPIO_InitStruct.Pin = SX1280_INT_Pin;
 8002c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX1280_INT_GPIO_Port, &GPIO_InitStruct);
 8002c32:	f107 031c 	add.w	r3, r7, #28
 8002c36:	4619      	mov	r1, r3
 8002c38:	4827      	ldr	r0, [pc, #156]	; (8002cd8 <MX_GPIO_Init+0x2b0>)
 8002c3a:	f001 f8c5 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX1280_BUSY_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SX1280_BUSY_Pin|OTG_FS_OverCurrent_Pin;
 8002c3e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c44:	2300      	movs	r3, #0
 8002c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	4619      	mov	r1, r3
 8002c52:	4821      	ldr	r0, [pc, #132]	; (8002cd8 <MX_GPIO_Init+0x2b0>)
 8002c54:	f001 f8b8 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 8002c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002c5e:	2311      	movs	r3, #17
 8002c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c62:	2301      	movs	r3, #1
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 8002c6a:	f107 031c 	add.w	r3, r7, #28
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4819      	ldr	r0, [pc, #100]	; (8002cd8 <MX_GPIO_Init+0x2b0>)
 8002c72:	f001 f8a9 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002c76:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002c7a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c88:	f107 031c 	add.w	r3, r7, #28
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4812      	ldr	r0, [pc, #72]	; (8002cd8 <MX_GPIO_Init+0x2b0>)
 8002c90:	f001 f89a 	bl	8003dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002c94:	2302      	movs	r3, #2
 8002c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c98:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4808      	ldr	r0, [pc, #32]	; (8002ccc <MX_GPIO_Init+0x2a4>)
 8002caa:	f001 f88d 	bl	8003dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	2017      	movs	r0, #23
 8002cb4:	f000 fcd5 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cb8:	2017      	movs	r0, #23
 8002cba:	f000 fcee 	bl	800369a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cbe:	bf00      	nop
 8002cc0:	3730      	adds	r7, #48	; 0x30
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40020800 	.word	0x40020800
 8002cd4:	40020400 	.word	0x40020400
 8002cd8:	40020c00 	.word	0x40020c00
 8002cdc:	40020000 	.word	0x40020000

08002ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce4:	b672      	cpsid	i
}
 8002ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ce8:	e7fe      	b.n	8002ce8 <Error_Handler+0x8>
	...

08002cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <HAL_MspInit+0x4c>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <HAL_MspInit+0x4c>)
 8002cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d00:	6453      	str	r3, [r2, #68]	; 0x44
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_MspInit+0x4c>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <HAL_MspInit+0x4c>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a08      	ldr	r2, [pc, #32]	; (8002d38 <HAL_MspInit+0x4c>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_MspInit+0x4c>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800

08002d3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	; 0x28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <HAL_I2C_MspInit+0x84>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d12c      	bne.n	8002db8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <HAL_I2C_MspInit+0x88>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a17      	ldr	r2, [pc, #92]	; (8002dc4 <HAL_I2C_MspInit+0x88>)
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <HAL_I2C_MspInit+0x88>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002d7a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d80:	2312      	movs	r3, #18
 8002d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d84:	2301      	movs	r3, #1
 8002d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	4619      	mov	r1, r3
 8002d96:	480c      	ldr	r0, [pc, #48]	; (8002dc8 <HAL_I2C_MspInit+0x8c>)
 8002d98:	f001 f816 	bl	8003dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_I2C_MspInit+0x88>)
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <HAL_I2C_MspInit+0x88>)
 8002da6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002daa:	6413      	str	r3, [r2, #64]	; 0x40
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_I2C_MspInit+0x88>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002db8:	bf00      	nop
 8002dba:	3728      	adds	r7, #40	; 0x28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40005400 	.word	0x40005400
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40020400 	.word	0x40020400

08002dcc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08e      	sub	sp, #56	; 0x38
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a31      	ldr	r2, [pc, #196]	; (8002ebc <HAL_I2S_MspInit+0xf0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d15a      	bne.n	8002eb2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002e00:	23c0      	movs	r3, #192	; 0xc0
 8002e02:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002e04:	2302      	movs	r3, #2
 8002e06:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f003 fed5 	bl	8006bbc <HAL_RCCEx_PeriphCLKConfig>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002e18:	f7ff ff62 	bl	8002ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_I2S_MspInit+0xf4>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	4a26      	ldr	r2, [pc, #152]	; (8002ec0 <HAL_I2S_MspInit+0xf4>)
 8002e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2c:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <HAL_I2S_MspInit+0xf4>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_I2S_MspInit+0xf4>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	4a1f      	ldr	r2, [pc, #124]	; (8002ec0 <HAL_I2S_MspInit+0xf4>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6313      	str	r3, [r2, #48]	; 0x30
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HAL_I2S_MspInit+0xf4>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e54:	2300      	movs	r3, #0
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_I2S_MspInit+0xf4>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <HAL_I2S_MspInit+0xf4>)
 8002e5e:	f043 0304 	orr.w	r3, r3, #4
 8002e62:	6313      	str	r3, [r2, #48]	; 0x30
 8002e64:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <HAL_I2S_MspInit+0xf4>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002e70:	2310      	movs	r3, #16
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e80:	2306      	movs	r3, #6
 8002e82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e88:	4619      	mov	r1, r3
 8002e8a:	480e      	ldr	r0, [pc, #56]	; (8002ec4 <HAL_I2S_MspInit+0xf8>)
 8002e8c:	f000 ff9c 	bl	8003dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002e90:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ea2:	2306      	movs	r3, #6
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4806      	ldr	r0, [pc, #24]	; (8002ec8 <HAL_I2S_MspInit+0xfc>)
 8002eae:	f000 ff8b 	bl	8003dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002eb2:	bf00      	nop
 8002eb4:	3738      	adds	r7, #56	; 0x38
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40003c00 	.word	0x40003c00
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40020000 	.word	0x40020000
 8002ec8:	40020800 	.word	0x40020800

08002ecc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08c      	sub	sp, #48	; 0x30
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 031c 	add.w	r3, r7, #28
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a64      	ldr	r2, [pc, #400]	; (800307c <HAL_SPI_MspInit+0x1b0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d12c      	bne.n	8002f48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	4b63      	ldr	r3, [pc, #396]	; (8003080 <HAL_SPI_MspInit+0x1b4>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	4a62      	ldr	r2, [pc, #392]	; (8003080 <HAL_SPI_MspInit+0x1b4>)
 8002ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002efc:	6453      	str	r3, [r2, #68]	; 0x44
 8002efe:	4b60      	ldr	r3, [pc, #384]	; (8003080 <HAL_SPI_MspInit+0x1b4>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	4b5c      	ldr	r3, [pc, #368]	; (8003080 <HAL_SPI_MspInit+0x1b4>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a5b      	ldr	r2, [pc, #364]	; (8003080 <HAL_SPI_MspInit+0x1b4>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b59      	ldr	r3, [pc, #356]	; (8003080 <HAL_SPI_MspInit+0x1b4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002f26:	23e0      	movs	r3, #224	; 0xe0
 8002f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f36:	2305      	movs	r3, #5
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3a:	f107 031c 	add.w	r3, r7, #28
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4850      	ldr	r0, [pc, #320]	; (8003084 <HAL_SPI_MspInit+0x1b8>)
 8002f42:	f000 ff41 	bl	8003dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f46:	e094      	b.n	8003072 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a4e      	ldr	r2, [pc, #312]	; (8003088 <HAL_SPI_MspInit+0x1bc>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	f040 808f 	bne.w	8003072 <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	4b49      	ldr	r3, [pc, #292]	; (8003080 <HAL_SPI_MspInit+0x1b4>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	4a48      	ldr	r2, [pc, #288]	; (8003080 <HAL_SPI_MspInit+0x1b4>)
 8002f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f62:	6413      	str	r3, [r2, #64]	; 0x40
 8002f64:	4b46      	ldr	r3, [pc, #280]	; (8003080 <HAL_SPI_MspInit+0x1b4>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	4b42      	ldr	r3, [pc, #264]	; (8003080 <HAL_SPI_MspInit+0x1b4>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	4a41      	ldr	r2, [pc, #260]	; (8003080 <HAL_SPI_MspInit+0x1b4>)
 8002f7a:	f043 0302 	orr.w	r3, r3, #2
 8002f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f80:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <HAL_SPI_MspInit+0x1b4>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f8c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f9e:	2305      	movs	r3, #5
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa2:	f107 031c 	add.w	r3, r7, #28
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4838      	ldr	r0, [pc, #224]	; (800308c <HAL_SPI_MspInit+0x1c0>)
 8002faa:	f000 ff0d 	bl	8003dc8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002fae:	4b38      	ldr	r3, [pc, #224]	; (8003090 <HAL_SPI_MspInit+0x1c4>)
 8002fb0:	4a38      	ldr	r2, [pc, #224]	; (8003094 <HAL_SPI_MspInit+0x1c8>)
 8002fb2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002fb4:	4b36      	ldr	r3, [pc, #216]	; (8003090 <HAL_SPI_MspInit+0x1c4>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fba:	4b35      	ldr	r3, [pc, #212]	; (8003090 <HAL_SPI_MspInit+0x1c4>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fc0:	4b33      	ldr	r3, [pc, #204]	; (8003090 <HAL_SPI_MspInit+0x1c4>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fc6:	4b32      	ldr	r3, [pc, #200]	; (8003090 <HAL_SPI_MspInit+0x1c4>)
 8002fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fcc:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <HAL_SPI_MspInit+0x1c4>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fd4:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_SPI_MspInit+0x1c4>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_SPI_MspInit+0x1c4>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_SPI_MspInit+0x1c4>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <HAL_SPI_MspInit+0x1c4>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002fec:	4828      	ldr	r0, [pc, #160]	; (8003090 <HAL_SPI_MspInit+0x1c4>)
 8002fee:	f000 fb6f 	bl	80036d0 <HAL_DMA_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8002ff8:	f7ff fe72 	bl	8002ce0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a24      	ldr	r2, [pc, #144]	; (8003090 <HAL_SPI_MspInit+0x1c4>)
 8003000:	64da      	str	r2, [r3, #76]	; 0x4c
 8003002:	4a23      	ldr	r2, [pc, #140]	; (8003090 <HAL_SPI_MspInit+0x1c4>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003008:	4b23      	ldr	r3, [pc, #140]	; (8003098 <HAL_SPI_MspInit+0x1cc>)
 800300a:	4a24      	ldr	r2, [pc, #144]	; (800309c <HAL_SPI_MspInit+0x1d0>)
 800300c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800300e:	4b22      	ldr	r3, [pc, #136]	; (8003098 <HAL_SPI_MspInit+0x1cc>)
 8003010:	2200      	movs	r2, #0
 8003012:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003014:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_SPI_MspInit+0x1cc>)
 8003016:	2240      	movs	r2, #64	; 0x40
 8003018:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800301a:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <HAL_SPI_MspInit+0x1cc>)
 800301c:	2200      	movs	r2, #0
 800301e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_SPI_MspInit+0x1cc>)
 8003022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003026:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_SPI_MspInit+0x1cc>)
 800302a:	2200      	movs	r2, #0
 800302c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800302e:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <HAL_SPI_MspInit+0x1cc>)
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_SPI_MspInit+0x1cc>)
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800303a:	4b17      	ldr	r3, [pc, #92]	; (8003098 <HAL_SPI_MspInit+0x1cc>)
 800303c:	2200      	movs	r2, #0
 800303e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003040:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_SPI_MspInit+0x1cc>)
 8003042:	2200      	movs	r2, #0
 8003044:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003046:	4814      	ldr	r0, [pc, #80]	; (8003098 <HAL_SPI_MspInit+0x1cc>)
 8003048:	f000 fb42 	bl	80036d0 <HAL_DMA_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 8003052:	f7ff fe45 	bl	8002ce0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a0f      	ldr	r2, [pc, #60]	; (8003098 <HAL_SPI_MspInit+0x1cc>)
 800305a:	649a      	str	r2, [r3, #72]	; 0x48
 800305c:	4a0e      	ldr	r2, [pc, #56]	; (8003098 <HAL_SPI_MspInit+0x1cc>)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	2024      	movs	r0, #36	; 0x24
 8003068:	f000 fafb 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800306c:	2024      	movs	r0, #36	; 0x24
 800306e:	f000 fb14 	bl	800369a <HAL_NVIC_EnableIRQ>
}
 8003072:	bf00      	nop
 8003074:	3730      	adds	r7, #48	; 0x30
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40013000 	.word	0x40013000
 8003080:	40023800 	.word	0x40023800
 8003084:	40020000 	.word	0x40020000
 8003088:	40003800 	.word	0x40003800
 800308c:	40020400 	.word	0x40020400
 8003090:	200004cc 	.word	0x200004cc
 8003094:	40026058 	.word	0x40026058
 8003098:	2000052c 	.word	0x2000052c
 800309c:	40026070 	.word	0x40026070

080030a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <HAL_TIM_Base_MspInit+0x3c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10d      	bne.n	80030ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_TIM_Base_MspInit+0x40>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_TIM_Base_MspInit+0x40>)
 80030bc:	f043 0310 	orr.w	r3, r3, #16
 80030c0:	6413      	str	r3, [r2, #64]	; 0x40
 80030c2:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_TIM_Base_MspInit+0x40>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40001000 	.word	0x40001000
 80030e0:	40023800 	.word	0x40023800

080030e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	; 0x28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a34      	ldr	r2, [pc, #208]	; (80031d4 <HAL_UART_MspInit+0xf0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d161      	bne.n	80031ca <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	4b33      	ldr	r3, [pc, #204]	; (80031d8 <HAL_UART_MspInit+0xf4>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	4a32      	ldr	r2, [pc, #200]	; (80031d8 <HAL_UART_MspInit+0xf4>)
 8003110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003114:	6413      	str	r3, [r2, #64]	; 0x40
 8003116:	4b30      	ldr	r3, [pc, #192]	; (80031d8 <HAL_UART_MspInit+0xf4>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <HAL_UART_MspInit+0xf4>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <HAL_UART_MspInit+0xf4>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6313      	str	r3, [r2, #48]	; 0x30
 8003132:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <HAL_UART_MspInit+0xf4>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800313e:	230c      	movs	r3, #12
 8003140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003142:	2302      	movs	r3, #2
 8003144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314a:	2303      	movs	r3, #3
 800314c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800314e:	2307      	movs	r3, #7
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003152:	f107 0314 	add.w	r3, r7, #20
 8003156:	4619      	mov	r1, r3
 8003158:	4820      	ldr	r0, [pc, #128]	; (80031dc <HAL_UART_MspInit+0xf8>)
 800315a:	f000 fe35 	bl	8003dc8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800315e:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <HAL_UART_MspInit+0xfc>)
 8003160:	4a20      	ldr	r2, [pc, #128]	; (80031e4 <HAL_UART_MspInit+0x100>)
 8003162:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003164:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <HAL_UART_MspInit+0xfc>)
 8003166:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800316a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800316c:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <HAL_UART_MspInit+0xfc>)
 800316e:	2240      	movs	r2, #64	; 0x40
 8003170:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003172:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_UART_MspInit+0xfc>)
 8003174:	2200      	movs	r2, #0
 8003176:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_UART_MspInit+0xfc>)
 800317a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800317e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003180:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <HAL_UART_MspInit+0xfc>)
 8003182:	2200      	movs	r2, #0
 8003184:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <HAL_UART_MspInit+0xfc>)
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800318c:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <HAL_UART_MspInit+0xfc>)
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003192:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <HAL_UART_MspInit+0xfc>)
 8003194:	2200      	movs	r2, #0
 8003196:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_UART_MspInit+0xfc>)
 800319a:	2200      	movs	r2, #0
 800319c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800319e:	4810      	ldr	r0, [pc, #64]	; (80031e0 <HAL_UART_MspInit+0xfc>)
 80031a0:	f000 fa96 	bl	80036d0 <HAL_DMA_Init>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80031aa:	f7ff fd99 	bl	8002ce0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <HAL_UART_MspInit+0xfc>)
 80031b2:	635a      	str	r2, [r3, #52]	; 0x34
 80031b4:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <HAL_UART_MspInit+0xfc>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	2026      	movs	r0, #38	; 0x26
 80031c0:	f000 fa4f 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031c4:	2026      	movs	r0, #38	; 0x26
 80031c6:	f000 fa68 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031ca:	bf00      	nop
 80031cc:	3728      	adds	r7, #40	; 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40004400 	.word	0x40004400
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40020000 	.word	0x40020000
 80031e0:	20000618 	.word	0x20000618
 80031e4:	400260a0 	.word	0x400260a0

080031e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031ec:	e7fe      	b.n	80031ec <NMI_Handler+0x4>

080031ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031f2:	e7fe      	b.n	80031f2 <HardFault_Handler+0x4>

080031f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <MemManage_Handler+0x4>

080031fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031fe:	e7fe      	b.n	80031fe <BusFault_Handler+0x4>

08003200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003204:	e7fe      	b.n	8003204 <UsageFault_Handler+0x4>

08003206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003234:	f000 f8f6 	bl	8003424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003238:	bf00      	nop
 800323a:	bd80      	pop	{r7, pc}

0800323c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003240:	4802      	ldr	r0, [pc, #8]	; (800324c <DMA1_Stream3_IRQHandler+0x10>)
 8003242:	f000 fb85 	bl	8003950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	200004cc 	.word	0x200004cc

08003250 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <DMA1_Stream4_IRQHandler+0x10>)
 8003256:	f000 fb7b 	bl	8003950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	2000052c 	.word	0x2000052c

08003264 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003268:	4802      	ldr	r0, [pc, #8]	; (8003274 <DMA1_Stream6_IRQHandler+0x10>)
 800326a:	f000 fb71 	bl	8003950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000618 	.word	0x20000618

08003278 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX1280_INT_Pin);
 800327c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003280:	f000 ff8a 	bl	8004198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003284:	bf00      	nop
 8003286:	bd80      	pop	{r7, pc}

08003288 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800328c:	4802      	ldr	r0, [pc, #8]	; (8003298 <SPI2_IRQHandler+0x10>)
 800328e:	f004 f801 	bl	8007294 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000474 	.word	0x20000474

0800329c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032a0:	4802      	ldr	r0, [pc, #8]	; (80032ac <USART2_IRQHandler+0x10>)
 80032a2:	f004 fb99 	bl	80079d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200005d4 	.word	0x200005d4

080032b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80032b4:	4802      	ldr	r0, [pc, #8]	; (80032c0 <OTG_FS_IRQHandler+0x10>)
 80032b6:	f001 febb 	bl	8005030 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20001b5c 	.word	0x20001b5c

080032c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return 1;
 80032c8:	2301      	movs	r3, #1
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <_kill>:

int _kill(int pid, int sig)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032de:	f009 fb95 	bl	800ca0c <__errno>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2216      	movs	r2, #22
 80032e6:	601a      	str	r2, [r3, #0]
  return -1;
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_exit>:

void _exit (int status)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff ffe7 	bl	80032d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003306:	e7fe      	b.n	8003306 <_exit+0x12>

08003308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <SystemInit+0x20>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	4a05      	ldr	r2, [pc, #20]	; (8003328 <SystemInit+0x20>)
 8003314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800332c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003364 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003330:	480d      	ldr	r0, [pc, #52]	; (8003368 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003332:	490e      	ldr	r1, [pc, #56]	; (800336c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003334:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003338:	e002      	b.n	8003340 <LoopCopyDataInit>

0800333a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800333a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800333c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800333e:	3304      	adds	r3, #4

08003340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003344:	d3f9      	bcc.n	800333a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003346:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003348:	4c0b      	ldr	r4, [pc, #44]	; (8003378 <LoopFillZerobss+0x26>)
  movs r3, #0
 800334a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800334c:	e001      	b.n	8003352 <LoopFillZerobss>

0800334e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800334e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003350:	3204      	adds	r2, #4

08003352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003354:	d3fb      	bcc.n	800334e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003356:	f7ff ffd7 	bl	8003308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800335a:	f009 fb5d 	bl	800ca18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800335e:	f7ff f983 	bl	8002668 <main>
  bx  lr    
 8003362:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800336c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8003370:	0800cd44 	.word	0x0800cd44
  ldr r2, =_sbss
 8003374:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8003378:	20002294 	.word	0x20002294

0800337c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800337c:	e7fe      	b.n	800337c <ADC_IRQHandler>
	...

08003380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_Init+0x40>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <HAL_Init+0x40>)
 800338a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800338e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_Init+0x40>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <HAL_Init+0x40>)
 8003396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800339a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <HAL_Init+0x40>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <HAL_Init+0x40>)
 80033a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033a8:	2003      	movs	r0, #3
 80033aa:	f000 f94f 	bl	800364c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ae:	2000      	movs	r0, #0
 80033b0:	f000 f808 	bl	80033c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033b4:	f7ff fc9a 	bl	8002cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023c00 	.word	0x40023c00

080033c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_InitTick+0x54>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_InitTick+0x58>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	4619      	mov	r1, r3
 80033d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033da:	fbb3 f3f1 	udiv	r3, r3, r1
 80033de:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f967 	bl	80036b6 <HAL_SYSTICK_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e00e      	b.n	8003410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b0f      	cmp	r3, #15
 80033f6:	d80a      	bhi.n	800340e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033f8:	2200      	movs	r2, #0
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	f000 f92f 	bl	8003662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003404:	4a06      	ldr	r2, [pc, #24]	; (8003420 <HAL_InitTick+0x5c>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	e000      	b.n	8003410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000024 	.word	0x20000024
 800341c:	2000002c 	.word	0x2000002c
 8003420:	20000028 	.word	0x20000028

08003424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_IncTick+0x20>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_IncTick+0x24>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4413      	add	r3, r2
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_IncTick+0x24>)
 8003436:	6013      	str	r3, [r2, #0]
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	2000002c 	.word	0x2000002c
 8003448:	20000678 	.word	0x20000678

0800344c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return uwTick;
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_GetTick+0x14>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000678 	.word	0x20000678

08003464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800346c:	f7ff ffee 	bl	800344c <HAL_GetTick>
 8003470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d005      	beq.n	800348a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_Delay+0x44>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800348a:	bf00      	nop
 800348c:	f7ff ffde 	bl	800344c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	429a      	cmp	r2, r3
 800349a:	d8f7      	bhi.n	800348c <HAL_Delay+0x28>
  {
  }
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	2000002c 	.word	0x2000002c

080034ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <__NVIC_SetPriorityGrouping+0x44>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034c8:	4013      	ands	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034de:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <__NVIC_SetPriorityGrouping+0x44>)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	60d3      	str	r3, [r2, #12]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <__NVIC_GetPriorityGrouping+0x18>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	f003 0307 	and.w	r3, r3, #7
}
 8003502:	4618      	mov	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	2b00      	cmp	r3, #0
 8003520:	db0b      	blt.n	800353a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	4907      	ldr	r1, [pc, #28]	; (8003548 <__NVIC_EnableIRQ+0x38>)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2001      	movs	r0, #1
 8003532:	fa00 f202 	lsl.w	r2, r0, r2
 8003536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000e100 	.word	0xe000e100

0800354c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	6039      	str	r1, [r7, #0]
 8003556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355c:	2b00      	cmp	r3, #0
 800355e:	db0a      	blt.n	8003576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	b2da      	uxtb	r2, r3
 8003564:	490c      	ldr	r1, [pc, #48]	; (8003598 <__NVIC_SetPriority+0x4c>)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	0112      	lsls	r2, r2, #4
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	440b      	add	r3, r1
 8003570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003574:	e00a      	b.n	800358c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4908      	ldr	r1, [pc, #32]	; (800359c <__NVIC_SetPriority+0x50>)
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	3b04      	subs	r3, #4
 8003584:	0112      	lsls	r2, r2, #4
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	440b      	add	r3, r1
 800358a:	761a      	strb	r2, [r3, #24]
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000e100 	.word	0xe000e100
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	; 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f1c3 0307 	rsb	r3, r3, #7
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	bf28      	it	cs
 80035be:	2304      	movcs	r3, #4
 80035c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3304      	adds	r3, #4
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d902      	bls.n	80035d0 <NVIC_EncodePriority+0x30>
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3b03      	subs	r3, #3
 80035ce:	e000      	b.n	80035d2 <NVIC_EncodePriority+0x32>
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	f04f 32ff 	mov.w	r2, #4294967295
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43da      	mvns	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	401a      	ands	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e8:	f04f 31ff 	mov.w	r1, #4294967295
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	43d9      	mvns	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	4313      	orrs	r3, r2
         );
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3724      	adds	r7, #36	; 0x24
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003618:	d301      	bcc.n	800361e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800361a:	2301      	movs	r3, #1
 800361c:	e00f      	b.n	800363e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800361e:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <SysTick_Config+0x40>)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003626:	210f      	movs	r1, #15
 8003628:	f04f 30ff 	mov.w	r0, #4294967295
 800362c:	f7ff ff8e 	bl	800354c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <SysTick_Config+0x40>)
 8003632:	2200      	movs	r2, #0
 8003634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003636:	4b04      	ldr	r3, [pc, #16]	; (8003648 <SysTick_Config+0x40>)
 8003638:	2207      	movs	r2, #7
 800363a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	e000e010 	.word	0xe000e010

0800364c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ff29 	bl	80034ac <__NVIC_SetPriorityGrouping>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
 8003668:	4603      	mov	r3, r0
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003674:	f7ff ff3e 	bl	80034f4 <__NVIC_GetPriorityGrouping>
 8003678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	6978      	ldr	r0, [r7, #20]
 8003680:	f7ff ff8e 	bl	80035a0 <NVIC_EncodePriority>
 8003684:	4602      	mov	r2, r0
 8003686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff5d 	bl	800354c <__NVIC_SetPriority>
}
 8003692:	bf00      	nop
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	4603      	mov	r3, r0
 80036a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ff31 	bl	8003510 <__NVIC_EnableIRQ>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ffa2 	bl	8003608 <SysTick_Config>
 80036c4:	4603      	mov	r3, r0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036dc:	f7ff feb6 	bl	800344c <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e099      	b.n	8003820 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800370c:	e00f      	b.n	800372e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800370e:	f7ff fe9d 	bl	800344c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b05      	cmp	r3, #5
 800371a:	d908      	bls.n	800372e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2203      	movs	r2, #3
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e078      	b.n	8003820 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e8      	bne.n	800370e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4b38      	ldr	r3, [pc, #224]	; (8003828 <HAL_DMA_Init+0x158>)
 8003748:	4013      	ands	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800375a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	2b04      	cmp	r3, #4
 8003786:	d107      	bne.n	8003798 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	4313      	orrs	r3, r2
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f023 0307 	bic.w	r3, r3, #7
 80037ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d117      	bne.n	80037f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fa7b 	bl	8003cd0 <DMA_CheckFifoParam>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2240      	movs	r2, #64	; 0x40
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037ee:	2301      	movs	r3, #1
 80037f0:	e016      	b.n	8003820 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fa32 	bl	8003c64 <DMA_CalcBaseAndBitshift>
 8003800:	4603      	mov	r3, r0
 8003802:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	223f      	movs	r2, #63	; 0x3f
 800380a:	409a      	lsls	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	f010803f 	.word	0xf010803f

0800382c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800383a:	f7ff fe07 	bl	800344c <HAL_GetTick>
 800383e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d008      	beq.n	800385e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2280      	movs	r2, #128	; 0x80
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e052      	b.n	8003904 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0216 	bic.w	r2, r2, #22
 800386c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800387c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d103      	bne.n	800388e <HAL_DMA_Abort+0x62>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0208 	bic.w	r2, r2, #8
 800389c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ae:	e013      	b.n	80038d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038b0:	f7ff fdcc 	bl	800344c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b05      	cmp	r3, #5
 80038bc:	d90c      	bls.n	80038d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2203      	movs	r2, #3
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e015      	b.n	8003904 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1e4      	bne.n	80038b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ea:	223f      	movs	r2, #63	; 0x3f
 80038ec:	409a      	lsls	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d004      	beq.n	800392a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2280      	movs	r2, #128	; 0x80
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e00c      	b.n	8003944 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2205      	movs	r2, #5
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800395c:	4b8e      	ldr	r3, [pc, #568]	; (8003b98 <HAL_DMA_IRQHandler+0x248>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a8e      	ldr	r2, [pc, #568]	; (8003b9c <HAL_DMA_IRQHandler+0x24c>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	0a9b      	lsrs	r3, r3, #10
 8003968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	2208      	movs	r2, #8
 800397c:	409a      	lsls	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4013      	ands	r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d01a      	beq.n	80039bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d013      	beq.n	80039bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0204 	bic.w	r2, r2, #4
 80039a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	2208      	movs	r2, #8
 80039aa:	409a      	lsls	r2, r3
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	f043 0201 	orr.w	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	2201      	movs	r2, #1
 80039c2:	409a      	lsls	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d012      	beq.n	80039f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	2201      	movs	r2, #1
 80039e0:	409a      	lsls	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ea:	f043 0202 	orr.w	r2, r3, #2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	2204      	movs	r2, #4
 80039f8:	409a      	lsls	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d012      	beq.n	8003a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00b      	beq.n	8003a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a14:	2204      	movs	r2, #4
 8003a16:	409a      	lsls	r2, r3
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f043 0204 	orr.w	r2, r3, #4
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d043      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d03c      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d018      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d108      	bne.n	8003a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d024      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4798      	blx	r3
 8003a7e:	e01f      	b.n	8003ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01b      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	4798      	blx	r3
 8003a90:	e016      	b.n	8003ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d107      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0208 	bic.w	r2, r2, #8
 8003aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 808f 	beq.w	8003bf0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8087 	beq.w	8003bf0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d136      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0216 	bic.w	r2, r2, #22
 8003b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d103      	bne.n	8003b2a <HAL_DMA_IRQHandler+0x1da>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0208 	bic.w	r2, r2, #8
 8003b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3e:	223f      	movs	r2, #63	; 0x3f
 8003b40:	409a      	lsls	r2, r3
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d07e      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	4798      	blx	r3
        }
        return;
 8003b66:	e079      	b.n	8003c5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d01d      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10d      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d031      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
 8003b94:	e02c      	b.n	8003bf0 <HAL_DMA_IRQHandler+0x2a0>
 8003b96:	bf00      	nop
 8003b98:	20000024 	.word	0x20000024
 8003b9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d023      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	4798      	blx	r3
 8003bb0:	e01e      	b.n	8003bf0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10f      	bne.n	8003be0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0210 	bic.w	r2, r2, #16
 8003bce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d032      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d022      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2205      	movs	r2, #5
 8003c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0201 	bic.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d307      	bcc.n	8003c38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f2      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x2cc>
 8003c36:	e000      	b.n	8003c3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	4798      	blx	r3
 8003c5a:	e000      	b.n	8003c5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c5c:	bf00      	nop
    }
  }
}
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	3b10      	subs	r3, #16
 8003c74:	4a14      	ldr	r2, [pc, #80]	; (8003cc8 <DMA_CalcBaseAndBitshift+0x64>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c7e:	4a13      	ldr	r2, [pc, #76]	; (8003ccc <DMA_CalcBaseAndBitshift+0x68>)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d909      	bls.n	8003ca6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c9a:	f023 0303 	bic.w	r3, r3, #3
 8003c9e:	1d1a      	adds	r2, r3, #4
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ca4:	e007      	b.n	8003cb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	aaaaaaab 	.word	0xaaaaaaab
 8003ccc:	0800cd20 	.word	0x0800cd20

08003cd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d11f      	bne.n	8003d2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d856      	bhi.n	8003d9e <DMA_CheckFifoParam+0xce>
 8003cf0:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <DMA_CheckFifoParam+0x28>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d09 	.word	0x08003d09
 8003cfc:	08003d1b 	.word	0x08003d1b
 8003d00:	08003d09 	.word	0x08003d09
 8003d04:	08003d9f 	.word	0x08003d9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d046      	beq.n	8003da2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d18:	e043      	b.n	8003da2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d22:	d140      	bne.n	8003da6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d28:	e03d      	b.n	8003da6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d32:	d121      	bne.n	8003d78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d837      	bhi.n	8003daa <DMA_CheckFifoParam+0xda>
 8003d3a:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <DMA_CheckFifoParam+0x70>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	08003d57 	.word	0x08003d57
 8003d48:	08003d51 	.word	0x08003d51
 8003d4c:	08003d69 	.word	0x08003d69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      break;
 8003d54:	e030      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d025      	beq.n	8003dae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d66:	e022      	b.n	8003dae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d70:	d11f      	bne.n	8003db2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d76:	e01c      	b.n	8003db2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d903      	bls.n	8003d86 <DMA_CheckFifoParam+0xb6>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d003      	beq.n	8003d8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d84:	e018      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8a:	e015      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00e      	beq.n	8003db6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d9c:	e00b      	b.n	8003db6 <DMA_CheckFifoParam+0xe6>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e00a      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      break;
 8003da2:	bf00      	nop
 8003da4:	e008      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      break;
 8003da6:	bf00      	nop
 8003da8:	e006      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      break;
 8003daa:	bf00      	nop
 8003dac:	e004      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      break;
 8003dae:	bf00      	nop
 8003db0:	e002      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003db2:	bf00      	nop
 8003db4:	e000      	b.n	8003db8 <DMA_CheckFifoParam+0xe8>
      break;
 8003db6:	bf00      	nop
    }
  } 
  
  return status; 
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop

08003dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	e16b      	b.n	80040bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003de4:	2201      	movs	r2, #1
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	f040 815a 	bne.w	80040b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d005      	beq.n	8003e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d130      	bne.n	8003e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	2203      	movs	r2, #3
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e50:	2201      	movs	r2, #1
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	f003 0201 	and.w	r2, r3, #1
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d017      	beq.n	8003eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	2203      	movs	r2, #3
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d123      	bne.n	8003f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	08da      	lsrs	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3208      	adds	r2, #8
 8003ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	220f      	movs	r2, #15
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	08da      	lsrs	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3208      	adds	r2, #8
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2203      	movs	r2, #3
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0203 	and.w	r2, r3, #3
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80b4 	beq.w	80040b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	4b60      	ldr	r3, [pc, #384]	; (80040d4 <HAL_GPIO_Init+0x30c>)
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	4a5f      	ldr	r2, [pc, #380]	; (80040d4 <HAL_GPIO_Init+0x30c>)
 8003f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f5e:	4b5d      	ldr	r3, [pc, #372]	; (80040d4 <HAL_GPIO_Init+0x30c>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f6a:	4a5b      	ldr	r2, [pc, #364]	; (80040d8 <HAL_GPIO_Init+0x310>)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	3302      	adds	r3, #2
 8003f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	220f      	movs	r2, #15
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a52      	ldr	r2, [pc, #328]	; (80040dc <HAL_GPIO_Init+0x314>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d02b      	beq.n	8003fee <HAL_GPIO_Init+0x226>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a51      	ldr	r2, [pc, #324]	; (80040e0 <HAL_GPIO_Init+0x318>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d025      	beq.n	8003fea <HAL_GPIO_Init+0x222>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a50      	ldr	r2, [pc, #320]	; (80040e4 <HAL_GPIO_Init+0x31c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01f      	beq.n	8003fe6 <HAL_GPIO_Init+0x21e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a4f      	ldr	r2, [pc, #316]	; (80040e8 <HAL_GPIO_Init+0x320>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d019      	beq.n	8003fe2 <HAL_GPIO_Init+0x21a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a4e      	ldr	r2, [pc, #312]	; (80040ec <HAL_GPIO_Init+0x324>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <HAL_GPIO_Init+0x216>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a4d      	ldr	r2, [pc, #308]	; (80040f0 <HAL_GPIO_Init+0x328>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00d      	beq.n	8003fda <HAL_GPIO_Init+0x212>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a4c      	ldr	r2, [pc, #304]	; (80040f4 <HAL_GPIO_Init+0x32c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <HAL_GPIO_Init+0x20e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a4b      	ldr	r2, [pc, #300]	; (80040f8 <HAL_GPIO_Init+0x330>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <HAL_GPIO_Init+0x20a>
 8003fce:	2307      	movs	r3, #7
 8003fd0:	e00e      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	e00c      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fd6:	2306      	movs	r3, #6
 8003fd8:	e00a      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fda:	2305      	movs	r3, #5
 8003fdc:	e008      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fde:	2304      	movs	r3, #4
 8003fe0:	e006      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e004      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e002      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_GPIO_Init+0x228>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	f002 0203 	and.w	r2, r2, #3
 8003ff6:	0092      	lsls	r2, r2, #2
 8003ff8:	4093      	lsls	r3, r2
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004000:	4935      	ldr	r1, [pc, #212]	; (80040d8 <HAL_GPIO_Init+0x310>)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	3302      	adds	r3, #2
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800400e:	4b3b      	ldr	r3, [pc, #236]	; (80040fc <HAL_GPIO_Init+0x334>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	43db      	mvns	r3, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004032:	4a32      	ldr	r2, [pc, #200]	; (80040fc <HAL_GPIO_Init+0x334>)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004038:	4b30      	ldr	r3, [pc, #192]	; (80040fc <HAL_GPIO_Init+0x334>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	43db      	mvns	r3, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800405c:	4a27      	ldr	r2, [pc, #156]	; (80040fc <HAL_GPIO_Init+0x334>)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004062:	4b26      	ldr	r3, [pc, #152]	; (80040fc <HAL_GPIO_Init+0x334>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004086:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <HAL_GPIO_Init+0x334>)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800408c:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_GPIO_Init+0x334>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040b0:	4a12      	ldr	r2, [pc, #72]	; (80040fc <HAL_GPIO_Init+0x334>)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b0f      	cmp	r3, #15
 80040c0:	f67f ae90 	bls.w	8003de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	3724      	adds	r7, #36	; 0x24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40013800 	.word	0x40013800
 80040dc:	40020000 	.word	0x40020000
 80040e0:	40020400 	.word	0x40020400
 80040e4:	40020800 	.word	0x40020800
 80040e8:	40020c00 	.word	0x40020c00
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40021400 	.word	0x40021400
 80040f4:	40021800 	.word	0x40021800
 80040f8:	40021c00 	.word	0x40021c00
 80040fc:	40013c00 	.word	0x40013c00

08004100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	887b      	ldrh	r3, [r7, #2]
 8004112:	4013      	ands	r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
 800411c:	e001      	b.n	8004122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004122:	7bfb      	ldrb	r3, [r7, #15]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
 800413c:	4613      	mov	r3, r2
 800413e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004140:	787b      	ldrb	r3, [r7, #1]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004146:	887a      	ldrh	r2, [r7, #2]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800414c:	e003      	b.n	8004156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800414e:	887b      	ldrh	r3, [r7, #2]
 8004150:	041a      	lsls	r2, r3, #16
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	619a      	str	r2, [r3, #24]
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004174:	887a      	ldrh	r2, [r7, #2]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4013      	ands	r3, r2
 800417a:	041a      	lsls	r2, r3, #16
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	43d9      	mvns	r1, r3
 8004180:	887b      	ldrh	r3, [r7, #2]
 8004182:	400b      	ands	r3, r1
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	619a      	str	r2, [r3, #24]
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041a2:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d006      	beq.n	80041bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041ae:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fc ff44 	bl	8001044 <HAL_GPIO_EXTI_Callback>
  }
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40013c00 	.word	0x40013c00

080041c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e12b      	b.n	8004432 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fe fda4 	bl	8002d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2224      	movs	r2, #36	; 0x24
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0201 	bic.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800421a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800422a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800422c:	f002 fc9e 	bl	8006b6c <HAL_RCC_GetPCLK1Freq>
 8004230:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	4a81      	ldr	r2, [pc, #516]	; (800443c <HAL_I2C_Init+0x274>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d807      	bhi.n	800424c <HAL_I2C_Init+0x84>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4a80      	ldr	r2, [pc, #512]	; (8004440 <HAL_I2C_Init+0x278>)
 8004240:	4293      	cmp	r3, r2
 8004242:	bf94      	ite	ls
 8004244:	2301      	movls	r3, #1
 8004246:	2300      	movhi	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e006      	b.n	800425a <HAL_I2C_Init+0x92>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4a7d      	ldr	r2, [pc, #500]	; (8004444 <HAL_I2C_Init+0x27c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	bf94      	ite	ls
 8004254:	2301      	movls	r3, #1
 8004256:	2300      	movhi	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e0e7      	b.n	8004432 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a78      	ldr	r2, [pc, #480]	; (8004448 <HAL_I2C_Init+0x280>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	0c9b      	lsrs	r3, r3, #18
 800426c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4a6a      	ldr	r2, [pc, #424]	; (800443c <HAL_I2C_Init+0x274>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d802      	bhi.n	800429c <HAL_I2C_Init+0xd4>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	3301      	adds	r3, #1
 800429a:	e009      	b.n	80042b0 <HAL_I2C_Init+0xe8>
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	4a69      	ldr	r2, [pc, #420]	; (800444c <HAL_I2C_Init+0x284>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	099b      	lsrs	r3, r3, #6
 80042ae:	3301      	adds	r3, #1
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	495c      	ldr	r1, [pc, #368]	; (800443c <HAL_I2C_Init+0x274>)
 80042cc:	428b      	cmp	r3, r1
 80042ce:	d819      	bhi.n	8004304 <HAL_I2C_Init+0x13c>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1e59      	subs	r1, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fbb1 f3f3 	udiv	r3, r1, r3
 80042de:	1c59      	adds	r1, r3, #1
 80042e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042e4:	400b      	ands	r3, r1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_I2C_Init+0x138>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1e59      	subs	r1, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80042f8:	3301      	adds	r3, #1
 80042fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042fe:	e051      	b.n	80043a4 <HAL_I2C_Init+0x1dc>
 8004300:	2304      	movs	r3, #4
 8004302:	e04f      	b.n	80043a4 <HAL_I2C_Init+0x1dc>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d111      	bne.n	8004330 <HAL_I2C_Init+0x168>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	1e58      	subs	r0, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6859      	ldr	r1, [r3, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	440b      	add	r3, r1
 800431a:	fbb0 f3f3 	udiv	r3, r0, r3
 800431e:	3301      	adds	r3, #1
 8004320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004324:	2b00      	cmp	r3, #0
 8004326:	bf0c      	ite	eq
 8004328:	2301      	moveq	r3, #1
 800432a:	2300      	movne	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	e012      	b.n	8004356 <HAL_I2C_Init+0x18e>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1e58      	subs	r0, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6859      	ldr	r1, [r3, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	0099      	lsls	r1, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	fbb0 f3f3 	udiv	r3, r0, r3
 8004346:	3301      	adds	r3, #1
 8004348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Init+0x196>
 800435a:	2301      	movs	r3, #1
 800435c:	e022      	b.n	80043a4 <HAL_I2C_Init+0x1dc>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10e      	bne.n	8004384 <HAL_I2C_Init+0x1bc>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1e58      	subs	r0, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	440b      	add	r3, r1
 8004374:	fbb0 f3f3 	udiv	r3, r0, r3
 8004378:	3301      	adds	r3, #1
 800437a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004382:	e00f      	b.n	80043a4 <HAL_I2C_Init+0x1dc>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	1e58      	subs	r0, r3, #1
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6859      	ldr	r1, [r3, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	0099      	lsls	r1, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	fbb0 f3f3 	udiv	r3, r0, r3
 800439a:	3301      	adds	r3, #1
 800439c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	6809      	ldr	r1, [r1, #0]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6911      	ldr	r1, [r2, #16]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	68d2      	ldr	r2, [r2, #12]
 80043de:	4311      	orrs	r1, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	000186a0 	.word	0x000186a0
 8004440:	001e847f 	.word	0x001e847f
 8004444:	003d08ff 	.word	0x003d08ff
 8004448:	431bde83 	.word	0x431bde83
 800444c:	10624dd3 	.word	0x10624dd3

08004450 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e128      	b.n	80046b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a90      	ldr	r2, [pc, #576]	; (80046bc <HAL_I2S_Init+0x26c>)
 800447a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7fe fca5 	bl	8002dcc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004498:	f023 030f 	bic.w	r3, r3, #15
 800449c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2202      	movs	r2, #2
 80044a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d060      	beq.n	8004570 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80044b6:	2310      	movs	r3, #16
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	e001      	b.n	80044c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80044bc:	2320      	movs	r3, #32
 80044be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d802      	bhi.n	80044ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80044ce:	2001      	movs	r0, #1
 80044d0:	f002 fc56 	bl	8006d80 <HAL_RCCEx_GetPeriphCLKFreq>
 80044d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044de:	d125      	bne.n	800452c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d010      	beq.n	800450a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	461a      	mov	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	3305      	adds	r3, #5
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	e01f      	b.n	800454a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	fbb2 f2f3 	udiv	r2, r2, r3
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	461a      	mov	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	3305      	adds	r3, #5
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	e00e      	b.n	800454a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	fbb2 f2f3 	udiv	r2, r2, r3
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	461a      	mov	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	3305      	adds	r3, #5
 8004548:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4a5c      	ldr	r2, [pc, #368]	; (80046c0 <HAL_I2S_Init+0x270>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	08db      	lsrs	r3, r3, #3
 8004554:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	085b      	lsrs	r3, r3, #1
 8004566:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	e003      	b.n	8004578 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004570:	2302      	movs	r3, #2
 8004572:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d902      	bls.n	8004584 <HAL_I2S_Init+0x134>
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	2bff      	cmp	r3, #255	; 0xff
 8004582:	d907      	bls.n	8004594 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	f043 0210 	orr.w	r2, r3, #16
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e08f      	b.n	80046b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	ea42 0103 	orr.w	r1, r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80045b2:	f023 030f 	bic.w	r3, r3, #15
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6851      	ldr	r1, [r2, #4]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6892      	ldr	r2, [r2, #8]
 80045be:	4311      	orrs	r1, r2
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	68d2      	ldr	r2, [r2, #12]
 80045c4:	4311      	orrs	r1, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6992      	ldr	r2, [r2, #24]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d161      	bne.n	80046a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a38      	ldr	r2, [pc, #224]	; (80046c4 <HAL_I2S_Init+0x274>)
 80045e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a37      	ldr	r2, [pc, #220]	; (80046c8 <HAL_I2S_Init+0x278>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d101      	bne.n	80045f4 <HAL_I2S_Init+0x1a4>
 80045f0:	4b36      	ldr	r3, [pc, #216]	; (80046cc <HAL_I2S_Init+0x27c>)
 80045f2:	e001      	b.n	80045f8 <HAL_I2S_Init+0x1a8>
 80045f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	4932      	ldr	r1, [pc, #200]	; (80046c8 <HAL_I2S_Init+0x278>)
 8004600:	428a      	cmp	r2, r1
 8004602:	d101      	bne.n	8004608 <HAL_I2S_Init+0x1b8>
 8004604:	4a31      	ldr	r2, [pc, #196]	; (80046cc <HAL_I2S_Init+0x27c>)
 8004606:	e001      	b.n	800460c <HAL_I2S_Init+0x1bc>
 8004608:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800460c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004610:	f023 030f 	bic.w	r3, r3, #15
 8004614:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2b      	ldr	r2, [pc, #172]	; (80046c8 <HAL_I2S_Init+0x278>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d101      	bne.n	8004624 <HAL_I2S_Init+0x1d4>
 8004620:	4b2a      	ldr	r3, [pc, #168]	; (80046cc <HAL_I2S_Init+0x27c>)
 8004622:	e001      	b.n	8004628 <HAL_I2S_Init+0x1d8>
 8004624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004628:	2202      	movs	r2, #2
 800462a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a25      	ldr	r2, [pc, #148]	; (80046c8 <HAL_I2S_Init+0x278>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d101      	bne.n	800463a <HAL_I2S_Init+0x1ea>
 8004636:	4b25      	ldr	r3, [pc, #148]	; (80046cc <HAL_I2S_Init+0x27c>)
 8004638:	e001      	b.n	800463e <HAL_I2S_Init+0x1ee>
 800463a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800464a:	d003      	beq.n	8004654 <HAL_I2S_Init+0x204>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d103      	bne.n	800465c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	e001      	b.n	8004660 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800465c:	2300      	movs	r3, #0
 800465e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800466a:	4313      	orrs	r3, r2
 800466c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004674:	4313      	orrs	r3, r2
 8004676:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800467e:	4313      	orrs	r3, r2
 8004680:	b29a      	uxth	r2, r3
 8004682:	897b      	ldrh	r3, [r7, #10]
 8004684:	4313      	orrs	r3, r2
 8004686:	b29b      	uxth	r3, r3
 8004688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800468c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a0d      	ldr	r2, [pc, #52]	; (80046c8 <HAL_I2S_Init+0x278>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d101      	bne.n	800469c <HAL_I2S_Init+0x24c>
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <HAL_I2S_Init+0x27c>)
 800469a:	e001      	b.n	80046a0 <HAL_I2S_Init+0x250>
 800469c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046a0:	897a      	ldrh	r2, [r7, #10]
 80046a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	080047c7 	.word	0x080047c7
 80046c0:	cccccccd 	.word	0xcccccccd
 80046c4:	080048dd 	.word	0x080048dd
 80046c8:	40003800 	.word	0x40003800
 80046cc:	40003400 	.word	0x40003400

080046d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	881a      	ldrh	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	1c9a      	adds	r2, r3, #2
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10e      	bne.n	8004760 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004750:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ffb8 	bl	80046d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	b292      	uxth	r2, r2
 800477c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	1c9a      	adds	r2, r3, #2
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10e      	bne.n	80047be <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff93 	bl	80046e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d13a      	bne.n	8004858 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d109      	bne.n	8004800 <I2S_IRQHandler+0x3a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f6:	2b40      	cmp	r3, #64	; 0x40
 80047f8:	d102      	bne.n	8004800 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff ffb4 	bl	8004768 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004806:	2b40      	cmp	r3, #64	; 0x40
 8004808:	d126      	bne.n	8004858 <I2S_IRQHandler+0x92>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b20      	cmp	r3, #32
 8004816:	d11f      	bne.n	8004858 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004826:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004828:	2300      	movs	r3, #0
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	613b      	str	r3, [r7, #16]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	f043 0202 	orr.w	r2, r3, #2
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ff50 	bl	80046f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b03      	cmp	r3, #3
 8004862:	d136      	bne.n	80048d2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b02      	cmp	r3, #2
 800486c:	d109      	bne.n	8004882 <I2S_IRQHandler+0xbc>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004878:	2b80      	cmp	r3, #128	; 0x80
 800487a:	d102      	bne.n	8004882 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ff45 	bl	800470c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b08      	cmp	r3, #8
 800488a:	d122      	bne.n	80048d2 <I2S_IRQHandler+0x10c>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b20      	cmp	r3, #32
 8004898:	d11b      	bne.n	80048d2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048a8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	f043 0204 	orr.w	r2, r3, #4
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff ff13 	bl	80046f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048d2:	bf00      	nop
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a92      	ldr	r2, [pc, #584]	; (8004b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d101      	bne.n	80048fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80048f6:	4b92      	ldr	r3, [pc, #584]	; (8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048f8:	e001      	b.n	80048fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80048fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a8b      	ldr	r2, [pc, #556]	; (8004b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d101      	bne.n	8004918 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004914:	4b8a      	ldr	r3, [pc, #552]	; (8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004916:	e001      	b.n	800491c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004928:	d004      	beq.n	8004934 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f040 8099 	bne.w	8004a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b02      	cmp	r3, #2
 800493c:	d107      	bne.n	800494e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f925 	bl	8004b98 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b01      	cmp	r3, #1
 8004956:	d107      	bne.n	8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f9c8 	bl	8004cf8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d13a      	bne.n	80049e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d035      	beq.n	80049e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a6e      	ldr	r2, [pc, #440]	; (8004b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d101      	bne.n	800498a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004986:	4b6e      	ldr	r3, [pc, #440]	; (8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004988:	e001      	b.n	800498e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800498a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4969      	ldr	r1, [pc, #420]	; (8004b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004996:	428b      	cmp	r3, r1
 8004998:	d101      	bne.n	800499e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800499a:	4b69      	ldr	r3, [pc, #420]	; (8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800499c:	e001      	b.n	80049a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800499e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	f043 0202 	orr.w	r2, r3, #2
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff fe88 	bl	80046f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	f040 80c3 	bne.w	8004b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80bd 	beq.w	8004b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a0e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a49      	ldr	r2, [pc, #292]	; (8004b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d101      	bne.n	8004a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004a1a:	4b49      	ldr	r3, [pc, #292]	; (8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a1c:	e001      	b.n	8004a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004a1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4944      	ldr	r1, [pc, #272]	; (8004b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a2a:	428b      	cmp	r3, r1
 8004a2c:	d101      	bne.n	8004a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004a2e:	4b44      	ldr	r3, [pc, #272]	; (8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a30:	e001      	b.n	8004a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004a32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a3a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	60bb      	str	r3, [r7, #8]
 8004a48:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	f043 0204 	orr.w	r2, r3, #4
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff fe4a 	bl	80046f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a64:	e089      	b.n	8004b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d107      	bne.n	8004a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f8be 	bl	8004bfc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d107      	bne.n	8004a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f8fd 	bl	8004c94 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	d12f      	bne.n	8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d02a      	beq.n	8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004abc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d101      	bne.n	8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aca:	e001      	b.n	8004ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4919      	ldr	r1, [pc, #100]	; (8004b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ad8:	428b      	cmp	r3, r1
 8004ada:	d101      	bne.n	8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004adc:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ade:	e001      	b.n	8004ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004ae0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ae4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ae8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f043 0202 	orr.w	r2, r3, #2
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff fdfa 	bl	80046f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d136      	bne.n	8004b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d031      	beq.n	8004b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a07      	ldr	r2, [pc, #28]	; (8004b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d101      	bne.n	8004b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004b22:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b24:	e001      	b.n	8004b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004b26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4902      	ldr	r1, [pc, #8]	; (8004b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b32:	428b      	cmp	r3, r1
 8004b34:	d106      	bne.n	8004b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004b36:	4b02      	ldr	r3, [pc, #8]	; (8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b38:	e006      	b.n	8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004b3a:	bf00      	nop
 8004b3c:	40003800 	.word	0x40003800
 8004b40:	40003400 	.word	0x40003400
 8004b44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b4c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b5c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	f043 0204 	orr.w	r2, r3, #4
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff fdc0 	bl	80046f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b78:	e000      	b.n	8004b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b7a:	bf00      	nop
}
 8004b7c:	bf00      	nop
 8004b7e:	3720      	adds	r7, #32
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	1c99      	adds	r1, r3, #2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6251      	str	r1, [r2, #36]	; 0x24
 8004baa:	881a      	ldrh	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d113      	bne.n	8004bf2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bd8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d106      	bne.n	8004bf2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff ffc9 	bl	8004b84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	1c99      	adds	r1, r3, #2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6251      	str	r1, [r2, #36]	; 0x24
 8004c0e:	8819      	ldrh	r1, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1d      	ldr	r2, [pc, #116]	; (8004c8c <I2SEx_TxISR_I2SExt+0x90>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d101      	bne.n	8004c1e <I2SEx_TxISR_I2SExt+0x22>
 8004c1a:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <I2SEx_TxISR_I2SExt+0x94>)
 8004c1c:	e001      	b.n	8004c22 <I2SEx_TxISR_I2SExt+0x26>
 8004c1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c22:	460a      	mov	r2, r1
 8004c24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d121      	bne.n	8004c82 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a12      	ldr	r2, [pc, #72]	; (8004c8c <I2SEx_TxISR_I2SExt+0x90>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d101      	bne.n	8004c4c <I2SEx_TxISR_I2SExt+0x50>
 8004c48:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <I2SEx_TxISR_I2SExt+0x94>)
 8004c4a:	e001      	b.n	8004c50 <I2SEx_TxISR_I2SExt+0x54>
 8004c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	490d      	ldr	r1, [pc, #52]	; (8004c8c <I2SEx_TxISR_I2SExt+0x90>)
 8004c58:	428b      	cmp	r3, r1
 8004c5a:	d101      	bne.n	8004c60 <I2SEx_TxISR_I2SExt+0x64>
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <I2SEx_TxISR_I2SExt+0x94>)
 8004c5e:	e001      	b.n	8004c64 <I2SEx_TxISR_I2SExt+0x68>
 8004c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d106      	bne.n	8004c82 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ff81 	bl	8004b84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40003800 	.word	0x40003800
 8004c90:	40003400 	.word	0x40003400

08004c94 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68d8      	ldr	r0, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	1c99      	adds	r1, r3, #2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004cac:	b282      	uxth	r2, r0
 8004cae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d113      	bne.n	8004cf0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cd6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff ff4a 	bl	8004b84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a20      	ldr	r2, [pc, #128]	; (8004d88 <I2SEx_RxISR_I2SExt+0x90>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d101      	bne.n	8004d0e <I2SEx_RxISR_I2SExt+0x16>
 8004d0a:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <I2SEx_RxISR_I2SExt+0x94>)
 8004d0c:	e001      	b.n	8004d12 <I2SEx_RxISR_I2SExt+0x1a>
 8004d0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d12:	68d8      	ldr	r0, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	1c99      	adds	r1, r3, #2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d1e:	b282      	uxth	r2, r0
 8004d20:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d121      	bne.n	8004d7e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a12      	ldr	r2, [pc, #72]	; (8004d88 <I2SEx_RxISR_I2SExt+0x90>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d101      	bne.n	8004d48 <I2SEx_RxISR_I2SExt+0x50>
 8004d44:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <I2SEx_RxISR_I2SExt+0x94>)
 8004d46:	e001      	b.n	8004d4c <I2SEx_RxISR_I2SExt+0x54>
 8004d48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	490d      	ldr	r1, [pc, #52]	; (8004d88 <I2SEx_RxISR_I2SExt+0x90>)
 8004d54:	428b      	cmp	r3, r1
 8004d56:	d101      	bne.n	8004d5c <I2SEx_RxISR_I2SExt+0x64>
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <I2SEx_RxISR_I2SExt+0x94>)
 8004d5a:	e001      	b.n	8004d60 <I2SEx_RxISR_I2SExt+0x68>
 8004d5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d64:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff03 	bl	8004b84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40003800 	.word	0x40003800
 8004d8c:	40003400 	.word	0x40003400

08004d90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d92:	b08f      	sub	sp, #60	; 0x3c
 8004d94:	af0a      	add	r7, sp, #40	; 0x28
 8004d96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e10f      	b.n	8004fc2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f007 fae3 	bl	800c388 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f003 fdca 	bl	800897a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	687e      	ldr	r6, [r7, #4]
 8004dee:	466d      	mov	r5, sp
 8004df0:	f106 0410 	add.w	r4, r6, #16
 8004df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e00:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e04:	1d33      	adds	r3, r6, #4
 8004e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e08:	6838      	ldr	r0, [r7, #0]
 8004e0a:	f003 fca1 	bl	8008750 <USB_CoreInit>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0d0      	b.n	8004fc2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f003 fdb8 	bl	800899c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	73fb      	strb	r3, [r7, #15]
 8004e30:	e04a      	b.n	8004ec8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e32:	7bfa      	ldrb	r2, [r7, #15]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	333d      	adds	r3, #61	; 0x3d
 8004e42:	2201      	movs	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e46:	7bfa      	ldrb	r2, [r7, #15]
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	333c      	adds	r3, #60	; 0x3c
 8004e56:	7bfa      	ldrb	r2, [r7, #15]
 8004e58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e5a:	7bfa      	ldrb	r2, [r7, #15]
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	b298      	uxth	r0, r3
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	3344      	adds	r3, #68	; 0x44
 8004e6e:	4602      	mov	r2, r0
 8004e70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	3340      	adds	r3, #64	; 0x40
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e86:	7bfa      	ldrb	r2, [r7, #15]
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	4413      	add	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	3348      	adds	r3, #72	; 0x48
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e9a:	7bfa      	ldrb	r2, [r7, #15]
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	334c      	adds	r3, #76	; 0x4c
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004eae:	7bfa      	ldrb	r2, [r7, #15]
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	3354      	adds	r3, #84	; 0x54
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
 8004ec8:	7bfa      	ldrb	r2, [r7, #15]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d3af      	bcc.n	8004e32 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
 8004ed6:	e044      	b.n	8004f62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ed8:	7bfa      	ldrb	r2, [r7, #15]
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	4613      	mov	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004eee:	7bfa      	ldrb	r2, [r7, #15]
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	440b      	add	r3, r1
 8004efc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004f00:	7bfa      	ldrb	r2, [r7, #15]
 8004f02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f04:	7bfa      	ldrb	r2, [r7, #15]
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f1a:	7bfa      	ldrb	r2, [r7, #15]
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f30:	7bfa      	ldrb	r2, [r7, #15]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f46:	7bfa      	ldrb	r2, [r7, #15]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	73fb      	strb	r3, [r7, #15]
 8004f62:	7bfa      	ldrb	r2, [r7, #15]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d3b5      	bcc.n	8004ed8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	687e      	ldr	r6, [r7, #4]
 8004f74:	466d      	mov	r5, sp
 8004f76:	f106 0410 	add.w	r4, r6, #16
 8004f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f86:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f8a:	1d33      	adds	r3, r6, #4
 8004f8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f8e:	6838      	ldr	r0, [r7, #0]
 8004f90:	f003 fd50 	bl	8008a34 <USB_DevInit>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d005      	beq.n	8004fa6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e00d      	b.n	8004fc2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f004 fe9f 	bl	8009cfe <USB_DevDisconnect>

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_PCD_Start+0x1c>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e020      	b.n	8005028 <HAL_PCD_Start+0x5e>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d109      	bne.n	800500a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d005      	beq.n	800500a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f003 fca2 	bl	8008958 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f004 fe4f 	bl	8009cbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005030:	b590      	push	{r4, r7, lr}
 8005032:	b08d      	sub	sp, #52	; 0x34
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f004 ff0d 	bl	8009e66 <USB_GetMode>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	f040 848a 	bne.w	8005968 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f004 fe71 	bl	8009d40 <USB_ReadInterrupts>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 8480 	beq.w	8005966 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	0a1b      	lsrs	r3, r3, #8
 8005070:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f004 fe5e 	bl	8009d40 <USB_ReadInterrupts>
 8005084:	4603      	mov	r3, r0
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b02      	cmp	r3, #2
 800508c:	d107      	bne.n	800509e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f002 0202 	and.w	r2, r2, #2
 800509c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f004 fe4c 	bl	8009d40 <USB_ReadInterrupts>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d161      	bne.n	8005176 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699a      	ldr	r2, [r3, #24]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0210 	bic.w	r2, r2, #16
 80050c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	f003 020f 	and.w	r2, r3, #15
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	4413      	add	r3, r2
 80050de:	3304      	adds	r3, #4
 80050e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	0c5b      	lsrs	r3, r3, #17
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d124      	bne.n	8005138 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80050f4:	4013      	ands	r3, r2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d035      	beq.n	8005166 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005108:	b29b      	uxth	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	6a38      	ldr	r0, [r7, #32]
 800510e:	f004 fc83 	bl	8009a18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800511e:	441a      	add	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	6a1a      	ldr	r2, [r3, #32]
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005130:	441a      	add	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	621a      	str	r2, [r3, #32]
 8005136:	e016      	b.n	8005166 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	0c5b      	lsrs	r3, r3, #17
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	2b06      	cmp	r3, #6
 8005142:	d110      	bne.n	8005166 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800514a:	2208      	movs	r2, #8
 800514c:	4619      	mov	r1, r3
 800514e:	6a38      	ldr	r0, [r7, #32]
 8005150:	f004 fc62 	bl	8009a18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	6a1a      	ldr	r2, [r3, #32]
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	091b      	lsrs	r3, r3, #4
 800515c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005160:	441a      	add	r2, r3
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0210 	orr.w	r2, r2, #16
 8005174:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f004 fde0 	bl	8009d40 <USB_ReadInterrupts>
 8005180:	4603      	mov	r3, r0
 8005182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005186:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800518a:	f040 80a7 	bne.w	80052dc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f004 fde5 	bl	8009d66 <USB_ReadDevAllOutEpInterrupt>
 800519c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800519e:	e099      	b.n	80052d4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 808e 	beq.w	80052c8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	4611      	mov	r1, r2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f004 fe09 	bl	8009dce <USB_ReadDevOutEPInterrupt>
 80051bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00c      	beq.n	80051e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d4:	461a      	mov	r2, r3
 80051d6:	2301      	movs	r3, #1
 80051d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80051da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fec3 	bl	8005f68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00c      	beq.n	8005206 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	461a      	mov	r2, r3
 80051fa:	2308      	movs	r3, #8
 80051fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80051fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 ff99 	bl	8006138 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	461a      	mov	r2, r3
 800521e:	2310      	movs	r3, #16
 8005220:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d030      	beq.n	800528e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005234:	2b80      	cmp	r3, #128	; 0x80
 8005236:	d109      	bne.n	800524c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800524a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800524c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	4413      	add	r3, r2
 800525e:	3304      	adds	r3, #4
 8005260:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	78db      	ldrb	r3, [r3, #3]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d108      	bne.n	800527c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2200      	movs	r2, #0
 800526e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	b2db      	uxtb	r3, r3
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f007 f99a 	bl	800c5b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	461a      	mov	r2, r3
 800528a:	2302      	movs	r3, #2
 800528c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d008      	beq.n	80052aa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	461a      	mov	r2, r3
 80052a6:	2320      	movs	r3, #32
 80052a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d009      	beq.n	80052c8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c0:	461a      	mov	r2, r3
 80052c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	3301      	adds	r3, #1
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	085b      	lsrs	r3, r3, #1
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f47f af62 	bne.w	80051a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f004 fd2d 	bl	8009d40 <USB_ReadInterrupts>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052f0:	f040 80db 	bne.w	80054aa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f004 fd4e 	bl	8009d9a <USB_ReadDevAllInEpInterrupt>
 80052fe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005304:	e0cd      	b.n	80054a2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80c2 	beq.w	8005496 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	4611      	mov	r1, r2
 800531c:	4618      	mov	r0, r3
 800531e:	f004 fd74 	bl	8009e0a <USB_ReadDevInEPInterrupt>
 8005322:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d057      	beq.n	80053de <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	2201      	movs	r2, #1
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	43db      	mvns	r3, r3
 8005348:	69f9      	ldr	r1, [r7, #28]
 800534a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800534e:	4013      	ands	r3, r2
 8005350:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535e:	461a      	mov	r2, r3
 8005360:	2301      	movs	r3, #1
 8005362:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d132      	bne.n	80053d2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	4613      	mov	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	334c      	adds	r3, #76	; 0x4c
 800537c:	6819      	ldr	r1, [r3, #0]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005382:	4613      	mov	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4403      	add	r3, r0
 800538c:	3348      	adds	r3, #72	; 0x48
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4419      	add	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005396:	4613      	mov	r3, r2
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	4413      	add	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4403      	add	r3, r0
 80053a0:	334c      	adds	r3, #76	; 0x4c
 80053a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d113      	bne.n	80053d2 <HAL_PCD_IRQHandler+0x3a2>
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ae:	4613      	mov	r3, r2
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	3354      	adds	r3, #84	; 0x54
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d108      	bne.n	80053d2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053ca:	461a      	mov	r2, r3
 80053cc:	2101      	movs	r1, #1
 80053ce:	f004 fd7b 	bl	8009ec8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f007 f864 	bl	800c4a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	461a      	mov	r2, r3
 80053f6:	2308      	movs	r3, #8
 80053f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	d008      	beq.n	8005416 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005410:	461a      	mov	r2, r3
 8005412:	2310      	movs	r3, #16
 8005414:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	461a      	mov	r2, r3
 800542e:	2340      	movs	r3, #64	; 0x40
 8005430:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d023      	beq.n	8005484 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800543c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800543e:	6a38      	ldr	r0, [r7, #32]
 8005440:	f003 fc5c 	bl	8008cfc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005446:	4613      	mov	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	3338      	adds	r3, #56	; 0x38
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	3304      	adds	r3, #4
 8005456:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	78db      	ldrb	r3, [r3, #3]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d108      	bne.n	8005472 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2200      	movs	r2, #0
 8005464:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	b2db      	uxtb	r3, r3
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f007 f8b1 	bl	800c5d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547e:	461a      	mov	r2, r3
 8005480:	2302      	movs	r3, #2
 8005482:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800548e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fcdb 	bl	8005e4c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	3301      	adds	r3, #1
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	085b      	lsrs	r3, r3, #1
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f47f af2e 	bne.w	8005306 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f004 fc46 	bl	8009d40 <USB_ReadInterrupts>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054be:	d122      	bne.n	8005506 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	69fa      	ldr	r2, [r7, #28]
 80054ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ce:	f023 0301 	bic.w	r3, r3, #1
 80054d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d108      	bne.n	80054f0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054e6:	2100      	movs	r1, #0
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fec3 	bl	8006274 <HAL_PCDEx_LPM_Callback>
 80054ee:	e002      	b.n	80054f6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f007 f84f 	bl	800c594 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695a      	ldr	r2, [r3, #20]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f004 fc18 	bl	8009d40 <USB_ReadInterrupts>
 8005510:	4603      	mov	r3, r0
 8005512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551a:	d112      	bne.n	8005542 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b01      	cmp	r3, #1
 800552a:	d102      	bne.n	8005532 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f007 f80b 	bl	800c548 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695a      	ldr	r2, [r3, #20]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005540:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f004 fbfa 	bl	8009d40 <USB_ReadInterrupts>
 800554c:	4603      	mov	r3, r0
 800554e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005556:	f040 80b7 	bne.w	80056c8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005568:	f023 0301 	bic.w	r3, r3, #1
 800556c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2110      	movs	r1, #16
 8005574:	4618      	mov	r0, r3
 8005576:	f003 fbc1 	bl	8008cfc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800557a:	2300      	movs	r3, #0
 800557c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800557e:	e046      	b.n	800560e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558c:	461a      	mov	r2, r3
 800558e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005592:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80055b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	461a      	mov	r2, r3
 80055c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005602:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005606:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560a:	3301      	adds	r3, #1
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005614:	429a      	cmp	r2, r3
 8005616:	d3b3      	bcc.n	8005580 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005626:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800562a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	2b00      	cmp	r3, #0
 8005632:	d016      	beq.n	8005662 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005644:	f043 030b 	orr.w	r3, r3, #11
 8005648:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800565a:	f043 030b 	orr.w	r3, r3, #11
 800565e:	6453      	str	r3, [r2, #68]	; 0x44
 8005660:	e015      	b.n	800568e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005670:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005674:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005678:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005688:	f043 030b 	orr.w	r3, r3, #11
 800568c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800569c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056b2:	461a      	mov	r2, r3
 80056b4:	f004 fc08 	bl	8009ec8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695a      	ldr	r2, [r3, #20]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80056c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f004 fb37 	bl	8009d40 <USB_ReadInterrupts>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056dc:	d124      	bne.n	8005728 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f004 fbcd 	bl	8009e82 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f003 fb82 	bl	8008df6 <USB_GetDevSpeed>
 80056f2:	4603      	mov	r3, r0
 80056f4:	461a      	mov	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681c      	ldr	r4, [r3, #0]
 80056fe:	f001 fa29 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 8005702:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005708:	b2db      	uxtb	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	4620      	mov	r0, r4
 800570e:	f003 f881 	bl	8008814 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f006 feef 	bl	800c4f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005726:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f004 fb07 	bl	8009d40 <USB_ReadInterrupts>
 8005732:	4603      	mov	r3, r0
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b08      	cmp	r3, #8
 800573a:	d10a      	bne.n	8005752 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f006 fecc 	bl	800c4da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695a      	ldr	r2, [r3, #20]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f002 0208 	and.w	r2, r2, #8
 8005750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f004 faf2 	bl	8009d40 <USB_ReadInterrupts>
 800575c:	4603      	mov	r3, r0
 800575e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005762:	2b80      	cmp	r3, #128	; 0x80
 8005764:	d122      	bne.n	80057ac <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005772:	2301      	movs	r3, #1
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
 8005776:	e014      	b.n	80057a2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d105      	bne.n	800579c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	b2db      	uxtb	r3, r3
 8005794:	4619      	mov	r1, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fb27 	bl	8005dea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	3301      	adds	r3, #1
 80057a0:	627b      	str	r3, [r7, #36]	; 0x24
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d3e5      	bcc.n	8005778 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f004 fac5 	bl	8009d40 <USB_ReadInterrupts>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c0:	d13b      	bne.n	800583a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057c2:	2301      	movs	r3, #1
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
 80057c6:	e02b      	b.n	8005820 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057dc:	4613      	mov	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	4413      	add	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	440b      	add	r3, r1
 80057e6:	3340      	adds	r3, #64	; 0x40
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d115      	bne.n	800581a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80057ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	da12      	bge.n	800581a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f8:	4613      	mov	r3, r2
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	333f      	adds	r3, #63	; 0x3f
 8005804:	2201      	movs	r2, #1
 8005806:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005810:	b2db      	uxtb	r3, r3
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fae8 	bl	8005dea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	3301      	adds	r3, #1
 800581e:	627b      	str	r3, [r7, #36]	; 0x24
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005826:	429a      	cmp	r2, r3
 8005828:	d3ce      	bcc.n	80057c8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695a      	ldr	r2, [r3, #20]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f004 fa7e 	bl	8009d40 <USB_ReadInterrupts>
 8005844:	4603      	mov	r3, r0
 8005846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800584a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800584e:	d155      	bne.n	80058fc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005850:	2301      	movs	r3, #1
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
 8005854:	e045      	b.n	80058e2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586a:	4613      	mov	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	440b      	add	r3, r1
 8005874:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d12e      	bne.n	80058dc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800587e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005880:	2b00      	cmp	r3, #0
 8005882:	da2b      	bge.n	80058dc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005890:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005894:	429a      	cmp	r2, r3
 8005896:	d121      	bne.n	80058dc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589c:	4613      	mov	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80058aa:	2201      	movs	r2, #1
 80058ac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058d8:	6053      	str	r3, [r2, #4]
            break;
 80058da:	e007      	b.n	80058ec <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	3301      	adds	r3, #1
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d3b4      	bcc.n	8005856 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695a      	ldr	r2, [r3, #20]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80058fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f004 fa1d 	bl	8009d40 <USB_ReadInterrupts>
 8005906:	4603      	mov	r3, r0
 8005908:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800590c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005910:	d10a      	bne.n	8005928 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f006 fe70 	bl	800c5f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695a      	ldr	r2, [r3, #20]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f004 fa07 	bl	8009d40 <USB_ReadInterrupts>
 8005932:	4603      	mov	r3, r0
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b04      	cmp	r3, #4
 800593a:	d115      	bne.n	8005968 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f006 fe60 	bl	800c614 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6859      	ldr	r1, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	430a      	orrs	r2, r1
 8005962:	605a      	str	r2, [r3, #4]
 8005964:	e000      	b.n	8005968 <HAL_PCD_IRQHandler+0x938>
      return;
 8005966:	bf00      	nop
    }
  }
}
 8005968:	3734      	adds	r7, #52	; 0x34
 800596a:	46bd      	mov	sp, r7
 800596c:	bd90      	pop	{r4, r7, pc}

0800596e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b082      	sub	sp, #8
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	460b      	mov	r3, r1
 8005978:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005980:	2b01      	cmp	r3, #1
 8005982:	d101      	bne.n	8005988 <HAL_PCD_SetAddress+0x1a>
 8005984:	2302      	movs	r3, #2
 8005986:	e013      	b.n	80059b0 <HAL_PCD_SetAddress+0x42>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	78fa      	ldrb	r2, [r7, #3]
 8005994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	4611      	mov	r1, r2
 80059a0:	4618      	mov	r0, r3
 80059a2:	f004 f965 	bl	8009c70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	4608      	mov	r0, r1
 80059c2:	4611      	mov	r1, r2
 80059c4:	461a      	mov	r2, r3
 80059c6:	4603      	mov	r3, r0
 80059c8:	70fb      	strb	r3, [r7, #3]
 80059ca:	460b      	mov	r3, r1
 80059cc:	803b      	strh	r3, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	da0f      	bge.n	80059fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	f003 020f 	and.w	r2, r3, #15
 80059e4:	4613      	mov	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	3338      	adds	r3, #56	; 0x38
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	4413      	add	r3, r2
 80059f2:	3304      	adds	r3, #4
 80059f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	705a      	strb	r2, [r3, #1]
 80059fc:	e00f      	b.n	8005a1e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	f003 020f 	and.w	r2, r3, #15
 8005a04:	4613      	mov	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	4413      	add	r3, r2
 8005a14:	3304      	adds	r3, #4
 8005a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a2a:	883a      	ldrh	r2, [r7, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	78ba      	ldrb	r2, [r7, #2]
 8005a34:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	785b      	ldrb	r3, [r3, #1]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a48:	78bb      	ldrb	r3, [r7, #2]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d102      	bne.n	8005a54 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_PCD_EP_Open+0xaa>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e00e      	b.n	8005a80 <HAL_PCD_EP_Open+0xc8>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68f9      	ldr	r1, [r7, #12]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f003 f9e5 	bl	8008e40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005a7e:	7afb      	ldrb	r3, [r7, #11]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	da0f      	bge.n	8005abc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	f003 020f 	and.w	r2, r3, #15
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	3338      	adds	r3, #56	; 0x38
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	4413      	add	r3, r2
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	705a      	strb	r2, [r3, #1]
 8005aba:	e00f      	b.n	8005adc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	f003 020f 	and.w	r2, r3, #15
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_PCD_EP_Close+0x6e>
 8005af2:	2302      	movs	r3, #2
 8005af4:	e00e      	b.n	8005b14 <HAL_PCD_EP_Close+0x8c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68f9      	ldr	r1, [r7, #12]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f003 fa23 	bl	8008f50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b2c:	7afb      	ldrb	r3, [r7, #11]
 8005b2e:	f003 020f 	and.w	r2, r3, #15
 8005b32:	4613      	mov	r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	3304      	adds	r3, #4
 8005b44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2200      	movs	r2, #0
 8005b56:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b5e:	7afb      	ldrb	r3, [r7, #11]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d102      	bne.n	8005b78 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b78:	7afb      	ldrb	r3, [r7, #11]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6979      	ldr	r1, [r7, #20]
 8005b90:	f003 fd02 	bl	8009598 <USB_EP0StartXfer>
 8005b94:	e008      	b.n	8005ba8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6979      	ldr	r1, [r7, #20]
 8005ba4:	f003 fab0 	bl	8009108 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	f003 020f 	and.w	r2, r3, #15
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005bd4:	681b      	ldr	r3, [r3, #0]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bf2:	7afb      	ldrb	r3, [r7, #11]
 8005bf4:	f003 020f 	and.w	r2, r3, #15
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	3338      	adds	r3, #56	; 0x38
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4413      	add	r3, r2
 8005c06:	3304      	adds	r3, #4
 8005c08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c22:	7afb      	ldrb	r3, [r7, #11]
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d102      	bne.n	8005c3c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c3c:	7afb      	ldrb	r3, [r7, #11]
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	6979      	ldr	r1, [r7, #20]
 8005c54:	f003 fca0 	bl	8009598 <USB_EP0StartXfer>
 8005c58:	e008      	b.n	8005c6c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	6979      	ldr	r1, [r7, #20]
 8005c68:	f003 fa4e 	bl	8009108 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	f003 020f 	and.w	r2, r3, #15
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d901      	bls.n	8005c94 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e050      	b.n	8005d36 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	da0f      	bge.n	8005cbc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	f003 020f 	and.w	r2, r3, #15
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	3338      	adds	r3, #56	; 0x38
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	4413      	add	r3, r2
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	705a      	strb	r2, [r3, #1]
 8005cba:	e00d      	b.n	8005cd8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	3304      	adds	r3, #4
 8005cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_PCD_EP_SetStall+0x82>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e01e      	b.n	8005d36 <HAL_PCD_EP_SetStall+0xc0>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68f9      	ldr	r1, [r7, #12]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f003 fede 	bl	8009ac8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	b2d9      	uxtb	r1, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d26:	461a      	mov	r2, r3
 8005d28:	f004 f8ce 	bl	8009ec8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	f003 020f 	and.w	r2, r3, #15
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d901      	bls.n	8005d5c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e042      	b.n	8005de2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	da0f      	bge.n	8005d84 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	f003 020f 	and.w	r2, r3, #15
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	3338      	adds	r3, #56	; 0x38
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	4413      	add	r3, r2
 8005d78:	3304      	adds	r3, #4
 8005d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	705a      	strb	r2, [r3, #1]
 8005d82:	e00f      	b.n	8005da4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	f003 020f 	and.w	r2, r3, #15
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	4413      	add	r3, r2
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_PCD_EP_ClrStall+0x86>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e00e      	b.n	8005de2 <HAL_PCD_EP_ClrStall+0xa4>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68f9      	ldr	r1, [r7, #12]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f003 fee6 	bl	8009ba4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	460b      	mov	r3, r1
 8005df4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005df6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	da0c      	bge.n	8005e18 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dfe:	78fb      	ldrb	r3, [r7, #3]
 8005e00:	f003 020f 	and.w	r2, r3, #15
 8005e04:	4613      	mov	r3, r2
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	3338      	adds	r3, #56	; 0x38
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	4413      	add	r3, r2
 8005e12:	3304      	adds	r3, #4
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	e00c      	b.n	8005e32 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	f003 020f 	and.w	r2, r3, #15
 8005e1e:	4613      	mov	r3, r2
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3304      	adds	r3, #4
 8005e30:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68f9      	ldr	r1, [r7, #12]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f003 fd05 	bl	8009848 <USB_EPStopXfer>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005e42:	7afb      	ldrb	r3, [r7, #11]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08a      	sub	sp, #40	; 0x28
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	4613      	mov	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	3338      	adds	r3, #56	; 0x38
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	4413      	add	r3, r2
 8005e70:	3304      	adds	r3, #4
 8005e72:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a1a      	ldr	r2, [r3, #32]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d901      	bls.n	8005e84 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e06c      	b.n	8005f5e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d902      	bls.n	8005ea0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	3303      	adds	r3, #3
 8005ea4:	089b      	lsrs	r3, r3, #2
 8005ea6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ea8:	e02b      	b.n	8005f02 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d902      	bls.n	8005ec6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	3303      	adds	r3, #3
 8005eca:	089b      	lsrs	r3, r3, #2
 8005ecc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6919      	ldr	r1, [r3, #16]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	6978      	ldr	r0, [r7, #20]
 8005ee6:	f003 fd59 	bl	800999c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	441a      	add	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1a      	ldr	r2, [r3, #32]
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	441a      	add	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d809      	bhi.n	8005f2c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a1a      	ldr	r2, [r3, #32]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d203      	bcs.n	8005f2c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1be      	bne.n	8005eaa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	699a      	ldr	r2, [r3, #24]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d811      	bhi.n	8005f5c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	2201      	movs	r2, #1
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	43db      	mvns	r3, r3
 8005f52:	6939      	ldr	r1, [r7, #16]
 8005f54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f58:	4013      	ands	r3, r2
 8005f5a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	333c      	adds	r3, #60	; 0x3c
 8005f80:	3304      	adds	r3, #4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d17b      	bne.n	8006096 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d015      	beq.n	8005fd4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	4a61      	ldr	r2, [pc, #388]	; (8006130 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	f240 80b9 	bls.w	8006124 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 80b3 	beq.w	8006124 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fd0:	6093      	str	r3, [r2, #8]
 8005fd2:	e0a7      	b.n	8006124 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d009      	beq.n	8005ff2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	461a      	mov	r2, r3
 8005fec:	2320      	movs	r3, #32
 8005fee:	6093      	str	r3, [r2, #8]
 8005ff0:	e098      	b.n	8006124 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 8093 	bne.w	8006124 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	4a4b      	ldr	r2, [pc, #300]	; (8006130 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d90f      	bls.n	8006026 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601c:	461a      	mov	r2, r3
 800601e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006022:	6093      	str	r3, [r2, #8]
 8006024:	e07e      	b.n	8006124 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	4613      	mov	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	4413      	add	r3, r2
 8006038:	3304      	adds	r3, #4
 800603a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	0159      	lsls	r1, r3, #5
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	440b      	add	r3, r1
 8006048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006052:	1ad2      	subs	r2, r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d114      	bne.n	8006088 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d109      	bne.n	800607a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006070:	461a      	mov	r2, r3
 8006072:	2101      	movs	r1, #1
 8006074:	f003 ff28 	bl	8009ec8 <USB_EP0_OutStart>
 8006078:	e006      	b.n	8006088 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	691a      	ldr	r2, [r3, #16]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	441a      	add	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f006 f9ee 	bl	800c470 <HAL_PCD_DataOutStageCallback>
 8006094:	e046      	b.n	8006124 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	4a26      	ldr	r2, [pc, #152]	; (8006134 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d124      	bne.n	80060e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b4:	461a      	mov	r2, r3
 80060b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ba:	6093      	str	r3, [r2, #8]
 80060bc:	e032      	b.n	8006124 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d008      	beq.n	80060da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d4:	461a      	mov	r2, r3
 80060d6:	2320      	movs	r3, #32
 80060d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f006 f9c5 	bl	800c470 <HAL_PCD_DataOutStageCallback>
 80060e6:	e01d      	b.n	8006124 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d114      	bne.n	8006118 <PCD_EP_OutXfrComplete_int+0x1b0>
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	4613      	mov	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d108      	bne.n	8006118 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6818      	ldr	r0, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006110:	461a      	mov	r2, r3
 8006112:	2100      	movs	r1, #0
 8006114:	f003 fed8 	bl	8009ec8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	b2db      	uxtb	r3, r3
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f006 f9a6 	bl	800c470 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3720      	adds	r7, #32
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	4f54300a 	.word	0x4f54300a
 8006134:	4f54310a 	.word	0x4f54310a

08006138 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	333c      	adds	r3, #60	; 0x3c
 8006150:	3304      	adds	r3, #4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a15      	ldr	r2, [pc, #84]	; (80061c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d90e      	bls.n	800618c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006174:	2b00      	cmp	r3, #0
 8006176:	d009      	beq.n	800618c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	461a      	mov	r2, r3
 8006186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800618a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f006 f95d 	bl	800c44c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4a0a      	ldr	r2, [pc, #40]	; (80061c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d90c      	bls.n	80061b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d108      	bne.n	80061b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061ac:	461a      	mov	r2, r3
 80061ae:	2101      	movs	r1, #1
 80061b0:	f003 fe8a 	bl	8009ec8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	4f54300a 	.word	0x4f54300a

080061c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
 80061d0:	4613      	mov	r3, r2
 80061d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d107      	bne.n	80061f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80061e2:	883b      	ldrh	r3, [r7, #0]
 80061e4:	0419      	lsls	r1, r3, #16
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	629a      	str	r2, [r3, #40]	; 0x28
 80061f0:	e028      	b.n	8006244 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f8:	0c1b      	lsrs	r3, r3, #16
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	4413      	add	r3, r2
 80061fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006200:	2300      	movs	r3, #0
 8006202:	73fb      	strb	r3, [r7, #15]
 8006204:	e00d      	b.n	8006222 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	3340      	adds	r3, #64	; 0x40
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	0c1b      	lsrs	r3, r3, #16
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	4413      	add	r3, r2
 800621a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	3301      	adds	r3, #1
 8006220:	73fb      	strb	r3, [r7, #15]
 8006222:	7bfa      	ldrb	r2, [r7, #15]
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	3b01      	subs	r3, #1
 8006228:	429a      	cmp	r2, r3
 800622a:	d3ec      	bcc.n	8006206 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800622c:	883b      	ldrh	r3, [r7, #0]
 800622e:	0418      	lsls	r0, r3, #16
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6819      	ldr	r1, [r3, #0]
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	3b01      	subs	r3, #1
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	4302      	orrs	r2, r0
 800623c:	3340      	adds	r3, #64	; 0x40
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	460b      	mov	r3, r1
 800625c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	887a      	ldrh	r2, [r7, #2]
 8006264:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e267      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d075      	beq.n	8006396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062aa:	4b88      	ldr	r3, [pc, #544]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 030c 	and.w	r3, r3, #12
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d00c      	beq.n	80062d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062b6:	4b85      	ldr	r3, [pc, #532]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d112      	bne.n	80062e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062c2:	4b82      	ldr	r3, [pc, #520]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ce:	d10b      	bne.n	80062e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d0:	4b7e      	ldr	r3, [pc, #504]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d05b      	beq.n	8006394 <HAL_RCC_OscConfig+0x108>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d157      	bne.n	8006394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e242      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f0:	d106      	bne.n	8006300 <HAL_RCC_OscConfig+0x74>
 80062f2:	4b76      	ldr	r3, [pc, #472]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a75      	ldr	r2, [pc, #468]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80062f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e01d      	b.n	800633c <HAL_RCC_OscConfig+0xb0>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006308:	d10c      	bne.n	8006324 <HAL_RCC_OscConfig+0x98>
 800630a:	4b70      	ldr	r3, [pc, #448]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a6f      	ldr	r2, [pc, #444]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	4b6d      	ldr	r3, [pc, #436]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a6c      	ldr	r2, [pc, #432]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800631c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	e00b      	b.n	800633c <HAL_RCC_OscConfig+0xb0>
 8006324:	4b69      	ldr	r3, [pc, #420]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a68      	ldr	r2, [pc, #416]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800632a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	4b66      	ldr	r3, [pc, #408]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a65      	ldr	r2, [pc, #404]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800633a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d013      	beq.n	800636c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006344:	f7fd f882 	bl	800344c <HAL_GetTick>
 8006348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800634a:	e008      	b.n	800635e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800634c:	f7fd f87e 	bl	800344c <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b64      	cmp	r3, #100	; 0x64
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e207      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	4b5b      	ldr	r3, [pc, #364]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f0      	beq.n	800634c <HAL_RCC_OscConfig+0xc0>
 800636a:	e014      	b.n	8006396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636c:	f7fd f86e 	bl	800344c <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006374:	f7fd f86a 	bl	800344c <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b64      	cmp	r3, #100	; 0x64
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e1f3      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006386:	4b51      	ldr	r3, [pc, #324]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0xe8>
 8006392:	e000      	b.n	8006396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d063      	beq.n	800646a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063a2:	4b4a      	ldr	r3, [pc, #296]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 030c 	and.w	r3, r3, #12
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00b      	beq.n	80063c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ae:	4b47      	ldr	r3, [pc, #284]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063b6:	2b08      	cmp	r3, #8
 80063b8:	d11c      	bne.n	80063f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ba:	4b44      	ldr	r3, [pc, #272]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d116      	bne.n	80063f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063c6:	4b41      	ldr	r3, [pc, #260]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d005      	beq.n	80063de <HAL_RCC_OscConfig+0x152>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d001      	beq.n	80063de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e1c7      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063de:	4b3b      	ldr	r3, [pc, #236]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	4937      	ldr	r1, [pc, #220]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063f2:	e03a      	b.n	800646a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d020      	beq.n	800643e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063fc:	4b34      	ldr	r3, [pc, #208]	; (80064d0 <HAL_RCC_OscConfig+0x244>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006402:	f7fd f823 	bl	800344c <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006408:	e008      	b.n	800641c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800640a:	f7fd f81f 	bl	800344c <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e1a8      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800641c:	4b2b      	ldr	r3, [pc, #172]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0f0      	beq.n	800640a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006428:	4b28      	ldr	r3, [pc, #160]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4925      	ldr	r1, [pc, #148]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006438:	4313      	orrs	r3, r2
 800643a:	600b      	str	r3, [r1, #0]
 800643c:	e015      	b.n	800646a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800643e:	4b24      	ldr	r3, [pc, #144]	; (80064d0 <HAL_RCC_OscConfig+0x244>)
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006444:	f7fd f802 	bl	800344c <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800644c:	f7fc fffe 	bl	800344c <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e187      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800645e:	4b1b      	ldr	r3, [pc, #108]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f0      	bne.n	800644c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d036      	beq.n	80064e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d016      	beq.n	80064ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800647e:	4b15      	ldr	r3, [pc, #84]	; (80064d4 <HAL_RCC_OscConfig+0x248>)
 8006480:	2201      	movs	r2, #1
 8006482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006484:	f7fc ffe2 	bl	800344c <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800648c:	f7fc ffde 	bl	800344c <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e167      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800649e:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <HAL_RCC_OscConfig+0x240>)
 80064a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f0      	beq.n	800648c <HAL_RCC_OscConfig+0x200>
 80064aa:	e01b      	b.n	80064e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <HAL_RCC_OscConfig+0x248>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b2:	f7fc ffcb 	bl	800344c <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064b8:	e00e      	b.n	80064d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064ba:	f7fc ffc7 	bl	800344c <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d907      	bls.n	80064d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e150      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
 80064cc:	40023800 	.word	0x40023800
 80064d0:	42470000 	.word	0x42470000
 80064d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064d8:	4b88      	ldr	r3, [pc, #544]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80064da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1ea      	bne.n	80064ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 8097 	beq.w	8006620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064f2:	2300      	movs	r3, #0
 80064f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064f6:	4b81      	ldr	r3, [pc, #516]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10f      	bne.n	8006522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006502:	2300      	movs	r3, #0
 8006504:	60bb      	str	r3, [r7, #8]
 8006506:	4b7d      	ldr	r3, [pc, #500]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	4a7c      	ldr	r2, [pc, #496]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800650c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006510:	6413      	str	r3, [r2, #64]	; 0x40
 8006512:	4b7a      	ldr	r3, [pc, #488]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651a:	60bb      	str	r3, [r7, #8]
 800651c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800651e:	2301      	movs	r3, #1
 8006520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006522:	4b77      	ldr	r3, [pc, #476]	; (8006700 <HAL_RCC_OscConfig+0x474>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652a:	2b00      	cmp	r3, #0
 800652c:	d118      	bne.n	8006560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800652e:	4b74      	ldr	r3, [pc, #464]	; (8006700 <HAL_RCC_OscConfig+0x474>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a73      	ldr	r2, [pc, #460]	; (8006700 <HAL_RCC_OscConfig+0x474>)
 8006534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800653a:	f7fc ff87 	bl	800344c <HAL_GetTick>
 800653e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006540:	e008      	b.n	8006554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006542:	f7fc ff83 	bl	800344c <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e10c      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006554:	4b6a      	ldr	r3, [pc, #424]	; (8006700 <HAL_RCC_OscConfig+0x474>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0f0      	beq.n	8006542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d106      	bne.n	8006576 <HAL_RCC_OscConfig+0x2ea>
 8006568:	4b64      	ldr	r3, [pc, #400]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800656a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656c:	4a63      	ldr	r2, [pc, #396]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800656e:	f043 0301 	orr.w	r3, r3, #1
 8006572:	6713      	str	r3, [r2, #112]	; 0x70
 8006574:	e01c      	b.n	80065b0 <HAL_RCC_OscConfig+0x324>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b05      	cmp	r3, #5
 800657c:	d10c      	bne.n	8006598 <HAL_RCC_OscConfig+0x30c>
 800657e:	4b5f      	ldr	r3, [pc, #380]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006582:	4a5e      	ldr	r2, [pc, #376]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006584:	f043 0304 	orr.w	r3, r3, #4
 8006588:	6713      	str	r3, [r2, #112]	; 0x70
 800658a:	4b5c      	ldr	r3, [pc, #368]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800658c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658e:	4a5b      	ldr	r2, [pc, #364]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	6713      	str	r3, [r2, #112]	; 0x70
 8006596:	e00b      	b.n	80065b0 <HAL_RCC_OscConfig+0x324>
 8006598:	4b58      	ldr	r3, [pc, #352]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800659a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659c:	4a57      	ldr	r2, [pc, #348]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	6713      	str	r3, [r2, #112]	; 0x70
 80065a4:	4b55      	ldr	r3, [pc, #340]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80065a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a8:	4a54      	ldr	r2, [pc, #336]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80065aa:	f023 0304 	bic.w	r3, r3, #4
 80065ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b8:	f7fc ff48 	bl	800344c <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065be:	e00a      	b.n	80065d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065c0:	f7fc ff44 	bl	800344c <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e0cb      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d6:	4b49      	ldr	r3, [pc, #292]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0ee      	beq.n	80065c0 <HAL_RCC_OscConfig+0x334>
 80065e2:	e014      	b.n	800660e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065e4:	f7fc ff32 	bl	800344c <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ea:	e00a      	b.n	8006602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065ec:	f7fc ff2e 	bl	800344c <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e0b5      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006602:	4b3e      	ldr	r3, [pc, #248]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1ee      	bne.n	80065ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d105      	bne.n	8006620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006614:	4b39      	ldr	r3, [pc, #228]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	4a38      	ldr	r2, [pc, #224]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800661a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800661e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 80a1 	beq.w	800676c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800662a:	4b34      	ldr	r3, [pc, #208]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f003 030c 	and.w	r3, r3, #12
 8006632:	2b08      	cmp	r3, #8
 8006634:	d05c      	beq.n	80066f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	2b02      	cmp	r3, #2
 800663c:	d141      	bne.n	80066c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663e:	4b31      	ldr	r3, [pc, #196]	; (8006704 <HAL_RCC_OscConfig+0x478>)
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006644:	f7fc ff02 	bl	800344c <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800664c:	f7fc fefe 	bl	800344c <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e087      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800665e:	4b27      	ldr	r3, [pc, #156]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f0      	bne.n	800664c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69da      	ldr	r2, [r3, #28]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	019b      	lsls	r3, r3, #6
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	3b01      	subs	r3, #1
 8006684:	041b      	lsls	r3, r3, #16
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	491b      	ldr	r1, [pc, #108]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 8006690:	4313      	orrs	r3, r2
 8006692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006694:	4b1b      	ldr	r3, [pc, #108]	; (8006704 <HAL_RCC_OscConfig+0x478>)
 8006696:	2201      	movs	r2, #1
 8006698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800669a:	f7fc fed7 	bl	800344c <HAL_GetTick>
 800669e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a0:	e008      	b.n	80066b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a2:	f7fc fed3 	bl	800344c <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e05c      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066b4:	4b11      	ldr	r3, [pc, #68]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0f0      	beq.n	80066a2 <HAL_RCC_OscConfig+0x416>
 80066c0:	e054      	b.n	800676c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066c2:	4b10      	ldr	r3, [pc, #64]	; (8006704 <HAL_RCC_OscConfig+0x478>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c8:	f7fc fec0 	bl	800344c <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066d0:	f7fc febc 	bl	800344c <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e045      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066e2:	4b06      	ldr	r3, [pc, #24]	; (80066fc <HAL_RCC_OscConfig+0x470>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1f0      	bne.n	80066d0 <HAL_RCC_OscConfig+0x444>
 80066ee:	e03d      	b.n	800676c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d107      	bne.n	8006708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e038      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
 80066fc:	40023800 	.word	0x40023800
 8006700:	40007000 	.word	0x40007000
 8006704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006708:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <HAL_RCC_OscConfig+0x4ec>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d028      	beq.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006720:	429a      	cmp	r2, r3
 8006722:	d121      	bne.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800672e:	429a      	cmp	r2, r3
 8006730:	d11a      	bne.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006738:	4013      	ands	r3, r2
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800673e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006740:	4293      	cmp	r3, r2
 8006742:	d111      	bne.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	3b01      	subs	r3, #1
 8006752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006754:	429a      	cmp	r2, r3
 8006756:	d107      	bne.n	8006768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006764:	429a      	cmp	r2, r3
 8006766:	d001      	beq.n	800676c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40023800 	.word	0x40023800

0800677c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e0cc      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006790:	4b68      	ldr	r3, [pc, #416]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d90c      	bls.n	80067b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679e:	4b65      	ldr	r3, [pc, #404]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a6:	4b63      	ldr	r3, [pc, #396]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d001      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e0b8      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d020      	beq.n	8006806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067d0:	4b59      	ldr	r3, [pc, #356]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	4a58      	ldr	r2, [pc, #352]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067e8:	4b53      	ldr	r3, [pc, #332]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	4a52      	ldr	r2, [pc, #328]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f4:	4b50      	ldr	r3, [pc, #320]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	494d      	ldr	r1, [pc, #308]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 8006802:	4313      	orrs	r3, r2
 8006804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d044      	beq.n	800689c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d107      	bne.n	800682a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800681a:	4b47      	ldr	r3, [pc, #284]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d119      	bne.n	800685a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e07f      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d003      	beq.n	800683a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006836:	2b03      	cmp	r3, #3
 8006838:	d107      	bne.n	800684a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800683a:	4b3f      	ldr	r3, [pc, #252]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e06f      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684a:	4b3b      	ldr	r3, [pc, #236]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e067      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800685a:	4b37      	ldr	r3, [pc, #220]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f023 0203 	bic.w	r2, r3, #3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	4934      	ldr	r1, [pc, #208]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	4313      	orrs	r3, r2
 800686a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800686c:	f7fc fdee 	bl	800344c <HAL_GetTick>
 8006870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006872:	e00a      	b.n	800688a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006874:	f7fc fdea 	bl	800344c <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006882:	4293      	cmp	r3, r2
 8006884:	d901      	bls.n	800688a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e04f      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800688a:	4b2b      	ldr	r3, [pc, #172]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 020c 	and.w	r2, r3, #12
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	429a      	cmp	r2, r3
 800689a:	d1eb      	bne.n	8006874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800689c:	4b25      	ldr	r3, [pc, #148]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d20c      	bcs.n	80068c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068aa:	4b22      	ldr	r3, [pc, #136]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b2:	4b20      	ldr	r3, [pc, #128]	; (8006934 <HAL_RCC_ClockConfig+0x1b8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d001      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e032      	b.n	800692a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068d0:	4b19      	ldr	r3, [pc, #100]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	4916      	ldr	r1, [pc, #88]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068ee:	4b12      	ldr	r3, [pc, #72]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	490e      	ldr	r1, [pc, #56]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006902:	f000 f821 	bl	8006948 <HAL_RCC_GetSysClockFreq>
 8006906:	4602      	mov	r2, r0
 8006908:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	091b      	lsrs	r3, r3, #4
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	490a      	ldr	r1, [pc, #40]	; (800693c <HAL_RCC_ClockConfig+0x1c0>)
 8006914:	5ccb      	ldrb	r3, [r1, r3]
 8006916:	fa22 f303 	lsr.w	r3, r2, r3
 800691a:	4a09      	ldr	r2, [pc, #36]	; (8006940 <HAL_RCC_ClockConfig+0x1c4>)
 800691c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <HAL_RCC_ClockConfig+0x1c8>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f7fc fd4e 	bl	80033c4 <HAL_InitTick>

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40023c00 	.word	0x40023c00
 8006938:	40023800 	.word	0x40023800
 800693c:	0800cd08 	.word	0x0800cd08
 8006940:	20000024 	.word	0x20000024
 8006944:	20000028 	.word	0x20000028

08006948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800694c:	b094      	sub	sp, #80	; 0x50
 800694e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	647b      	str	r3, [r7, #68]	; 0x44
 8006954:	2300      	movs	r3, #0
 8006956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006958:	2300      	movs	r3, #0
 800695a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006960:	4b79      	ldr	r3, [pc, #484]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 030c 	and.w	r3, r3, #12
 8006968:	2b08      	cmp	r3, #8
 800696a:	d00d      	beq.n	8006988 <HAL_RCC_GetSysClockFreq+0x40>
 800696c:	2b08      	cmp	r3, #8
 800696e:	f200 80e1 	bhi.w	8006b34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_RCC_GetSysClockFreq+0x34>
 8006976:	2b04      	cmp	r3, #4
 8006978:	d003      	beq.n	8006982 <HAL_RCC_GetSysClockFreq+0x3a>
 800697a:	e0db      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800697c:	4b73      	ldr	r3, [pc, #460]	; (8006b4c <HAL_RCC_GetSysClockFreq+0x204>)
 800697e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006980:	e0db      	b.n	8006b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006982:	4b73      	ldr	r3, [pc, #460]	; (8006b50 <HAL_RCC_GetSysClockFreq+0x208>)
 8006984:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006986:	e0d8      	b.n	8006b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006988:	4b6f      	ldr	r3, [pc, #444]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006990:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006992:	4b6d      	ldr	r3, [pc, #436]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d063      	beq.n	8006a66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699e:	4b6a      	ldr	r3, [pc, #424]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	099b      	lsrs	r3, r3, #6
 80069a4:	2200      	movs	r2, #0
 80069a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b0:	633b      	str	r3, [r7, #48]	; 0x30
 80069b2:	2300      	movs	r3, #0
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
 80069b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80069ba:	4622      	mov	r2, r4
 80069bc:	462b      	mov	r3, r5
 80069be:	f04f 0000 	mov.w	r0, #0
 80069c2:	f04f 0100 	mov.w	r1, #0
 80069c6:	0159      	lsls	r1, r3, #5
 80069c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069cc:	0150      	lsls	r0, r2, #5
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4621      	mov	r1, r4
 80069d4:	1a51      	subs	r1, r2, r1
 80069d6:	6139      	str	r1, [r7, #16]
 80069d8:	4629      	mov	r1, r5
 80069da:	eb63 0301 	sbc.w	r3, r3, r1
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	f04f 0200 	mov.w	r2, #0
 80069e4:	f04f 0300 	mov.w	r3, #0
 80069e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069ec:	4659      	mov	r1, fp
 80069ee:	018b      	lsls	r3, r1, #6
 80069f0:	4651      	mov	r1, sl
 80069f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069f6:	4651      	mov	r1, sl
 80069f8:	018a      	lsls	r2, r1, #6
 80069fa:	4651      	mov	r1, sl
 80069fc:	ebb2 0801 	subs.w	r8, r2, r1
 8006a00:	4659      	mov	r1, fp
 8006a02:	eb63 0901 	sbc.w	r9, r3, r1
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a1a:	4690      	mov	r8, r2
 8006a1c:	4699      	mov	r9, r3
 8006a1e:	4623      	mov	r3, r4
 8006a20:	eb18 0303 	adds.w	r3, r8, r3
 8006a24:	60bb      	str	r3, [r7, #8]
 8006a26:	462b      	mov	r3, r5
 8006a28:	eb49 0303 	adc.w	r3, r9, r3
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	024b      	lsls	r3, r1, #9
 8006a3e:	4621      	mov	r1, r4
 8006a40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a44:	4621      	mov	r1, r4
 8006a46:	024a      	lsls	r2, r1, #9
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4e:	2200      	movs	r2, #0
 8006a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a58:	f7f9 ffa4 	bl	80009a4 <__aeabi_uldivmod>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4613      	mov	r3, r2
 8006a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a64:	e058      	b.n	8006b18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a66:	4b38      	ldr	r3, [pc, #224]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	099b      	lsrs	r3, r3, #6
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	4611      	mov	r1, r2
 8006a72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a76:	623b      	str	r3, [r7, #32]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a80:	4642      	mov	r2, r8
 8006a82:	464b      	mov	r3, r9
 8006a84:	f04f 0000 	mov.w	r0, #0
 8006a88:	f04f 0100 	mov.w	r1, #0
 8006a8c:	0159      	lsls	r1, r3, #5
 8006a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a92:	0150      	lsls	r0, r2, #5
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4641      	mov	r1, r8
 8006a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	f04f 0300 	mov.w	r3, #0
 8006aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8006abc:	eb63 050b 	sbc.w	r5, r3, fp
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	00eb      	lsls	r3, r5, #3
 8006aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ace:	00e2      	lsls	r2, r4, #3
 8006ad0:	4614      	mov	r4, r2
 8006ad2:	461d      	mov	r5, r3
 8006ad4:	4643      	mov	r3, r8
 8006ad6:	18e3      	adds	r3, r4, r3
 8006ad8:	603b      	str	r3, [r7, #0]
 8006ada:	464b      	mov	r3, r9
 8006adc:	eb45 0303 	adc.w	r3, r5, r3
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006aee:	4629      	mov	r1, r5
 8006af0:	028b      	lsls	r3, r1, #10
 8006af2:	4621      	mov	r1, r4
 8006af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006af8:	4621      	mov	r1, r4
 8006afa:	028a      	lsls	r2, r1, #10
 8006afc:	4610      	mov	r0, r2
 8006afe:	4619      	mov	r1, r3
 8006b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b02:	2200      	movs	r2, #0
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	61fa      	str	r2, [r7, #28]
 8006b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b0c:	f7f9 ff4a 	bl	80009a4 <__aeabi_uldivmod>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4613      	mov	r3, r2
 8006b16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b18:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	0c1b      	lsrs	r3, r3, #16
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	3301      	adds	r3, #1
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006b28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b32:	e002      	b.n	8006b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b34:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3750      	adds	r7, #80	; 0x50
 8006b40:	46bd      	mov	sp, r7
 8006b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b46:	bf00      	nop
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	00f42400 	.word	0x00f42400
 8006b50:	007a1200 	.word	0x007a1200

08006b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b58:	4b03      	ldr	r3, [pc, #12]	; (8006b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000024 	.word	0x20000024

08006b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b70:	f7ff fff0 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 8006b74:	4602      	mov	r2, r0
 8006b76:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	0a9b      	lsrs	r3, r3, #10
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	4903      	ldr	r1, [pc, #12]	; (8006b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b82:	5ccb      	ldrb	r3, [r1, r3]
 8006b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	0800cd18 	.word	0x0800cd18

08006b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b98:	f7ff ffdc 	bl	8006b54 <HAL_RCC_GetHCLKFreq>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	0b5b      	lsrs	r3, r3, #13
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	4903      	ldr	r1, [pc, #12]	; (8006bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006baa:	5ccb      	ldrb	r3, [r1, r3]
 8006bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	0800cd18 	.word	0x0800cd18

08006bbc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d105      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d035      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006be4:	4b62      	ldr	r3, [pc, #392]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bea:	f7fc fc2f 	bl	800344c <HAL_GetTick>
 8006bee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bf0:	e008      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bf2:	f7fc fc2b 	bl	800344c <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e0b0      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c04:	4b5b      	ldr	r3, [pc, #364]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1f0      	bne.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	019a      	lsls	r2, r3, #6
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	071b      	lsls	r3, r3, #28
 8006c1c:	4955      	ldr	r1, [pc, #340]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c24:	4b52      	ldr	r3, [pc, #328]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c26:	2201      	movs	r2, #1
 8006c28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c2a:	f7fc fc0f 	bl	800344c <HAL_GetTick>
 8006c2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c30:	e008      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c32:	f7fc fc0b 	bl	800344c <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e090      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c44:	4b4b      	ldr	r3, [pc, #300]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0f0      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8083 	beq.w	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	4b44      	ldr	r3, [pc, #272]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	4a43      	ldr	r2, [pc, #268]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c6e:	4b41      	ldr	r3, [pc, #260]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c7a:	4b3f      	ldr	r3, [pc, #252]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a3e      	ldr	r2, [pc, #248]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c84:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c86:	f7fc fbe1 	bl	800344c <HAL_GetTick>
 8006c8a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c8e:	f7fc fbdd 	bl	800344c <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e062      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ca0:	4b35      	ldr	r3, [pc, #212]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0f0      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cac:	4b31      	ldr	r3, [pc, #196]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d02f      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d028      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cca:	4b2a      	ldr	r3, [pc, #168]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cd4:	4b29      	ldr	r3, [pc, #164]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cda:	4b28      	ldr	r3, [pc, #160]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ce0:	4a24      	ldr	r2, [pc, #144]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ce6:	4b23      	ldr	r3, [pc, #140]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d114      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006cf2:	f7fc fbab 	bl	800344c <HAL_GetTick>
 8006cf6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cf8:	e00a      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cfa:	f7fc fba7 	bl	800344c <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e02a      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d10:	4b18      	ldr	r3, [pc, #96]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0ee      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d28:	d10d      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d2a:	4b12      	ldr	r3, [pc, #72]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3e:	490d      	ldr	r1, [pc, #52]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	608b      	str	r3, [r1, #8]
 8006d44:	e005      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	4a0a      	ldr	r2, [pc, #40]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d4c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d50:	6093      	str	r3, [r2, #8]
 8006d52:	4b08      	ldr	r3, [pc, #32]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d5e:	4905      	ldr	r1, [pc, #20]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	42470068 	.word	0x42470068
 8006d74:	40023800 	.word	0x40023800
 8006d78:	40007000 	.word	0x40007000
 8006d7c:	42470e40 	.word	0x42470e40

08006d80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d13e      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006d9e:	4b23      	ldr	r3, [pc, #140]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d005      	beq.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d12f      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006db4:	4b1e      	ldr	r3, [pc, #120]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006db6:	617b      	str	r3, [r7, #20]
          break;
 8006db8:	e02f      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006dba:	4b1c      	ldr	r3, [pc, #112]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dc6:	d108      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006dc8:	4b18      	ldr	r3, [pc, #96]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dd0:	4a18      	ldr	r2, [pc, #96]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	e007      	b.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006dda:	4b14      	ldr	r3, [pc, #80]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006de2:	4a15      	ldr	r2, [pc, #84]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006dea:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df0:	099b      	lsrs	r3, r3, #6
 8006df2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	fb02 f303 	mul.w	r3, r2, r3
 8006dfc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e04:	0f1b      	lsrs	r3, r3, #28
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e10:	617b      	str	r3, [r7, #20]
          break;
 8006e12:	e002      	b.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]
          break;
 8006e18:	bf00      	nop
        }
      }
      break;
 8006e1a:	bf00      	nop
    }
  }
  return frequency;
 8006e1c:	697b      	ldr	r3, [r7, #20]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40023800 	.word	0x40023800
 8006e30:	00bb8000 	.word	0x00bb8000
 8006e34:	007a1200 	.word	0x007a1200
 8006e38:	00f42400 	.word	0x00f42400

08006e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e07b      	b.n	8006f46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d108      	bne.n	8006e68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e5e:	d009      	beq.n	8006e74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	61da      	str	r2, [r3, #28]
 8006e66:	e005      	b.n	8006e74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d106      	bne.n	8006e94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fc f81c 	bl	8002ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2202      	movs	r2, #2
 8006e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	431a      	orrs	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef8:	ea42 0103 	orr.w	r1, r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	0c1b      	lsrs	r3, r3, #16
 8006f12:	f003 0104 	and.w	r1, r3, #4
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	f003 0210 	and.w	r2, r3, #16
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69da      	ldr	r2, [r3, #28]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b08c      	sub	sp, #48	; 0x30
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_SPI_TransmitReceive+0x26>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e18a      	b.n	800728a <HAL_SPI_TransmitReceive+0x33c>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f7c:	f7fc fa66 	bl	800344c <HAL_GetTick>
 8006f80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006f92:	887b      	ldrh	r3, [r7, #2]
 8006f94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d00f      	beq.n	8006fbe <HAL_SPI_TransmitReceive+0x70>
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fa4:	d107      	bne.n	8006fb6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d103      	bne.n	8006fb6 <HAL_SPI_TransmitReceive+0x68>
 8006fae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	d003      	beq.n	8006fbe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006fbc:	e15b      	b.n	8007276 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d005      	beq.n	8006fd0 <HAL_SPI_TransmitReceive+0x82>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <HAL_SPI_TransmitReceive+0x82>
 8006fca:	887b      	ldrh	r3, [r7, #2]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d103      	bne.n	8006fd8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006fd6:	e14e      	b.n	8007276 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	d003      	beq.n	8006fec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2205      	movs	r2, #5
 8006fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	887a      	ldrh	r2, [r7, #2]
 8006ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	887a      	ldrh	r2, [r7, #2]
 8007002:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	887a      	ldrh	r2, [r7, #2]
 800700e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	887a      	ldrh	r2, [r7, #2]
 8007014:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702c:	2b40      	cmp	r3, #64	; 0x40
 800702e:	d007      	beq.n	8007040 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800703e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007048:	d178      	bne.n	800713c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <HAL_SPI_TransmitReceive+0x10a>
 8007052:	8b7b      	ldrh	r3, [r7, #26]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d166      	bne.n	8007126 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705c:	881a      	ldrh	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007068:	1c9a      	adds	r2, r3, #2
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800707c:	e053      	b.n	8007126 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b02      	cmp	r3, #2
 800708a:	d11b      	bne.n	80070c4 <HAL_SPI_TransmitReceive+0x176>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007090:	b29b      	uxth	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d016      	beq.n	80070c4 <HAL_SPI_TransmitReceive+0x176>
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	2b01      	cmp	r3, #1
 800709a:	d113      	bne.n	80070c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a0:	881a      	ldrh	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	1c9a      	adds	r2, r3, #2
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d119      	bne.n	8007106 <HAL_SPI_TransmitReceive+0x1b8>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d014      	beq.n	8007106 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	b292      	uxth	r2, r2
 80070e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	1c9a      	adds	r2, r3, #2
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007102:	2301      	movs	r3, #1
 8007104:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007106:	f7fc f9a1 	bl	800344c <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007112:	429a      	cmp	r2, r3
 8007114:	d807      	bhi.n	8007126 <HAL_SPI_TransmitReceive+0x1d8>
 8007116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711c:	d003      	beq.n	8007126 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007124:	e0a7      	b.n	8007276 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800712a:	b29b      	uxth	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1a6      	bne.n	800707e <HAL_SPI_TransmitReceive+0x130>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007134:	b29b      	uxth	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1a1      	bne.n	800707e <HAL_SPI_TransmitReceive+0x130>
 800713a:	e07c      	b.n	8007236 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <HAL_SPI_TransmitReceive+0x1fc>
 8007144:	8b7b      	ldrh	r3, [r7, #26]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d16b      	bne.n	8007222 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	330c      	adds	r3, #12
 8007154:	7812      	ldrb	r2, [r2, #0]
 8007156:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007166:	b29b      	uxth	r3, r3
 8007168:	3b01      	subs	r3, #1
 800716a:	b29a      	uxth	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007170:	e057      	b.n	8007222 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b02      	cmp	r3, #2
 800717e:	d11c      	bne.n	80071ba <HAL_SPI_TransmitReceive+0x26c>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d017      	beq.n	80071ba <HAL_SPI_TransmitReceive+0x26c>
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	2b01      	cmp	r3, #1
 800718e:	d114      	bne.n	80071ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	330c      	adds	r3, #12
 800719a:	7812      	ldrb	r2, [r2, #0]
 800719c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	3b01      	subs	r3, #1
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d119      	bne.n	80071fc <HAL_SPI_TransmitReceive+0x2ae>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d014      	beq.n	80071fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071dc:	b2d2      	uxtb	r2, r2
 80071de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071f8:	2301      	movs	r3, #1
 80071fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071fc:	f7fc f926 	bl	800344c <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007208:	429a      	cmp	r2, r3
 800720a:	d803      	bhi.n	8007214 <HAL_SPI_TransmitReceive+0x2c6>
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007212:	d102      	bne.n	800721a <HAL_SPI_TransmitReceive+0x2cc>
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007220:	e029      	b.n	8007276 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007226:	b29b      	uxth	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1a2      	bne.n	8007172 <HAL_SPI_TransmitReceive+0x224>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d19d      	bne.n	8007172 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007238:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f9d0 	bl	80075e0 <SPI_EndRxTxTransaction>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d006      	beq.n	8007254 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2220      	movs	r2, #32
 8007250:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007252:	e010      	b.n	8007276 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10b      	bne.n	8007274 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	e000      	b.n	8007276 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007274:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007286:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800728a:	4618      	mov	r0, r3
 800728c:	3730      	adds	r7, #48	; 0x30
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	099b      	lsrs	r3, r3, #6
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10f      	bne.n	80072d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	099b      	lsrs	r3, r3, #6
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d004      	beq.n	80072d8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	4798      	blx	r3
    return;
 80072d6:	e0d7      	b.n	8007488 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00a      	beq.n	80072fa <HAL_SPI_IRQHandler+0x66>
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	09db      	lsrs	r3, r3, #7
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	4798      	blx	r3
    return;
 80072f8:	e0c6      	b.n	8007488 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	095b      	lsrs	r3, r3, #5
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10c      	bne.n	8007320 <HAL_SPI_IRQHandler+0x8c>
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	099b      	lsrs	r3, r3, #6
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	d106      	bne.n	8007320 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	0a1b      	lsrs	r3, r3, #8
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 80b4 	beq.w	8007488 <HAL_SPI_IRQHandler+0x1f4>
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 80ad 	beq.w	8007488 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	099b      	lsrs	r3, r3, #6
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d023      	beq.n	8007382 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b03      	cmp	r3, #3
 8007344:	d011      	beq.n	800736a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734a:	f043 0204 	orr.w	r2, r3, #4
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007352:	2300      	movs	r3, #0
 8007354:	617b      	str	r3, [r7, #20]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	617b      	str	r3, [r7, #20]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	e00b      	b.n	8007382 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800736a:	2300      	movs	r3, #0
 800736c:	613b      	str	r3, [r7, #16]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	613b      	str	r3, [r7, #16]
 800737e:	693b      	ldr	r3, [r7, #16]
        return;
 8007380:	e082      	b.n	8007488 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d014      	beq.n	80073b8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007392:	f043 0201 	orr.w	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	0a1b      	lsrs	r3, r3, #8
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00c      	beq.n	80073de <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c8:	f043 0208 	orr.w	r2, r3, #8
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073d0:	2300      	movs	r3, #0
 80073d2:	60bb      	str	r3, [r7, #8]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	60bb      	str	r3, [r7, #8]
 80073dc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d04f      	beq.n	8007486 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073f4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <HAL_SPI_IRQHandler+0x17e>
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d034      	beq.n	800747c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 0203 	bic.w	r2, r2, #3
 8007420:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d011      	beq.n	800744e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742e:	4a18      	ldr	r2, [pc, #96]	; (8007490 <HAL_SPI_IRQHandler+0x1fc>)
 8007430:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007436:	4618      	mov	r0, r3
 8007438:	f7fc fa68 	bl	800390c <HAL_DMA_Abort_IT>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d005      	beq.n	800744e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007452:	2b00      	cmp	r3, #0
 8007454:	d016      	beq.n	8007484 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745a:	4a0d      	ldr	r2, [pc, #52]	; (8007490 <HAL_SPI_IRQHandler+0x1fc>)
 800745c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007462:	4618      	mov	r0, r3
 8007464:	f7fc fa52 	bl	800390c <HAL_DMA_Abort_IT>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007472:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800747a:	e003      	b.n	8007484 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f809 	bl	8007494 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007482:	e000      	b.n	8007486 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007484:	bf00      	nop
    return;
 8007486:	bf00      	nop
  }
}
 8007488:	3720      	adds	r7, #32
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	080074a9 	.word	0x080074a9

08007494 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f7ff ffe6 	bl	8007494 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074c8:	bf00      	nop
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	603b      	str	r3, [r7, #0]
 80074dc:	4613      	mov	r3, r2
 80074de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074e0:	f7fb ffb4 	bl	800344c <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	1a9b      	subs	r3, r3, r2
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	4413      	add	r3, r2
 80074ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074f0:	f7fb ffac 	bl	800344c <HAL_GetTick>
 80074f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074f6:	4b39      	ldr	r3, [pc, #228]	; (80075dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	015b      	lsls	r3, r3, #5
 80074fc:	0d1b      	lsrs	r3, r3, #20
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	fb02 f303 	mul.w	r3, r2, r3
 8007504:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007506:	e054      	b.n	80075b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750e:	d050      	beq.n	80075b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007510:	f7fb ff9c 	bl	800344c <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	429a      	cmp	r2, r3
 800751e:	d902      	bls.n	8007526 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d13d      	bne.n	80075a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007534:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800753e:	d111      	bne.n	8007564 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007548:	d004      	beq.n	8007554 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007552:	d107      	bne.n	8007564 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007562:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800756c:	d10f      	bne.n	800758e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800758c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e017      	b.n	80075d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4013      	ands	r3, r2
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	429a      	cmp	r2, r3
 80075c0:	bf0c      	ite	eq
 80075c2:	2301      	moveq	r3, #1
 80075c4:	2300      	movne	r3, #0
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	461a      	mov	r2, r3
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d19b      	bne.n	8007508 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3720      	adds	r7, #32
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000024 	.word	0x20000024

080075e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075ec:	4b1b      	ldr	r3, [pc, #108]	; (800765c <SPI_EndRxTxTransaction+0x7c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a1b      	ldr	r2, [pc, #108]	; (8007660 <SPI_EndRxTxTransaction+0x80>)
 80075f2:	fba2 2303 	umull	r2, r3, r2, r3
 80075f6:	0d5b      	lsrs	r3, r3, #21
 80075f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075fc:	fb02 f303 	mul.w	r3, r2, r3
 8007600:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800760a:	d112      	bne.n	8007632 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2200      	movs	r2, #0
 8007614:	2180      	movs	r1, #128	; 0x80
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f7ff ff5a 	bl	80074d0 <SPI_WaitFlagStateUntilTimeout>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d016      	beq.n	8007650 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007626:	f043 0220 	orr.w	r2, r3, #32
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e00f      	b.n	8007652 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	3b01      	subs	r3, #1
 800763c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007648:	2b80      	cmp	r3, #128	; 0x80
 800764a:	d0f2      	beq.n	8007632 <SPI_EndRxTxTransaction+0x52>
 800764c:	e000      	b.n	8007650 <SPI_EndRxTxTransaction+0x70>
        break;
 800764e:	bf00      	nop
  }

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20000024 	.word	0x20000024
 8007660:	165e9f81 	.word	0x165e9f81

08007664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e041      	b.n	80076fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7fb fd08 	bl	80030a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3304      	adds	r3, #4
 80076a0:	4619      	mov	r1, r3
 80076a2:	4610      	mov	r0, r2
 80076a4:	f000 f82e 	bl	8007704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a40      	ldr	r2, [pc, #256]	; (8007818 <TIM_Base_SetConfig+0x114>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d013      	beq.n	8007744 <TIM_Base_SetConfig+0x40>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007722:	d00f      	beq.n	8007744 <TIM_Base_SetConfig+0x40>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a3d      	ldr	r2, [pc, #244]	; (800781c <TIM_Base_SetConfig+0x118>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00b      	beq.n	8007744 <TIM_Base_SetConfig+0x40>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a3c      	ldr	r2, [pc, #240]	; (8007820 <TIM_Base_SetConfig+0x11c>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d007      	beq.n	8007744 <TIM_Base_SetConfig+0x40>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a3b      	ldr	r2, [pc, #236]	; (8007824 <TIM_Base_SetConfig+0x120>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d003      	beq.n	8007744 <TIM_Base_SetConfig+0x40>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a3a      	ldr	r2, [pc, #232]	; (8007828 <TIM_Base_SetConfig+0x124>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d108      	bne.n	8007756 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a2f      	ldr	r2, [pc, #188]	; (8007818 <TIM_Base_SetConfig+0x114>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d02b      	beq.n	80077b6 <TIM_Base_SetConfig+0xb2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007764:	d027      	beq.n	80077b6 <TIM_Base_SetConfig+0xb2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a2c      	ldr	r2, [pc, #176]	; (800781c <TIM_Base_SetConfig+0x118>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d023      	beq.n	80077b6 <TIM_Base_SetConfig+0xb2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a2b      	ldr	r2, [pc, #172]	; (8007820 <TIM_Base_SetConfig+0x11c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d01f      	beq.n	80077b6 <TIM_Base_SetConfig+0xb2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a2a      	ldr	r2, [pc, #168]	; (8007824 <TIM_Base_SetConfig+0x120>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d01b      	beq.n	80077b6 <TIM_Base_SetConfig+0xb2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a29      	ldr	r2, [pc, #164]	; (8007828 <TIM_Base_SetConfig+0x124>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d017      	beq.n	80077b6 <TIM_Base_SetConfig+0xb2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a28      	ldr	r2, [pc, #160]	; (800782c <TIM_Base_SetConfig+0x128>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d013      	beq.n	80077b6 <TIM_Base_SetConfig+0xb2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a27      	ldr	r2, [pc, #156]	; (8007830 <TIM_Base_SetConfig+0x12c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00f      	beq.n	80077b6 <TIM_Base_SetConfig+0xb2>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a26      	ldr	r2, [pc, #152]	; (8007834 <TIM_Base_SetConfig+0x130>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d00b      	beq.n	80077b6 <TIM_Base_SetConfig+0xb2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a25      	ldr	r2, [pc, #148]	; (8007838 <TIM_Base_SetConfig+0x134>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d007      	beq.n	80077b6 <TIM_Base_SetConfig+0xb2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a24      	ldr	r2, [pc, #144]	; (800783c <TIM_Base_SetConfig+0x138>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d003      	beq.n	80077b6 <TIM_Base_SetConfig+0xb2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a23      	ldr	r2, [pc, #140]	; (8007840 <TIM_Base_SetConfig+0x13c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d108      	bne.n	80077c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a0a      	ldr	r2, [pc, #40]	; (8007818 <TIM_Base_SetConfig+0x114>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d003      	beq.n	80077fc <TIM_Base_SetConfig+0xf8>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a0c      	ldr	r2, [pc, #48]	; (8007828 <TIM_Base_SetConfig+0x124>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d103      	bne.n	8007804 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	691a      	ldr	r2, [r3, #16]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	615a      	str	r2, [r3, #20]
}
 800780a:	bf00      	nop
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	40010000 	.word	0x40010000
 800781c:	40000400 	.word	0x40000400
 8007820:	40000800 	.word	0x40000800
 8007824:	40000c00 	.word	0x40000c00
 8007828:	40010400 	.word	0x40010400
 800782c:	40014000 	.word	0x40014000
 8007830:	40014400 	.word	0x40014400
 8007834:	40014800 	.word	0x40014800
 8007838:	40001800 	.word	0x40001800
 800783c:	40001c00 	.word	0x40001c00
 8007840:	40002000 	.word	0x40002000

08007844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007854:	2b01      	cmp	r3, #1
 8007856:	d101      	bne.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007858:	2302      	movs	r3, #2
 800785a:	e05a      	b.n	8007912 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a21      	ldr	r2, [pc, #132]	; (8007920 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d022      	beq.n	80078e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a8:	d01d      	beq.n	80078e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d018      	beq.n	80078e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a1b      	ldr	r2, [pc, #108]	; (8007928 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d013      	beq.n	80078e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a1a      	ldr	r2, [pc, #104]	; (800792c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00e      	beq.n	80078e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a18      	ldr	r2, [pc, #96]	; (8007930 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d009      	beq.n	80078e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a17      	ldr	r2, [pc, #92]	; (8007934 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d004      	beq.n	80078e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a15      	ldr	r2, [pc, #84]	; (8007938 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d10c      	bne.n	8007900 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	40010000 	.word	0x40010000
 8007924:	40000400 	.word	0x40000400
 8007928:	40000800 	.word	0x40000800
 800792c:	40000c00 	.word	0x40000c00
 8007930:	40010400 	.word	0x40010400
 8007934:	40014000 	.word	0x40014000
 8007938:	40001800 	.word	0x40001800

0800793c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e03f      	b.n	80079ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7fb fbbe 	bl	80030e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2224      	movs	r2, #36	; 0x24
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800797e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fc71 	bl	8008268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	691a      	ldr	r2, [r3, #16]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	695a      	ldr	r2, [r3, #20]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2220      	movs	r2, #32
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b0ba      	sub	sp, #232	; 0xe8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a0e:	f003 030f 	and.w	r3, r3, #15
 8007a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10f      	bne.n	8007a3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d009      	beq.n	8007a3e <HAL_UART_IRQHandler+0x66>
 8007a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fb5b 	bl	80080f2 <UART_Receive_IT>
      return;
 8007a3c:	e256      	b.n	8007eec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 80de 	beq.w	8007c04 <HAL_UART_IRQHandler+0x22c>
 8007a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d106      	bne.n	8007a62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 80d1 	beq.w	8007c04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00b      	beq.n	8007a86 <HAL_UART_IRQHandler+0xae>
 8007a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d005      	beq.n	8007a86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	f043 0201 	orr.w	r2, r3, #1
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8a:	f003 0304 	and.w	r3, r3, #4
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00b      	beq.n	8007aaa <HAL_UART_IRQHandler+0xd2>
 8007a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d005      	beq.n	8007aaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	f043 0202 	orr.w	r2, r3, #2
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00b      	beq.n	8007ace <HAL_UART_IRQHandler+0xf6>
 8007ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	f043 0204 	orr.w	r2, r3, #4
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d011      	beq.n	8007afe <HAL_UART_IRQHandler+0x126>
 8007ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d105      	bne.n	8007af2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	f043 0208 	orr.w	r2, r3, #8
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 81ed 	beq.w	8007ee2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0c:	f003 0320 	and.w	r3, r3, #32
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d008      	beq.n	8007b26 <HAL_UART_IRQHandler+0x14e>
 8007b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b18:	f003 0320 	and.w	r3, r3, #32
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fae6 	bl	80080f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b30:	2b40      	cmp	r3, #64	; 0x40
 8007b32:	bf0c      	ite	eq
 8007b34:	2301      	moveq	r3, #1
 8007b36:	2300      	movne	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b42:	f003 0308 	and.w	r3, r3, #8
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d103      	bne.n	8007b52 <HAL_UART_IRQHandler+0x17a>
 8007b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d04f      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f9ee 	bl	8007f34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b40      	cmp	r3, #64	; 0x40
 8007b64:	d141      	bne.n	8007bea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3314      	adds	r3, #20
 8007b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3314      	adds	r3, #20
 8007b8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1d9      	bne.n	8007b66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d013      	beq.n	8007be2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	4a7d      	ldr	r2, [pc, #500]	; (8007db4 <HAL_UART_IRQHandler+0x3dc>)
 8007bc0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fb fea0 	bl	800390c <HAL_DMA_Abort_IT>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d016      	beq.n	8007c00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be0:	e00e      	b.n	8007c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f990 	bl	8007f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be8:	e00a      	b.n	8007c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f98c 	bl	8007f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf0:	e006      	b.n	8007c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f988 	bl	8007f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007bfe:	e170      	b.n	8007ee2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c00:	bf00      	nop
    return;
 8007c02:	e16e      	b.n	8007ee2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	f040 814a 	bne.w	8007ea2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c12:	f003 0310 	and.w	r3, r3, #16
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 8143 	beq.w	8007ea2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c20:	f003 0310 	and.w	r3, r3, #16
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 813c 	beq.w	8007ea2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60bb      	str	r3, [r7, #8]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	60bb      	str	r3, [r7, #8]
 8007c3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4a:	2b40      	cmp	r3, #64	; 0x40
 8007c4c:	f040 80b4 	bne.w	8007db8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 8140 	beq.w	8007ee6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	f080 8139 	bcs.w	8007ee6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c86:	f000 8088 	beq.w	8007d9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	330c      	adds	r3, #12
 8007c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	330c      	adds	r3, #12
 8007cb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1d9      	bne.n	8007c8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3314      	adds	r3, #20
 8007cdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3314      	adds	r3, #20
 8007cf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e1      	bne.n	8007cd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3314      	adds	r3, #20
 8007d18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d1c:	e853 3f00 	ldrex	r3, [r3]
 8007d20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3314      	adds	r3, #20
 8007d32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d3e:	e841 2300 	strex	r3, r2, [r1]
 8007d42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1e3      	bne.n	8007d12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	330c      	adds	r3, #12
 8007d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d6a:	f023 0310 	bic.w	r3, r3, #16
 8007d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	330c      	adds	r3, #12
 8007d78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e3      	bne.n	8007d58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fb fd49 	bl	800382c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f8b6 	bl	8007f1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007db0:	e099      	b.n	8007ee6 <HAL_UART_IRQHandler+0x50e>
 8007db2:	bf00      	nop
 8007db4:	08007ffb 	.word	0x08007ffb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 808b 	beq.w	8007eea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 8086 	beq.w	8007eea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	330c      	adds	r3, #12
 8007de4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007df4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	330c      	adds	r3, #12
 8007dfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e02:	647a      	str	r2, [r7, #68]	; 0x44
 8007e04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e3      	bne.n	8007dde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3314      	adds	r3, #20
 8007e1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	623b      	str	r3, [r7, #32]
   return(result);
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	f023 0301 	bic.w	r3, r3, #1
 8007e2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3314      	adds	r3, #20
 8007e36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e3a:	633a      	str	r2, [r7, #48]	; 0x30
 8007e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e42:	e841 2300 	strex	r3, r2, [r1]
 8007e46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1e3      	bne.n	8007e16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	330c      	adds	r3, #12
 8007e62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f023 0310 	bic.w	r3, r3, #16
 8007e72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	330c      	adds	r3, #12
 8007e7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e80:	61fa      	str	r2, [r7, #28]
 8007e82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	69b9      	ldr	r1, [r7, #24]
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e3      	bne.n	8007e5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f83e 	bl	8007f1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ea0:	e023      	b.n	8007eea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d009      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x4ea>
 8007eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f8b1 	bl	8008022 <UART_Transmit_IT>
    return;
 8007ec0:	e014      	b.n	8007eec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00e      	beq.n	8007eec <HAL_UART_IRQHandler+0x514>
 8007ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d008      	beq.n	8007eec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f8f1 	bl	80080c2 <UART_EndTransmit_IT>
    return;
 8007ee0:	e004      	b.n	8007eec <HAL_UART_IRQHandler+0x514>
    return;
 8007ee2:	bf00      	nop
 8007ee4:	e002      	b.n	8007eec <HAL_UART_IRQHandler+0x514>
      return;
 8007ee6:	bf00      	nop
 8007ee8:	e000      	b.n	8007eec <HAL_UART_IRQHandler+0x514>
      return;
 8007eea:	bf00      	nop
  }
}
 8007eec:	37e8      	adds	r7, #232	; 0xe8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop

08007ef4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b095      	sub	sp, #84	; 0x54
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	330c      	adds	r3, #12
 8007f42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	330c      	adds	r3, #12
 8007f5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f5c:	643a      	str	r2, [r7, #64]	; 0x40
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e5      	bne.n	8007f3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3314      	adds	r3, #20
 8007f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f023 0301 	bic.w	r3, r3, #1
 8007f86:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3314      	adds	r3, #20
 8007f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e5      	bne.n	8007f70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d119      	bne.n	8007fe0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	330c      	adds	r3, #12
 8007fb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f023 0310 	bic.w	r3, r3, #16
 8007fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	330c      	adds	r3, #12
 8007fca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fcc:	61ba      	str	r2, [r7, #24]
 8007fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	6979      	ldr	r1, [r7, #20]
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	e841 2300 	strex	r3, r2, [r1]
 8007fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e5      	bne.n	8007fac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007fee:	bf00      	nop
 8007ff0:	3754      	adds	r7, #84	; 0x54
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008006:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f7ff ff77 	bl	8007f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800801a:	bf00      	nop
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008022:	b480      	push	{r7}
 8008024:	b085      	sub	sp, #20
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b21      	cmp	r3, #33	; 0x21
 8008034:	d13e      	bne.n	80080b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800803e:	d114      	bne.n	800806a <UART_Transmit_IT+0x48>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d110      	bne.n	800806a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800805c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	1c9a      	adds	r2, r3, #2
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	621a      	str	r2, [r3, #32]
 8008068:	e008      	b.n	800807c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	1c59      	adds	r1, r3, #1
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	6211      	str	r1, [r2, #32]
 8008074:	781a      	ldrb	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008080:	b29b      	uxth	r3, r3
 8008082:	3b01      	subs	r3, #1
 8008084:	b29b      	uxth	r3, r3
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	4619      	mov	r1, r3
 800808a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10f      	bne.n	80080b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800809e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	e000      	b.n	80080b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080b4:	2302      	movs	r3, #2
  }
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b082      	sub	sp, #8
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7f8 ffa3 	bl	800102e <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b08c      	sub	sp, #48	; 0x30
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b22      	cmp	r3, #34	; 0x22
 8008104:	f040 80ab 	bne.w	800825e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008110:	d117      	bne.n	8008142 <UART_Receive_IT+0x50>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d113      	bne.n	8008142 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008122:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	b29b      	uxth	r3, r3
 800812c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008130:	b29a      	uxth	r2, r3
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813a:	1c9a      	adds	r2, r3, #2
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	629a      	str	r2, [r3, #40]	; 0x28
 8008140:	e026      	b.n	8008190 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008148:	2300      	movs	r3, #0
 800814a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008154:	d007      	beq.n	8008166 <UART_Receive_IT+0x74>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10a      	bne.n	8008174 <UART_Receive_IT+0x82>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d106      	bne.n	8008174 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	b2da      	uxtb	r2, r3
 800816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008170:	701a      	strb	r2, [r3, #0]
 8008172:	e008      	b.n	8008186 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	b2db      	uxtb	r3, r3
 800817c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008180:	b2da      	uxtb	r2, r3
 8008182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008184:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	1c5a      	adds	r2, r3, #1
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008194:	b29b      	uxth	r3, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	b29b      	uxth	r3, r3
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	4619      	mov	r1, r3
 800819e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d15a      	bne.n	800825a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0220 	bic.w	r2, r2, #32
 80081b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	695a      	ldr	r2, [r3, #20]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0201 	bic.w	r2, r2, #1
 80081d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d135      	bne.n	8008250 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	330c      	adds	r3, #12
 80081f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	613b      	str	r3, [r7, #16]
   return(result);
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f023 0310 	bic.w	r3, r3, #16
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	330c      	adds	r3, #12
 8008208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800820a:	623a      	str	r2, [r7, #32]
 800820c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	69f9      	ldr	r1, [r7, #28]
 8008210:	6a3a      	ldr	r2, [r7, #32]
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	61bb      	str	r3, [r7, #24]
   return(result);
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e5      	bne.n	80081ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0310 	and.w	r3, r3, #16
 8008228:	2b10      	cmp	r3, #16
 800822a:	d10a      	bne.n	8008242 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff fe67 	bl	8007f1c <HAL_UARTEx_RxEventCallback>
 800824e:	e002      	b.n	8008256 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7ff fe4f 	bl	8007ef4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	e002      	b.n	8008260 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	e000      	b.n	8008260 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800825e:	2302      	movs	r3, #2
  }
}
 8008260:	4618      	mov	r0, r3
 8008262:	3730      	adds	r7, #48	; 0x30
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800826c:	b0c0      	sub	sp, #256	; 0x100
 800826e:	af00      	add	r7, sp, #0
 8008270:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008284:	68d9      	ldr	r1, [r3, #12]
 8008286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	ea40 0301 	orr.w	r3, r0, r1
 8008290:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008296:	689a      	ldr	r2, [r3, #8]
 8008298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	431a      	orrs	r2, r3
 80082a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	431a      	orrs	r2, r3
 80082a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80082b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80082c0:	f021 010c 	bic.w	r1, r1, #12
 80082c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082ce:	430b      	orrs	r3, r1
 80082d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80082de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e2:	6999      	ldr	r1, [r3, #24]
 80082e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	ea40 0301 	orr.w	r3, r0, r1
 80082ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	4b8f      	ldr	r3, [pc, #572]	; (8008534 <UART_SetConfig+0x2cc>)
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d005      	beq.n	8008308 <UART_SetConfig+0xa0>
 80082fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b8d      	ldr	r3, [pc, #564]	; (8008538 <UART_SetConfig+0x2d0>)
 8008304:	429a      	cmp	r2, r3
 8008306:	d104      	bne.n	8008312 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008308:	f7fe fc44 	bl	8006b94 <HAL_RCC_GetPCLK2Freq>
 800830c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008310:	e003      	b.n	800831a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008312:	f7fe fc2b 	bl	8006b6c <HAL_RCC_GetPCLK1Freq>
 8008316:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800831a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008324:	f040 810c 	bne.w	8008540 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800832c:	2200      	movs	r2, #0
 800832e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008332:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008336:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800833a:	4622      	mov	r2, r4
 800833c:	462b      	mov	r3, r5
 800833e:	1891      	adds	r1, r2, r2
 8008340:	65b9      	str	r1, [r7, #88]	; 0x58
 8008342:	415b      	adcs	r3, r3
 8008344:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008346:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800834a:	4621      	mov	r1, r4
 800834c:	eb12 0801 	adds.w	r8, r2, r1
 8008350:	4629      	mov	r1, r5
 8008352:	eb43 0901 	adc.w	r9, r3, r1
 8008356:	f04f 0200 	mov.w	r2, #0
 800835a:	f04f 0300 	mov.w	r3, #0
 800835e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800836a:	4690      	mov	r8, r2
 800836c:	4699      	mov	r9, r3
 800836e:	4623      	mov	r3, r4
 8008370:	eb18 0303 	adds.w	r3, r8, r3
 8008374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008378:	462b      	mov	r3, r5
 800837a:	eb49 0303 	adc.w	r3, r9, r3
 800837e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800838e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008392:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008396:	460b      	mov	r3, r1
 8008398:	18db      	adds	r3, r3, r3
 800839a:	653b      	str	r3, [r7, #80]	; 0x50
 800839c:	4613      	mov	r3, r2
 800839e:	eb42 0303 	adc.w	r3, r2, r3
 80083a2:	657b      	str	r3, [r7, #84]	; 0x54
 80083a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80083a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80083ac:	f7f8 fafa 	bl	80009a4 <__aeabi_uldivmod>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4b61      	ldr	r3, [pc, #388]	; (800853c <UART_SetConfig+0x2d4>)
 80083b6:	fba3 2302 	umull	r2, r3, r3, r2
 80083ba:	095b      	lsrs	r3, r3, #5
 80083bc:	011c      	lsls	r4, r3, #4
 80083be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80083cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80083d0:	4642      	mov	r2, r8
 80083d2:	464b      	mov	r3, r9
 80083d4:	1891      	adds	r1, r2, r2
 80083d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80083d8:	415b      	adcs	r3, r3
 80083da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80083e0:	4641      	mov	r1, r8
 80083e2:	eb12 0a01 	adds.w	sl, r2, r1
 80083e6:	4649      	mov	r1, r9
 80083e8:	eb43 0b01 	adc.w	fp, r3, r1
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	f04f 0300 	mov.w	r3, #0
 80083f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008400:	4692      	mov	sl, r2
 8008402:	469b      	mov	fp, r3
 8008404:	4643      	mov	r3, r8
 8008406:	eb1a 0303 	adds.w	r3, sl, r3
 800840a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800840e:	464b      	mov	r3, r9
 8008410:	eb4b 0303 	adc.w	r3, fp, r3
 8008414:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008424:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008428:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800842c:	460b      	mov	r3, r1
 800842e:	18db      	adds	r3, r3, r3
 8008430:	643b      	str	r3, [r7, #64]	; 0x40
 8008432:	4613      	mov	r3, r2
 8008434:	eb42 0303 	adc.w	r3, r2, r3
 8008438:	647b      	str	r3, [r7, #68]	; 0x44
 800843a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800843e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008442:	f7f8 faaf 	bl	80009a4 <__aeabi_uldivmod>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	4611      	mov	r1, r2
 800844c:	4b3b      	ldr	r3, [pc, #236]	; (800853c <UART_SetConfig+0x2d4>)
 800844e:	fba3 2301 	umull	r2, r3, r3, r1
 8008452:	095b      	lsrs	r3, r3, #5
 8008454:	2264      	movs	r2, #100	; 0x64
 8008456:	fb02 f303 	mul.w	r3, r2, r3
 800845a:	1acb      	subs	r3, r1, r3
 800845c:	00db      	lsls	r3, r3, #3
 800845e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008462:	4b36      	ldr	r3, [pc, #216]	; (800853c <UART_SetConfig+0x2d4>)
 8008464:	fba3 2302 	umull	r2, r3, r3, r2
 8008468:	095b      	lsrs	r3, r3, #5
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008470:	441c      	add	r4, r3
 8008472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008476:	2200      	movs	r2, #0
 8008478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800847c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008480:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008484:	4642      	mov	r2, r8
 8008486:	464b      	mov	r3, r9
 8008488:	1891      	adds	r1, r2, r2
 800848a:	63b9      	str	r1, [r7, #56]	; 0x38
 800848c:	415b      	adcs	r3, r3
 800848e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008490:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008494:	4641      	mov	r1, r8
 8008496:	1851      	adds	r1, r2, r1
 8008498:	6339      	str	r1, [r7, #48]	; 0x30
 800849a:	4649      	mov	r1, r9
 800849c:	414b      	adcs	r3, r1
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
 80084a0:	f04f 0200 	mov.w	r2, #0
 80084a4:	f04f 0300 	mov.w	r3, #0
 80084a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80084ac:	4659      	mov	r1, fp
 80084ae:	00cb      	lsls	r3, r1, #3
 80084b0:	4651      	mov	r1, sl
 80084b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084b6:	4651      	mov	r1, sl
 80084b8:	00ca      	lsls	r2, r1, #3
 80084ba:	4610      	mov	r0, r2
 80084bc:	4619      	mov	r1, r3
 80084be:	4603      	mov	r3, r0
 80084c0:	4642      	mov	r2, r8
 80084c2:	189b      	adds	r3, r3, r2
 80084c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084c8:	464b      	mov	r3, r9
 80084ca:	460a      	mov	r2, r1
 80084cc:	eb42 0303 	adc.w	r3, r2, r3
 80084d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80084e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80084e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80084e8:	460b      	mov	r3, r1
 80084ea:	18db      	adds	r3, r3, r3
 80084ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80084ee:	4613      	mov	r3, r2
 80084f0:	eb42 0303 	adc.w	r3, r2, r3
 80084f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80084fe:	f7f8 fa51 	bl	80009a4 <__aeabi_uldivmod>
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	4b0d      	ldr	r3, [pc, #52]	; (800853c <UART_SetConfig+0x2d4>)
 8008508:	fba3 1302 	umull	r1, r3, r3, r2
 800850c:	095b      	lsrs	r3, r3, #5
 800850e:	2164      	movs	r1, #100	; 0x64
 8008510:	fb01 f303 	mul.w	r3, r1, r3
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	3332      	adds	r3, #50	; 0x32
 800851a:	4a08      	ldr	r2, [pc, #32]	; (800853c <UART_SetConfig+0x2d4>)
 800851c:	fba2 2303 	umull	r2, r3, r2, r3
 8008520:	095b      	lsrs	r3, r3, #5
 8008522:	f003 0207 	and.w	r2, r3, #7
 8008526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4422      	add	r2, r4
 800852e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008530:	e105      	b.n	800873e <UART_SetConfig+0x4d6>
 8008532:	bf00      	nop
 8008534:	40011000 	.word	0x40011000
 8008538:	40011400 	.word	0x40011400
 800853c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008544:	2200      	movs	r2, #0
 8008546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800854a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800854e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008552:	4642      	mov	r2, r8
 8008554:	464b      	mov	r3, r9
 8008556:	1891      	adds	r1, r2, r2
 8008558:	6239      	str	r1, [r7, #32]
 800855a:	415b      	adcs	r3, r3
 800855c:	627b      	str	r3, [r7, #36]	; 0x24
 800855e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008562:	4641      	mov	r1, r8
 8008564:	1854      	adds	r4, r2, r1
 8008566:	4649      	mov	r1, r9
 8008568:	eb43 0501 	adc.w	r5, r3, r1
 800856c:	f04f 0200 	mov.w	r2, #0
 8008570:	f04f 0300 	mov.w	r3, #0
 8008574:	00eb      	lsls	r3, r5, #3
 8008576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800857a:	00e2      	lsls	r2, r4, #3
 800857c:	4614      	mov	r4, r2
 800857e:	461d      	mov	r5, r3
 8008580:	4643      	mov	r3, r8
 8008582:	18e3      	adds	r3, r4, r3
 8008584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008588:	464b      	mov	r3, r9
 800858a:	eb45 0303 	adc.w	r3, r5, r3
 800858e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800859e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085a2:	f04f 0200 	mov.w	r2, #0
 80085a6:	f04f 0300 	mov.w	r3, #0
 80085aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80085ae:	4629      	mov	r1, r5
 80085b0:	008b      	lsls	r3, r1, #2
 80085b2:	4621      	mov	r1, r4
 80085b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085b8:	4621      	mov	r1, r4
 80085ba:	008a      	lsls	r2, r1, #2
 80085bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80085c0:	f7f8 f9f0 	bl	80009a4 <__aeabi_uldivmod>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	4b60      	ldr	r3, [pc, #384]	; (800874c <UART_SetConfig+0x4e4>)
 80085ca:	fba3 2302 	umull	r2, r3, r3, r2
 80085ce:	095b      	lsrs	r3, r3, #5
 80085d0:	011c      	lsls	r4, r3, #4
 80085d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80085dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80085e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80085e4:	4642      	mov	r2, r8
 80085e6:	464b      	mov	r3, r9
 80085e8:	1891      	adds	r1, r2, r2
 80085ea:	61b9      	str	r1, [r7, #24]
 80085ec:	415b      	adcs	r3, r3
 80085ee:	61fb      	str	r3, [r7, #28]
 80085f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085f4:	4641      	mov	r1, r8
 80085f6:	1851      	adds	r1, r2, r1
 80085f8:	6139      	str	r1, [r7, #16]
 80085fa:	4649      	mov	r1, r9
 80085fc:	414b      	adcs	r3, r1
 80085fe:	617b      	str	r3, [r7, #20]
 8008600:	f04f 0200 	mov.w	r2, #0
 8008604:	f04f 0300 	mov.w	r3, #0
 8008608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800860c:	4659      	mov	r1, fp
 800860e:	00cb      	lsls	r3, r1, #3
 8008610:	4651      	mov	r1, sl
 8008612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008616:	4651      	mov	r1, sl
 8008618:	00ca      	lsls	r2, r1, #3
 800861a:	4610      	mov	r0, r2
 800861c:	4619      	mov	r1, r3
 800861e:	4603      	mov	r3, r0
 8008620:	4642      	mov	r2, r8
 8008622:	189b      	adds	r3, r3, r2
 8008624:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008628:	464b      	mov	r3, r9
 800862a:	460a      	mov	r2, r1
 800862c:	eb42 0303 	adc.w	r3, r2, r3
 8008630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	67bb      	str	r3, [r7, #120]	; 0x78
 800863e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008640:	f04f 0200 	mov.w	r2, #0
 8008644:	f04f 0300 	mov.w	r3, #0
 8008648:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800864c:	4649      	mov	r1, r9
 800864e:	008b      	lsls	r3, r1, #2
 8008650:	4641      	mov	r1, r8
 8008652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008656:	4641      	mov	r1, r8
 8008658:	008a      	lsls	r2, r1, #2
 800865a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800865e:	f7f8 f9a1 	bl	80009a4 <__aeabi_uldivmod>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4b39      	ldr	r3, [pc, #228]	; (800874c <UART_SetConfig+0x4e4>)
 8008668:	fba3 1302 	umull	r1, r3, r3, r2
 800866c:	095b      	lsrs	r3, r3, #5
 800866e:	2164      	movs	r1, #100	; 0x64
 8008670:	fb01 f303 	mul.w	r3, r1, r3
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	011b      	lsls	r3, r3, #4
 8008678:	3332      	adds	r3, #50	; 0x32
 800867a:	4a34      	ldr	r2, [pc, #208]	; (800874c <UART_SetConfig+0x4e4>)
 800867c:	fba2 2303 	umull	r2, r3, r2, r3
 8008680:	095b      	lsrs	r3, r3, #5
 8008682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008686:	441c      	add	r4, r3
 8008688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800868c:	2200      	movs	r2, #0
 800868e:	673b      	str	r3, [r7, #112]	; 0x70
 8008690:	677a      	str	r2, [r7, #116]	; 0x74
 8008692:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008696:	4642      	mov	r2, r8
 8008698:	464b      	mov	r3, r9
 800869a:	1891      	adds	r1, r2, r2
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	415b      	adcs	r3, r3
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086a6:	4641      	mov	r1, r8
 80086a8:	1851      	adds	r1, r2, r1
 80086aa:	6039      	str	r1, [r7, #0]
 80086ac:	4649      	mov	r1, r9
 80086ae:	414b      	adcs	r3, r1
 80086b0:	607b      	str	r3, [r7, #4]
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	f04f 0300 	mov.w	r3, #0
 80086ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80086be:	4659      	mov	r1, fp
 80086c0:	00cb      	lsls	r3, r1, #3
 80086c2:	4651      	mov	r1, sl
 80086c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086c8:	4651      	mov	r1, sl
 80086ca:	00ca      	lsls	r2, r1, #3
 80086cc:	4610      	mov	r0, r2
 80086ce:	4619      	mov	r1, r3
 80086d0:	4603      	mov	r3, r0
 80086d2:	4642      	mov	r2, r8
 80086d4:	189b      	adds	r3, r3, r2
 80086d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80086d8:	464b      	mov	r3, r9
 80086da:	460a      	mov	r2, r1
 80086dc:	eb42 0303 	adc.w	r3, r2, r3
 80086e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	663b      	str	r3, [r7, #96]	; 0x60
 80086ec:	667a      	str	r2, [r7, #100]	; 0x64
 80086ee:	f04f 0200 	mov.w	r2, #0
 80086f2:	f04f 0300 	mov.w	r3, #0
 80086f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80086fa:	4649      	mov	r1, r9
 80086fc:	008b      	lsls	r3, r1, #2
 80086fe:	4641      	mov	r1, r8
 8008700:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008704:	4641      	mov	r1, r8
 8008706:	008a      	lsls	r2, r1, #2
 8008708:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800870c:	f7f8 f94a 	bl	80009a4 <__aeabi_uldivmod>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4b0d      	ldr	r3, [pc, #52]	; (800874c <UART_SetConfig+0x4e4>)
 8008716:	fba3 1302 	umull	r1, r3, r3, r2
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	2164      	movs	r1, #100	; 0x64
 800871e:	fb01 f303 	mul.w	r3, r1, r3
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	3332      	adds	r3, #50	; 0x32
 8008728:	4a08      	ldr	r2, [pc, #32]	; (800874c <UART_SetConfig+0x4e4>)
 800872a:	fba2 2303 	umull	r2, r3, r2, r3
 800872e:	095b      	lsrs	r3, r3, #5
 8008730:	f003 020f 	and.w	r2, r3, #15
 8008734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4422      	add	r2, r4
 800873c:	609a      	str	r2, [r3, #8]
}
 800873e:	bf00      	nop
 8008740:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008744:	46bd      	mov	sp, r7
 8008746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800874a:	bf00      	nop
 800874c:	51eb851f 	.word	0x51eb851f

08008750 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008750:	b084      	sub	sp, #16
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	f107 001c 	add.w	r0, r7, #28
 800875e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	2b01      	cmp	r3, #1
 8008766:	d122      	bne.n	80087ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800877c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008792:	2b01      	cmp	r3, #1
 8008794:	d105      	bne.n	80087a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 fbee 	bl	8009f84 <USB_CoreReset>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]
 80087ac:	e01a      	b.n	80087e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 fbe2 	bl	8009f84 <USB_CoreReset>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80087c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d106      	bne.n	80087d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	639a      	str	r2, [r3, #56]	; 0x38
 80087d6:	e005      	b.n	80087e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d10b      	bne.n	8008802 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f043 0206 	orr.w	r2, r3, #6
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f043 0220 	orr.w	r2, r3, #32
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008802:	7bfb      	ldrb	r3, [r7, #15]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800880e:	b004      	add	sp, #16
 8008810:	4770      	bx	lr
	...

08008814 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	4613      	mov	r3, r2
 8008820:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	2b02      	cmp	r3, #2
 8008826:	d165      	bne.n	80088f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4a41      	ldr	r2, [pc, #260]	; (8008930 <USB_SetTurnaroundTime+0x11c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d906      	bls.n	800883e <USB_SetTurnaroundTime+0x2a>
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	4a40      	ldr	r2, [pc, #256]	; (8008934 <USB_SetTurnaroundTime+0x120>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d202      	bcs.n	800883e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008838:	230f      	movs	r3, #15
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	e062      	b.n	8008904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	4a3c      	ldr	r2, [pc, #240]	; (8008934 <USB_SetTurnaroundTime+0x120>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d306      	bcc.n	8008854 <USB_SetTurnaroundTime+0x40>
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	4a3b      	ldr	r2, [pc, #236]	; (8008938 <USB_SetTurnaroundTime+0x124>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d202      	bcs.n	8008854 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800884e:	230e      	movs	r3, #14
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	e057      	b.n	8008904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	4a38      	ldr	r2, [pc, #224]	; (8008938 <USB_SetTurnaroundTime+0x124>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d306      	bcc.n	800886a <USB_SetTurnaroundTime+0x56>
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	4a37      	ldr	r2, [pc, #220]	; (800893c <USB_SetTurnaroundTime+0x128>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d202      	bcs.n	800886a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008864:	230d      	movs	r3, #13
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	e04c      	b.n	8008904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	4a33      	ldr	r2, [pc, #204]	; (800893c <USB_SetTurnaroundTime+0x128>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d306      	bcc.n	8008880 <USB_SetTurnaroundTime+0x6c>
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	4a32      	ldr	r2, [pc, #200]	; (8008940 <USB_SetTurnaroundTime+0x12c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d802      	bhi.n	8008880 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800887a:	230c      	movs	r3, #12
 800887c:	617b      	str	r3, [r7, #20]
 800887e:	e041      	b.n	8008904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	4a2f      	ldr	r2, [pc, #188]	; (8008940 <USB_SetTurnaroundTime+0x12c>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d906      	bls.n	8008896 <USB_SetTurnaroundTime+0x82>
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	4a2e      	ldr	r2, [pc, #184]	; (8008944 <USB_SetTurnaroundTime+0x130>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d802      	bhi.n	8008896 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008890:	230b      	movs	r3, #11
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	e036      	b.n	8008904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	4a2a      	ldr	r2, [pc, #168]	; (8008944 <USB_SetTurnaroundTime+0x130>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d906      	bls.n	80088ac <USB_SetTurnaroundTime+0x98>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	4a29      	ldr	r2, [pc, #164]	; (8008948 <USB_SetTurnaroundTime+0x134>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d802      	bhi.n	80088ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80088a6:	230a      	movs	r3, #10
 80088a8:	617b      	str	r3, [r7, #20]
 80088aa:	e02b      	b.n	8008904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	4a26      	ldr	r2, [pc, #152]	; (8008948 <USB_SetTurnaroundTime+0x134>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d906      	bls.n	80088c2 <USB_SetTurnaroundTime+0xae>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	4a25      	ldr	r2, [pc, #148]	; (800894c <USB_SetTurnaroundTime+0x138>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d202      	bcs.n	80088c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80088bc:	2309      	movs	r3, #9
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	e020      	b.n	8008904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	4a21      	ldr	r2, [pc, #132]	; (800894c <USB_SetTurnaroundTime+0x138>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d306      	bcc.n	80088d8 <USB_SetTurnaroundTime+0xc4>
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	4a20      	ldr	r2, [pc, #128]	; (8008950 <USB_SetTurnaroundTime+0x13c>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d802      	bhi.n	80088d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80088d2:	2308      	movs	r3, #8
 80088d4:	617b      	str	r3, [r7, #20]
 80088d6:	e015      	b.n	8008904 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	4a1d      	ldr	r2, [pc, #116]	; (8008950 <USB_SetTurnaroundTime+0x13c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d906      	bls.n	80088ee <USB_SetTurnaroundTime+0xda>
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	4a1c      	ldr	r2, [pc, #112]	; (8008954 <USB_SetTurnaroundTime+0x140>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d202      	bcs.n	80088ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80088e8:	2307      	movs	r3, #7
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	e00a      	b.n	8008904 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80088ee:	2306      	movs	r3, #6
 80088f0:	617b      	str	r3, [r7, #20]
 80088f2:	e007      	b.n	8008904 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d102      	bne.n	8008900 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80088fa:	2309      	movs	r3, #9
 80088fc:	617b      	str	r3, [r7, #20]
 80088fe:	e001      	b.n	8008904 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008900:	2309      	movs	r3, #9
 8008902:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	68da      	ldr	r2, [r3, #12]
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	029b      	lsls	r3, r3, #10
 8008918:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800891c:	431a      	orrs	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	371c      	adds	r7, #28
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	00d8acbf 	.word	0x00d8acbf
 8008934:	00e4e1c0 	.word	0x00e4e1c0
 8008938:	00f42400 	.word	0x00f42400
 800893c:	01067380 	.word	0x01067380
 8008940:	011a499f 	.word	0x011a499f
 8008944:	01312cff 	.word	0x01312cff
 8008948:	014ca43f 	.word	0x014ca43f
 800894c:	016e3600 	.word	0x016e3600
 8008950:	01a6ab1f 	.word	0x01a6ab1f
 8008954:	01e84800 	.word	0x01e84800

08008958 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f043 0201 	orr.w	r2, r3, #1
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f023 0201 	bic.w	r2, r3, #1
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d115      	bne.n	80089ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089ca:	2001      	movs	r0, #1
 80089cc:	f7fa fd4a 	bl	8003464 <HAL_Delay>
      ms++;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	3301      	adds	r3, #1
 80089d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f001 fa45 	bl	8009e66 <USB_GetMode>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d01e      	beq.n	8008a20 <USB_SetCurrentMode+0x84>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2b31      	cmp	r3, #49	; 0x31
 80089e6:	d9f0      	bls.n	80089ca <USB_SetCurrentMode+0x2e>
 80089e8:	e01a      	b.n	8008a20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80089ea:	78fb      	ldrb	r3, [r7, #3]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d115      	bne.n	8008a1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089fc:	2001      	movs	r0, #1
 80089fe:	f7fa fd31 	bl	8003464 <HAL_Delay>
      ms++;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3301      	adds	r3, #1
 8008a06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 fa2c 	bl	8009e66 <USB_GetMode>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d005      	beq.n	8008a20 <USB_SetCurrentMode+0x84>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2b31      	cmp	r3, #49	; 0x31
 8008a18:	d9f0      	bls.n	80089fc <USB_SetCurrentMode+0x60>
 8008a1a:	e001      	b.n	8008a20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e005      	b.n	8008a2c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b32      	cmp	r3, #50	; 0x32
 8008a24:	d101      	bne.n	8008a2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e000      	b.n	8008a2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a34:	b084      	sub	sp, #16
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b086      	sub	sp, #24
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a4e:	2300      	movs	r3, #0
 8008a50:	613b      	str	r3, [r7, #16]
 8008a52:	e009      	b.n	8008a68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	3340      	adds	r3, #64	; 0x40
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	2200      	movs	r2, #0
 8008a60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	3301      	adds	r3, #1
 8008a66:	613b      	str	r3, [r7, #16]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	2b0e      	cmp	r3, #14
 8008a6c:	d9f2      	bls.n	8008a54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d11c      	bne.n	8008aae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a82:	f043 0302 	orr.w	r3, r3, #2
 8008a86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38
 8008aac:	e00b      	b.n	8008ac6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008acc:	461a      	mov	r2, r3
 8008ace:	2300      	movs	r3, #0
 8008ad0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad8:	4619      	mov	r1, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	680b      	ldr	r3, [r1, #0]
 8008ae4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d10c      	bne.n	8008b06 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d104      	bne.n	8008afc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008af2:	2100      	movs	r1, #0
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f965 	bl	8008dc4 <USB_SetDevSpeed>
 8008afa:	e008      	b.n	8008b0e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008afc:	2101      	movs	r1, #1
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f960 	bl	8008dc4 <USB_SetDevSpeed>
 8008b04:	e003      	b.n	8008b0e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b06:	2103      	movs	r1, #3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f95b 	bl	8008dc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b0e:	2110      	movs	r1, #16
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f8f3 	bl	8008cfc <USB_FlushTxFifo>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f91f 	bl	8008d64 <USB_FlushRxFifo>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b36:	461a      	mov	r2, r3
 8008b38:	2300      	movs	r3, #0
 8008b3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b42:	461a      	mov	r2, r3
 8008b44:	2300      	movs	r3, #0
 8008b46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4e:	461a      	mov	r2, r3
 8008b50:	2300      	movs	r3, #0
 8008b52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b54:	2300      	movs	r3, #0
 8008b56:	613b      	str	r3, [r7, #16]
 8008b58:	e043      	b.n	8008be2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b70:	d118      	bne.n	8008ba4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b84:	461a      	mov	r2, r3
 8008b86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	e013      	b.n	8008bb6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	e008      	b.n	8008bb6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	015a      	lsls	r2, r3, #5
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	3301      	adds	r3, #1
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d3b7      	bcc.n	8008b5a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bea:	2300      	movs	r3, #0
 8008bec:	613b      	str	r3, [r7, #16]
 8008bee:	e043      	b.n	8008c78 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c06:	d118      	bne.n	8008c3a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10a      	bne.n	8008c24 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c20:	6013      	str	r3, [r2, #0]
 8008c22:	e013      	b.n	8008c4c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c30:	461a      	mov	r2, r3
 8008c32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c36:	6013      	str	r3, [r2, #0]
 8008c38:	e008      	b.n	8008c4c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c46:	461a      	mov	r2, r3
 8008c48:	2300      	movs	r3, #0
 8008c4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c58:	461a      	mov	r2, r3
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	3301      	adds	r3, #1
 8008c76:	613b      	str	r3, [r7, #16]
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d3b7      	bcc.n	8008bf0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008ca0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d105      	bne.n	8008cb4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	f043 0210 	orr.w	r2, r3, #16
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	699a      	ldr	r2, [r3, #24]
 8008cb8:	4b0f      	ldr	r3, [pc, #60]	; (8008cf8 <USB_DevInit+0x2c4>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d005      	beq.n	8008cd2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	f043 0208 	orr.w	r2, r3, #8
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d107      	bne.n	8008ce8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ce0:	f043 0304 	orr.w	r3, r3, #4
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cf4:	b004      	add	sp, #16
 8008cf6:	4770      	bx	lr
 8008cf8:	803c3800 	.word	0x803c3800

08008cfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4a13      	ldr	r2, [pc, #76]	; (8008d60 <USB_FlushTxFifo+0x64>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d901      	bls.n	8008d1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e01b      	b.n	8008d54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	daf2      	bge.n	8008d0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	019b      	lsls	r3, r3, #6
 8008d2c:	f043 0220 	orr.w	r2, r3, #32
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3301      	adds	r3, #1
 8008d38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4a08      	ldr	r2, [pc, #32]	; (8008d60 <USB_FlushTxFifo+0x64>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d901      	bls.n	8008d46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e006      	b.n	8008d54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	f003 0320 	and.w	r3, r3, #32
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	d0f0      	beq.n	8008d34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	00030d40 	.word	0x00030d40

08008d64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3301      	adds	r3, #1
 8008d74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4a11      	ldr	r2, [pc, #68]	; (8008dc0 <USB_FlushRxFifo+0x5c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d901      	bls.n	8008d82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e018      	b.n	8008db4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	daf2      	bge.n	8008d70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2210      	movs	r2, #16
 8008d92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3301      	adds	r3, #1
 8008d98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4a08      	ldr	r2, [pc, #32]	; (8008dc0 <USB_FlushRxFifo+0x5c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d901      	bls.n	8008da6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e006      	b.n	8008db4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	f003 0310 	and.w	r3, r3, #16
 8008dae:	2b10      	cmp	r3, #16
 8008db0:	d0f0      	beq.n	8008d94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	00030d40 	.word	0x00030d40

08008dc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	68f9      	ldr	r1, [r7, #12]
 8008de0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008de4:	4313      	orrs	r3, r2
 8008de6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008df6:	b480      	push	{r7}
 8008df8:	b087      	sub	sp, #28
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f003 0306 	and.w	r3, r3, #6
 8008e0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d102      	bne.n	8008e1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008e16:	2300      	movs	r3, #0
 8008e18:	75fb      	strb	r3, [r7, #23]
 8008e1a:	e00a      	b.n	8008e32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d002      	beq.n	8008e28 <USB_GetDevSpeed+0x32>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b06      	cmp	r3, #6
 8008e26:	d102      	bne.n	8008e2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008e28:	2302      	movs	r3, #2
 8008e2a:	75fb      	strb	r3, [r7, #23]
 8008e2c:	e001      	b.n	8008e32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008e2e:	230f      	movs	r3, #15
 8008e30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	371c      	adds	r7, #28
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	785b      	ldrb	r3, [r3, #1]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d13a      	bne.n	8008ed2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e62:	69da      	ldr	r2, [r3, #28]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	f003 030f 	and.w	r3, r3, #15
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	68f9      	ldr	r1, [r7, #12]
 8008e76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d155      	bne.n	8008f40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	791b      	ldrb	r3, [r3, #4]
 8008eae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008eb0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	059b      	lsls	r3, r3, #22
 8008eb6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	0151      	lsls	r1, r2, #5
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	440a      	add	r2, r1
 8008ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	e036      	b.n	8008f40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed8:	69da      	ldr	r2, [r3, #28]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	f003 030f 	and.w	r3, r3, #15
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee8:	041b      	lsls	r3, r3, #16
 8008eea:	68f9      	ldr	r1, [r7, #12]
 8008eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d11a      	bne.n	8008f40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	791b      	ldrb	r3, [r3, #4]
 8008f24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f26:	430b      	orrs	r3, r1
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	0151      	lsls	r1, r2, #5
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	440a      	add	r2, r1
 8008f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
	...

08008f50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	785b      	ldrb	r3, [r3, #1]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d161      	bne.n	8009030 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f82:	d11f      	bne.n	8008fc4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	0151      	lsls	r1, r2, #5
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	440a      	add	r2, r1
 8008f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fa2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	0151      	lsls	r1, r2, #5
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	440a      	add	r2, r1
 8008fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fc2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	f003 030f 	and.w	r3, r3, #15
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	43db      	mvns	r3, r3
 8008fde:	68f9      	ldr	r1, [r7, #12]
 8008fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fee:	69da      	ldr	r2, [r3, #28]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	f003 030f 	and.w	r3, r3, #15
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	43db      	mvns	r3, r3
 8009002:	68f9      	ldr	r1, [r7, #12]
 8009004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009008:	4013      	ands	r3, r2
 800900a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	0159      	lsls	r1, r3, #5
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	440b      	add	r3, r1
 8009022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009026:	4619      	mov	r1, r3
 8009028:	4b35      	ldr	r3, [pc, #212]	; (8009100 <USB_DeactivateEndpoint+0x1b0>)
 800902a:	4013      	ands	r3, r2
 800902c:	600b      	str	r3, [r1, #0]
 800902e:	e060      	b.n	80090f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	015a      	lsls	r2, r3, #5
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4413      	add	r3, r2
 8009038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009046:	d11f      	bne.n	8009088 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	0151      	lsls	r1, r2, #5
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	440a      	add	r2, r1
 800905e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009062:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009066:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4413      	add	r3, r2
 8009070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	0151      	lsls	r1, r2, #5
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	440a      	add	r2, r1
 800907e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009082:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009086:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	f003 030f 	and.w	r3, r3, #15
 8009098:	2101      	movs	r1, #1
 800909a:	fa01 f303 	lsl.w	r3, r1, r3
 800909e:	041b      	lsls	r3, r3, #16
 80090a0:	43db      	mvns	r3, r3
 80090a2:	68f9      	ldr	r1, [r7, #12]
 80090a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090a8:	4013      	ands	r3, r2
 80090aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b2:	69da      	ldr	r2, [r3, #28]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	f003 030f 	and.w	r3, r3, #15
 80090bc:	2101      	movs	r1, #1
 80090be:	fa01 f303 	lsl.w	r3, r1, r3
 80090c2:	041b      	lsls	r3, r3, #16
 80090c4:	43db      	mvns	r3, r3
 80090c6:	68f9      	ldr	r1, [r7, #12]
 80090c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090cc:	4013      	ands	r3, r2
 80090ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	0159      	lsls	r1, r3, #5
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	440b      	add	r3, r1
 80090e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ea:	4619      	mov	r1, r3
 80090ec:	4b05      	ldr	r3, [pc, #20]	; (8009104 <USB_DeactivateEndpoint+0x1b4>)
 80090ee:	4013      	ands	r3, r2
 80090f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	ec337800 	.word	0xec337800
 8009104:	eff37800 	.word	0xeff37800

08009108 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08a      	sub	sp, #40	; 0x28
 800910c:	af02      	add	r7, sp, #8
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	4613      	mov	r3, r2
 8009114:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	785b      	ldrb	r3, [r3, #1]
 8009124:	2b01      	cmp	r3, #1
 8009126:	f040 815c 	bne.w	80093e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d132      	bne.n	8009198 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	0151      	lsls	r1, r2, #5
 8009144:	69fa      	ldr	r2, [r7, #28]
 8009146:	440a      	add	r2, r1
 8009148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800914c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009150:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009154:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	69ba      	ldr	r2, [r7, #24]
 8009166:	0151      	lsls	r1, r2, #5
 8009168:	69fa      	ldr	r2, [r7, #28]
 800916a:	440a      	add	r2, r1
 800916c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009174:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	4413      	add	r3, r2
 800917e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	69ba      	ldr	r2, [r7, #24]
 8009186:	0151      	lsls	r1, r2, #5
 8009188:	69fa      	ldr	r2, [r7, #28]
 800918a:	440a      	add	r2, r1
 800918c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009190:	0cdb      	lsrs	r3, r3, #19
 8009192:	04db      	lsls	r3, r3, #19
 8009194:	6113      	str	r3, [r2, #16]
 8009196:	e074      	b.n	8009282 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	0151      	lsls	r1, r2, #5
 80091aa:	69fa      	ldr	r2, [r7, #28]
 80091ac:	440a      	add	r2, r1
 80091ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b2:	0cdb      	lsrs	r3, r3, #19
 80091b4:	04db      	lsls	r3, r3, #19
 80091b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	69ba      	ldr	r2, [r7, #24]
 80091c8:	0151      	lsls	r1, r2, #5
 80091ca:	69fa      	ldr	r2, [r7, #28]
 80091cc:	440a      	add	r2, r1
 80091ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	6999      	ldr	r1, [r3, #24]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	440b      	add	r3, r1
 80091f4:	1e59      	subs	r1, r3, #1
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80091fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009200:	4b9d      	ldr	r3, [pc, #628]	; (8009478 <USB_EPStartXfer+0x370>)
 8009202:	400b      	ands	r3, r1
 8009204:	69b9      	ldr	r1, [r7, #24]
 8009206:	0148      	lsls	r0, r1, #5
 8009208:	69f9      	ldr	r1, [r7, #28]
 800920a:	4401      	add	r1, r0
 800920c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009210:	4313      	orrs	r3, r2
 8009212:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009220:	691a      	ldr	r2, [r3, #16]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800922a:	69b9      	ldr	r1, [r7, #24]
 800922c:	0148      	lsls	r0, r1, #5
 800922e:	69f9      	ldr	r1, [r7, #28]
 8009230:	4401      	add	r1, r0
 8009232:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009236:	4313      	orrs	r3, r2
 8009238:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	791b      	ldrb	r3, [r3, #4]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d11f      	bne.n	8009282 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	69ba      	ldr	r2, [r7, #24]
 8009252:	0151      	lsls	r1, r2, #5
 8009254:	69fa      	ldr	r2, [r7, #28]
 8009256:	440a      	add	r2, r1
 8009258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800925c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009260:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	69ba      	ldr	r2, [r7, #24]
 8009272:	0151      	lsls	r1, r2, #5
 8009274:	69fa      	ldr	r2, [r7, #28]
 8009276:	440a      	add	r2, r1
 8009278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800927c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009280:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009282:	79fb      	ldrb	r3, [r7, #7]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d14b      	bne.n	8009320 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d009      	beq.n	80092a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929c:	461a      	mov	r2, r3
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	791b      	ldrb	r3, [r3, #4]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d128      	bne.n	80092fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d110      	bne.n	80092de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	015a      	lsls	r2, r3, #5
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	69ba      	ldr	r2, [r7, #24]
 80092cc:	0151      	lsls	r1, r2, #5
 80092ce:	69fa      	ldr	r2, [r7, #28]
 80092d0:	440a      	add	r2, r1
 80092d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092da:	6013      	str	r3, [r2, #0]
 80092dc:	e00f      	b.n	80092fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	69ba      	ldr	r2, [r7, #24]
 80092ee:	0151      	lsls	r1, r2, #5
 80092f0:	69fa      	ldr	r2, [r7, #28]
 80092f2:	440a      	add	r2, r1
 80092f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	4413      	add	r3, r2
 8009306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	69ba      	ldr	r2, [r7, #24]
 800930e:	0151      	lsls	r1, r2, #5
 8009310:	69fa      	ldr	r2, [r7, #28]
 8009312:	440a      	add	r2, r1
 8009314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009318:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	e133      	b.n	8009588 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69ba      	ldr	r2, [r7, #24]
 8009330:	0151      	lsls	r1, r2, #5
 8009332:	69fa      	ldr	r2, [r7, #28]
 8009334:	440a      	add	r2, r1
 8009336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800933a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800933e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	791b      	ldrb	r3, [r3, #4]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d015      	beq.n	8009374 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 811b 	beq.w	8009588 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	f003 030f 	and.w	r3, r3, #15
 8009362:	2101      	movs	r1, #1
 8009364:	fa01 f303 	lsl.w	r3, r1, r3
 8009368:	69f9      	ldr	r1, [r7, #28]
 800936a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800936e:	4313      	orrs	r3, r2
 8009370:	634b      	str	r3, [r1, #52]	; 0x34
 8009372:	e109      	b.n	8009588 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009380:	2b00      	cmp	r3, #0
 8009382:	d110      	bne.n	80093a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	0151      	lsls	r1, r2, #5
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	440a      	add	r2, r1
 800939a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800939e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	e00f      	b.n	80093c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	015a      	lsls	r2, r3, #5
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	4413      	add	r3, r2
 80093ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	69ba      	ldr	r2, [r7, #24]
 80093b6:	0151      	lsls	r1, r2, #5
 80093b8:	69fa      	ldr	r2, [r7, #28]
 80093ba:	440a      	add	r2, r1
 80093bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	6919      	ldr	r1, [r3, #16]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	781a      	ldrb	r2, [r3, #0]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	b298      	uxth	r0, r3
 80093d4:	79fb      	ldrb	r3, [r7, #7]
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	4603      	mov	r3, r0
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f000 fade 	bl	800999c <USB_WritePacket>
 80093e0:	e0d2      	b.n	8009588 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	69ba      	ldr	r2, [r7, #24]
 80093f2:	0151      	lsls	r1, r2, #5
 80093f4:	69fa      	ldr	r2, [r7, #28]
 80093f6:	440a      	add	r2, r1
 80093f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093fc:	0cdb      	lsrs	r3, r3, #19
 80093fe:	04db      	lsls	r3, r3, #19
 8009400:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	0151      	lsls	r1, r2, #5
 8009414:	69fa      	ldr	r2, [r7, #28]
 8009416:	440a      	add	r2, r1
 8009418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800941c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009420:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009424:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d126      	bne.n	800947c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943a:	691a      	ldr	r2, [r3, #16]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009444:	69b9      	ldr	r1, [r7, #24]
 8009446:	0148      	lsls	r0, r1, #5
 8009448:	69f9      	ldr	r1, [r7, #28]
 800944a:	4401      	add	r1, r0
 800944c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009450:	4313      	orrs	r3, r2
 8009452:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	4413      	add	r3, r2
 800945c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	0151      	lsls	r1, r2, #5
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	440a      	add	r2, r1
 800946a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800946e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009472:	6113      	str	r3, [r2, #16]
 8009474:	e03a      	b.n	80094ec <USB_EPStartXfer+0x3e4>
 8009476:	bf00      	nop
 8009478:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	699a      	ldr	r2, [r3, #24]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	4413      	add	r3, r2
 8009486:	1e5a      	subs	r2, r3, #1
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009490:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	8afa      	ldrh	r2, [r7, #22]
 8009498:	fb03 f202 	mul.w	r2, r3, r2
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	015a      	lsls	r2, r3, #5
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	4413      	add	r3, r2
 80094a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ac:	691a      	ldr	r2, [r3, #16]
 80094ae:	8afb      	ldrh	r3, [r7, #22]
 80094b0:	04d9      	lsls	r1, r3, #19
 80094b2:	4b38      	ldr	r3, [pc, #224]	; (8009594 <USB_EPStartXfer+0x48c>)
 80094b4:	400b      	ands	r3, r1
 80094b6:	69b9      	ldr	r1, [r7, #24]
 80094b8:	0148      	lsls	r0, r1, #5
 80094ba:	69f9      	ldr	r1, [r7, #28]
 80094bc:	4401      	add	r1, r0
 80094be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094c2:	4313      	orrs	r3, r2
 80094c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d2:	691a      	ldr	r2, [r3, #16]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	69db      	ldr	r3, [r3, #28]
 80094d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094dc:	69b9      	ldr	r1, [r7, #24]
 80094de:	0148      	lsls	r0, r1, #5
 80094e0:	69f9      	ldr	r1, [r7, #28]
 80094e2:	4401      	add	r1, r0
 80094e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094e8:	4313      	orrs	r3, r2
 80094ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80094ec:	79fb      	ldrb	r3, [r7, #7]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d10d      	bne.n	800950e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d009      	beq.n	800950e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	6919      	ldr	r1, [r3, #16]
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	4413      	add	r3, r2
 8009506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950a:	460a      	mov	r2, r1
 800950c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	791b      	ldrb	r3, [r3, #4]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d128      	bne.n	8009568 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009522:	2b00      	cmp	r3, #0
 8009524:	d110      	bne.n	8009548 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	4413      	add	r3, r2
 800952e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	69ba      	ldr	r2, [r7, #24]
 8009536:	0151      	lsls	r1, r2, #5
 8009538:	69fa      	ldr	r2, [r7, #28]
 800953a:	440a      	add	r2, r1
 800953c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009540:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009544:	6013      	str	r3, [r2, #0]
 8009546:	e00f      	b.n	8009568 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	015a      	lsls	r2, r3, #5
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	4413      	add	r3, r2
 8009550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69ba      	ldr	r2, [r7, #24]
 8009558:	0151      	lsls	r1, r2, #5
 800955a:	69fa      	ldr	r2, [r7, #28]
 800955c:	440a      	add	r2, r1
 800955e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009566:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69ba      	ldr	r2, [r7, #24]
 8009578:	0151      	lsls	r1, r2, #5
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	440a      	add	r2, r1
 800957e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009582:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3720      	adds	r7, #32
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	1ff80000 	.word	0x1ff80000

08009598 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009598:	b480      	push	{r7}
 800959a:	b087      	sub	sp, #28
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	4613      	mov	r3, r2
 80095a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	785b      	ldrb	r3, [r3, #1]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	f040 80ce 	bne.w	8009756 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d132      	bne.n	8009628 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	0151      	lsls	r1, r2, #5
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	440a      	add	r2, r1
 80095d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	0151      	lsls	r1, r2, #5
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	440a      	add	r2, r1
 80095fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009604:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	015a      	lsls	r2, r3, #5
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	4413      	add	r3, r2
 800960e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	0151      	lsls	r1, r2, #5
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	440a      	add	r2, r1
 800961c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009620:	0cdb      	lsrs	r3, r3, #19
 8009622:	04db      	lsls	r3, r3, #19
 8009624:	6113      	str	r3, [r2, #16]
 8009626:	e04e      	b.n	80096c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	4413      	add	r3, r2
 8009630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	0151      	lsls	r1, r2, #5
 800963a:	697a      	ldr	r2, [r7, #20]
 800963c:	440a      	add	r2, r1
 800963e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009642:	0cdb      	lsrs	r3, r3, #19
 8009644:	04db      	lsls	r3, r3, #19
 8009646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	0151      	lsls	r1, r2, #5
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	440a      	add	r2, r1
 800965e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009662:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009666:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800966a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	699a      	ldr	r2, [r3, #24]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	429a      	cmp	r2, r3
 8009676:	d903      	bls.n	8009680 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	0151      	lsls	r1, r2, #5
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	440a      	add	r2, r1
 8009696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800969a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800969e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ac:	691a      	ldr	r2, [r3, #16]
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096b6:	6939      	ldr	r1, [r7, #16]
 80096b8:	0148      	lsls	r0, r1, #5
 80096ba:	6979      	ldr	r1, [r7, #20]
 80096bc:	4401      	add	r1, r0
 80096be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80096c2:	4313      	orrs	r3, r2
 80096c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80096c6:	79fb      	ldrb	r3, [r7, #7]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d11e      	bne.n	800970a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d009      	beq.n	80096e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e0:	461a      	mov	r2, r3
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	0151      	lsls	r1, r2, #5
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	440a      	add	r2, r1
 80096fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009702:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009706:	6013      	str	r3, [r2, #0]
 8009708:	e097      	b.n	800983a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	4413      	add	r3, r2
 8009712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	0151      	lsls	r1, r2, #5
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	440a      	add	r2, r1
 8009720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009724:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009728:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 8083 	beq.w	800983a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800973a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	f003 030f 	and.w	r3, r3, #15
 8009744:	2101      	movs	r1, #1
 8009746:	fa01 f303 	lsl.w	r3, r1, r3
 800974a:	6979      	ldr	r1, [r7, #20]
 800974c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009750:	4313      	orrs	r3, r2
 8009752:	634b      	str	r3, [r1, #52]	; 0x34
 8009754:	e071      	b.n	800983a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	0151      	lsls	r1, r2, #5
 8009768:	697a      	ldr	r2, [r7, #20]
 800976a:	440a      	add	r2, r1
 800976c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009770:	0cdb      	lsrs	r3, r3, #19
 8009772:	04db      	lsls	r3, r3, #19
 8009774:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	4413      	add	r3, r2
 800977e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	0151      	lsls	r1, r2, #5
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	440a      	add	r2, r1
 800978c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009790:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009794:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009798:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	68da      	ldr	r2, [r3, #12]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	68da      	ldr	r2, [r3, #12]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	0151      	lsls	r1, r2, #5
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	440a      	add	r2, r1
 80097c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097de:	691a      	ldr	r2, [r3, #16]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	69db      	ldr	r3, [r3, #28]
 80097e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097e8:	6939      	ldr	r1, [r7, #16]
 80097ea:	0148      	lsls	r0, r1, #5
 80097ec:	6979      	ldr	r1, [r7, #20]
 80097ee:	4401      	add	r1, r0
 80097f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097f4:	4313      	orrs	r3, r2
 80097f6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80097f8:	79fb      	ldrb	r3, [r7, #7]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d10d      	bne.n	800981a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d009      	beq.n	800981a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	6919      	ldr	r1, [r3, #16]
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	015a      	lsls	r2, r3, #5
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	4413      	add	r3, r2
 8009812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009816:	460a      	mov	r2, r1
 8009818:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	4413      	add	r3, r2
 8009822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	0151      	lsls	r1, r2, #5
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	440a      	add	r2, r1
 8009830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009834:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009838:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	371c      	adds	r7, #28
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009852:	2300      	movs	r3, #0
 8009854:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	785b      	ldrb	r3, [r3, #1]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d14a      	bne.n	80098fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	4413      	add	r3, r2
 8009870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800987a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800987e:	f040 8086 	bne.w	800998e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	015a      	lsls	r2, r3, #5
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	4413      	add	r3, r2
 800988c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	7812      	ldrb	r2, [r2, #0]
 8009896:	0151      	lsls	r1, r2, #5
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	440a      	add	r2, r1
 800989c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80098a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	015a      	lsls	r2, r3, #5
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	4413      	add	r3, r2
 80098b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	7812      	ldrb	r2, [r2, #0]
 80098ba:	0151      	lsls	r1, r2, #5
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	440a      	add	r2, r1
 80098c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3301      	adds	r3, #1
 80098ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d902      	bls.n	80098e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	75fb      	strb	r3, [r7, #23]
          break;
 80098de:	e056      	b.n	800998e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098f8:	d0e7      	beq.n	80098ca <USB_EPStopXfer+0x82>
 80098fa:	e048      	b.n	800998e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	4413      	add	r3, r2
 8009906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009914:	d13b      	bne.n	800998e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	7812      	ldrb	r2, [r2, #0]
 800992a:	0151      	lsls	r1, r2, #5
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	440a      	add	r2, r1
 8009930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009934:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009938:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	4413      	add	r3, r2
 8009944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	7812      	ldrb	r2, [r2, #0]
 800994e:	0151      	lsls	r1, r2, #5
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	440a      	add	r2, r1
 8009954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009958:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800995c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3301      	adds	r3, #1
 8009962:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f242 7210 	movw	r2, #10000	; 0x2710
 800996a:	4293      	cmp	r3, r2
 800996c:	d902      	bls.n	8009974 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	75fb      	strb	r3, [r7, #23]
          break;
 8009972:	e00c      	b.n	800998e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	4413      	add	r3, r2
 800997e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800998c:	d0e7      	beq.n	800995e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800998e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009990:	4618      	mov	r0, r3
 8009992:	371c      	adds	r7, #28
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800999c:	b480      	push	{r7}
 800999e:	b089      	sub	sp, #36	; 0x24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	4611      	mov	r1, r2
 80099a8:	461a      	mov	r2, r3
 80099aa:	460b      	mov	r3, r1
 80099ac:	71fb      	strb	r3, [r7, #7]
 80099ae:	4613      	mov	r3, r2
 80099b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80099ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d123      	bne.n	8009a0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80099c2:	88bb      	ldrh	r3, [r7, #4]
 80099c4:	3303      	adds	r3, #3
 80099c6:	089b      	lsrs	r3, r3, #2
 80099c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80099ca:	2300      	movs	r3, #0
 80099cc:	61bb      	str	r3, [r7, #24]
 80099ce:	e018      	b.n	8009a02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80099d0:	79fb      	ldrb	r3, [r7, #7]
 80099d2:	031a      	lsls	r2, r3, #12
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099dc:	461a      	mov	r2, r3
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	3301      	adds	r3, #1
 80099e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	3301      	adds	r3, #1
 80099ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	3301      	adds	r3, #1
 80099f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	3301      	adds	r3, #1
 80099fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	3301      	adds	r3, #1
 8009a00:	61bb      	str	r3, [r7, #24]
 8009a02:	69ba      	ldr	r2, [r7, #24]
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d3e2      	bcc.n	80099d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3724      	adds	r7, #36	; 0x24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b08b      	sub	sp, #44	; 0x2c
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	4613      	mov	r3, r2
 8009a24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009a2e:	88fb      	ldrh	r3, [r7, #6]
 8009a30:	089b      	lsrs	r3, r3, #2
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009a36:	88fb      	ldrh	r3, [r7, #6]
 8009a38:	f003 0303 	and.w	r3, r3, #3
 8009a3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009a3e:	2300      	movs	r3, #0
 8009a40:	623b      	str	r3, [r7, #32]
 8009a42:	e014      	b.n	8009a6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	3301      	adds	r3, #1
 8009a54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	3301      	adds	r3, #1
 8009a5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	3301      	adds	r3, #1
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	3301      	adds	r3, #1
 8009a66:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	623b      	str	r3, [r7, #32]
 8009a6e:	6a3a      	ldr	r2, [r7, #32]
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d3e6      	bcc.n	8009a44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009a76:	8bfb      	ldrh	r3, [r7, #30]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d01e      	beq.n	8009aba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a86:	461a      	mov	r2, r3
 8009a88:	f107 0310 	add.w	r3, r7, #16
 8009a8c:	6812      	ldr	r2, [r2, #0]
 8009a8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a90:	693a      	ldr	r2, [r7, #16]
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	00db      	lsls	r3, r3, #3
 8009a98:	fa22 f303 	lsr.w	r3, r2, r3
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	701a      	strb	r2, [r3, #0]
      i++;
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	623b      	str	r3, [r7, #32]
      pDest++;
 8009aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aaa:	3301      	adds	r3, #1
 8009aac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009aae:	8bfb      	ldrh	r3, [r7, #30]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009ab4:	8bfb      	ldrh	r3, [r7, #30]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1ea      	bne.n	8009a90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	372c      	adds	r7, #44	; 0x2c
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	785b      	ldrb	r3, [r3, #1]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d12c      	bne.n	8009b3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	015a      	lsls	r2, r3, #5
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	db12      	blt.n	8009b1c <USB_EPSetStall+0x54>
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00f      	beq.n	8009b1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	0151      	lsls	r1, r2, #5
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	440a      	add	r2, r1
 8009b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	0151      	lsls	r1, r2, #5
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	440a      	add	r2, r1
 8009b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b3a:	6013      	str	r3, [r2, #0]
 8009b3c:	e02b      	b.n	8009b96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	db12      	blt.n	8009b76 <USB_EPSetStall+0xae>
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00f      	beq.n	8009b76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	0151      	lsls	r1, r2, #5
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	440a      	add	r2, r1
 8009b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	015a      	lsls	r2, r3, #5
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	0151      	lsls	r1, r2, #5
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	440a      	add	r2, r1
 8009b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	785b      	ldrb	r3, [r3, #1]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d128      	bne.n	8009c12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	015a      	lsls	r2, r3, #5
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	0151      	lsls	r1, r2, #5
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	440a      	add	r2, r1
 8009bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	791b      	ldrb	r3, [r3, #4]
 8009be4:	2b03      	cmp	r3, #3
 8009be6:	d003      	beq.n	8009bf0 <USB_EPClearStall+0x4c>
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	791b      	ldrb	r3, [r3, #4]
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d138      	bne.n	8009c62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	015a      	lsls	r2, r3, #5
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	0151      	lsls	r1, r2, #5
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	440a      	add	r2, r1
 8009c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	e027      	b.n	8009c62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	0151      	lsls	r1, r2, #5
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	440a      	add	r2, r1
 8009c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	791b      	ldrb	r3, [r3, #4]
 8009c36:	2b03      	cmp	r3, #3
 8009c38:	d003      	beq.n	8009c42 <USB_EPClearStall+0x9e>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	791b      	ldrb	r3, [r3, #4]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d10f      	bne.n	8009c62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	015a      	lsls	r2, r3, #5
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	4413      	add	r3, r2
 8009c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	0151      	lsls	r1, r2, #5
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	440a      	add	r2, r1
 8009c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	78fb      	ldrb	r3, [r7, #3]
 8009c9e:	011b      	lsls	r3, r3, #4
 8009ca0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009ca4:	68f9      	ldr	r1, [r7, #12]
 8009ca6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009caa:	4313      	orrs	r3, r2
 8009cac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009cd6:	f023 0303 	bic.w	r3, r3, #3
 8009cda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cea:	f023 0302 	bic.w	r3, r3, #2
 8009cee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b085      	sub	sp, #20
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d18:	f023 0303 	bic.w	r3, r3, #3
 8009d1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d2c:	f043 0302 	orr.w	r3, r3, #2
 8009d30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d32:	2300      	movs	r3, #0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	4013      	ands	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d58:	68fb      	ldr	r3, [r7, #12]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b085      	sub	sp, #20
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d82:	69db      	ldr	r3, [r3, #28]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	4013      	ands	r3, r2
 8009d88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	0c1b      	lsrs	r3, r3, #16
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b085      	sub	sp, #20
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db6:	69db      	ldr	r3, [r3, #28]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	4013      	ands	r3, r2
 8009dbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	b29b      	uxth	r3, r3
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b085      	sub	sp, #20
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009dde:	78fb      	ldrb	r3, [r7, #3]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	4013      	ands	r3, r2
 8009dfa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009dfc:	68bb      	ldr	r3, [r7, #8]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3714      	adds	r7, #20
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b087      	sub	sp, #28
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
 8009e12:	460b      	mov	r3, r1
 8009e14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009e2e:	78fb      	ldrb	r3, [r7, #3]
 8009e30:	f003 030f 	and.w	r3, r3, #15
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3a:	01db      	lsls	r3, r3, #7
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	4013      	ands	r3, r2
 8009e56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e58:	68bb      	ldr	r3, [r7, #8]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	371c      	adds	r7, #28
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b083      	sub	sp, #12
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	f003 0301 	and.w	r3, r3, #1
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b085      	sub	sp, #20
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009ea0:	f023 0307 	bic.w	r3, r3, #7
 8009ea4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b087      	sub	sp, #28
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	333c      	adds	r3, #60	; 0x3c
 8009ede:	3304      	adds	r3, #4
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	4a26      	ldr	r2, [pc, #152]	; (8009f80 <USB_EP0_OutStart+0xb8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d90a      	bls.n	8009f02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009efc:	d101      	bne.n	8009f02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	e037      	b.n	8009f72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f08:	461a      	mov	r2, r3
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f30:	f043 0318 	orr.w	r3, r3, #24
 8009f34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009f48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009f4a:	7afb      	ldrb	r3, [r7, #11]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d10f      	bne.n	8009f70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f56:	461a      	mov	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009f6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	4f54300a 	.word	0x4f54300a

08009f84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	3301      	adds	r3, #1
 8009f94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4a13      	ldr	r2, [pc, #76]	; (8009fe8 <USB_CoreReset+0x64>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d901      	bls.n	8009fa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e01b      	b.n	8009fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	daf2      	bge.n	8009f90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009faa:	2300      	movs	r3, #0
 8009fac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	f043 0201 	orr.w	r2, r3, #1
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4a09      	ldr	r2, [pc, #36]	; (8009fe8 <USB_CoreReset+0x64>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d901      	bls.n	8009fcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e006      	b.n	8009fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d0f0      	beq.n	8009fba <USB_CoreReset+0x36>

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	00030d40 	.word	0x00030d40

08009fec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009ff8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009ffc:	f002 fca2 	bl	800c944 <USBD_static_malloc>
 800a000:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d109      	bne.n	800a01c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	32b0      	adds	r2, #176	; 0xb0
 800a012:	2100      	movs	r1, #0
 800a014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a018:	2302      	movs	r3, #2
 800a01a:	e0d4      	b.n	800a1c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a01c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a020:	2100      	movs	r1, #0
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f002 fd32 	bl	800ca8c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	32b0      	adds	r2, #176	; 0xb0
 800a032:	68f9      	ldr	r1, [r7, #12]
 800a034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	32b0      	adds	r2, #176	; 0xb0
 800a042:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	7c1b      	ldrb	r3, [r3, #16]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d138      	bne.n	800a0c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a054:	4b5e      	ldr	r3, [pc, #376]	; (800a1d0 <USBD_CDC_Init+0x1e4>)
 800a056:	7819      	ldrb	r1, [r3, #0]
 800a058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a05c:	2202      	movs	r2, #2
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f002 fb4d 	bl	800c6fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a064:	4b5a      	ldr	r3, [pc, #360]	; (800a1d0 <USBD_CDC_Init+0x1e4>)
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	f003 020f 	and.w	r2, r3, #15
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	440b      	add	r3, r1
 800a078:	3324      	adds	r3, #36	; 0x24
 800a07a:	2201      	movs	r2, #1
 800a07c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a07e:	4b55      	ldr	r3, [pc, #340]	; (800a1d4 <USBD_CDC_Init+0x1e8>)
 800a080:	7819      	ldrb	r1, [r3, #0]
 800a082:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a086:	2202      	movs	r2, #2
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f002 fb38 	bl	800c6fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a08e:	4b51      	ldr	r3, [pc, #324]	; (800a1d4 <USBD_CDC_Init+0x1e8>)
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	f003 020f 	and.w	r2, r3, #15
 800a096:	6879      	ldr	r1, [r7, #4]
 800a098:	4613      	mov	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4413      	add	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	440b      	add	r3, r1
 800a0a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a0aa:	4b4b      	ldr	r3, [pc, #300]	; (800a1d8 <USBD_CDC_Init+0x1ec>)
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	f003 020f 	and.w	r2, r3, #15
 800a0b2:	6879      	ldr	r1, [r7, #4]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	4413      	add	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	440b      	add	r3, r1
 800a0be:	3326      	adds	r3, #38	; 0x26
 800a0c0:	2210      	movs	r2, #16
 800a0c2:	801a      	strh	r2, [r3, #0]
 800a0c4:	e035      	b.n	800a132 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a0c6:	4b42      	ldr	r3, [pc, #264]	; (800a1d0 <USBD_CDC_Init+0x1e4>)
 800a0c8:	7819      	ldrb	r1, [r3, #0]
 800a0ca:	2340      	movs	r3, #64	; 0x40
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f002 fb15 	bl	800c6fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a0d4:	4b3e      	ldr	r3, [pc, #248]	; (800a1d0 <USBD_CDC_Init+0x1e4>)
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	f003 020f 	and.w	r2, r3, #15
 800a0dc:	6879      	ldr	r1, [r7, #4]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	440b      	add	r3, r1
 800a0e8:	3324      	adds	r3, #36	; 0x24
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a0ee:	4b39      	ldr	r3, [pc, #228]	; (800a1d4 <USBD_CDC_Init+0x1e8>)
 800a0f0:	7819      	ldrb	r1, [r3, #0]
 800a0f2:	2340      	movs	r3, #64	; 0x40
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f002 fb01 	bl	800c6fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a0fc:	4b35      	ldr	r3, [pc, #212]	; (800a1d4 <USBD_CDC_Init+0x1e8>)
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	f003 020f 	and.w	r2, r3, #15
 800a104:	6879      	ldr	r1, [r7, #4]
 800a106:	4613      	mov	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	440b      	add	r3, r1
 800a110:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a114:	2201      	movs	r2, #1
 800a116:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a118:	4b2f      	ldr	r3, [pc, #188]	; (800a1d8 <USBD_CDC_Init+0x1ec>)
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	f003 020f 	and.w	r2, r3, #15
 800a120:	6879      	ldr	r1, [r7, #4]
 800a122:	4613      	mov	r3, r2
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	4413      	add	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	440b      	add	r3, r1
 800a12c:	3326      	adds	r3, #38	; 0x26
 800a12e:	2210      	movs	r2, #16
 800a130:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a132:	4b29      	ldr	r3, [pc, #164]	; (800a1d8 <USBD_CDC_Init+0x1ec>)
 800a134:	7819      	ldrb	r1, [r3, #0]
 800a136:	2308      	movs	r3, #8
 800a138:	2203      	movs	r2, #3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f002 fadf 	bl	800c6fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a140:	4b25      	ldr	r3, [pc, #148]	; (800a1d8 <USBD_CDC_Init+0x1ec>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	f003 020f 	and.w	r2, r3, #15
 800a148:	6879      	ldr	r1, [r7, #4]
 800a14a:	4613      	mov	r3, r2
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4413      	add	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	440b      	add	r3, r1
 800a154:	3324      	adds	r3, #36	; 0x24
 800a156:	2201      	movs	r2, #1
 800a158:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	33b0      	adds	r3, #176	; 0xb0
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d101      	bne.n	800a194 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a190:	2302      	movs	r3, #2
 800a192:	e018      	b.n	800a1c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	7c1b      	ldrb	r3, [r3, #16]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10a      	bne.n	800a1b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a19c:	4b0d      	ldr	r3, [pc, #52]	; (800a1d4 <USBD_CDC_Init+0x1e8>)
 800a19e:	7819      	ldrb	r1, [r3, #0]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f002 fb96 	bl	800c8dc <USBD_LL_PrepareReceive>
 800a1b0:	e008      	b.n	800a1c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1b2:	4b08      	ldr	r3, [pc, #32]	; (800a1d4 <USBD_CDC_Init+0x1e8>)
 800a1b4:	7819      	ldrb	r1, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1bc:	2340      	movs	r3, #64	; 0x40
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f002 fb8c 	bl	800c8dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	200000b7 	.word	0x200000b7
 800a1d4:	200000b8 	.word	0x200000b8
 800a1d8:	200000b9 	.word	0x200000b9

0800a1dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a1e8:	4b3a      	ldr	r3, [pc, #232]	; (800a2d4 <USBD_CDC_DeInit+0xf8>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f002 faab 	bl	800c74a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a1f4:	4b37      	ldr	r3, [pc, #220]	; (800a2d4 <USBD_CDC_DeInit+0xf8>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	f003 020f 	and.w	r2, r3, #15
 800a1fc:	6879      	ldr	r1, [r7, #4]
 800a1fe:	4613      	mov	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	440b      	add	r3, r1
 800a208:	3324      	adds	r3, #36	; 0x24
 800a20a:	2200      	movs	r2, #0
 800a20c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a20e:	4b32      	ldr	r3, [pc, #200]	; (800a2d8 <USBD_CDC_DeInit+0xfc>)
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	4619      	mov	r1, r3
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f002 fa98 	bl	800c74a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a21a:	4b2f      	ldr	r3, [pc, #188]	; (800a2d8 <USBD_CDC_DeInit+0xfc>)
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	f003 020f 	and.w	r2, r3, #15
 800a222:	6879      	ldr	r1, [r7, #4]
 800a224:	4613      	mov	r3, r2
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	4413      	add	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	440b      	add	r3, r1
 800a22e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a232:	2200      	movs	r2, #0
 800a234:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a236:	4b29      	ldr	r3, [pc, #164]	; (800a2dc <USBD_CDC_DeInit+0x100>)
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	4619      	mov	r1, r3
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f002 fa84 	bl	800c74a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a242:	4b26      	ldr	r3, [pc, #152]	; (800a2dc <USBD_CDC_DeInit+0x100>)
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	f003 020f 	and.w	r2, r3, #15
 800a24a:	6879      	ldr	r1, [r7, #4]
 800a24c:	4613      	mov	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	440b      	add	r3, r1
 800a256:	3324      	adds	r3, #36	; 0x24
 800a258:	2200      	movs	r2, #0
 800a25a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a25c:	4b1f      	ldr	r3, [pc, #124]	; (800a2dc <USBD_CDC_DeInit+0x100>)
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	f003 020f 	and.w	r2, r3, #15
 800a264:	6879      	ldr	r1, [r7, #4]
 800a266:	4613      	mov	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4413      	add	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	440b      	add	r3, r1
 800a270:	3326      	adds	r3, #38	; 0x26
 800a272:	2200      	movs	r2, #0
 800a274:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	32b0      	adds	r2, #176	; 0xb0
 800a280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d01f      	beq.n	800a2c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	33b0      	adds	r3, #176	; 0xb0
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	32b0      	adds	r2, #176	; 0xb0
 800a2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f002 fb58 	bl	800c960 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	32b0      	adds	r2, #176	; 0xb0
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	200000b7 	.word	0x200000b7
 800a2d8:	200000b8 	.word	0x200000b8
 800a2dc:	200000b9 	.word	0x200000b9

0800a2e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	32b0      	adds	r2, #176	; 0xb0
 800a2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a2fe:	2300      	movs	r3, #0
 800a300:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d101      	bne.n	800a310 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e0bf      	b.n	800a490 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d050      	beq.n	800a3be <USBD_CDC_Setup+0xde>
 800a31c:	2b20      	cmp	r3, #32
 800a31e:	f040 80af 	bne.w	800a480 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	88db      	ldrh	r3, [r3, #6]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d03a      	beq.n	800a3a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	b25b      	sxtb	r3, r3
 800a330:	2b00      	cmp	r3, #0
 800a332:	da1b      	bge.n	800a36c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	33b0      	adds	r3, #176	; 0xb0
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	4413      	add	r3, r2
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a34a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	88d2      	ldrh	r2, [r2, #6]
 800a350:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	88db      	ldrh	r3, [r3, #6]
 800a356:	2b07      	cmp	r3, #7
 800a358:	bf28      	it	cs
 800a35a:	2307      	movcs	r3, #7
 800a35c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	89fa      	ldrh	r2, [r7, #14]
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f001 fd89 	bl	800be7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a36a:	e090      	b.n	800a48e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	785a      	ldrb	r2, [r3, #1]
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	88db      	ldrh	r3, [r3, #6]
 800a37a:	2b3f      	cmp	r3, #63	; 0x3f
 800a37c:	d803      	bhi.n	800a386 <USBD_CDC_Setup+0xa6>
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	88db      	ldrh	r3, [r3, #6]
 800a382:	b2da      	uxtb	r2, r3
 800a384:	e000      	b.n	800a388 <USBD_CDC_Setup+0xa8>
 800a386:	2240      	movs	r2, #64	; 0x40
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a38e:	6939      	ldr	r1, [r7, #16]
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a396:	461a      	mov	r2, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f001 fd9b 	bl	800bed4 <USBD_CtlPrepareRx>
      break;
 800a39e:	e076      	b.n	800a48e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	33b0      	adds	r3, #176	; 0xb0
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	7850      	ldrb	r0, [r2, #1]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	4798      	blx	r3
      break;
 800a3bc:	e067      	b.n	800a48e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	785b      	ldrb	r3, [r3, #1]
 800a3c2:	2b0b      	cmp	r3, #11
 800a3c4:	d851      	bhi.n	800a46a <USBD_CDC_Setup+0x18a>
 800a3c6:	a201      	add	r2, pc, #4	; (adr r2, 800a3cc <USBD_CDC_Setup+0xec>)
 800a3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3cc:	0800a3fd 	.word	0x0800a3fd
 800a3d0:	0800a479 	.word	0x0800a479
 800a3d4:	0800a46b 	.word	0x0800a46b
 800a3d8:	0800a46b 	.word	0x0800a46b
 800a3dc:	0800a46b 	.word	0x0800a46b
 800a3e0:	0800a46b 	.word	0x0800a46b
 800a3e4:	0800a46b 	.word	0x0800a46b
 800a3e8:	0800a46b 	.word	0x0800a46b
 800a3ec:	0800a46b 	.word	0x0800a46b
 800a3f0:	0800a46b 	.word	0x0800a46b
 800a3f4:	0800a427 	.word	0x0800a427
 800a3f8:	0800a451 	.word	0x0800a451
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b03      	cmp	r3, #3
 800a406:	d107      	bne.n	800a418 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a408:	f107 030a 	add.w	r3, r7, #10
 800a40c:	2202      	movs	r2, #2
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f001 fd33 	bl	800be7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a416:	e032      	b.n	800a47e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f001 fcbd 	bl	800bd9a <USBD_CtlError>
            ret = USBD_FAIL;
 800a420:	2303      	movs	r3, #3
 800a422:	75fb      	strb	r3, [r7, #23]
          break;
 800a424:	e02b      	b.n	800a47e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	2b03      	cmp	r3, #3
 800a430:	d107      	bne.n	800a442 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a432:	f107 030d 	add.w	r3, r7, #13
 800a436:	2201      	movs	r2, #1
 800a438:	4619      	mov	r1, r3
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f001 fd1e 	bl	800be7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a440:	e01d      	b.n	800a47e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f001 fca8 	bl	800bd9a <USBD_CtlError>
            ret = USBD_FAIL;
 800a44a:	2303      	movs	r3, #3
 800a44c:	75fb      	strb	r3, [r7, #23]
          break;
 800a44e:	e016      	b.n	800a47e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a456:	b2db      	uxtb	r3, r3
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d00f      	beq.n	800a47c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a45c:	6839      	ldr	r1, [r7, #0]
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f001 fc9b 	bl	800bd9a <USBD_CtlError>
            ret = USBD_FAIL;
 800a464:	2303      	movs	r3, #3
 800a466:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a468:	e008      	b.n	800a47c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f001 fc94 	bl	800bd9a <USBD_CtlError>
          ret = USBD_FAIL;
 800a472:	2303      	movs	r3, #3
 800a474:	75fb      	strb	r3, [r7, #23]
          break;
 800a476:	e002      	b.n	800a47e <USBD_CDC_Setup+0x19e>
          break;
 800a478:	bf00      	nop
 800a47a:	e008      	b.n	800a48e <USBD_CDC_Setup+0x1ae>
          break;
 800a47c:	bf00      	nop
      }
      break;
 800a47e:	e006      	b.n	800a48e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f001 fc89 	bl	800bd9a <USBD_CtlError>
      ret = USBD_FAIL;
 800a488:	2303      	movs	r3, #3
 800a48a:	75fb      	strb	r3, [r7, #23]
      break;
 800a48c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a48e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	32b0      	adds	r2, #176	; 0xb0
 800a4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d101      	bne.n	800a4c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	e065      	b.n	800a58e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	32b0      	adds	r2, #176	; 0xb0
 800a4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a4d2:	78fb      	ldrb	r3, [r7, #3]
 800a4d4:	f003 020f 	and.w	r2, r3, #15
 800a4d8:	6879      	ldr	r1, [r7, #4]
 800a4da:	4613      	mov	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4413      	add	r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	440b      	add	r3, r1
 800a4e4:	3318      	adds	r3, #24
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d02f      	beq.n	800a54c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a4ec:	78fb      	ldrb	r3, [r7, #3]
 800a4ee:	f003 020f 	and.w	r2, r3, #15
 800a4f2:	6879      	ldr	r1, [r7, #4]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	440b      	add	r3, r1
 800a4fe:	3318      	adds	r3, #24
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	78fb      	ldrb	r3, [r7, #3]
 800a504:	f003 010f 	and.w	r1, r3, #15
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	460b      	mov	r3, r1
 800a50c:	00db      	lsls	r3, r3, #3
 800a50e:	440b      	add	r3, r1
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4403      	add	r3, r0
 800a514:	3348      	adds	r3, #72	; 0x48
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	fbb2 f1f3 	udiv	r1, r2, r3
 800a51c:	fb01 f303 	mul.w	r3, r1, r3
 800a520:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a522:	2b00      	cmp	r3, #0
 800a524:	d112      	bne.n	800a54c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a526:	78fb      	ldrb	r3, [r7, #3]
 800a528:	f003 020f 	and.w	r2, r3, #15
 800a52c:	6879      	ldr	r1, [r7, #4]
 800a52e:	4613      	mov	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4413      	add	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	440b      	add	r3, r1
 800a538:	3318      	adds	r3, #24
 800a53a:	2200      	movs	r2, #0
 800a53c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a53e:	78f9      	ldrb	r1, [r7, #3]
 800a540:	2300      	movs	r3, #0
 800a542:	2200      	movs	r2, #0
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f002 f9a8 	bl	800c89a <USBD_LL_Transmit>
 800a54a:	e01f      	b.n	800a58c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2200      	movs	r2, #0
 800a550:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	33b0      	adds	r3, #176	; 0xb0
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d010      	beq.n	800a58c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	33b0      	adds	r3, #176	; 0xb0
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4413      	add	r3, r2
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a588:	78fa      	ldrb	r2, [r7, #3]
 800a58a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	460b      	mov	r3, r1
 800a5a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	32b0      	adds	r2, #176	; 0xb0
 800a5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	32b0      	adds	r2, #176	; 0xb0
 800a5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e01a      	b.n	800a5fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a5c8:	78fb      	ldrb	r3, [r7, #3]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f002 f9a6 	bl	800c91e <USBD_LL_GetRxDataSize>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	33b0      	adds	r3, #176	; 0xb0
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	32b0      	adds	r2, #176	; 0xb0
 800a618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a61c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a624:	2303      	movs	r3, #3
 800a626:	e025      	b.n	800a674 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	33b0      	adds	r3, #176	; 0xb0
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4413      	add	r3, r2
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01a      	beq.n	800a672 <USBD_CDC_EP0_RxReady+0x6c>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a642:	2bff      	cmp	r3, #255	; 0xff
 800a644:	d015      	beq.n	800a672 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	33b0      	adds	r3, #176	; 0xb0
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4413      	add	r3, r2
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a65e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a666:	b292      	uxth	r2, r2
 800a668:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	22ff      	movs	r2, #255	; 0xff
 800a66e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a684:	2182      	movs	r1, #130	; 0x82
 800a686:	4818      	ldr	r0, [pc, #96]	; (800a6e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a688:	f000 fd4f 	bl	800b12a <USBD_GetEpDesc>
 800a68c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a68e:	2101      	movs	r1, #1
 800a690:	4815      	ldr	r0, [pc, #84]	; (800a6e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a692:	f000 fd4a 	bl	800b12a <USBD_GetEpDesc>
 800a696:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a698:	2181      	movs	r1, #129	; 0x81
 800a69a:	4813      	ldr	r0, [pc, #76]	; (800a6e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a69c:	f000 fd45 	bl	800b12a <USBD_GetEpDesc>
 800a6a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	2210      	movs	r2, #16
 800a6ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d006      	beq.n	800a6c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6bc:	711a      	strb	r2, [r3, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d006      	beq.n	800a6d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6d0:	711a      	strb	r2, [r3, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2243      	movs	r2, #67	; 0x43
 800a6da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a6dc:	4b02      	ldr	r3, [pc, #8]	; (800a6e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3718      	adds	r7, #24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20000074 	.word	0x20000074

0800a6ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a6f4:	2182      	movs	r1, #130	; 0x82
 800a6f6:	4818      	ldr	r0, [pc, #96]	; (800a758 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6f8:	f000 fd17 	bl	800b12a <USBD_GetEpDesc>
 800a6fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a6fe:	2101      	movs	r1, #1
 800a700:	4815      	ldr	r0, [pc, #84]	; (800a758 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a702:	f000 fd12 	bl	800b12a <USBD_GetEpDesc>
 800a706:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a708:	2181      	movs	r1, #129	; 0x81
 800a70a:	4813      	ldr	r0, [pc, #76]	; (800a758 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a70c:	f000 fd0d 	bl	800b12a <USBD_GetEpDesc>
 800a710:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	2210      	movs	r2, #16
 800a71c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d006      	beq.n	800a732 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	2200      	movs	r2, #0
 800a728:	711a      	strb	r2, [r3, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f042 0202 	orr.w	r2, r2, #2
 800a730:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d006      	beq.n	800a746 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	711a      	strb	r2, [r3, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f042 0202 	orr.w	r2, r2, #2
 800a744:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2243      	movs	r2, #67	; 0x43
 800a74a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a74c:	4b02      	ldr	r3, [pc, #8]	; (800a758 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3718      	adds	r7, #24
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20000074 	.word	0x20000074

0800a75c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a764:	2182      	movs	r1, #130	; 0x82
 800a766:	4818      	ldr	r0, [pc, #96]	; (800a7c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a768:	f000 fcdf 	bl	800b12a <USBD_GetEpDesc>
 800a76c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a76e:	2101      	movs	r1, #1
 800a770:	4815      	ldr	r0, [pc, #84]	; (800a7c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a772:	f000 fcda 	bl	800b12a <USBD_GetEpDesc>
 800a776:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a778:	2181      	movs	r1, #129	; 0x81
 800a77a:	4813      	ldr	r0, [pc, #76]	; (800a7c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a77c:	f000 fcd5 	bl	800b12a <USBD_GetEpDesc>
 800a780:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d002      	beq.n	800a78e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2210      	movs	r2, #16
 800a78c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d006      	beq.n	800a7a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	2200      	movs	r2, #0
 800a798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a79c:	711a      	strb	r2, [r3, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d006      	beq.n	800a7b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7b0:	711a      	strb	r2, [r3, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2243      	movs	r2, #67	; 0x43
 800a7ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a7bc:	4b02      	ldr	r3, [pc, #8]	; (800a7c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20000074 	.word	0x20000074

0800a7cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	220a      	movs	r2, #10
 800a7d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a7da:	4b03      	ldr	r3, [pc, #12]	; (800a7e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	20000030 	.word	0x20000030

0800a7ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e009      	b.n	800a814 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	33b0      	adds	r3, #176	; 0xb0
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4413      	add	r3, r2
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	32b0      	adds	r2, #176	; 0xb0
 800a836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a842:	2303      	movs	r3, #3
 800a844:	e008      	b.n	800a858 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	371c      	adds	r7, #28
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	32b0      	adds	r2, #176	; 0xb0
 800a878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a884:	2303      	movs	r3, #3
 800a886:	e004      	b.n	800a892 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3714      	adds	r7, #20
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
	...

0800a8a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	32b0      	adds	r2, #176	; 0xb0
 800a8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	32b0      	adds	r2, #176	; 0xb0
 800a8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	e025      	b.n	800a91e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d11f      	bne.n	800a91c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a8e4:	4b10      	ldr	r3, [pc, #64]	; (800a928 <USBD_CDC_TransmitPacket+0x88>)
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	f003 020f 	and.w	r2, r3, #15
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4403      	add	r3, r0
 800a8fe:	3318      	adds	r3, #24
 800a900:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a902:	4b09      	ldr	r3, [pc, #36]	; (800a928 <USBD_CDC_TransmitPacket+0x88>)
 800a904:	7819      	ldrb	r1, [r3, #0]
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f001 ffc1 	bl	800c89a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	200000b7 	.word	0x200000b7

0800a92c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	32b0      	adds	r2, #176	; 0xb0
 800a93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a942:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	32b0      	adds	r2, #176	; 0xb0
 800a94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a956:	2303      	movs	r3, #3
 800a958:	e018      	b.n	800a98c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	7c1b      	ldrb	r3, [r3, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10a      	bne.n	800a978 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a962:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <USBD_CDC_ReceivePacket+0x68>)
 800a964:	7819      	ldrb	r1, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a96c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 ffb3 	bl	800c8dc <USBD_LL_PrepareReceive>
 800a976:	e008      	b.n	800a98a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a978:	4b06      	ldr	r3, [pc, #24]	; (800a994 <USBD_CDC_ReceivePacket+0x68>)
 800a97a:	7819      	ldrb	r1, [r3, #0]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a982:	2340      	movs	r3, #64	; 0x40
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f001 ffa9 	bl	800c8dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	200000b8 	.word	0x200000b8

0800a998 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b086      	sub	sp, #24
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d101      	bne.n	800a9b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	e01f      	b.n	800a9f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	79fa      	ldrb	r2, [r7, #7]
 800a9e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f001 fe23 	bl	800c630 <USBD_LL_Init>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa02:	2300      	movs	r3, #0
 800aa04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e025      	b.n	800aa5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	32ae      	adds	r2, #174	; 0xae
 800aa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00f      	beq.n	800aa4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	32ae      	adds	r2, #174	; 0xae
 800aa36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3c:	f107 020e 	add.w	r2, r7, #14
 800aa40:	4610      	mov	r0, r2
 800aa42:	4798      	blx	r3
 800aa44:	4602      	mov	r2, r0
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f001 fe2b 	bl	800c6c8 <USBD_LL_Start>
 800aa72:	4603      	mov	r3, r0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d009      	beq.n	800aac0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	78fa      	ldrb	r2, [r7, #3]
 800aab6:	4611      	mov	r1, r2
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	4798      	blx	r3
 800aabc:	4603      	mov	r3, r0
 800aabe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b084      	sub	sp, #16
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	460b      	mov	r3, r1
 800aad4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	78fa      	ldrb	r2, [r7, #3]
 800aae4:	4611      	mov	r1, r2
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	4798      	blx	r3
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b084      	sub	sp, #16
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f001 f908 	bl	800bd26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ab24:	461a      	mov	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab32:	f003 031f 	and.w	r3, r3, #31
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d01a      	beq.n	800ab70 <USBD_LL_SetupStage+0x72>
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	d822      	bhi.n	800ab84 <USBD_LL_SetupStage+0x86>
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d002      	beq.n	800ab48 <USBD_LL_SetupStage+0x4a>
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d00a      	beq.n	800ab5c <USBD_LL_SetupStage+0x5e>
 800ab46:	e01d      	b.n	800ab84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fb5f 	bl	800b214 <USBD_StdDevReq>
 800ab56:	4603      	mov	r3, r0
 800ab58:	73fb      	strb	r3, [r7, #15]
      break;
 800ab5a:	e020      	b.n	800ab9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab62:	4619      	mov	r1, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fbc7 	bl	800b2f8 <USBD_StdItfReq>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab6e:	e016      	b.n	800ab9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab76:	4619      	mov	r1, r3
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fc29 	bl	800b3d0 <USBD_StdEPReq>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	73fb      	strb	r3, [r7, #15]
      break;
 800ab82:	e00c      	b.n	800ab9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f001 fdf8 	bl	800c788 <USBD_LL_StallEP>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab9c:	bf00      	nop
  }

  return ret;
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	460b      	mov	r3, r1
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800abba:	7afb      	ldrb	r3, [r7, #11]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d16e      	bne.n	800ac9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800abc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800abce:	2b03      	cmp	r3, #3
 800abd0:	f040 8098 	bne.w	800ad04 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	689a      	ldr	r2, [r3, #8]
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d913      	bls.n	800ac08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	1ad2      	subs	r2, r2, r3
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	68da      	ldr	r2, [r3, #12]
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	4293      	cmp	r3, r2
 800abf8:	bf28      	it	cs
 800abfa:	4613      	movcs	r3, r2
 800abfc:	461a      	mov	r2, r3
 800abfe:	6879      	ldr	r1, [r7, #4]
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f001 f984 	bl	800bf0e <USBD_CtlContinueRx>
 800ac06:	e07d      	b.n	800ad04 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac0e:	f003 031f 	and.w	r3, r3, #31
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d014      	beq.n	800ac40 <USBD_LL_DataOutStage+0x98>
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d81d      	bhi.n	800ac56 <USBD_LL_DataOutStage+0xae>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d002      	beq.n	800ac24 <USBD_LL_DataOutStage+0x7c>
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d003      	beq.n	800ac2a <USBD_LL_DataOutStage+0x82>
 800ac22:	e018      	b.n	800ac56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ac24:	2300      	movs	r3, #0
 800ac26:	75bb      	strb	r3, [r7, #22]
            break;
 800ac28:	e018      	b.n	800ac5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	4619      	mov	r1, r3
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f000 fa5e 	bl	800b0f6 <USBD_CoreFindIF>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	75bb      	strb	r3, [r7, #22]
            break;
 800ac3e:	e00d      	b.n	800ac5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	4619      	mov	r1, r3
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f000 fa60 	bl	800b110 <USBD_CoreFindEP>
 800ac50:	4603      	mov	r3, r0
 800ac52:	75bb      	strb	r3, [r7, #22]
            break;
 800ac54:	e002      	b.n	800ac5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ac56:	2300      	movs	r3, #0
 800ac58:	75bb      	strb	r3, [r7, #22]
            break;
 800ac5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ac5c:	7dbb      	ldrb	r3, [r7, #22]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d119      	bne.n	800ac96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b03      	cmp	r3, #3
 800ac6c:	d113      	bne.n	800ac96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ac6e:	7dba      	ldrb	r2, [r7, #22]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	32ae      	adds	r2, #174	; 0xae
 800ac74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00b      	beq.n	800ac96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ac7e:	7dba      	ldrb	r2, [r7, #22]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ac86:	7dba      	ldrb	r2, [r7, #22]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	32ae      	adds	r2, #174	; 0xae
 800ac8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f001 f94a 	bl	800bf30 <USBD_CtlSendStatus>
 800ac9c:	e032      	b.n	800ad04 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ac9e:	7afb      	ldrb	r3, [r7, #11]
 800aca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	4619      	mov	r1, r3
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f000 fa31 	bl	800b110 <USBD_CoreFindEP>
 800acae:	4603      	mov	r3, r0
 800acb0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acb2:	7dbb      	ldrb	r3, [r7, #22]
 800acb4:	2bff      	cmp	r3, #255	; 0xff
 800acb6:	d025      	beq.n	800ad04 <USBD_LL_DataOutStage+0x15c>
 800acb8:	7dbb      	ldrb	r3, [r7, #22]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d122      	bne.n	800ad04 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d117      	bne.n	800acfa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800acca:	7dba      	ldrb	r2, [r7, #22]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	32ae      	adds	r2, #174	; 0xae
 800acd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00f      	beq.n	800acfa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800acda:	7dba      	ldrb	r2, [r7, #22]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ace2:	7dba      	ldrb	r2, [r7, #22]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	32ae      	adds	r2, #174	; 0xae
 800ace8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	7afa      	ldrb	r2, [r7, #11]
 800acf0:	4611      	mov	r1, r2
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	4798      	blx	r3
 800acf6:	4603      	mov	r3, r0
 800acf8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ad00:	7dfb      	ldrb	r3, [r7, #23]
 800ad02:	e000      	b.n	800ad06 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3718      	adds	r7, #24
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b086      	sub	sp, #24
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	60f8      	str	r0, [r7, #12]
 800ad16:	460b      	mov	r3, r1
 800ad18:	607a      	str	r2, [r7, #4]
 800ad1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ad1c:	7afb      	ldrb	r3, [r7, #11]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d16f      	bne.n	800ae02 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3314      	adds	r3, #20
 800ad26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d15a      	bne.n	800ade8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	689a      	ldr	r2, [r3, #8]
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d914      	bls.n	800ad68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	689a      	ldr	r2, [r3, #8]
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	1ad2      	subs	r2, r2, r3
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	461a      	mov	r2, r3
 800ad52:	6879      	ldr	r1, [r7, #4]
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f001 f8ac 	bl	800beb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	2100      	movs	r1, #0
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f001 fdbb 	bl	800c8dc <USBD_LL_PrepareReceive>
 800ad66:	e03f      	b.n	800ade8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	68da      	ldr	r2, [r3, #12]
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d11c      	bne.n	800adae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	685a      	ldr	r2, [r3, #4]
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d316      	bcc.n	800adae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	685a      	ldr	r2, [r3, #4]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d20f      	bcs.n	800adae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2100      	movs	r1, #0
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f001 f88d 	bl	800beb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ada0:	2300      	movs	r3, #0
 800ada2:	2200      	movs	r2, #0
 800ada4:	2100      	movs	r1, #0
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f001 fd98 	bl	800c8dc <USBD_LL_PrepareReceive>
 800adac:	e01c      	b.n	800ade8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	d10f      	bne.n	800adda <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d009      	beq.n	800adda <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800adda:	2180      	movs	r1, #128	; 0x80
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f001 fcd3 	bl	800c788 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f001 f8b7 	bl	800bf56 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d03a      	beq.n	800ae68 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f7ff fe42 	bl	800aa7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ae00:	e032      	b.n	800ae68 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ae02:	7afb      	ldrb	r3, [r7, #11]
 800ae04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 f97f 	bl	800b110 <USBD_CoreFindEP>
 800ae12:	4603      	mov	r3, r0
 800ae14:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
 800ae18:	2bff      	cmp	r3, #255	; 0xff
 800ae1a:	d025      	beq.n	800ae68 <USBD_LL_DataInStage+0x15a>
 800ae1c:	7dfb      	ldrb	r3, [r7, #23]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d122      	bne.n	800ae68 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	d11c      	bne.n	800ae68 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ae2e:	7dfa      	ldrb	r2, [r7, #23]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	32ae      	adds	r2, #174	; 0xae
 800ae34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d014      	beq.n	800ae68 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ae3e:	7dfa      	ldrb	r2, [r7, #23]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ae46:	7dfa      	ldrb	r2, [r7, #23]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	32ae      	adds	r2, #174	; 0xae
 800ae4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	7afa      	ldrb	r2, [r7, #11]
 800ae54:	4611      	mov	r1, r2
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	4798      	blx	r3
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ae5e:	7dbb      	ldrb	r3, [r7, #22]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d001      	beq.n	800ae68 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ae64:	7dbb      	ldrb	r3, [r7, #22]
 800ae66:	e000      	b.n	800ae6a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3718      	adds	r7, #24
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b084      	sub	sp, #16
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d014      	beq.n	800aed8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00e      	beq.n	800aed8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	6852      	ldr	r2, [r2, #4]
 800aec6:	b2d2      	uxtb	r2, r2
 800aec8:	4611      	mov	r1, r2
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	4798      	blx	r3
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aed4:	2303      	movs	r3, #3
 800aed6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aed8:	2340      	movs	r3, #64	; 0x40
 800aeda:	2200      	movs	r2, #0
 800aedc:	2100      	movs	r1, #0
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f001 fc0d 	bl	800c6fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2240      	movs	r2, #64	; 0x40
 800aef0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aef4:	2340      	movs	r3, #64	; 0x40
 800aef6:	2200      	movs	r2, #0
 800aef8:	2180      	movs	r1, #128	; 0x80
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f001 fbff 	bl	800c6fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2240      	movs	r2, #64	; 0x40
 800af0a:	621a      	str	r2, [r3, #32]

  return ret;
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af16:	b480      	push	{r7}
 800af18:	b083      	sub	sp, #12
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	460b      	mov	r3, r1
 800af20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	78fa      	ldrb	r2, [r7, #3]
 800af26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af36:	b480      	push	{r7}
 800af38:	b083      	sub	sp, #12
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af44:	b2da      	uxtb	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2204      	movs	r2, #4
 800af50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af62:	b480      	push	{r7}
 800af64:	b083      	sub	sp, #12
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b04      	cmp	r3, #4
 800af74:	d106      	bne.n	800af84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800af7c:	b2da      	uxtb	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b082      	sub	sp, #8
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	2b03      	cmp	r3, #3
 800afa4:	d110      	bne.n	800afc8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00b      	beq.n	800afc8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afb6:	69db      	ldr	r3, [r3, #28]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d005      	beq.n	800afc8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afc2:	69db      	ldr	r3, [r3, #28]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b082      	sub	sp, #8
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	460b      	mov	r3, r1
 800afdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	32ae      	adds	r2, #174	; 0xae
 800afe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d101      	bne.n	800aff4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aff0:	2303      	movs	r3, #3
 800aff2:	e01c      	b.n	800b02e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800affa:	b2db      	uxtb	r3, r3
 800affc:	2b03      	cmp	r3, #3
 800affe:	d115      	bne.n	800b02c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	32ae      	adds	r2, #174	; 0xae
 800b00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00e:	6a1b      	ldr	r3, [r3, #32]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00b      	beq.n	800b02c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	32ae      	adds	r2, #174	; 0xae
 800b01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b022:	6a1b      	ldr	r3, [r3, #32]
 800b024:	78fa      	ldrb	r2, [r7, #3]
 800b026:	4611      	mov	r1, r2
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b082      	sub	sp, #8
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	460b      	mov	r3, r1
 800b040:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	32ae      	adds	r2, #174	; 0xae
 800b04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d101      	bne.n	800b058 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b054:	2303      	movs	r3, #3
 800b056:	e01c      	b.n	800b092 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	2b03      	cmp	r3, #3
 800b062:	d115      	bne.n	800b090 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	32ae      	adds	r2, #174	; 0xae
 800b06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00b      	beq.n	800b090 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	32ae      	adds	r2, #174	; 0xae
 800b082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b088:	78fa      	ldrb	r2, [r7, #3]
 800b08a:	4611      	mov	r1, r2
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b083      	sub	sp, #12
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00e      	beq.n	800b0ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	6852      	ldr	r2, [r2, #4]
 800b0da:	b2d2      	uxtb	r2, r2
 800b0dc:	4611      	mov	r1, r2
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	4798      	blx	r3
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b083      	sub	sp, #12
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	460b      	mov	r3, r1
 800b100:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b102:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b104:	4618      	mov	r0, r3
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	460b      	mov	r3, r1
 800b11a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b11c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b11e:	4618      	mov	r0, r3
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b086      	sub	sp, #24
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
 800b132:	460b      	mov	r3, r1
 800b134:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b13e:	2300      	movs	r3, #0
 800b140:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	885b      	ldrh	r3, [r3, #2]
 800b146:	b29a      	uxth	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	429a      	cmp	r2, r3
 800b150:	d920      	bls.n	800b194 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	b29b      	uxth	r3, r3
 800b158:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b15a:	e013      	b.n	800b184 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b15c:	f107 030a 	add.w	r3, r7, #10
 800b160:	4619      	mov	r1, r3
 800b162:	6978      	ldr	r0, [r7, #20]
 800b164:	f000 f81b 	bl	800b19e <USBD_GetNextDesc>
 800b168:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	785b      	ldrb	r3, [r3, #1]
 800b16e:	2b05      	cmp	r3, #5
 800b170:	d108      	bne.n	800b184 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	789b      	ldrb	r3, [r3, #2]
 800b17a:	78fa      	ldrb	r2, [r7, #3]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d008      	beq.n	800b192 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b180:	2300      	movs	r3, #0
 800b182:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	885b      	ldrh	r3, [r3, #2]
 800b188:	b29a      	uxth	r2, r3
 800b18a:	897b      	ldrh	r3, [r7, #10]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d8e5      	bhi.n	800b15c <USBD_GetEpDesc+0x32>
 800b190:	e000      	b.n	800b194 <USBD_GetEpDesc+0x6a>
          break;
 800b192:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b194:	693b      	ldr	r3, [r7, #16]
}
 800b196:	4618      	mov	r0, r3
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b085      	sub	sp, #20
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	881a      	ldrh	r2, [r3, #0]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	4413      	add	r3, r2
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b087      	sub	sp, #28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b1f6:	8a3b      	ldrh	r3, [r7, #16]
 800b1f8:	021b      	lsls	r3, r3, #8
 800b1fa:	b21a      	sxth	r2, r3
 800b1fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b200:	4313      	orrs	r3, r2
 800b202:	b21b      	sxth	r3, r3
 800b204:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b206:	89fb      	ldrh	r3, [r7, #14]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	371c      	adds	r7, #28
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b22a:	2b40      	cmp	r3, #64	; 0x40
 800b22c:	d005      	beq.n	800b23a <USBD_StdDevReq+0x26>
 800b22e:	2b40      	cmp	r3, #64	; 0x40
 800b230:	d857      	bhi.n	800b2e2 <USBD_StdDevReq+0xce>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00f      	beq.n	800b256 <USBD_StdDevReq+0x42>
 800b236:	2b20      	cmp	r3, #32
 800b238:	d153      	bne.n	800b2e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	32ae      	adds	r2, #174	; 0xae
 800b244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	6839      	ldr	r1, [r7, #0]
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	4798      	blx	r3
 800b250:	4603      	mov	r3, r0
 800b252:	73fb      	strb	r3, [r7, #15]
      break;
 800b254:	e04a      	b.n	800b2ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	785b      	ldrb	r3, [r3, #1]
 800b25a:	2b09      	cmp	r3, #9
 800b25c:	d83b      	bhi.n	800b2d6 <USBD_StdDevReq+0xc2>
 800b25e:	a201      	add	r2, pc, #4	; (adr r2, 800b264 <USBD_StdDevReq+0x50>)
 800b260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b264:	0800b2b9 	.word	0x0800b2b9
 800b268:	0800b2cd 	.word	0x0800b2cd
 800b26c:	0800b2d7 	.word	0x0800b2d7
 800b270:	0800b2c3 	.word	0x0800b2c3
 800b274:	0800b2d7 	.word	0x0800b2d7
 800b278:	0800b297 	.word	0x0800b297
 800b27c:	0800b28d 	.word	0x0800b28d
 800b280:	0800b2d7 	.word	0x0800b2d7
 800b284:	0800b2af 	.word	0x0800b2af
 800b288:	0800b2a1 	.word	0x0800b2a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fa3c 	bl	800b70c <USBD_GetDescriptor>
          break;
 800b294:	e024      	b.n	800b2e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 fba1 	bl	800b9e0 <USBD_SetAddress>
          break;
 800b29e:	e01f      	b.n	800b2e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fbe0 	bl	800ba68 <USBD_SetConfig>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	73fb      	strb	r3, [r7, #15]
          break;
 800b2ac:	e018      	b.n	800b2e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 fc83 	bl	800bbbc <USBD_GetConfig>
          break;
 800b2b6:	e013      	b.n	800b2e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fcb4 	bl	800bc28 <USBD_GetStatus>
          break;
 800b2c0:	e00e      	b.n	800b2e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fce3 	bl	800bc90 <USBD_SetFeature>
          break;
 800b2ca:	e009      	b.n	800b2e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fd07 	bl	800bce2 <USBD_ClrFeature>
          break;
 800b2d4:	e004      	b.n	800b2e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b2d6:	6839      	ldr	r1, [r7, #0]
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 fd5e 	bl	800bd9a <USBD_CtlError>
          break;
 800b2de:	bf00      	nop
      }
      break;
 800b2e0:	e004      	b.n	800b2ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fd58 	bl	800bd9a <USBD_CtlError>
      break;
 800b2ea:	bf00      	nop
  }

  return ret;
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop

0800b2f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b30e:	2b40      	cmp	r3, #64	; 0x40
 800b310:	d005      	beq.n	800b31e <USBD_StdItfReq+0x26>
 800b312:	2b40      	cmp	r3, #64	; 0x40
 800b314:	d852      	bhi.n	800b3bc <USBD_StdItfReq+0xc4>
 800b316:	2b00      	cmp	r3, #0
 800b318:	d001      	beq.n	800b31e <USBD_StdItfReq+0x26>
 800b31a:	2b20      	cmp	r3, #32
 800b31c:	d14e      	bne.n	800b3bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b324:	b2db      	uxtb	r3, r3
 800b326:	3b01      	subs	r3, #1
 800b328:	2b02      	cmp	r3, #2
 800b32a:	d840      	bhi.n	800b3ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	889b      	ldrh	r3, [r3, #4]
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b01      	cmp	r3, #1
 800b334:	d836      	bhi.n	800b3a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	889b      	ldrh	r3, [r3, #4]
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7ff fed9 	bl	800b0f6 <USBD_CoreFindIF>
 800b344:	4603      	mov	r3, r0
 800b346:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	2bff      	cmp	r3, #255	; 0xff
 800b34c:	d01d      	beq.n	800b38a <USBD_StdItfReq+0x92>
 800b34e:	7bbb      	ldrb	r3, [r7, #14]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d11a      	bne.n	800b38a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b354:	7bba      	ldrb	r2, [r7, #14]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	32ae      	adds	r2, #174	; 0xae
 800b35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00f      	beq.n	800b384 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b364:	7bba      	ldrb	r2, [r7, #14]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b36c:	7bba      	ldrb	r2, [r7, #14]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	32ae      	adds	r2, #174	; 0xae
 800b372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	6839      	ldr	r1, [r7, #0]
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	4798      	blx	r3
 800b37e:	4603      	mov	r3, r0
 800b380:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b382:	e004      	b.n	800b38e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b384:	2303      	movs	r3, #3
 800b386:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b388:	e001      	b.n	800b38e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b38a:	2303      	movs	r3, #3
 800b38c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	88db      	ldrh	r3, [r3, #6]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d110      	bne.n	800b3b8 <USBD_StdItfReq+0xc0>
 800b396:	7bfb      	ldrb	r3, [r7, #15]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10d      	bne.n	800b3b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 fdc7 	bl	800bf30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b3a2:	e009      	b.n	800b3b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fcf7 	bl	800bd9a <USBD_CtlError>
          break;
 800b3ac:	e004      	b.n	800b3b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fcf2 	bl	800bd9a <USBD_CtlError>
          break;
 800b3b6:	e000      	b.n	800b3ba <USBD_StdItfReq+0xc2>
          break;
 800b3b8:	bf00      	nop
      }
      break;
 800b3ba:	e004      	b.n	800b3c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fceb 	bl	800bd9a <USBD_CtlError>
      break;
 800b3c4:	bf00      	nop
  }

  return ret;
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	889b      	ldrh	r3, [r3, #4]
 800b3e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3ec:	2b40      	cmp	r3, #64	; 0x40
 800b3ee:	d007      	beq.n	800b400 <USBD_StdEPReq+0x30>
 800b3f0:	2b40      	cmp	r3, #64	; 0x40
 800b3f2:	f200 817f 	bhi.w	800b6f4 <USBD_StdEPReq+0x324>
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d02a      	beq.n	800b450 <USBD_StdEPReq+0x80>
 800b3fa:	2b20      	cmp	r3, #32
 800b3fc:	f040 817a 	bne.w	800b6f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b400:	7bbb      	ldrb	r3, [r7, #14]
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f7ff fe83 	bl	800b110 <USBD_CoreFindEP>
 800b40a:	4603      	mov	r3, r0
 800b40c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b40e:	7b7b      	ldrb	r3, [r7, #13]
 800b410:	2bff      	cmp	r3, #255	; 0xff
 800b412:	f000 8174 	beq.w	800b6fe <USBD_StdEPReq+0x32e>
 800b416:	7b7b      	ldrb	r3, [r7, #13]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f040 8170 	bne.w	800b6fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b41e:	7b7a      	ldrb	r2, [r7, #13]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b426:	7b7a      	ldrb	r2, [r7, #13]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	32ae      	adds	r2, #174	; 0xae
 800b42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 8163 	beq.w	800b6fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b438:	7b7a      	ldrb	r2, [r7, #13]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	32ae      	adds	r2, #174	; 0xae
 800b43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	4798      	blx	r3
 800b44a:	4603      	mov	r3, r0
 800b44c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b44e:	e156      	b.n	800b6fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	785b      	ldrb	r3, [r3, #1]
 800b454:	2b03      	cmp	r3, #3
 800b456:	d008      	beq.n	800b46a <USBD_StdEPReq+0x9a>
 800b458:	2b03      	cmp	r3, #3
 800b45a:	f300 8145 	bgt.w	800b6e8 <USBD_StdEPReq+0x318>
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f000 809b 	beq.w	800b59a <USBD_StdEPReq+0x1ca>
 800b464:	2b01      	cmp	r3, #1
 800b466:	d03c      	beq.n	800b4e2 <USBD_StdEPReq+0x112>
 800b468:	e13e      	b.n	800b6e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b02      	cmp	r3, #2
 800b474:	d002      	beq.n	800b47c <USBD_StdEPReq+0xac>
 800b476:	2b03      	cmp	r3, #3
 800b478:	d016      	beq.n	800b4a8 <USBD_StdEPReq+0xd8>
 800b47a:	e02c      	b.n	800b4d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b47c:	7bbb      	ldrb	r3, [r7, #14]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00d      	beq.n	800b49e <USBD_StdEPReq+0xce>
 800b482:	7bbb      	ldrb	r3, [r7, #14]
 800b484:	2b80      	cmp	r3, #128	; 0x80
 800b486:	d00a      	beq.n	800b49e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b488:	7bbb      	ldrb	r3, [r7, #14]
 800b48a:	4619      	mov	r1, r3
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f001 f97b 	bl	800c788 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b492:	2180      	movs	r1, #128	; 0x80
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f001 f977 	bl	800c788 <USBD_LL_StallEP>
 800b49a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b49c:	e020      	b.n	800b4e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fc7a 	bl	800bd9a <USBD_CtlError>
              break;
 800b4a6:	e01b      	b.n	800b4e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	885b      	ldrh	r3, [r3, #2]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10e      	bne.n	800b4ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b4b0:	7bbb      	ldrb	r3, [r7, #14]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d00b      	beq.n	800b4ce <USBD_StdEPReq+0xfe>
 800b4b6:	7bbb      	ldrb	r3, [r7, #14]
 800b4b8:	2b80      	cmp	r3, #128	; 0x80
 800b4ba:	d008      	beq.n	800b4ce <USBD_StdEPReq+0xfe>
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	88db      	ldrh	r3, [r3, #6]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d104      	bne.n	800b4ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4c4:	7bbb      	ldrb	r3, [r7, #14]
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f001 f95d 	bl	800c788 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fd2e 	bl	800bf30 <USBD_CtlSendStatus>

              break;
 800b4d4:	e004      	b.n	800b4e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 fc5e 	bl	800bd9a <USBD_CtlError>
              break;
 800b4de:	bf00      	nop
          }
          break;
 800b4e0:	e107      	b.n	800b6f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d002      	beq.n	800b4f4 <USBD_StdEPReq+0x124>
 800b4ee:	2b03      	cmp	r3, #3
 800b4f0:	d016      	beq.n	800b520 <USBD_StdEPReq+0x150>
 800b4f2:	e04b      	b.n	800b58c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4f4:	7bbb      	ldrb	r3, [r7, #14]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00d      	beq.n	800b516 <USBD_StdEPReq+0x146>
 800b4fa:	7bbb      	ldrb	r3, [r7, #14]
 800b4fc:	2b80      	cmp	r3, #128	; 0x80
 800b4fe:	d00a      	beq.n	800b516 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b500:	7bbb      	ldrb	r3, [r7, #14]
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f001 f93f 	bl	800c788 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b50a:	2180      	movs	r1, #128	; 0x80
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f001 f93b 	bl	800c788 <USBD_LL_StallEP>
 800b512:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b514:	e040      	b.n	800b598 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fc3e 	bl	800bd9a <USBD_CtlError>
              break;
 800b51e:	e03b      	b.n	800b598 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	885b      	ldrh	r3, [r3, #2]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d136      	bne.n	800b596 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b528:	7bbb      	ldrb	r3, [r7, #14]
 800b52a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d004      	beq.n	800b53c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b532:	7bbb      	ldrb	r3, [r7, #14]
 800b534:	4619      	mov	r1, r3
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f001 f945 	bl	800c7c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 fcf7 	bl	800bf30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b542:	7bbb      	ldrb	r3, [r7, #14]
 800b544:	4619      	mov	r1, r3
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7ff fde2 	bl	800b110 <USBD_CoreFindEP>
 800b54c:	4603      	mov	r3, r0
 800b54e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b550:	7b7b      	ldrb	r3, [r7, #13]
 800b552:	2bff      	cmp	r3, #255	; 0xff
 800b554:	d01f      	beq.n	800b596 <USBD_StdEPReq+0x1c6>
 800b556:	7b7b      	ldrb	r3, [r7, #13]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d11c      	bne.n	800b596 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b55c:	7b7a      	ldrb	r2, [r7, #13]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b564:	7b7a      	ldrb	r2, [r7, #13]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	32ae      	adds	r2, #174	; 0xae
 800b56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d010      	beq.n	800b596 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b574:	7b7a      	ldrb	r2, [r7, #13]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	32ae      	adds	r2, #174	; 0xae
 800b57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	4798      	blx	r3
 800b586:	4603      	mov	r3, r0
 800b588:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b58a:	e004      	b.n	800b596 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b58c:	6839      	ldr	r1, [r7, #0]
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 fc03 	bl	800bd9a <USBD_CtlError>
              break;
 800b594:	e000      	b.n	800b598 <USBD_StdEPReq+0x1c8>
              break;
 800b596:	bf00      	nop
          }
          break;
 800b598:	e0ab      	b.n	800b6f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d002      	beq.n	800b5ac <USBD_StdEPReq+0x1dc>
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d032      	beq.n	800b610 <USBD_StdEPReq+0x240>
 800b5aa:	e097      	b.n	800b6dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5ac:	7bbb      	ldrb	r3, [r7, #14]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d007      	beq.n	800b5c2 <USBD_StdEPReq+0x1f2>
 800b5b2:	7bbb      	ldrb	r3, [r7, #14]
 800b5b4:	2b80      	cmp	r3, #128	; 0x80
 800b5b6:	d004      	beq.n	800b5c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b5b8:	6839      	ldr	r1, [r7, #0]
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fbed 	bl	800bd9a <USBD_CtlError>
                break;
 800b5c0:	e091      	b.n	800b6e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	da0b      	bge.n	800b5e2 <USBD_StdEPReq+0x212>
 800b5ca:	7bbb      	ldrb	r3, [r7, #14]
 800b5cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	3310      	adds	r3, #16
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	4413      	add	r3, r2
 800b5de:	3304      	adds	r3, #4
 800b5e0:	e00b      	b.n	800b5fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5e2:	7bbb      	ldrb	r3, [r7, #14]
 800b5e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4413      	add	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	2200      	movs	r2, #0
 800b600:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	2202      	movs	r2, #2
 800b606:	4619      	mov	r1, r3
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 fc37 	bl	800be7c <USBD_CtlSendData>
              break;
 800b60e:	e06a      	b.n	800b6e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b614:	2b00      	cmp	r3, #0
 800b616:	da11      	bge.n	800b63c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b618:	7bbb      	ldrb	r3, [r7, #14]
 800b61a:	f003 020f 	and.w	r2, r3, #15
 800b61e:	6879      	ldr	r1, [r7, #4]
 800b620:	4613      	mov	r3, r2
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	4413      	add	r3, r2
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	440b      	add	r3, r1
 800b62a:	3324      	adds	r3, #36	; 0x24
 800b62c:	881b      	ldrh	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d117      	bne.n	800b662 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b632:	6839      	ldr	r1, [r7, #0]
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fbb0 	bl	800bd9a <USBD_CtlError>
                  break;
 800b63a:	e054      	b.n	800b6e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
 800b63e:	f003 020f 	and.w	r2, r3, #15
 800b642:	6879      	ldr	r1, [r7, #4]
 800b644:	4613      	mov	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4413      	add	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	440b      	add	r3, r1
 800b64e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d104      	bne.n	800b662 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b658:	6839      	ldr	r1, [r7, #0]
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 fb9d 	bl	800bd9a <USBD_CtlError>
                  break;
 800b660:	e041      	b.n	800b6e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b666:	2b00      	cmp	r3, #0
 800b668:	da0b      	bge.n	800b682 <USBD_StdEPReq+0x2b2>
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b670:	4613      	mov	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4413      	add	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	3310      	adds	r3, #16
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	4413      	add	r3, r2
 800b67e:	3304      	adds	r3, #4
 800b680:	e00b      	b.n	800b69a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b682:	7bbb      	ldrb	r3, [r7, #14]
 800b684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b688:	4613      	mov	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	4413      	add	r3, r2
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	4413      	add	r3, r2
 800b698:	3304      	adds	r3, #4
 800b69a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b69c:	7bbb      	ldrb	r3, [r7, #14]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d002      	beq.n	800b6a8 <USBD_StdEPReq+0x2d8>
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
 800b6a4:	2b80      	cmp	r3, #128	; 0x80
 800b6a6:	d103      	bne.n	800b6b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	601a      	str	r2, [r3, #0]
 800b6ae:	e00e      	b.n	800b6ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b6b0:	7bbb      	ldrb	r3, [r7, #14]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f001 f8a5 	bl	800c804 <USBD_LL_IsStallEP>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d003      	beq.n	800b6c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	601a      	str	r2, [r3, #0]
 800b6c6:	e002      	b.n	800b6ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	2202      	movs	r2, #2
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 fbd1 	bl	800be7c <USBD_CtlSendData>
              break;
 800b6da:	e004      	b.n	800b6e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 fb5b 	bl	800bd9a <USBD_CtlError>
              break;
 800b6e4:	bf00      	nop
          }
          break;
 800b6e6:	e004      	b.n	800b6f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b6e8:	6839      	ldr	r1, [r7, #0]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fb55 	bl	800bd9a <USBD_CtlError>
          break;
 800b6f0:	bf00      	nop
      }
      break;
 800b6f2:	e005      	b.n	800b700 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fb4f 	bl	800bd9a <USBD_CtlError>
      break;
 800b6fc:	e000      	b.n	800b700 <USBD_StdEPReq+0x330>
      break;
 800b6fe:	bf00      	nop
  }

  return ret;
 800b700:	7bfb      	ldrb	r3, [r7, #15]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
	...

0800b70c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b716:	2300      	movs	r3, #0
 800b718:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b71a:	2300      	movs	r3, #0
 800b71c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b71e:	2300      	movs	r3, #0
 800b720:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	885b      	ldrh	r3, [r3, #2]
 800b726:	0a1b      	lsrs	r3, r3, #8
 800b728:	b29b      	uxth	r3, r3
 800b72a:	3b01      	subs	r3, #1
 800b72c:	2b06      	cmp	r3, #6
 800b72e:	f200 8128 	bhi.w	800b982 <USBD_GetDescriptor+0x276>
 800b732:	a201      	add	r2, pc, #4	; (adr r2, 800b738 <USBD_GetDescriptor+0x2c>)
 800b734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b738:	0800b755 	.word	0x0800b755
 800b73c:	0800b76d 	.word	0x0800b76d
 800b740:	0800b7ad 	.word	0x0800b7ad
 800b744:	0800b983 	.word	0x0800b983
 800b748:	0800b983 	.word	0x0800b983
 800b74c:	0800b923 	.word	0x0800b923
 800b750:	0800b94f 	.word	0x0800b94f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	7c12      	ldrb	r2, [r2, #16]
 800b760:	f107 0108 	add.w	r1, r7, #8
 800b764:	4610      	mov	r0, r2
 800b766:	4798      	blx	r3
 800b768:	60f8      	str	r0, [r7, #12]
      break;
 800b76a:	e112      	b.n	800b992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	7c1b      	ldrb	r3, [r3, #16]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10d      	bne.n	800b790 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77c:	f107 0208 	add.w	r2, r7, #8
 800b780:	4610      	mov	r0, r2
 800b782:	4798      	blx	r3
 800b784:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	3301      	adds	r3, #1
 800b78a:	2202      	movs	r2, #2
 800b78c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b78e:	e100      	b.n	800b992 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b798:	f107 0208 	add.w	r2, r7, #8
 800b79c:	4610      	mov	r0, r2
 800b79e:	4798      	blx	r3
 800b7a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	701a      	strb	r2, [r3, #0]
      break;
 800b7aa:	e0f2      	b.n	800b992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	885b      	ldrh	r3, [r3, #2]
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	2b05      	cmp	r3, #5
 800b7b4:	f200 80ac 	bhi.w	800b910 <USBD_GetDescriptor+0x204>
 800b7b8:	a201      	add	r2, pc, #4	; (adr r2, 800b7c0 <USBD_GetDescriptor+0xb4>)
 800b7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7be:	bf00      	nop
 800b7c0:	0800b7d9 	.word	0x0800b7d9
 800b7c4:	0800b80d 	.word	0x0800b80d
 800b7c8:	0800b841 	.word	0x0800b841
 800b7cc:	0800b875 	.word	0x0800b875
 800b7d0:	0800b8a9 	.word	0x0800b8a9
 800b7d4:	0800b8dd 	.word	0x0800b8dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00b      	beq.n	800b7fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	7c12      	ldrb	r2, [r2, #16]
 800b7f0:	f107 0108 	add.w	r1, r7, #8
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	4798      	blx	r3
 800b7f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7fa:	e091      	b.n	800b920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 facb 	bl	800bd9a <USBD_CtlError>
            err++;
 800b804:	7afb      	ldrb	r3, [r7, #11]
 800b806:	3301      	adds	r3, #1
 800b808:	72fb      	strb	r3, [r7, #11]
          break;
 800b80a:	e089      	b.n	800b920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00b      	beq.n	800b830 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	7c12      	ldrb	r2, [r2, #16]
 800b824:	f107 0108 	add.w	r1, r7, #8
 800b828:	4610      	mov	r0, r2
 800b82a:	4798      	blx	r3
 800b82c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b82e:	e077      	b.n	800b920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b830:	6839      	ldr	r1, [r7, #0]
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fab1 	bl	800bd9a <USBD_CtlError>
            err++;
 800b838:	7afb      	ldrb	r3, [r7, #11]
 800b83a:	3301      	adds	r3, #1
 800b83c:	72fb      	strb	r3, [r7, #11]
          break;
 800b83e:	e06f      	b.n	800b920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00b      	beq.n	800b864 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	7c12      	ldrb	r2, [r2, #16]
 800b858:	f107 0108 	add.w	r1, r7, #8
 800b85c:	4610      	mov	r0, r2
 800b85e:	4798      	blx	r3
 800b860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b862:	e05d      	b.n	800b920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fa97 	bl	800bd9a <USBD_CtlError>
            err++;
 800b86c:	7afb      	ldrb	r3, [r7, #11]
 800b86e:	3301      	adds	r3, #1
 800b870:	72fb      	strb	r3, [r7, #11]
          break;
 800b872:	e055      	b.n	800b920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00b      	beq.n	800b898 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	7c12      	ldrb	r2, [r2, #16]
 800b88c:	f107 0108 	add.w	r1, r7, #8
 800b890:	4610      	mov	r0, r2
 800b892:	4798      	blx	r3
 800b894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b896:	e043      	b.n	800b920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b898:	6839      	ldr	r1, [r7, #0]
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 fa7d 	bl	800bd9a <USBD_CtlError>
            err++;
 800b8a0:	7afb      	ldrb	r3, [r7, #11]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8a6:	e03b      	b.n	800b920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00b      	beq.n	800b8cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ba:	695b      	ldr	r3, [r3, #20]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	7c12      	ldrb	r2, [r2, #16]
 800b8c0:	f107 0108 	add.w	r1, r7, #8
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	4798      	blx	r3
 800b8c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8ca:	e029      	b.n	800b920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8cc:	6839      	ldr	r1, [r7, #0]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fa63 	bl	800bd9a <USBD_CtlError>
            err++;
 800b8d4:	7afb      	ldrb	r3, [r7, #11]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b8da:	e021      	b.n	800b920 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8e2:	699b      	ldr	r3, [r3, #24]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00b      	beq.n	800b900 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ee:	699b      	ldr	r3, [r3, #24]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	7c12      	ldrb	r2, [r2, #16]
 800b8f4:	f107 0108 	add.w	r1, r7, #8
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	4798      	blx	r3
 800b8fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8fe:	e00f      	b.n	800b920 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b900:	6839      	ldr	r1, [r7, #0]
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fa49 	bl	800bd9a <USBD_CtlError>
            err++;
 800b908:	7afb      	ldrb	r3, [r7, #11]
 800b90a:	3301      	adds	r3, #1
 800b90c:	72fb      	strb	r3, [r7, #11]
          break;
 800b90e:	e007      	b.n	800b920 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fa41 	bl	800bd9a <USBD_CtlError>
          err++;
 800b918:	7afb      	ldrb	r3, [r7, #11]
 800b91a:	3301      	adds	r3, #1
 800b91c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b91e:	bf00      	nop
      }
      break;
 800b920:	e037      	b.n	800b992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	7c1b      	ldrb	r3, [r3, #16]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d109      	bne.n	800b93e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b932:	f107 0208 	add.w	r2, r7, #8
 800b936:	4610      	mov	r0, r2
 800b938:	4798      	blx	r3
 800b93a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b93c:	e029      	b.n	800b992 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fa2a 	bl	800bd9a <USBD_CtlError>
        err++;
 800b946:	7afb      	ldrb	r3, [r7, #11]
 800b948:	3301      	adds	r3, #1
 800b94a:	72fb      	strb	r3, [r7, #11]
      break;
 800b94c:	e021      	b.n	800b992 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	7c1b      	ldrb	r3, [r3, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10d      	bne.n	800b972 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b95e:	f107 0208 	add.w	r2, r7, #8
 800b962:	4610      	mov	r0, r2
 800b964:	4798      	blx	r3
 800b966:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	3301      	adds	r3, #1
 800b96c:	2207      	movs	r2, #7
 800b96e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b970:	e00f      	b.n	800b992 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b972:	6839      	ldr	r1, [r7, #0]
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fa10 	bl	800bd9a <USBD_CtlError>
        err++;
 800b97a:	7afb      	ldrb	r3, [r7, #11]
 800b97c:	3301      	adds	r3, #1
 800b97e:	72fb      	strb	r3, [r7, #11]
      break;
 800b980:	e007      	b.n	800b992 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b982:	6839      	ldr	r1, [r7, #0]
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 fa08 	bl	800bd9a <USBD_CtlError>
      err++;
 800b98a:	7afb      	ldrb	r3, [r7, #11]
 800b98c:	3301      	adds	r3, #1
 800b98e:	72fb      	strb	r3, [r7, #11]
      break;
 800b990:	bf00      	nop
  }

  if (err != 0U)
 800b992:	7afb      	ldrb	r3, [r7, #11]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d11e      	bne.n	800b9d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	88db      	ldrh	r3, [r3, #6]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d016      	beq.n	800b9ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b9a0:	893b      	ldrh	r3, [r7, #8]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00e      	beq.n	800b9c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	88da      	ldrh	r2, [r3, #6]
 800b9aa:	893b      	ldrh	r3, [r7, #8]
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	bf28      	it	cs
 800b9b0:	4613      	movcs	r3, r2
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b9b6:	893b      	ldrh	r3, [r7, #8]
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	68f9      	ldr	r1, [r7, #12]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fa5d 	bl	800be7c <USBD_CtlSendData>
 800b9c2:	e009      	b.n	800b9d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b9c4:	6839      	ldr	r1, [r7, #0]
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f9e7 	bl	800bd9a <USBD_CtlError>
 800b9cc:	e004      	b.n	800b9d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 faae 	bl	800bf30 <USBD_CtlSendStatus>
 800b9d4:	e000      	b.n	800b9d8 <USBD_GetDescriptor+0x2cc>
    return;
 800b9d6:	bf00      	nop
  }
}
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop

0800b9e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	889b      	ldrh	r3, [r3, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d131      	bne.n	800ba56 <USBD_SetAddress+0x76>
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	88db      	ldrh	r3, [r3, #6]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d12d      	bne.n	800ba56 <USBD_SetAddress+0x76>
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	885b      	ldrh	r3, [r3, #2]
 800b9fe:	2b7f      	cmp	r3, #127	; 0x7f
 800ba00:	d829      	bhi.n	800ba56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	885b      	ldrh	r3, [r3, #2]
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b03      	cmp	r3, #3
 800ba18:	d104      	bne.n	800ba24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 f9bc 	bl	800bd9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba22:	e01d      	b.n	800ba60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	7bfa      	ldrb	r2, [r7, #15]
 800ba28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ba2c:	7bfb      	ldrb	r3, [r7, #15]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 ff13 	bl	800c85c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fa7a 	bl	800bf30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d004      	beq.n	800ba4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2202      	movs	r2, #2
 800ba46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba4a:	e009      	b.n	800ba60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba54:	e004      	b.n	800ba60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba56:	6839      	ldr	r1, [r7, #0]
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f99e 	bl	800bd9a <USBD_CtlError>
  }
}
 800ba5e:	bf00      	nop
 800ba60:	bf00      	nop
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	885b      	ldrh	r3, [r3, #2]
 800ba7a:	b2da      	uxtb	r2, r3
 800ba7c:	4b4e      	ldr	r3, [pc, #312]	; (800bbb8 <USBD_SetConfig+0x150>)
 800ba7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba80:	4b4d      	ldr	r3, [pc, #308]	; (800bbb8 <USBD_SetConfig+0x150>)
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d905      	bls.n	800ba94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba88:	6839      	ldr	r1, [r7, #0]
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 f985 	bl	800bd9a <USBD_CtlError>
    return USBD_FAIL;
 800ba90:	2303      	movs	r3, #3
 800ba92:	e08c      	b.n	800bbae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d002      	beq.n	800baa6 <USBD_SetConfig+0x3e>
 800baa0:	2b03      	cmp	r3, #3
 800baa2:	d029      	beq.n	800baf8 <USBD_SetConfig+0x90>
 800baa4:	e075      	b.n	800bb92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800baa6:	4b44      	ldr	r3, [pc, #272]	; (800bbb8 <USBD_SetConfig+0x150>)
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d020      	beq.n	800baf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800baae:	4b42      	ldr	r3, [pc, #264]	; (800bbb8 <USBD_SetConfig+0x150>)
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	461a      	mov	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bab8:	4b3f      	ldr	r3, [pc, #252]	; (800bbb8 <USBD_SetConfig+0x150>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f7fe ffe7 	bl	800aa92 <USBD_SetClassConfig>
 800bac4:	4603      	mov	r3, r0
 800bac6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d008      	beq.n	800bae0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bace:	6839      	ldr	r1, [r7, #0]
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 f962 	bl	800bd9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2202      	movs	r2, #2
 800bada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bade:	e065      	b.n	800bbac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fa25 	bl	800bf30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2203      	movs	r2, #3
 800baea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800baee:	e05d      	b.n	800bbac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fa1d 	bl	800bf30 <USBD_CtlSendStatus>
      break;
 800baf6:	e059      	b.n	800bbac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800baf8:	4b2f      	ldr	r3, [pc, #188]	; (800bbb8 <USBD_SetConfig+0x150>)
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d112      	bne.n	800bb26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2202      	movs	r2, #2
 800bb04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bb08:	4b2b      	ldr	r3, [pc, #172]	; (800bbb8 <USBD_SetConfig+0x150>)
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb12:	4b29      	ldr	r3, [pc, #164]	; (800bbb8 <USBD_SetConfig+0x150>)
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	4619      	mov	r1, r3
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f7fe ffd6 	bl	800aaca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fa06 	bl	800bf30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb24:	e042      	b.n	800bbac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bb26:	4b24      	ldr	r3, [pc, #144]	; (800bbb8 <USBD_SetConfig+0x150>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d02a      	beq.n	800bb8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f7fe ffc4 	bl	800aaca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb42:	4b1d      	ldr	r3, [pc, #116]	; (800bbb8 <USBD_SetConfig+0x150>)
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb4c:	4b1a      	ldr	r3, [pc, #104]	; (800bbb8 <USBD_SetConfig+0x150>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	4619      	mov	r1, r3
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7fe ff9d 	bl	800aa92 <USBD_SetClassConfig>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00f      	beq.n	800bb82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bb62:	6839      	ldr	r1, [r7, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 f918 	bl	800bd9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7fe ffa9 	bl	800aaca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2202      	movs	r2, #2
 800bb7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb80:	e014      	b.n	800bbac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 f9d4 	bl	800bf30 <USBD_CtlSendStatus>
      break;
 800bb88:	e010      	b.n	800bbac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f9d0 	bl	800bf30 <USBD_CtlSendStatus>
      break;
 800bb90:	e00c      	b.n	800bbac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bb92:	6839      	ldr	r1, [r7, #0]
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 f900 	bl	800bd9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb9a:	4b07      	ldr	r3, [pc, #28]	; (800bbb8 <USBD_SetConfig+0x150>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	4619      	mov	r1, r3
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f7fe ff92 	bl	800aaca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bba6:	2303      	movs	r3, #3
 800bba8:	73fb      	strb	r3, [r7, #15]
      break;
 800bbaa:	bf00      	nop
  }

  return ret;
 800bbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	2000067c 	.word	0x2000067c

0800bbbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	88db      	ldrh	r3, [r3, #6]
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d004      	beq.n	800bbd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f8e2 	bl	800bd9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bbd6:	e023      	b.n	800bc20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	dc02      	bgt.n	800bbea <USBD_GetConfig+0x2e>
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	dc03      	bgt.n	800bbf0 <USBD_GetConfig+0x34>
 800bbe8:	e015      	b.n	800bc16 <USBD_GetConfig+0x5a>
 800bbea:	2b03      	cmp	r3, #3
 800bbec:	d00b      	beq.n	800bc06 <USBD_GetConfig+0x4a>
 800bbee:	e012      	b.n	800bc16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	3308      	adds	r3, #8
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f93c 	bl	800be7c <USBD_CtlSendData>
        break;
 800bc04:	e00c      	b.n	800bc20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	3304      	adds	r3, #4
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f934 	bl	800be7c <USBD_CtlSendData>
        break;
 800bc14:	e004      	b.n	800bc20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 f8be 	bl	800bd9a <USBD_CtlError>
        break;
 800bc1e:	bf00      	nop
}
 800bc20:	bf00      	nop
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d81e      	bhi.n	800bc7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	88db      	ldrh	r3, [r3, #6]
 800bc44:	2b02      	cmp	r3, #2
 800bc46:	d004      	beq.n	800bc52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f8a5 	bl	800bd9a <USBD_CtlError>
        break;
 800bc50:	e01a      	b.n	800bc88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2201      	movs	r2, #1
 800bc56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d005      	beq.n	800bc6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	f043 0202 	orr.w	r2, r3, #2
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	330c      	adds	r3, #12
 800bc72:	2202      	movs	r2, #2
 800bc74:	4619      	mov	r1, r3
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f900 	bl	800be7c <USBD_CtlSendData>
      break;
 800bc7c:	e004      	b.n	800bc88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc7e:	6839      	ldr	r1, [r7, #0]
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 f88a 	bl	800bd9a <USBD_CtlError>
      break;
 800bc86:	bf00      	nop
  }
}
 800bc88:	bf00      	nop
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	885b      	ldrh	r3, [r3, #2]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d107      	bne.n	800bcb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f940 	bl	800bf30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bcb0:	e013      	b.n	800bcda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	885b      	ldrh	r3, [r3, #2]
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d10b      	bne.n	800bcd2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	889b      	ldrh	r3, [r3, #4]
 800bcbe:	0a1b      	lsrs	r3, r3, #8
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 f930 	bl	800bf30 <USBD_CtlSendStatus>
}
 800bcd0:	e003      	b.n	800bcda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bcd2:	6839      	ldr	r1, [r7, #0]
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 f860 	bl	800bd9a <USBD_CtlError>
}
 800bcda:	bf00      	nop
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b082      	sub	sp, #8
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	d80b      	bhi.n	800bd12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	885b      	ldrh	r3, [r3, #2]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d10c      	bne.n	800bd1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 f910 	bl	800bf30 <USBD_CtlSendStatus>
      }
      break;
 800bd10:	e004      	b.n	800bd1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bd12:	6839      	ldr	r1, [r7, #0]
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 f840 	bl	800bd9a <USBD_CtlError>
      break;
 800bd1a:	e000      	b.n	800bd1e <USBD_ClrFeature+0x3c>
      break;
 800bd1c:	bf00      	nop
  }
}
 800bd1e:	bf00      	nop
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b084      	sub	sp, #16
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
 800bd2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	781a      	ldrb	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	781a      	ldrb	r2, [r3, #0]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f7ff fa41 	bl	800b1d8 <SWAPBYTE>
 800bd56:	4603      	mov	r3, r0
 800bd58:	461a      	mov	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	3301      	adds	r3, #1
 800bd62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	3301      	adds	r3, #1
 800bd68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f7ff fa34 	bl	800b1d8 <SWAPBYTE>
 800bd70:	4603      	mov	r3, r0
 800bd72:	461a      	mov	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3301      	adds	r3, #1
 800bd82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f7ff fa27 	bl	800b1d8 <SWAPBYTE>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	80da      	strh	r2, [r3, #6]
}
 800bd92:	bf00      	nop
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b082      	sub	sp, #8
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bda4:	2180      	movs	r1, #128	; 0x80
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 fcee 	bl	800c788 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bdac:	2100      	movs	r1, #0
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fcea 	bl	800c788 <USBD_LL_StallEP>
}
 800bdb4:	bf00      	nop
 800bdb6:	3708      	adds	r7, #8
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d036      	beq.n	800be40 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bdd6:	6938      	ldr	r0, [r7, #16]
 800bdd8:	f000 f836 	bl	800be48 <USBD_GetLen>
 800bddc:	4603      	mov	r3, r0
 800bdde:	3301      	adds	r3, #1
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bdea:	7dfb      	ldrb	r3, [r7, #23]
 800bdec:	68ba      	ldr	r2, [r7, #8]
 800bdee:	4413      	add	r3, r2
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	7812      	ldrb	r2, [r2, #0]
 800bdf4:	701a      	strb	r2, [r3, #0]
  idx++;
 800bdf6:	7dfb      	ldrb	r3, [r7, #23]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bdfc:	7dfb      	ldrb	r3, [r7, #23]
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	4413      	add	r3, r2
 800be02:	2203      	movs	r2, #3
 800be04:	701a      	strb	r2, [r3, #0]
  idx++;
 800be06:	7dfb      	ldrb	r3, [r7, #23]
 800be08:	3301      	adds	r3, #1
 800be0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800be0c:	e013      	b.n	800be36 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800be0e:	7dfb      	ldrb	r3, [r7, #23]
 800be10:	68ba      	ldr	r2, [r7, #8]
 800be12:	4413      	add	r3, r2
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	7812      	ldrb	r2, [r2, #0]
 800be18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	3301      	adds	r3, #1
 800be1e:	613b      	str	r3, [r7, #16]
    idx++;
 800be20:	7dfb      	ldrb	r3, [r7, #23]
 800be22:	3301      	adds	r3, #1
 800be24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	4413      	add	r3, r2
 800be2c:	2200      	movs	r2, #0
 800be2e:	701a      	strb	r2, [r3, #0]
    idx++;
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	3301      	adds	r3, #1
 800be34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1e7      	bne.n	800be0e <USBD_GetString+0x52>
 800be3e:	e000      	b.n	800be42 <USBD_GetString+0x86>
    return;
 800be40:	bf00      	nop
  }
}
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be50:	2300      	movs	r3, #0
 800be52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800be58:	e005      	b.n	800be66 <USBD_GetLen+0x1e>
  {
    len++;
 800be5a:	7bfb      	ldrb	r3, [r7, #15]
 800be5c:	3301      	adds	r3, #1
 800be5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	3301      	adds	r3, #1
 800be64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d1f5      	bne.n	800be5a <USBD_GetLen+0x12>
  }

  return len;
 800be6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2202      	movs	r2, #2
 800be8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	2100      	movs	r1, #0
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f000 fcf9 	bl	800c89a <USBD_LL_Transmit>

  return USBD_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b084      	sub	sp, #16
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	60f8      	str	r0, [r7, #12]
 800beba:	60b9      	str	r1, [r7, #8]
 800bebc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	2100      	movs	r1, #0
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 fce8 	bl	800c89a <USBD_LL_Transmit>

  return USBD_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2203      	movs	r2, #3
 800bee4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	2100      	movs	r1, #0
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f000 fcec 	bl	800c8dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b084      	sub	sp, #16
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	60f8      	str	r0, [r7, #12]
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	2100      	movs	r1, #0
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f000 fcdb 	bl	800c8dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2204      	movs	r2, #4
 800bf3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf40:	2300      	movs	r3, #0
 800bf42:	2200      	movs	r2, #0
 800bf44:	2100      	movs	r1, #0
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fca7 	bl	800c89a <USBD_LL_Transmit>

  return USBD_OK;
 800bf4c:	2300      	movs	r3, #0
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b082      	sub	sp, #8
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2205      	movs	r2, #5
 800bf62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf66:	2300      	movs	r3, #0
 800bf68:	2200      	movs	r2, #0
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fcb5 	bl	800c8dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bf80:	2200      	movs	r2, #0
 800bf82:	4912      	ldr	r1, [pc, #72]	; (800bfcc <MX_USB_DEVICE_Init+0x50>)
 800bf84:	4812      	ldr	r0, [pc, #72]	; (800bfd0 <MX_USB_DEVICE_Init+0x54>)
 800bf86:	f7fe fd07 	bl	800a998 <USBD_Init>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d001      	beq.n	800bf94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bf90:	f7f6 fea6 	bl	8002ce0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bf94:	490f      	ldr	r1, [pc, #60]	; (800bfd4 <MX_USB_DEVICE_Init+0x58>)
 800bf96:	480e      	ldr	r0, [pc, #56]	; (800bfd0 <MX_USB_DEVICE_Init+0x54>)
 800bf98:	f7fe fd2e 	bl	800a9f8 <USBD_RegisterClass>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d001      	beq.n	800bfa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bfa2:	f7f6 fe9d 	bl	8002ce0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bfa6:	490c      	ldr	r1, [pc, #48]	; (800bfd8 <MX_USB_DEVICE_Init+0x5c>)
 800bfa8:	4809      	ldr	r0, [pc, #36]	; (800bfd0 <MX_USB_DEVICE_Init+0x54>)
 800bfaa:	f7fe fc1f 	bl	800a7ec <USBD_CDC_RegisterInterface>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d001      	beq.n	800bfb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bfb4:	f7f6 fe94 	bl	8002ce0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bfb8:	4805      	ldr	r0, [pc, #20]	; (800bfd0 <MX_USB_DEVICE_Init+0x54>)
 800bfba:	f7fe fd53 	bl	800aa64 <USBD_Start>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d001      	beq.n	800bfc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bfc4:	f7f6 fe8c 	bl	8002ce0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bfc8:	bf00      	nop
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	200000d0 	.word	0x200000d0
 800bfd0:	20000680 	.word	0x20000680
 800bfd4:	2000003c 	.word	0x2000003c
 800bfd8:	200000bc 	.word	0x200000bc

0800bfdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4905      	ldr	r1, [pc, #20]	; (800bff8 <CDC_Init_FS+0x1c>)
 800bfe4:	4805      	ldr	r0, [pc, #20]	; (800bffc <CDC_Init_FS+0x20>)
 800bfe6:	f7fe fc1b 	bl	800a820 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bfea:	4905      	ldr	r1, [pc, #20]	; (800c000 <CDC_Init_FS+0x24>)
 800bfec:	4803      	ldr	r0, [pc, #12]	; (800bffc <CDC_Init_FS+0x20>)
 800bfee:	f7fe fc39 	bl	800a864 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bff2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	2000115c 	.word	0x2000115c
 800bffc:	20000680 	.word	0x20000680
 800c000:	2000095c 	.word	0x2000095c

0800c004 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c004:	b480      	push	{r7}
 800c006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c008:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	4603      	mov	r3, r0
 800c01c:	6039      	str	r1, [r7, #0]
 800c01e:	71fb      	strb	r3, [r7, #7]
 800c020:	4613      	mov	r3, r2
 800c022:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c024:	79fb      	ldrb	r3, [r7, #7]
 800c026:	2b23      	cmp	r3, #35	; 0x23
 800c028:	d84a      	bhi.n	800c0c0 <CDC_Control_FS+0xac>
 800c02a:	a201      	add	r2, pc, #4	; (adr r2, 800c030 <CDC_Control_FS+0x1c>)
 800c02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c030:	0800c0c1 	.word	0x0800c0c1
 800c034:	0800c0c1 	.word	0x0800c0c1
 800c038:	0800c0c1 	.word	0x0800c0c1
 800c03c:	0800c0c1 	.word	0x0800c0c1
 800c040:	0800c0c1 	.word	0x0800c0c1
 800c044:	0800c0c1 	.word	0x0800c0c1
 800c048:	0800c0c1 	.word	0x0800c0c1
 800c04c:	0800c0c1 	.word	0x0800c0c1
 800c050:	0800c0c1 	.word	0x0800c0c1
 800c054:	0800c0c1 	.word	0x0800c0c1
 800c058:	0800c0c1 	.word	0x0800c0c1
 800c05c:	0800c0c1 	.word	0x0800c0c1
 800c060:	0800c0c1 	.word	0x0800c0c1
 800c064:	0800c0c1 	.word	0x0800c0c1
 800c068:	0800c0c1 	.word	0x0800c0c1
 800c06c:	0800c0c1 	.word	0x0800c0c1
 800c070:	0800c0c1 	.word	0x0800c0c1
 800c074:	0800c0c1 	.word	0x0800c0c1
 800c078:	0800c0c1 	.word	0x0800c0c1
 800c07c:	0800c0c1 	.word	0x0800c0c1
 800c080:	0800c0c1 	.word	0x0800c0c1
 800c084:	0800c0c1 	.word	0x0800c0c1
 800c088:	0800c0c1 	.word	0x0800c0c1
 800c08c:	0800c0c1 	.word	0x0800c0c1
 800c090:	0800c0c1 	.word	0x0800c0c1
 800c094:	0800c0c1 	.word	0x0800c0c1
 800c098:	0800c0c1 	.word	0x0800c0c1
 800c09c:	0800c0c1 	.word	0x0800c0c1
 800c0a0:	0800c0c1 	.word	0x0800c0c1
 800c0a4:	0800c0c1 	.word	0x0800c0c1
 800c0a8:	0800c0c1 	.word	0x0800c0c1
 800c0ac:	0800c0c1 	.word	0x0800c0c1
 800c0b0:	0800c0c1 	.word	0x0800c0c1
 800c0b4:	0800c0c1 	.word	0x0800c0c1
 800c0b8:	0800c0c1 	.word	0x0800c0c1
 800c0bc:	0800c0c1 	.word	0x0800c0c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c0c0:	bf00      	nop
  }

  return (USBD_OK);
 800c0c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	370c      	adds	r7, #12
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c0da:	6879      	ldr	r1, [r7, #4]
 800c0dc:	4805      	ldr	r0, [pc, #20]	; (800c0f4 <CDC_Receive_FS+0x24>)
 800c0de:	f7fe fbc1 	bl	800a864 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c0e2:	4804      	ldr	r0, [pc, #16]	; (800c0f4 <CDC_Receive_FS+0x24>)
 800c0e4:	f7fe fc22 	bl	800a92c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c0e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	20000680 	.word	0x20000680

0800c0f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	460b      	mov	r3, r1
 800c102:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c104:	2300      	movs	r3, #0
 800c106:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c108:	4b0d      	ldr	r3, [pc, #52]	; (800c140 <CDC_Transmit_FS+0x48>)
 800c10a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c10e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c116:	2b00      	cmp	r3, #0
 800c118:	d001      	beq.n	800c11e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c11a:	2301      	movs	r3, #1
 800c11c:	e00b      	b.n	800c136 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c11e:	887b      	ldrh	r3, [r7, #2]
 800c120:	461a      	mov	r2, r3
 800c122:	6879      	ldr	r1, [r7, #4]
 800c124:	4806      	ldr	r0, [pc, #24]	; (800c140 <CDC_Transmit_FS+0x48>)
 800c126:	f7fe fb7b 	bl	800a820 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c12a:	4805      	ldr	r0, [pc, #20]	; (800c140 <CDC_Transmit_FS+0x48>)
 800c12c:	f7fe fbb8 	bl	800a8a0 <USBD_CDC_TransmitPacket>
 800c130:	4603      	mov	r3, r0
 800c132:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c134:	7bfb      	ldrb	r3, [r7, #15]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	20000680 	.word	0x20000680

0800c144 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c144:	b480      	push	{r7}
 800c146:	b087      	sub	sp, #28
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	4613      	mov	r3, r2
 800c150:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c152:	2300      	movs	r3, #0
 800c154:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	371c      	adds	r7, #28
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
	...

0800c168 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	4603      	mov	r3, r0
 800c170:	6039      	str	r1, [r7, #0]
 800c172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	2212      	movs	r2, #18
 800c178:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c17a:	4b03      	ldr	r3, [pc, #12]	; (800c188 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	200000ec 	.word	0x200000ec

0800c18c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	4603      	mov	r3, r0
 800c194:	6039      	str	r1, [r7, #0]
 800c196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2204      	movs	r2, #4
 800c19c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c19e:	4b03      	ldr	r3, [pc, #12]	; (800c1ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	20000100 	.word	0x20000100

0800c1b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	6039      	str	r1, [r7, #0]
 800c1ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1bc:	79fb      	ldrb	r3, [r7, #7]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d105      	bne.n	800c1ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	4907      	ldr	r1, [pc, #28]	; (800c1e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1c6:	4808      	ldr	r0, [pc, #32]	; (800c1e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c1c8:	f7ff fdf8 	bl	800bdbc <USBD_GetString>
 800c1cc:	e004      	b.n	800c1d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	4904      	ldr	r1, [pc, #16]	; (800c1e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1d2:	4805      	ldr	r0, [pc, #20]	; (800c1e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c1d4:	f7ff fdf2 	bl	800bdbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1d8:	4b02      	ldr	r3, [pc, #8]	; (800c1e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	2000195c 	.word	0x2000195c
 800c1e8:	0800cbf4 	.word	0x0800cbf4

0800c1ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	6039      	str	r1, [r7, #0]
 800c1f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c1f8:	683a      	ldr	r2, [r7, #0]
 800c1fa:	4904      	ldr	r1, [pc, #16]	; (800c20c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c1fc:	4804      	ldr	r0, [pc, #16]	; (800c210 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c1fe:	f7ff fddd 	bl	800bdbc <USBD_GetString>
  return USBD_StrDesc;
 800c202:	4b02      	ldr	r3, [pc, #8]	; (800c20c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c204:	4618      	mov	r0, r3
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	2000195c 	.word	0x2000195c
 800c210:	0800cc0c 	.word	0x0800cc0c

0800c214 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	4603      	mov	r3, r0
 800c21c:	6039      	str	r1, [r7, #0]
 800c21e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	221a      	movs	r2, #26
 800c224:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c226:	f000 f843 	bl	800c2b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c22a:	4b02      	ldr	r3, [pc, #8]	; (800c234 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	20000104 	.word	0x20000104

0800c238 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	4603      	mov	r3, r0
 800c240:	6039      	str	r1, [r7, #0]
 800c242:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c244:	79fb      	ldrb	r3, [r7, #7]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d105      	bne.n	800c256 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	4907      	ldr	r1, [pc, #28]	; (800c26c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c24e:	4808      	ldr	r0, [pc, #32]	; (800c270 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c250:	f7ff fdb4 	bl	800bdbc <USBD_GetString>
 800c254:	e004      	b.n	800c260 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	4904      	ldr	r1, [pc, #16]	; (800c26c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c25a:	4805      	ldr	r0, [pc, #20]	; (800c270 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c25c:	f7ff fdae 	bl	800bdbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c260:	4b02      	ldr	r3, [pc, #8]	; (800c26c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c262:	4618      	mov	r0, r3
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	2000195c 	.word	0x2000195c
 800c270:	0800cc20 	.word	0x0800cc20

0800c274 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	4603      	mov	r3, r0
 800c27c:	6039      	str	r1, [r7, #0]
 800c27e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c280:	79fb      	ldrb	r3, [r7, #7]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d105      	bne.n	800c292 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c286:	683a      	ldr	r2, [r7, #0]
 800c288:	4907      	ldr	r1, [pc, #28]	; (800c2a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c28a:	4808      	ldr	r0, [pc, #32]	; (800c2ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c28c:	f7ff fd96 	bl	800bdbc <USBD_GetString>
 800c290:	e004      	b.n	800c29c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	4904      	ldr	r1, [pc, #16]	; (800c2a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c296:	4805      	ldr	r0, [pc, #20]	; (800c2ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c298:	f7ff fd90 	bl	800bdbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c29c:	4b02      	ldr	r3, [pc, #8]	; (800c2a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3708      	adds	r7, #8
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	2000195c 	.word	0x2000195c
 800c2ac:	0800cc2c 	.word	0x0800cc2c

0800c2b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c2b6:	4b0f      	ldr	r3, [pc, #60]	; (800c2f4 <Get_SerialNum+0x44>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c2bc:	4b0e      	ldr	r3, [pc, #56]	; (800c2f8 <Get_SerialNum+0x48>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c2c2:	4b0e      	ldr	r3, [pc, #56]	; (800c2fc <Get_SerialNum+0x4c>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d009      	beq.n	800c2ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c2d6:	2208      	movs	r2, #8
 800c2d8:	4909      	ldr	r1, [pc, #36]	; (800c300 <Get_SerialNum+0x50>)
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f000 f814 	bl	800c308 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c2e0:	2204      	movs	r2, #4
 800c2e2:	4908      	ldr	r1, [pc, #32]	; (800c304 <Get_SerialNum+0x54>)
 800c2e4:	68b8      	ldr	r0, [r7, #8]
 800c2e6:	f000 f80f 	bl	800c308 <IntToUnicode>
  }
}
 800c2ea:	bf00      	nop
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	1fff7a10 	.word	0x1fff7a10
 800c2f8:	1fff7a14 	.word	0x1fff7a14
 800c2fc:	1fff7a18 	.word	0x1fff7a18
 800c300:	20000106 	.word	0x20000106
 800c304:	20000116 	.word	0x20000116

0800c308 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c308:	b480      	push	{r7}
 800c30a:	b087      	sub	sp, #28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	4613      	mov	r3, r2
 800c314:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c316:	2300      	movs	r3, #0
 800c318:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c31a:	2300      	movs	r3, #0
 800c31c:	75fb      	strb	r3, [r7, #23]
 800c31e:	e027      	b.n	800c370 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	0f1b      	lsrs	r3, r3, #28
 800c324:	2b09      	cmp	r3, #9
 800c326:	d80b      	bhi.n	800c340 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	0f1b      	lsrs	r3, r3, #28
 800c32c:	b2da      	uxtb	r2, r3
 800c32e:	7dfb      	ldrb	r3, [r7, #23]
 800c330:	005b      	lsls	r3, r3, #1
 800c332:	4619      	mov	r1, r3
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	440b      	add	r3, r1
 800c338:	3230      	adds	r2, #48	; 0x30
 800c33a:	b2d2      	uxtb	r2, r2
 800c33c:	701a      	strb	r2, [r3, #0]
 800c33e:	e00a      	b.n	800c356 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	0f1b      	lsrs	r3, r3, #28
 800c344:	b2da      	uxtb	r2, r3
 800c346:	7dfb      	ldrb	r3, [r7, #23]
 800c348:	005b      	lsls	r3, r3, #1
 800c34a:	4619      	mov	r1, r3
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	440b      	add	r3, r1
 800c350:	3237      	adds	r2, #55	; 0x37
 800c352:	b2d2      	uxtb	r2, r2
 800c354:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	011b      	lsls	r3, r3, #4
 800c35a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c35c:	7dfb      	ldrb	r3, [r7, #23]
 800c35e:	005b      	lsls	r3, r3, #1
 800c360:	3301      	adds	r3, #1
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	4413      	add	r3, r2
 800c366:	2200      	movs	r2, #0
 800c368:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c36a:	7dfb      	ldrb	r3, [r7, #23]
 800c36c:	3301      	adds	r3, #1
 800c36e:	75fb      	strb	r3, [r7, #23]
 800c370:	7dfa      	ldrb	r2, [r7, #23]
 800c372:	79fb      	ldrb	r3, [r7, #7]
 800c374:	429a      	cmp	r2, r3
 800c376:	d3d3      	bcc.n	800c320 <IntToUnicode+0x18>
  }
}
 800c378:	bf00      	nop
 800c37a:	bf00      	nop
 800c37c:	371c      	adds	r7, #28
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
	...

0800c388 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08a      	sub	sp, #40	; 0x28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c390:	f107 0314 	add.w	r3, r7, #20
 800c394:	2200      	movs	r2, #0
 800c396:	601a      	str	r2, [r3, #0]
 800c398:	605a      	str	r2, [r3, #4]
 800c39a:	609a      	str	r2, [r3, #8]
 800c39c:	60da      	str	r2, [r3, #12]
 800c39e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3a8:	d147      	bne.n	800c43a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	613b      	str	r3, [r7, #16]
 800c3ae:	4b25      	ldr	r3, [pc, #148]	; (800c444 <HAL_PCD_MspInit+0xbc>)
 800c3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b2:	4a24      	ldr	r2, [pc, #144]	; (800c444 <HAL_PCD_MspInit+0xbc>)
 800c3b4:	f043 0301 	orr.w	r3, r3, #1
 800c3b8:	6313      	str	r3, [r2, #48]	; 0x30
 800c3ba:	4b22      	ldr	r3, [pc, #136]	; (800c444 <HAL_PCD_MspInit+0xbc>)
 800c3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3be:	f003 0301 	and.w	r3, r3, #1
 800c3c2:	613b      	str	r3, [r7, #16]
 800c3c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c3c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c3d4:	f107 0314 	add.w	r3, r7, #20
 800c3d8:	4619      	mov	r1, r3
 800c3da:	481b      	ldr	r0, [pc, #108]	; (800c448 <HAL_PCD_MspInit+0xc0>)
 800c3dc:	f7f7 fcf4 	bl	8003dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c3e0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c3e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3e6:	2302      	movs	r3, #2
 800c3e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c3f2:	230a      	movs	r3, #10
 800c3f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3f6:	f107 0314 	add.w	r3, r7, #20
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	4812      	ldr	r0, [pc, #72]	; (800c448 <HAL_PCD_MspInit+0xc0>)
 800c3fe:	f7f7 fce3 	bl	8003dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c402:	4b10      	ldr	r3, [pc, #64]	; (800c444 <HAL_PCD_MspInit+0xbc>)
 800c404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c406:	4a0f      	ldr	r2, [pc, #60]	; (800c444 <HAL_PCD_MspInit+0xbc>)
 800c408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c40c:	6353      	str	r3, [r2, #52]	; 0x34
 800c40e:	2300      	movs	r3, #0
 800c410:	60fb      	str	r3, [r7, #12]
 800c412:	4b0c      	ldr	r3, [pc, #48]	; (800c444 <HAL_PCD_MspInit+0xbc>)
 800c414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c416:	4a0b      	ldr	r2, [pc, #44]	; (800c444 <HAL_PCD_MspInit+0xbc>)
 800c418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c41c:	6453      	str	r3, [r2, #68]	; 0x44
 800c41e:	4b09      	ldr	r3, [pc, #36]	; (800c444 <HAL_PCD_MspInit+0xbc>)
 800c420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c426:	60fb      	str	r3, [r7, #12]
 800c428:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c42a:	2200      	movs	r2, #0
 800c42c:	2100      	movs	r1, #0
 800c42e:	2043      	movs	r0, #67	; 0x43
 800c430:	f7f7 f917 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c434:	2043      	movs	r0, #67	; 0x43
 800c436:	f7f7 f930 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c43a:	bf00      	nop
 800c43c:	3728      	adds	r7, #40	; 0x28
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	40023800 	.word	0x40023800
 800c448:	40020000 	.word	0x40020000

0800c44c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c460:	4619      	mov	r1, r3
 800c462:	4610      	mov	r0, r2
 800c464:	f7fe fb4b 	bl	800aafe <USBD_LL_SetupStage>
}
 800c468:	bf00      	nop
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	460b      	mov	r3, r1
 800c47a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c482:	78fa      	ldrb	r2, [r7, #3]
 800c484:	6879      	ldr	r1, [r7, #4]
 800c486:	4613      	mov	r3, r2
 800c488:	00db      	lsls	r3, r3, #3
 800c48a:	4413      	add	r3, r2
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	440b      	add	r3, r1
 800c490:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	78fb      	ldrb	r3, [r7, #3]
 800c498:	4619      	mov	r1, r3
 800c49a:	f7fe fb85 	bl	800aba8 <USBD_LL_DataOutStage>
}
 800c49e:	bf00      	nop
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b082      	sub	sp, #8
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c4b8:	78fa      	ldrb	r2, [r7, #3]
 800c4ba:	6879      	ldr	r1, [r7, #4]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	00db      	lsls	r3, r3, #3
 800c4c0:	4413      	add	r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	440b      	add	r3, r1
 800c4c6:	334c      	adds	r3, #76	; 0x4c
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	78fb      	ldrb	r3, [r7, #3]
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	f7fe fc1e 	bl	800ad0e <USBD_LL_DataInStage>
}
 800c4d2:	bf00      	nop
 800c4d4:	3708      	adds	r7, #8
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4da:	b580      	push	{r7, lr}
 800c4dc:	b082      	sub	sp, #8
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fe fd52 	bl	800af92 <USBD_LL_SOF>
}
 800c4ee:	bf00      	nop
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b084      	sub	sp, #16
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c4fe:	2301      	movs	r3, #1
 800c500:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d102      	bne.n	800c510 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c50a:	2300      	movs	r3, #0
 800c50c:	73fb      	strb	r3, [r7, #15]
 800c50e:	e008      	b.n	800c522 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	2b02      	cmp	r3, #2
 800c516:	d102      	bne.n	800c51e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c518:	2301      	movs	r3, #1
 800c51a:	73fb      	strb	r3, [r7, #15]
 800c51c:	e001      	b.n	800c522 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c51e:	f7f6 fbdf 	bl	8002ce0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c528:	7bfa      	ldrb	r2, [r7, #15]
 800c52a:	4611      	mov	r1, r2
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fe fcf2 	bl	800af16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c538:	4618      	mov	r0, r3
 800c53a:	f7fe fc9a 	bl	800ae72 <USBD_LL_Reset>
}
 800c53e:	bf00      	nop
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
	...

0800c548 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c556:	4618      	mov	r0, r3
 800c558:	f7fe fced 	bl	800af36 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	6812      	ldr	r2, [r2, #0]
 800c56a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c56e:	f043 0301 	orr.w	r3, r3, #1
 800c572:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6a1b      	ldr	r3, [r3, #32]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d005      	beq.n	800c588 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c57c:	4b04      	ldr	r3, [pc, #16]	; (800c590 <HAL_PCD_SuspendCallback+0x48>)
 800c57e:	691b      	ldr	r3, [r3, #16]
 800c580:	4a03      	ldr	r2, [pc, #12]	; (800c590 <HAL_PCD_SuspendCallback+0x48>)
 800c582:	f043 0306 	orr.w	r3, r3, #6
 800c586:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	e000ed00 	.word	0xe000ed00

0800c594 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fe fcdd 	bl	800af62 <USBD_LL_Resume>
}
 800c5a8:	bf00      	nop
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5c2:	78fa      	ldrb	r2, [r7, #3]
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fe fd35 	bl	800b036 <USBD_LL_IsoOUTIncomplete>
}
 800c5cc:	bf00      	nop
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5e6:	78fa      	ldrb	r2, [r7, #3]
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe fcf1 	bl	800afd2 <USBD_LL_IsoINIncomplete>
}
 800c5f0:	bf00      	nop
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c606:	4618      	mov	r0, r3
 800c608:	f7fe fd47 	bl	800b09a <USBD_LL_DevConnected>
}
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c622:	4618      	mov	r0, r3
 800c624:	f7fe fd44 	bl	800b0b0 <USBD_LL_DevDisconnected>
}
 800c628:	bf00      	nop
 800c62a:	3708      	adds	r7, #8
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d13c      	bne.n	800c6ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c640:	4a20      	ldr	r2, [pc, #128]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4a1e      	ldr	r2, [pc, #120]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c64c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c650:	4b1c      	ldr	r3, [pc, #112]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c652:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c656:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c658:	4b1a      	ldr	r3, [pc, #104]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c65a:	2204      	movs	r2, #4
 800c65c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c65e:	4b19      	ldr	r3, [pc, #100]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c660:	2202      	movs	r2, #2
 800c662:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c664:	4b17      	ldr	r3, [pc, #92]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c666:	2200      	movs	r2, #0
 800c668:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c66a:	4b16      	ldr	r3, [pc, #88]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c66c:	2202      	movs	r2, #2
 800c66e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c670:	4b14      	ldr	r3, [pc, #80]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c672:	2200      	movs	r2, #0
 800c674:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c676:	4b13      	ldr	r3, [pc, #76]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c678:	2200      	movs	r2, #0
 800c67a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c67c:	4b11      	ldr	r3, [pc, #68]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c67e:	2200      	movs	r2, #0
 800c680:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c682:	4b10      	ldr	r3, [pc, #64]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c684:	2201      	movs	r2, #1
 800c686:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c688:	4b0e      	ldr	r3, [pc, #56]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c68a:	2200      	movs	r2, #0
 800c68c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c68e:	480d      	ldr	r0, [pc, #52]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c690:	f7f8 fb7e 	bl	8004d90 <HAL_PCD_Init>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d001      	beq.n	800c69e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c69a:	f7f6 fb21 	bl	8002ce0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c69e:	2180      	movs	r1, #128	; 0x80
 800c6a0:	4808      	ldr	r0, [pc, #32]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c6a2:	f7f9 fdd6 	bl	8006252 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c6a6:	2240      	movs	r2, #64	; 0x40
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	4806      	ldr	r0, [pc, #24]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c6ac:	f7f9 fd8a 	bl	80061c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c6b0:	2280      	movs	r2, #128	; 0x80
 800c6b2:	2101      	movs	r1, #1
 800c6b4:	4803      	ldr	r0, [pc, #12]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c6b6:	f7f9 fd85 	bl	80061c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	20001b5c 	.word	0x20001b5c

0800c6c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7f8 fc73 	bl	8004fca <HAL_PCD_Start>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 f942 	bl	800c974 <USBD_Get_USB_Status>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b084      	sub	sp, #16
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	4608      	mov	r0, r1
 800c708:	4611      	mov	r1, r2
 800c70a:	461a      	mov	r2, r3
 800c70c:	4603      	mov	r3, r0
 800c70e:	70fb      	strb	r3, [r7, #3]
 800c710:	460b      	mov	r3, r1
 800c712:	70bb      	strb	r3, [r7, #2]
 800c714:	4613      	mov	r3, r2
 800c716:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c718:	2300      	movs	r3, #0
 800c71a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c71c:	2300      	movs	r3, #0
 800c71e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c726:	78bb      	ldrb	r3, [r7, #2]
 800c728:	883a      	ldrh	r2, [r7, #0]
 800c72a:	78f9      	ldrb	r1, [r7, #3]
 800c72c:	f7f9 f944 	bl	80059b8 <HAL_PCD_EP_Open>
 800c730:	4603      	mov	r3, r0
 800c732:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c734:	7bfb      	ldrb	r3, [r7, #15]
 800c736:	4618      	mov	r0, r3
 800c738:	f000 f91c 	bl	800c974 <USBD_Get_USB_Status>
 800c73c:	4603      	mov	r3, r0
 800c73e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c740:	7bbb      	ldrb	r3, [r7, #14]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b084      	sub	sp, #16
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
 800c752:	460b      	mov	r3, r1
 800c754:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c756:	2300      	movs	r3, #0
 800c758:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c75a:	2300      	movs	r3, #0
 800c75c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c764:	78fa      	ldrb	r2, [r7, #3]
 800c766:	4611      	mov	r1, r2
 800c768:	4618      	mov	r0, r3
 800c76a:	f7f9 f98d 	bl	8005a88 <HAL_PCD_EP_Close>
 800c76e:	4603      	mov	r3, r0
 800c770:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c772:	7bfb      	ldrb	r3, [r7, #15]
 800c774:	4618      	mov	r0, r3
 800c776:	f000 f8fd 	bl	800c974 <USBD_Get_USB_Status>
 800c77a:	4603      	mov	r3, r0
 800c77c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c77e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	460b      	mov	r3, r1
 800c792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c798:	2300      	movs	r3, #0
 800c79a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7a2:	78fa      	ldrb	r2, [r7, #3]
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7f9 fa65 	bl	8005c76 <HAL_PCD_EP_SetStall>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 f8de 	bl	800c974 <USBD_Get_USB_Status>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b084      	sub	sp, #16
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7e0:	78fa      	ldrb	r2, [r7, #3]
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7f9 faaa 	bl	8005d3e <HAL_PCD_EP_ClrStall>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7ee:	7bfb      	ldrb	r3, [r7, #15]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f000 f8bf 	bl	800c974 <USBD_Get_USB_Status>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c816:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	da0b      	bge.n	800c838 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c820:	78fb      	ldrb	r3, [r7, #3]
 800c822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c826:	68f9      	ldr	r1, [r7, #12]
 800c828:	4613      	mov	r3, r2
 800c82a:	00db      	lsls	r3, r3, #3
 800c82c:	4413      	add	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	440b      	add	r3, r1
 800c832:	333e      	adds	r3, #62	; 0x3e
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	e00b      	b.n	800c850 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c838:	78fb      	ldrb	r3, [r7, #3]
 800c83a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c83e:	68f9      	ldr	r1, [r7, #12]
 800c840:	4613      	mov	r3, r2
 800c842:	00db      	lsls	r3, r3, #3
 800c844:	4413      	add	r3, r2
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	440b      	add	r3, r1
 800c84a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c84e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c850:	4618      	mov	r0, r3
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	460b      	mov	r3, r1
 800c866:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c868:	2300      	movs	r3, #0
 800c86a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c86c:	2300      	movs	r3, #0
 800c86e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c876:	78fa      	ldrb	r2, [r7, #3]
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7f9 f877 	bl	800596e <HAL_PCD_SetAddress>
 800c880:	4603      	mov	r3, r0
 800c882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c884:	7bfb      	ldrb	r3, [r7, #15]
 800c886:	4618      	mov	r0, r3
 800c888:	f000 f874 	bl	800c974 <USBD_Get_USB_Status>
 800c88c:	4603      	mov	r3, r0
 800c88e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c890:	7bbb      	ldrb	r3, [r7, #14]
}
 800c892:	4618      	mov	r0, r3
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b086      	sub	sp, #24
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	60f8      	str	r0, [r7, #12]
 800c8a2:	607a      	str	r2, [r7, #4]
 800c8a4:	603b      	str	r3, [r7, #0]
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c8b8:	7af9      	ldrb	r1, [r7, #11]
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	f7f9 f990 	bl	8005be2 <HAL_PCD_EP_Transmit>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 f853 	bl	800c974 <USBD_Get_USB_Status>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3718      	adds	r7, #24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	607a      	str	r2, [r7, #4]
 800c8e6:	603b      	str	r3, [r7, #0]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c8fa:	7af9      	ldrb	r1, [r7, #11]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	f7f9 f90c 	bl	8005b1c <HAL_PCD_EP_Receive>
 800c904:	4603      	mov	r3, r0
 800c906:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c908:	7dfb      	ldrb	r3, [r7, #23]
 800c90a:	4618      	mov	r0, r3
 800c90c:	f000 f832 	bl	800c974 <USBD_Get_USB_Status>
 800c910:	4603      	mov	r3, r0
 800c912:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c914:	7dbb      	ldrb	r3, [r7, #22]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3718      	adds	r7, #24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b082      	sub	sp, #8
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	460b      	mov	r3, r1
 800c928:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c930:	78fa      	ldrb	r2, [r7, #3]
 800c932:	4611      	mov	r1, r2
 800c934:	4618      	mov	r0, r3
 800c936:	f7f9 f93c 	bl	8005bb2 <HAL_PCD_EP_GetRxCount>
 800c93a:	4603      	mov	r3, r0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c944:	b480      	push	{r7}
 800c946:	b083      	sub	sp, #12
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c94c:	4b03      	ldr	r3, [pc, #12]	; (800c95c <USBD_static_malloc+0x18>)
}
 800c94e:	4618      	mov	r0, r3
 800c950:	370c      	adds	r7, #12
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	20002068 	.word	0x20002068

0800c960 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]

}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
 800c97a:	4603      	mov	r3, r0
 800c97c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c97e:	2300      	movs	r3, #0
 800c980:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c982:	79fb      	ldrb	r3, [r7, #7]
 800c984:	2b03      	cmp	r3, #3
 800c986:	d817      	bhi.n	800c9b8 <USBD_Get_USB_Status+0x44>
 800c988:	a201      	add	r2, pc, #4	; (adr r2, 800c990 <USBD_Get_USB_Status+0x1c>)
 800c98a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98e:	bf00      	nop
 800c990:	0800c9a1 	.word	0x0800c9a1
 800c994:	0800c9a7 	.word	0x0800c9a7
 800c998:	0800c9ad 	.word	0x0800c9ad
 800c99c:	0800c9b3 	.word	0x0800c9b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c9a4:	e00b      	b.n	800c9be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c9aa:	e008      	b.n	800c9be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c9b0:	e005      	b.n	800c9be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c9b2:	2303      	movs	r3, #3
 800c9b4:	73fb      	strb	r3, [r7, #15]
    break;
 800c9b6:	e002      	b.n	800c9be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c9b8:	2303      	movs	r3, #3
 800c9ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c9bc:	bf00      	nop
  }
  return usb_status;
 800c9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3714      	adds	r7, #20
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <_ZdlPvj>:
 800c9cc:	f000 b803 	b.w	800c9d6 <_ZdlPv>

0800c9d0 <__cxa_pure_virtual>:
 800c9d0:	b508      	push	{r3, lr}
 800c9d2:	f000 f80f 	bl	800c9f4 <_ZSt9terminatev>

0800c9d6 <_ZdlPv>:
 800c9d6:	f000 b843 	b.w	800ca60 <free>

0800c9da <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c9da:	b508      	push	{r3, lr}
 800c9dc:	4780      	blx	r0
 800c9de:	f000 f80e 	bl	800c9fe <abort>
	...

0800c9e4 <_ZSt13get_terminatev>:
 800c9e4:	4b02      	ldr	r3, [pc, #8]	; (800c9f0 <_ZSt13get_terminatev+0xc>)
 800c9e6:	6818      	ldr	r0, [r3, #0]
 800c9e8:	f3bf 8f5b 	dmb	ish
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	20000120 	.word	0x20000120

0800c9f4 <_ZSt9terminatev>:
 800c9f4:	b508      	push	{r3, lr}
 800c9f6:	f7ff fff5 	bl	800c9e4 <_ZSt13get_terminatev>
 800c9fa:	f7ff ffee 	bl	800c9da <_ZN10__cxxabiv111__terminateEPFvvE>

0800c9fe <abort>:
 800c9fe:	b508      	push	{r3, lr}
 800ca00:	2006      	movs	r0, #6
 800ca02:	f000 f8bf 	bl	800cb84 <raise>
 800ca06:	2001      	movs	r0, #1
 800ca08:	f7f6 fc74 	bl	80032f4 <_exit>

0800ca0c <__errno>:
 800ca0c:	4b01      	ldr	r3, [pc, #4]	; (800ca14 <__errno+0x8>)
 800ca0e:	6818      	ldr	r0, [r3, #0]
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	20000124 	.word	0x20000124

0800ca18 <__libc_init_array>:
 800ca18:	b570      	push	{r4, r5, r6, lr}
 800ca1a:	4d0d      	ldr	r5, [pc, #52]	; (800ca50 <__libc_init_array+0x38>)
 800ca1c:	4c0d      	ldr	r4, [pc, #52]	; (800ca54 <__libc_init_array+0x3c>)
 800ca1e:	1b64      	subs	r4, r4, r5
 800ca20:	10a4      	asrs	r4, r4, #2
 800ca22:	2600      	movs	r6, #0
 800ca24:	42a6      	cmp	r6, r4
 800ca26:	d109      	bne.n	800ca3c <__libc_init_array+0x24>
 800ca28:	4d0b      	ldr	r5, [pc, #44]	; (800ca58 <__libc_init_array+0x40>)
 800ca2a:	4c0c      	ldr	r4, [pc, #48]	; (800ca5c <__libc_init_array+0x44>)
 800ca2c:	f000 f8d4 	bl	800cbd8 <_init>
 800ca30:	1b64      	subs	r4, r4, r5
 800ca32:	10a4      	asrs	r4, r4, #2
 800ca34:	2600      	movs	r6, #0
 800ca36:	42a6      	cmp	r6, r4
 800ca38:	d105      	bne.n	800ca46 <__libc_init_array+0x2e>
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}
 800ca3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca40:	4798      	blx	r3
 800ca42:	3601      	adds	r6, #1
 800ca44:	e7ee      	b.n	800ca24 <__libc_init_array+0xc>
 800ca46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca4a:	4798      	blx	r3
 800ca4c:	3601      	adds	r6, #1
 800ca4e:	e7f2      	b.n	800ca36 <__libc_init_array+0x1e>
 800ca50:	0800cd30 	.word	0x0800cd30
 800ca54:	0800cd30 	.word	0x0800cd30
 800ca58:	0800cd30 	.word	0x0800cd30
 800ca5c:	0800cd3c 	.word	0x0800cd3c

0800ca60 <free>:
 800ca60:	4b02      	ldr	r3, [pc, #8]	; (800ca6c <free+0xc>)
 800ca62:	4601      	mov	r1, r0
 800ca64:	6818      	ldr	r0, [r3, #0]
 800ca66:	f000 b819 	b.w	800ca9c <_free_r>
 800ca6a:	bf00      	nop
 800ca6c:	20000124 	.word	0x20000124

0800ca70 <memcpy>:
 800ca70:	440a      	add	r2, r1
 800ca72:	4291      	cmp	r1, r2
 800ca74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca78:	d100      	bne.n	800ca7c <memcpy+0xc>
 800ca7a:	4770      	bx	lr
 800ca7c:	b510      	push	{r4, lr}
 800ca7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca86:	4291      	cmp	r1, r2
 800ca88:	d1f9      	bne.n	800ca7e <memcpy+0xe>
 800ca8a:	bd10      	pop	{r4, pc}

0800ca8c <memset>:
 800ca8c:	4402      	add	r2, r0
 800ca8e:	4603      	mov	r3, r0
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d100      	bne.n	800ca96 <memset+0xa>
 800ca94:	4770      	bx	lr
 800ca96:	f803 1b01 	strb.w	r1, [r3], #1
 800ca9a:	e7f9      	b.n	800ca90 <memset+0x4>

0800ca9c <_free_r>:
 800ca9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca9e:	2900      	cmp	r1, #0
 800caa0:	d044      	beq.n	800cb2c <_free_r+0x90>
 800caa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caa6:	9001      	str	r0, [sp, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f1a1 0404 	sub.w	r4, r1, #4
 800caae:	bfb8      	it	lt
 800cab0:	18e4      	addlt	r4, r4, r3
 800cab2:	f000 f883 	bl	800cbbc <__malloc_lock>
 800cab6:	4a1e      	ldr	r2, [pc, #120]	; (800cb30 <_free_r+0x94>)
 800cab8:	9801      	ldr	r0, [sp, #4]
 800caba:	6813      	ldr	r3, [r2, #0]
 800cabc:	b933      	cbnz	r3, 800cacc <_free_r+0x30>
 800cabe:	6063      	str	r3, [r4, #4]
 800cac0:	6014      	str	r4, [r2, #0]
 800cac2:	b003      	add	sp, #12
 800cac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cac8:	f000 b87e 	b.w	800cbc8 <__malloc_unlock>
 800cacc:	42a3      	cmp	r3, r4
 800cace:	d908      	bls.n	800cae2 <_free_r+0x46>
 800cad0:	6825      	ldr	r5, [r4, #0]
 800cad2:	1961      	adds	r1, r4, r5
 800cad4:	428b      	cmp	r3, r1
 800cad6:	bf01      	itttt	eq
 800cad8:	6819      	ldreq	r1, [r3, #0]
 800cada:	685b      	ldreq	r3, [r3, #4]
 800cadc:	1949      	addeq	r1, r1, r5
 800cade:	6021      	streq	r1, [r4, #0]
 800cae0:	e7ed      	b.n	800cabe <_free_r+0x22>
 800cae2:	461a      	mov	r2, r3
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	b10b      	cbz	r3, 800caec <_free_r+0x50>
 800cae8:	42a3      	cmp	r3, r4
 800caea:	d9fa      	bls.n	800cae2 <_free_r+0x46>
 800caec:	6811      	ldr	r1, [r2, #0]
 800caee:	1855      	adds	r5, r2, r1
 800caf0:	42a5      	cmp	r5, r4
 800caf2:	d10b      	bne.n	800cb0c <_free_r+0x70>
 800caf4:	6824      	ldr	r4, [r4, #0]
 800caf6:	4421      	add	r1, r4
 800caf8:	1854      	adds	r4, r2, r1
 800cafa:	42a3      	cmp	r3, r4
 800cafc:	6011      	str	r1, [r2, #0]
 800cafe:	d1e0      	bne.n	800cac2 <_free_r+0x26>
 800cb00:	681c      	ldr	r4, [r3, #0]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	6053      	str	r3, [r2, #4]
 800cb06:	4421      	add	r1, r4
 800cb08:	6011      	str	r1, [r2, #0]
 800cb0a:	e7da      	b.n	800cac2 <_free_r+0x26>
 800cb0c:	d902      	bls.n	800cb14 <_free_r+0x78>
 800cb0e:	230c      	movs	r3, #12
 800cb10:	6003      	str	r3, [r0, #0]
 800cb12:	e7d6      	b.n	800cac2 <_free_r+0x26>
 800cb14:	6825      	ldr	r5, [r4, #0]
 800cb16:	1961      	adds	r1, r4, r5
 800cb18:	428b      	cmp	r3, r1
 800cb1a:	bf04      	itt	eq
 800cb1c:	6819      	ldreq	r1, [r3, #0]
 800cb1e:	685b      	ldreq	r3, [r3, #4]
 800cb20:	6063      	str	r3, [r4, #4]
 800cb22:	bf04      	itt	eq
 800cb24:	1949      	addeq	r1, r1, r5
 800cb26:	6021      	streq	r1, [r4, #0]
 800cb28:	6054      	str	r4, [r2, #4]
 800cb2a:	e7ca      	b.n	800cac2 <_free_r+0x26>
 800cb2c:	b003      	add	sp, #12
 800cb2e:	bd30      	pop	{r4, r5, pc}
 800cb30:	20002288 	.word	0x20002288

0800cb34 <_raise_r>:
 800cb34:	291f      	cmp	r1, #31
 800cb36:	b538      	push	{r3, r4, r5, lr}
 800cb38:	4604      	mov	r4, r0
 800cb3a:	460d      	mov	r5, r1
 800cb3c:	d904      	bls.n	800cb48 <_raise_r+0x14>
 800cb3e:	2316      	movs	r3, #22
 800cb40:	6003      	str	r3, [r0, #0]
 800cb42:	f04f 30ff 	mov.w	r0, #4294967295
 800cb46:	bd38      	pop	{r3, r4, r5, pc}
 800cb48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb4a:	b112      	cbz	r2, 800cb52 <_raise_r+0x1e>
 800cb4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb50:	b94b      	cbnz	r3, 800cb66 <_raise_r+0x32>
 800cb52:	4620      	mov	r0, r4
 800cb54:	f000 f830 	bl	800cbb8 <_getpid_r>
 800cb58:	462a      	mov	r2, r5
 800cb5a:	4601      	mov	r1, r0
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb62:	f000 b817 	b.w	800cb94 <_kill_r>
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d00a      	beq.n	800cb80 <_raise_r+0x4c>
 800cb6a:	1c59      	adds	r1, r3, #1
 800cb6c:	d103      	bne.n	800cb76 <_raise_r+0x42>
 800cb6e:	2316      	movs	r3, #22
 800cb70:	6003      	str	r3, [r0, #0]
 800cb72:	2001      	movs	r0, #1
 800cb74:	e7e7      	b.n	800cb46 <_raise_r+0x12>
 800cb76:	2400      	movs	r4, #0
 800cb78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	4798      	blx	r3
 800cb80:	2000      	movs	r0, #0
 800cb82:	e7e0      	b.n	800cb46 <_raise_r+0x12>

0800cb84 <raise>:
 800cb84:	4b02      	ldr	r3, [pc, #8]	; (800cb90 <raise+0xc>)
 800cb86:	4601      	mov	r1, r0
 800cb88:	6818      	ldr	r0, [r3, #0]
 800cb8a:	f7ff bfd3 	b.w	800cb34 <_raise_r>
 800cb8e:	bf00      	nop
 800cb90:	20000124 	.word	0x20000124

0800cb94 <_kill_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	4d07      	ldr	r5, [pc, #28]	; (800cbb4 <_kill_r+0x20>)
 800cb98:	2300      	movs	r3, #0
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	4608      	mov	r0, r1
 800cb9e:	4611      	mov	r1, r2
 800cba0:	602b      	str	r3, [r5, #0]
 800cba2:	f7f6 fb97 	bl	80032d4 <_kill>
 800cba6:	1c43      	adds	r3, r0, #1
 800cba8:	d102      	bne.n	800cbb0 <_kill_r+0x1c>
 800cbaa:	682b      	ldr	r3, [r5, #0]
 800cbac:	b103      	cbz	r3, 800cbb0 <_kill_r+0x1c>
 800cbae:	6023      	str	r3, [r4, #0]
 800cbb0:	bd38      	pop	{r3, r4, r5, pc}
 800cbb2:	bf00      	nop
 800cbb4:	2000228c 	.word	0x2000228c

0800cbb8 <_getpid_r>:
 800cbb8:	f7f6 bb84 	b.w	80032c4 <_getpid>

0800cbbc <__malloc_lock>:
 800cbbc:	4801      	ldr	r0, [pc, #4]	; (800cbc4 <__malloc_lock+0x8>)
 800cbbe:	f000 b809 	b.w	800cbd4 <__retarget_lock_acquire_recursive>
 800cbc2:	bf00      	nop
 800cbc4:	20002290 	.word	0x20002290

0800cbc8 <__malloc_unlock>:
 800cbc8:	4801      	ldr	r0, [pc, #4]	; (800cbd0 <__malloc_unlock+0x8>)
 800cbca:	f000 b804 	b.w	800cbd6 <__retarget_lock_release_recursive>
 800cbce:	bf00      	nop
 800cbd0:	20002290 	.word	0x20002290

0800cbd4 <__retarget_lock_acquire_recursive>:
 800cbd4:	4770      	bx	lr

0800cbd6 <__retarget_lock_release_recursive>:
 800cbd6:	4770      	bx	lr

0800cbd8 <_init>:
 800cbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbda:	bf00      	nop
 800cbdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbde:	bc08      	pop	{r3}
 800cbe0:	469e      	mov	lr, r3
 800cbe2:	4770      	bx	lr

0800cbe4 <_fini>:
 800cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe6:	bf00      	nop
 800cbe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbea:	bc08      	pop	{r3}
 800cbec:	469e      	mov	lr, r3
 800cbee:	4770      	bx	lr
