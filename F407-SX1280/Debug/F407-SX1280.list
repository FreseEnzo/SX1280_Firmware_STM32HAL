
F407-SX1280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca74  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800cbfc  0800cbfc  0001cbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd34  0800cd34  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd34  0800cd34  0001cd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd3c  0800cd3c  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800cd3c  0800cd3c  0001cd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800cd48  0800cd48  0001cd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800cd50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          0000210c  20000188  20000188  00020188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002294  20002294  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e7f9  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057b7  00000000  00000000  0004e9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e88  00000000  00000000  00054168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001cb8  00000000  00000000  00055ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a8db  00000000  00000000  00057ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000270c6  00000000  00000000  00082583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddd66  00000000  00000000  000a9649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001873af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008838  00000000  00000000  00187400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cbe4 	.word	0x0800cbe4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	0800cbe4 	.word	0x0800cbe4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <_ZN14RoboIME_SX128012GPIOCallbackEv>:
SX1280Hal radio0(&hspi2, SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, SX1280_RST_GPIO_Port, SX1280_RST_Pin, &callbacks);
// Feedback Radio
//SX1280Hal radio1(&hspi2, SX_FB_NSS_GPIO_Port, SX_FB_NSS_Pin, SX_FB_BUSY_GPIO_Port, SX_FB_BUSY_Pin, SX_FB_RST_GPIO_Port, SX_FB_RST_Pin, &callbacks);

//Public methods
void RoboIME_SX1280::GPIOCallback(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	radio0.HalInterruptCallback();
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <_ZN14RoboIME_SX128012GPIOCallbackEv+0x20>)
 8000cb2:	f000 fea8 	bl	8001a06 <_ZN9SX1280Hal20HalInterruptCallbackEv>
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <_ZN14RoboIME_SX128012GPIOCallbackEv+0x24>)
 8000cbc:	f003 fa57 	bl	800416e <HAL_GPIO_TogglePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200001a8 	.word	0x200001a8
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <_ZN14RoboIME_SX12805setupEv>:
int RoboIME_SX1280::setup(){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	6078      	str	r0, [r7, #4]
	/* Modulation Params*/

	   ModulationParams.Params.Flrc.BitrateBandwidth  = ( RadioFlrcBitrates_t )       FLRC_BR_0_260_BW_0_3;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	22eb      	movs	r2, #235	; 0xeb
 8000cdc:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	   ModulationParams.Params.Flrc.CodingRate        = ( RadioFlrcCodingRates_t )   FLRC_CR_1_2;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	   ModulationParams.Params.Flrc.ModulationShaping = ( RadioModShapings_t )        RADIO_MOD_SHAPING_BT_1_0;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2210      	movs	r2, #16
 8000cec:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

	   PacketParams.Params.Flrc.PreambleLength        = ( RadioPreambleLengths_t )     PREAMBLE_LENGTH_32_BITS;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2270      	movs	r2, #112	; 0x70
 8000cf4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	   PacketParams.Params.Flrc.SyncWordLength        = ( RadioFlrcSyncWordLengths_t )FLRC_SYNCWORD_LENGTH_4_BYTE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	   PacketParams.Params.Flrc.SyncWordMatch         = ( RadioSyncWordRxMatchs_t )   RADIO_RX_MATCH_SYNCWORD_1;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2210      	movs	r2, #16
 8000d04:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	   PacketParams.Params.Flrc.HeaderType            = ( RadioPacketLengthModes_t )  RADIO_PACKET_VARIABLE_LENGTH;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	   PacketParams.Params.Flrc.PayloadLength         =                               bufferSize-1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	227f      	movs	r2, #127	; 0x7f
 8000d14:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	   PacketParams.Params.Flrc.CrcLength             = ( RadioCrcTypes_t )           RADIO_CRC_3_BYTES;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2230      	movs	r2, #48	; 0x30
 8000d1c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	   PacketParams.Params.Flrc.Whitening             = ( RadioWhiteningModes_t )	  RADIO_WHITENING_OFF;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2208      	movs	r2, #8
 8000d24:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	   ModulationParams.PacketType = PACKET_TYPE_FLRC;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	   PacketParams.PacketType     = PACKET_TYPE_FLRC;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2203      	movs	r2, #3
 8000d34:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82


   	HAL_Delay(500);
 8000d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d3c:	f002 fb98 	bl	8003470 <HAL_Delay>
   	radio0.Init();
 8000d40:	481f      	ldr	r0, [pc, #124]	; (8000dc0 <_ZN14RoboIME_SX12805setupEv+0xf0>)
 8000d42:	f000 fe91 	bl	8001a68 <_ZN6SX12804InitEv>
   	radio0.SetRegulatorMode(USE_LDO);
 8000d46:	2100      	movs	r1, #0
 8000d48:	481d      	ldr	r0, [pc, #116]	; (8000dc0 <_ZN14RoboIME_SX12805setupEv+0xf0>)
 8000d4a:	f001 fa1c 	bl	8002186 <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>
   	radio0.SetStandby( STDBY_RC);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	481b      	ldr	r0, [pc, #108]	; (8000dc0 <_ZN14RoboIME_SX12805setupEv+0xf0>)
 8000d52:	f000 fef9 	bl	8001b48 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>
   	//radio0.SetLNAGainSetting(LNA_HIGH_SENSITIVITY_MODE);
   	radio0.SetPacketType( ModulationParams.PacketType );
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <_ZN14RoboIME_SX12805setupEv+0xf0>)
 8000d60:	f000 ff7d 	bl	8001c5e <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
   	radio0.SetModulationParams( &ModulationParams );
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	339f      	adds	r3, #159	; 0x9f
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4815      	ldr	r0, [pc, #84]	; (8000dc0 <_ZN14RoboIME_SX12805setupEv+0xf0>)
 8000d6c:	f001 f822 	bl	8001db4 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>
   	radio0.SetPacketParams( &PacketParams );
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3382      	adds	r3, #130	; 0x82
 8000d74:	4619      	mov	r1, r3
 8000d76:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <_ZN14RoboIME_SX12805setupEv+0xf0>)
 8000d78:	f001 f898 	bl	8001eac <_ZN6SX128015SetPacketParamsEP14PacketParams_t>
   	radio0.SetRfFrequency( 2350000000UL );
 8000d7c:	4911      	ldr	r1, [pc, #68]	; (8000dc4 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000d7e:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <_ZN14RoboIME_SX12805setupEv+0xf0>)
 8000d80:	f000 ffae 	bl	8001ce0 <_ZN6SX128014SetRfFrequencyEm>
   	radio0.SetBufferBaseAddresses( 0x00, 0x00 );
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <_ZN14RoboIME_SX12805setupEv+0xf0>)
 8000d8a:	f000 fff9 	bl	8001d80 <_ZN6SX128022SetBufferBaseAddressesEhh>
   	//radio0.SetSyncWord( 1, syncWord ); // NAO USEI
   	// only used in GFSK, FLRC
   	//uint8_t crcSeedLocal[2] = {0x45, 0x67}; // NAO USEI
   	//radio0.SetCrcSeed( crcSeedLocal ); // NAO USEI
   	//radio0.SetCrcPolynomial( 0x0123 ); // NAOP USEI
   	radio0.SetTxParams( 0, RADIO_RAMP_20_US );
 8000d8e:	22e0      	movs	r2, #224	; 0xe0
 8000d90:	2100      	movs	r1, #0
 8000d92:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <_ZN14RoboIME_SX12805setupEv+0xf0>)
 8000d94:	f000 ffd8 	bl	8001d48 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>
   	uint16_t RxIrqMask = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT;
 8000d98:	f244 0302 	movw	r3, #16386	; 0x4002
 8000d9c:	81fb      	strh	r3, [r7, #14]
   	radio0.SetDioIrqParams( RxIrqMask, RxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8000d9e:	89fa      	ldrh	r2, [r7, #14]
 8000da0:	89f9      	ldrh	r1, [r7, #14]
 8000da2:	2300      	movs	r3, #0
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2300      	movs	r3, #0
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <_ZN14RoboIME_SX12805setupEv+0xf0>)
 8000daa:	f001 f97b 	bl	80020a4 <_ZN6SX128015SetDioIrqParamsEtttt>
   	radio0.SetPollingMode( );
 8000dae:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <_ZN14RoboIME_SX12805setupEv+0xf0>)
 8000db0:	f001 fa64 	bl	800227c <_ZN6SX128014SetPollingModeEv>

   	//radio0.ProcessIrqs( );

   	return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200001a8 	.word	0x200001a8
 8000dc4:	8c122780 	.word	0x8c122780

08000dc8 <_ZN14RoboIME_SX128011sendPayloadEPhh>:

uint8_t RoboIME_SX1280::sendPayload(uint8_t* payload, uint8_t payloadSize){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	71fb      	strb	r3, [r7, #7]
	radio0.SetDioIrqParams( TxIrqMask, TxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	; 0xac
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8000de2:	2300      	movs	r3, #0
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	480a      	ldr	r0, [pc, #40]	; (8000e14 <_ZN14RoboIME_SX128011sendPayloadEPhh+0x4c>)
 8000dea:	f001 f95b 	bl	80020a4 <_ZN6SX128015SetDioIrqParamsEtttt>
	radio0.SendPayload( payload, payloadSize,( TickTime_t ){ RADIO_TICK_SIZE_1000_US,TX_TIMEOUT_VALUE } );
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <_ZN14RoboIME_SX128011sendPayloadEPhh+0x50>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	79fa      	ldrb	r2, [r7, #7]
 8000df6:	2300      	movs	r3, #0
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <_ZN14RoboIME_SX128011sendPayloadEPhh+0x4c>)
 8000e00:	f001 fa10 	bl	8002224 <_ZN6SX128011SendPayloadEPhh10TickTime_sh>
	radio0.GetIrqStatus();
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <_ZN14RoboIME_SX128011sendPayloadEPhh+0x4c>)
 8000e06:	f001 f988 	bl	800211a <_ZN6SX128012GetIrqStatusEv>
		 		else if (AppState == APP_TX_TIMEOUT)
				{
		 			return 0;
				}
		 		}*/
	return 1;
 8000e0a:	2301      	movs	r3, #1

}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200001a8 	.word	0x200001a8
 8000e18:	0800cbfc 	.word	0x0800cbfc

08000e1c <_ZN14RoboIME_SX128014receivePayloadEPh>:
uint8_t RoboIME_SX1280::receivePayload(uint8_t* payload){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
	uint8_t actualBufferSize;
	radio0.SetDioIrqParams( RxIrqMask, RxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	; 0xae
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 8000e32:	2300      	movs	r3, #0
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2300      	movs	r3, #0
 8000e38:	481d      	ldr	r0, [pc, #116]	; (8000eb0 <_ZN14RoboIME_SX128014receivePayloadEPh+0x94>)
 8000e3a:	f001 f933 	bl	80020a4 <_ZN6SX128015SetDioIrqParamsEtttt>
 	radio0.SetRx( ( TickTime_t ) { RADIO_TICK_SIZE_1000_US, RX_TIMEOUT_VALUE } );
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <_ZN14RoboIME_SX128014receivePayloadEPh+0x98>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68f9      	ldr	r1, [r7, #12]
 8000e46:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <_ZN14RoboIME_SX128014receivePayloadEPh+0x94>)
 8000e48:	f000 fed3 	bl	8001bf2 <_ZN6SX12805SetRxE10TickTime_s>
	oldCount = payloadTemp[0];
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	781a      	ldrb	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	/*while(1)
	{
	if(AppState == APP_RX)
		{*/
			radio0.GetPayload(payloadTemp, &actualBufferSize, bufferSize);
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f107 020b 	add.w	r2, r7, #11
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	4814      	ldr	r0, [pc, #80]	; (8000eb0 <_ZN14RoboIME_SX128014receivePayloadEPh+0x94>)
 8000e60:	f001 f9bc 	bl	80021dc <_ZN6SX128010GetPayloadEPhS0_h>
			if (payloadTemp[0] != oldCount && payloadTemp[1] == roboId)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d013      	beq.n	8000e9a <_ZN14RoboIME_SX128014receivePayloadEPh+0x7e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	785a      	ldrb	r2, [r3, #1]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d10c      	bne.n	8000e9a <_ZN14RoboIME_SX128014receivePayloadEPh+0x7e>
			{
				memcpy(payload, payloadTemp, bufferSize);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	4619      	mov	r1, r3
 8000e86:	6838      	ldr	r0, [r7, #0]
 8000e88:	f00b fdf8 	bl	800ca7c <memcpy>
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000e8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <_ZN14RoboIME_SX128014receivePayloadEPh+0x9c>)
 8000e92:	f003 f96c 	bl	800416e <HAL_GPIO_TogglePin>
				return actualBufferSize;
 8000e96:	7afb      	ldrb	r3, [r7, #11]
 8000e98:	e005      	b.n	8000ea6 <_ZN14RoboIME_SX128014receivePayloadEPh+0x8a>
			}
			else
			{
				 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <_ZN14RoboIME_SX128014receivePayloadEPh+0x9c>)
 8000ea0:	f003 f965 	bl	800416e <HAL_GPIO_TogglePin>
				 return 0;
 8000ea4:	2300      	movs	r3, #0
		else if (AppState == APP_RX_TIMEOUT)
		{
			return 0;
		}
	}*/
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200001a8 	.word	0x200001a8
 8000eb4:	0800cbfc 	.word	0x0800cbfc
 8000eb8:	40020c00 	.word	0x40020c00

08000ebc <_ZN14RoboIME_SX128010setRobotIdEh>:
void RoboIME_SX1280::setPayload( uint8_t *buffer, uint8_t size, uint8_t offset ){

	radio0.SetPayload( buffer, size, offset );
}
int RoboIME_SX1280::setRobotId(uint8_t id){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
	roboId = id;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	78fa      	ldrb	r2, [r7, #3]
 8000ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <_Z8OnTxDonev>:
			return 0;
		}
	}
}
void OnTxDone( void )
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
    AppState = APP_TX;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <_Z8OnTxDonev+0x14>)
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	701a      	strb	r2, [r3, #0]
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	200001a4 	.word	0x200001a4

08000ef8 <_Z8OnRxDonev>:

void  OnRxDone( void )
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
    AppState = APP_RX;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <_Z8OnRxDonev+0x14>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	200001a4 	.word	0x200001a4

08000f10 <_Z11OnTxTimeoutv>:

void OnTxTimeout( void )
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
    AppState = APP_TX_TIMEOUT;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <_Z11OnTxTimeoutv+0x14>)
 8000f16:	2205      	movs	r2, #5
 8000f18:	701a      	strb	r2, [r3, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	200001a4 	.word	0x200001a4

08000f28 <_Z11OnRxTimeoutv>:

void OnRxTimeout( void )
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
    AppState = APP_RX_TIMEOUT;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <_Z11OnRxTimeoutv+0x14>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	701a      	strb	r2, [r3, #0]
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	200001a4 	.word	0x200001a4

08000f40 <_Z9OnRxError14IrqErrorCode_t>:

void  OnRxError( IrqErrorCode_t errorCode )
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
    AppState = APP_RX_ERROR;
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <_Z9OnRxError14IrqErrorCode_t+0x1c>)
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	701a      	strb	r2, [r3, #0]

}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	200001a4 	.word	0x200001a4

08000f60 <_Z41__static_initialization_and_destruction_0ii>:
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af06      	add	r7, sp, #24
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d117      	bne.n	8000fa0 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d112      	bne.n	8000fa0 <_Z41__static_initialization_and_destruction_0ii+0x40>
SX1280Hal radio0(&hspi2, SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, SX1280_RST_GPIO_Port, SX1280_RST_Pin, &callbacks);
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000f7c:	9304      	str	r3, [sp, #16]
 8000f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f82:	9303      	str	r3, [sp, #12]
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f96:	4a0c      	ldr	r2, [pc, #48]	; (8000fc8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000f9c:	f000 f99e 	bl	80012dc <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d107      	bne.n	8000fb6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d102      	bne.n	8000fb6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000fb0:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000fb2:	f000 f9cf 	bl	8001354 <_ZN9SX1280HalD1Ev>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	40020c00 	.word	0x40020c00
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	20000474 	.word	0x20000474
 8000fd0:	200001a8 	.word	0x200001a8

08000fd4 <_GLOBAL__sub_I_AppState>:
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff ffbf 	bl	8000f60 <_Z41__static_initialization_and_destruction_0ii>
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_GLOBAL__sub_D_AppState>:
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff ffb7 	bl	8000f60 <_Z41__static_initialization_and_destruction_0ii>
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_ZN14RoboIME_SX1280C1Ev>:
#include "string.h"
#include <cstring>
#include "SerialDebug.hpp"
#include "sx1280/sx1280-hal.h"

class RoboIME_SX1280 {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f244 0201 	movw	r2, #16385	; 0x4001
 8001002:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f244 0202 	movw	r2, #16386	; 0x4002
 800100c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <HAL_UART_TxCpltCallback>:
	if(htim==&htim6){

	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
		//debug.serialTxCpltCallback();
	}
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin){
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001044:	d103      	bne.n	800104e <HAL_GPIO_EXTI_Callback+0x1a>
	case GPIO_PIN_8:
		radio.GPIOCallback();
 8001046:	4804      	ldr	r0, [pc, #16]	; (8001058 <HAL_GPIO_EXTI_Callback+0x24>)
 8001048:	f7ff fe2e 	bl	8000ca8 <_ZN14RoboIME_SX128012GPIOCallbackEv>
		break;
 800104c:	e000      	b.n	8001050 <HAL_GPIO_EXTI_Callback+0x1c>
	default:
		break;
 800104e:	bf00      	nop
	}
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000020c 	.word	0x2000020c

0800105c <start>:

void start(){
 800105c:	b580      	push	{r7, lr}
 800105e:	b0a4      	sub	sp, #144	; 0x90
 8001060:	af00      	add	r7, sp, #0

	radio.setup();
 8001062:	4838      	ldr	r0, [pc, #224]	; (8001144 <start+0xe8>)
 8001064:	f7ff fe34 	bl	8000cd0 <_ZN14RoboIME_SX12805setupEv>
   /*Radio Type*/
    bool isMaster = false;
 8001068:	2300      	movs	r3, #0
 800106a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87


	uint8_t Buffer[radio.bufferSize];
	memset( BufferReceived, 0x00, radio.bufferSize );
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	2100      	movs	r1, #0
 8001072:	4835      	ldr	r0, [pc, #212]	; (8001148 <start+0xec>)
 8001074:	f00b fd10 	bl	800ca98 <memset>
	HAL_Delay(5);
 8001078:	2005      	movs	r0, #5
 800107a:	f002 f9f9 	bl	8003470 <HAL_Delay>

//	char *data = "hello adfa \n";
int count = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
while(1)
{

	if(isMaster == true)
 8001084:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001088:	2b01      	cmp	r3, #1
 800108a:	d143      	bne.n	8001114 <start+0xb8>
	{

		// Send the next PING frame
		Buffer[0] = count;
 800108c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001090:	b2db      	uxtb	r3, r3
 8001092:	713b      	strb	r3, [r7, #4]
		Buffer[1] = 2;
 8001094:	2302      	movs	r3, #2
 8001096:	717b      	strb	r3, [r7, #5]
		Buffer[2] = 3;
 8001098:	2303      	movs	r3, #3
 800109a:	71bb      	strb	r3, [r7, #6]
		Buffer[3] = 4;
 800109c:	2304      	movs	r3, #4
 800109e:	71fb      	strb	r3, [r7, #7]
		Buffer[4] = 5;
 80010a0:	2305      	movs	r3, #5
 80010a2:	723b      	strb	r3, [r7, #8]
		Buffer[5] = 6;
 80010a4:	2306      	movs	r3, #6
 80010a6:	727b      	strb	r3, [r7, #9]
		Buffer[6] = 7;
 80010a8:	2307      	movs	r3, #7
 80010aa:	72bb      	strb	r3, [r7, #10]
		Buffer[7] = 8;
 80010ac:	2308      	movs	r3, #8
 80010ae:	72fb      	strb	r3, [r7, #11]
		for(int i = 8; i < 16; i++ )
 80010b0:	2308      	movs	r3, #8
 80010b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80010b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010ba:	2b0f      	cmp	r3, #15
 80010bc:	dc0e      	bgt.n	80010dc <start+0x80>
		{
			Buffer[i] = i;
 80010be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010c2:	b2d9      	uxtb	r1, r3
 80010c4:	1d3a      	adds	r2, r7, #4
 80010c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010ca:	4413      	add	r3, r2
 80010cc:	460a      	mov	r2, r1
 80010ce:	701a      	strb	r2, [r3, #0]
		for(int i = 8; i < 16; i++ )
 80010d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010d4:	3301      	adds	r3, #1
 80010d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80010da:	e7ec      	b.n	80010b6 <start+0x5a>
		}

		if(radio.sendPayload(Buffer, radio.bufferSize))
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	4619      	mov	r1, r3
 80010e2:	4818      	ldr	r0, [pc, #96]	; (8001144 <start+0xe8>)
 80010e4:	f7ff fe70 	bl	8000dc8 <_ZN14RoboIME_SX128011sendPayloadEPhh>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	bf14      	ite	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	2300      	moveq	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0c5      	beq.n	8001084 <start+0x28>
		{
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin); // verde
 80010f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fc:	4813      	ldr	r0, [pc, #76]	; (800114c <start+0xf0>)
 80010fe:	f003 f836 	bl	800416e <HAL_GPIO_TogglePin>
			count ++;
 8001102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001106:	3301      	adds	r3, #1
 8001108:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			HAL_Delay(10);
 800110c:	200a      	movs	r0, #10
 800110e:	f002 f9af 	bl	8003470 <HAL_Delay>
 8001112:	e7b7      	b.n	8001084 <start+0x28>


	}
	else
	{
		radio.setRobotId(2);
 8001114:	2102      	movs	r1, #2
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <start+0xe8>)
 8001118:	f7ff fed0 	bl	8000ebc <_ZN14RoboIME_SX128010setRobotIdEh>
		HAL_Delay(10);
 800111c:	200a      	movs	r0, #10
 800111e:	f002 f9a7 	bl	8003470 <HAL_Delay>
			if(radio.receivePayload(BufferReceived))
 8001122:	4909      	ldr	r1, [pc, #36]	; (8001148 <start+0xec>)
 8001124:	4807      	ldr	r0, [pc, #28]	; (8001144 <start+0xe8>)
 8001126:	f7ff fe79 	bl	8000e1c <_ZN14RoboIME_SX128014receivePayloadEPh>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0a4      	beq.n	8001084 <start+0x28>
			{
				 CDC_Transmit_FS(BufferReceived, radio.bufferSize);
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <start+0xec>)
 800113e:	f00a ffe1 	bl	800c104 <CDC_Transmit_FS>
			}


	}
	}
 8001142:	e79f      	b.n	8001084 <start+0x28>
 8001144:	2000020c 	.word	0x2000020c
 8001148:	20000300 	.word	0x20000300
 800114c:	40020c00 	.word	0x40020c00

08001150 <_Z41__static_initialization_and_destruction_0ii>:
}
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d107      	bne.n	8001170 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001166:	4293      	cmp	r3, r2
 8001168:	d102      	bne.n	8001170 <_Z41__static_initialization_and_destruction_0ii+0x20>
RoboIME_SX1280 radio;
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800116c:	f7ff ff42 	bl	8000ff4 <_ZN14RoboIME_SX1280C1Ev>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000020c 	.word	0x2000020c

0800117c <_GLOBAL__sub_I_radio>:
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
 8001180:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001184:	2001      	movs	r0, #1
 8001186:	f7ff ffe3 	bl	8001150 <_Z41__static_initialization_and_destruction_0ii>
 800118a:	bd80      	pop	{r7, pc}

0800118c <_ZN5RadioC1EP16RadioCallbacks_t>:
     *
     * \param [in]  callbacks     The structure of callbacks function pointers
     *                            to be called on radio interrupts
     *
     */
    Radio( RadioCallbacks_t *callbacks )
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
    {
 8001196:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <_ZN5RadioC1EP16RadioCallbacks_t+0x68>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	601a      	str	r2, [r3, #0]
        this->txDone = callbacks->txDone;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	605a      	str	r2, [r3, #4]
        this->rxDone = callbacks->rxDone;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	609a      	str	r2, [r3, #8]
        this->rxSyncWordDone = callbacks->rxSyncWordDone;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	60da      	str	r2, [r3, #12]
        this->rxHeaderDone = callbacks->rxHeaderDone;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	611a      	str	r2, [r3, #16]
        this->txTimeout = callbacks->txTimeout;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	615a      	str	r2, [r3, #20]
        this->rxTimeout = callbacks->rxTimeout;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	695a      	ldr	r2, [r3, #20]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
        this->rxError = callbacks->rxError;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	699a      	ldr	r2, [r3, #24]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	61da      	str	r2, [r3, #28]
        this->rangingDone = callbacks->rangingDone;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	69da      	ldr	r2, [r3, #28]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	621a      	str	r2, [r3, #32]
        this->cadDone = callbacks->cadDone;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6a1a      	ldr	r2, [r3, #32]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
    }
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	0800cc98 	.word	0x0800cc98

080011f8 <_ZN5RadioD1Ev>:
    virtual ~Radio( void ){ };
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <_ZN5RadioD1Ev+0x1c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	0800cc98 	.word	0x0800cc98

08001218 <_ZN5RadioD0Ev>:
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffe9 	bl	80011f8 <_ZN5RadioD1Ev>
 8001226:	2128      	movs	r1, #40	; 0x28
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f00b fbd5 	bl	800c9d8 <_ZdlPvj>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZN6SX1280C1EP16RadioCallbacks_t>:
     * \brief Instantiates a SX1280 object and provides API functions to communicates with the radio
     *
     * \param [in]  callbacks      Pointer to the callbacks structure defining
     *                             all callbacks function pointers
     */
    SX1280( RadioCallbacks_t *callbacks ):
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
        // The class members are value-initialiazed in member-initilaizer list
        Radio( callbacks ), OperatingMode( MODE_STDBY_RC ), PacketType( PACKET_TYPE_NONE ),
        LoRaBandwidth( LORA_BW_1600 ), IrqState( false ), PollingMode( false )
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6839      	ldr	r1, [r7, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ffa0 	bl	800118c <_ZN5RadioC1EP16RadioCallbacks_t>
 800124c:	4a10      	ldr	r2, [pc, #64]	; (8001290 <_ZN6SX1280C1EP16RadioCallbacks_t+0x58>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2202      	movs	r2, #2
 8001256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	220f      	movs	r2, #15
 800125e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	220a      	movs	r2, #10
 8001266:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    {
        this->dioIrq        = &SX1280::OnDioIrq;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a05      	ldr	r2, [pc, #20]	; (8001294 <_ZN6SX1280C1EP16RadioCallbacks_t+0x5c>)
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	631a      	str	r2, [r3, #48]	; 0x30

        // Warning: this constructor set the LoRaBandwidth member to a valid
        // value, but it is not related to the actual radio configuration!
    }
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	0800ccd4 	.word	0x0800ccd4
 8001294:	08002299 	.word	0x08002299

08001298 <_ZN6SX1280D1Ev>:

    virtual ~SX1280( )
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    {
 80012a0:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <_ZN6SX1280D1Ev+0x20>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ffa5 	bl	80011f8 <_ZN5RadioD1Ev>
    }
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0800ccd4 	.word	0x0800ccd4

080012bc <_ZN6SX1280D0Ev>:
    virtual ~SX1280( )
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    }
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ffe7 	bl	8001298 <_ZN6SX1280D1Ev>
 80012ca:	2138      	movs	r1, #56	; 0x38
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f00b fb83 	bl	800c9d8 <_ZdlPvj>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t>:
// This code handles cases where assert_param is undefined
#ifndef assert_param
#define assert_param( ... )
#endif

SX1280Hal::SX1280Hal( SPI_HandleTypeDef* hspi,
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	807b      	strh	r3, [r7, #2]
                      RadioCallbacks_t *callbacks )
        :   SX1280( callbacks ),
            RadioNssPort( nssPort ), RadioNssPin( nssPin ),
            RadioResetPort( rstPort ), RadioResetPin( rstPin ),
            RadioCtsnPort( nullptr ), RadioCtsnPin( 0 ),
            BUSYPort( busyPort ), BUSYPin( busyPin )
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ffa2 	bl	8001238 <_ZN6SX1280C1EP16RadioCallbacks_t>
 80012f4:	4a16      	ldr	r2, [pc, #88]	; (8001350 <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t+0x74>)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6a3a      	ldr	r2, [r7, #32]
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001312:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	64da      	str	r2, [r3, #76]	; 0x4c
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	655a      	str	r2, [r3, #84]	; 0x54
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8bba      	ldrh	r2, [r7, #28]
 800132e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	65da      	str	r2, [r3, #92]	; 0x5c
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	661a      	str	r2, [r3, #96]	; 0x60
{
    RadioSpi = hspi;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	639a      	str	r2, [r3, #56]	; 0x38

    //HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
    //HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_SET);
}
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	0800cc50 	.word	0x0800cc50

08001354 <_ZN9SX1280HalD1Ev>:

SX1280Hal::~SX1280Hal( void )
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	4a05      	ldr	r2, [pc, #20]	; (8001374 <_ZN9SX1280HalD1Ev+0x20>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff97 	bl	8001298 <_ZN6SX1280D1Ev>
{
};
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	0800cc50 	.word	0x0800cc50

08001378 <_ZN9SX1280HalD0Ev>:
SX1280Hal::~SX1280Hal( void )
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
};
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ffe7 	bl	8001354 <_ZN9SX1280HalD1Ev>
 8001386:	2164      	movs	r1, #100	; 0x64
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f00b fb25 	bl	800c9d8 <_ZdlPvj>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_ZN9SX1280Hal9IoIrqInitEM6SX1280FvvE>:

void SX1280Hal::IoIrqInit( DioIrqHandler irqHandler )
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	e883 0006 	stmia.w	r3, {r1, r2}
    assert_param( RadioSpi != NULL);
    // BUSY.mode( PullNone );
    //Conexão entre interrupt do HAL e da biblioteca
    //irqHandler é o ponteiro para a função que deve ser chamada em caso de interrupt
    RadioIrqHandler = irqHandler;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	335c      	adds	r3, #92	; 0x5c
 80013aa:	1d3a      	adds	r2, r7, #4
 80013ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_ZN9SX1280Hal5ResetEv>:

void SX1280Hal::Reset( void )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	//Por que desliga o IRQ?
	/* Habilitar o delay de outra forma*/
    //__disable_irq( );
    HAL_Delay( 20 );
 80013c8:	2014      	movs	r0, #20
 80013ca:	f002 f851 	bl	8003470 <HAL_Delay>
    HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_RESET);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80013d8:	2200      	movs	r2, #0
 80013da:	4619      	mov	r1, r3
 80013dc:	f002 feae 	bl	800413c <HAL_GPIO_WritePin>
    HAL_Delay( 50 );
 80013e0:	2032      	movs	r0, #50	; 0x32
 80013e2:	f002 f845 	bl	8003470 <HAL_Delay>
    HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_SET);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80013f0:	2201      	movs	r2, #1
 80013f2:	4619      	mov	r1, r3
 80013f4:	f002 fea2 	bl	800413c <HAL_GPIO_WritePin>
    HAL_Delay( 20 );
 80013f8:	2014      	movs	r0, #20
 80013fa:	f002 f839 	bl	8003470 <HAL_Delay>
   // __enable_irq( );
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_ZN9SX1280Hal6WakeupEv>:

void SX1280Hal::Wakeup( void )
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140e:	b672      	cpsid	i
}
 8001410:	bf00      	nop
    __disable_irq( );

    //Don't wait for BUSY here

    if( RadioSpi != NULL )
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001416:	2b00      	cmp	r3, #0
 8001418:	d019      	beq.n	800144e <_ZN9SX1280Hal6WakeupEv+0x48>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001424:	2200      	movs	r2, #0
 8001426:	4619      	mov	r1, r3
 8001428:	f002 fe88 	bl	800413c <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_GET_STATUS );
 800142c:	21c0      	movs	r1, #192	; 0xc0
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fad4 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 8001434:	2100      	movs	r1, #0
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 fad0 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001446:	2201      	movs	r2, #1
 8001448:	4619      	mov	r1, r3
 800144a:	f002 fe77 	bl	800413c <HAL_GPIO_WritePin>
    }

    // Wait for chip to be ready.
    WaitOnBusy( );
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f002 fe56 	bl	800410c <HAL_GPIO_ReadPin>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	bf14      	ite	ne
 8001466:	2301      	movne	r3, #1
 8001468:	2300      	moveq	r3, #0
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d000      	beq.n	8001472 <_ZN9SX1280Hal6WakeupEv+0x6c>
 8001470:	e7ed      	b.n	800144e <_ZN9SX1280Hal6WakeupEv+0x48>
  __ASM volatile ("cpsie i" : : : "memory");
 8001472:	b662      	cpsie	i
}
 8001474:	bf00      	nop

    __enable_irq( );
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht>:

void SX1280Hal::WriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	461a      	mov	r2, r3
 800148a:	460b      	mov	r3, r1
 800148c:	72fb      	strb	r3, [r7, #11]
 800148e:	4613      	mov	r3, r2
 8001490:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800149c:	4619      	mov	r1, r3
 800149e:	4610      	mov	r0, r2
 80014a0:	f002 fe34 	bl	800410c <HAL_GPIO_ReadPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bf14      	ite	ne
 80014aa:	2301      	movne	r3, #1
 80014ac:	2300      	moveq	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d000      	beq.n	80014b6 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x38>
 80014b4:	e7ed      	b.n	8001492 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x14>

    if( RadioSpi != NULL )
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d028      	beq.n	8001510 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x92>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014c8:	2200      	movs	r2, #0
 80014ca:	4619      	mov	r1, r3
 80014cc:	f002 fe36 	bl	800413c <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( ( uint8_t )command );
 80014d0:	7afb      	ldrb	r3, [r7, #11]
 80014d2:	4619      	mov	r1, r3
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 fa81 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80014da:	2300      	movs	r3, #0
 80014dc:	82fb      	strh	r3, [r7, #22]
 80014de:	8afa      	ldrh	r2, [r7, #22]
 80014e0:	893b      	ldrh	r3, [r7, #8]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d20b      	bcs.n	80014fe <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x80>
        {
            SpiTransmitReceiveByte( buffer[i] );
 80014e6:	8afb      	ldrh	r3, [r7, #22]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	4619      	mov	r1, r3
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 fa73 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80014f6:	8afb      	ldrh	r3, [r7, #22]
 80014f8:	3301      	adds	r3, #1
 80014fa:	82fb      	strh	r3, [r7, #22]
 80014fc:	e7ef      	b.n	80014de <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x60>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001508:	2201      	movs	r2, #1
 800150a:	4619      	mov	r1, r3
 800150c:	f002 fe16 	bl	800413c <HAL_GPIO_WritePin>
    }

    if( command != RADIO_SET_SLEEP )
 8001510:	7afb      	ldrb	r3, [r7, #11]
 8001512:	2b84      	cmp	r3, #132	; 0x84
 8001514:	d011      	beq.n	800153a <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0xbc>
    {
        WaitOnBusy( );
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001520:	4619      	mov	r1, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f002 fdf2 	bl	800410c <HAL_GPIO_ReadPin>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf14      	ite	ne
 800152e:	2301      	movne	r3, #1
 8001530:	2300      	moveq	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d000      	beq.n	800153a <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0xbc>
 8001538:	e7ed      	b.n	8001516 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x98>
    }
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht>:

void SX1280Hal::ReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 8001542:	b590      	push	{r4, r7, lr}
 8001544:	b087      	sub	sp, #28
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	461a      	mov	r2, r3
 800154e:	460b      	mov	r3, r1
 8001550:	72fb      	strb	r3, [r7, #11]
 8001552:	4613      	mov	r3, r2
 8001554:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001560:	4619      	mov	r1, r3
 8001562:	4610      	mov	r0, r2
 8001564:	f002 fdd2 	bl	800410c <HAL_GPIO_ReadPin>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	bf14      	ite	ne
 800156e:	2301      	movne	r3, #1
 8001570:	2300      	moveq	r3, #0
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d000      	beq.n	800157a <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x38>
 8001578:	e7ed      	b.n	8001556 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x14>

    if( RadioSpi != NULL )
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157e:	2b00      	cmp	r3, #0
 8001580:	d042      	beq.n	8001608 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xc6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800158c:	2200      	movs	r2, #0
 800158e:	4619      	mov	r1, r3
 8001590:	f002 fdd4 	bl	800413c <HAL_GPIO_WritePin>
        if( command == RADIO_GET_STATUS )
 8001594:	7afb      	ldrb	r3, [r7, #11]
 8001596:	2bc0      	cmp	r3, #192	; 0xc0
 8001598:	d111      	bne.n	80015be <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x7c>
        {
            buffer[0] = SpiTransmitReceiveByte( ( uint8_t )command );
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	4619      	mov	r1, r3
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 fa1c 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	701a      	strb	r2, [r3, #0]
            SpiTransmitReceiveByte( 0 );
 80015ac:	2100      	movs	r1, #0
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 fa14 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            SpiTransmitReceiveByte( 0 );
 80015b4:	2100      	movs	r1, #0
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 fa10 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80015bc:	e01b      	b.n	80015f6 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xb4>
        }
        else
        {
            SpiTransmitReceiveByte( ( uint8_t )command );
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	4619      	mov	r1, r3
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 fa0a 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            SpiTransmitReceiveByte( 0 );
 80015c8:	2100      	movs	r1, #0
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 fa06 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            for( uint16_t i = 0; i < size; i++ )
 80015d0:	2300      	movs	r3, #0
 80015d2:	82fb      	strh	r3, [r7, #22]
 80015d4:	8afa      	ldrh	r2, [r7, #22]
 80015d6:	893b      	ldrh	r3, [r7, #8]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d20c      	bcs.n	80015f6 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xb4>
            {
                 buffer[i] = SpiTransmitReceiveByte( 0 );
 80015dc:	8afb      	ldrh	r3, [r7, #22]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	18d4      	adds	r4, r2, r3
 80015e2:	2100      	movs	r1, #0
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 f9f9 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80015ea:	4603      	mov	r3, r0
 80015ec:	7023      	strb	r3, [r4, #0]
            for( uint16_t i = 0; i < size; i++ )
 80015ee:	8afb      	ldrh	r3, [r7, #22]
 80015f0:	3301      	adds	r3, #1
 80015f2:	82fb      	strh	r3, [r7, #22]
 80015f4:	e7ee      	b.n	80015d4 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x92>
            }
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001600:	2201      	movs	r2, #1
 8001602:	4619      	mov	r1, r3
 8001604:	f002 fd9a 	bl	800413c <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f002 fd79 	bl	800410c <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	bf14      	ite	ne
 8001620:	2301      	movne	r3, #1
 8001622:	2300      	moveq	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d000      	beq.n	800162c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xea>
 800162a:	e7ed      	b.n	8001608 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xc6>
}
 800162c:	bf00      	nop
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}

08001634 <_ZN9SX1280Hal13WriteRegisterEtPht>:

void SX1280Hal::WriteRegister( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	461a      	mov	r2, r3
 8001640:	460b      	mov	r3, r1
 8001642:	817b      	strh	r3, [r7, #10]
 8001644:	4613      	mov	r3, r2
 8001646:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001652:	4619      	mov	r1, r3
 8001654:	4610      	mov	r0, r2
 8001656:	f002 fd59 	bl	800410c <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d000      	beq.n	800166c <_ZN9SX1280Hal13WriteRegisterEtPht+0x38>
 800166a:	e7ed      	b.n	8001648 <_ZN9SX1280Hal13WriteRegisterEtPht+0x14>

    if( RadioSpi != NULL )
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001670:	2b00      	cmp	r3, #0
 8001672:	d035      	beq.n	80016e0 <_ZN9SX1280Hal13WriteRegisterEtPht+0xac>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800167e:	2200      	movs	r2, #0
 8001680:	4619      	mov	r1, r3
 8001682:	f002 fd5b 	bl	800413c <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_WRITE_REGISTER );
 8001686:	2118      	movs	r1, #24
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f9a7 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( ( address & 0xFF00 ) >> 8 );
 800168e:	897b      	ldrh	r3, [r7, #10]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	b29b      	uxth	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	4619      	mov	r1, r3
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 f99f 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( address & 0x00FF );
 800169e:	897b      	ldrh	r3, [r7, #10]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 f999 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80016aa:	2300      	movs	r3, #0
 80016ac:	82fb      	strh	r3, [r7, #22]
 80016ae:	8afa      	ldrh	r2, [r7, #22]
 80016b0:	893b      	ldrh	r3, [r7, #8]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d20b      	bcs.n	80016ce <_ZN9SX1280Hal13WriteRegisterEtPht+0x9a>
        {
            SpiTransmitReceiveByte( buffer[i] );
 80016b6:	8afb      	ldrh	r3, [r7, #22]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4619      	mov	r1, r3
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f98b 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80016c6:	8afb      	ldrh	r3, [r7, #22]
 80016c8:	3301      	adds	r3, #1
 80016ca:	82fb      	strh	r3, [r7, #22]
 80016cc:	e7ef      	b.n	80016ae <_ZN9SX1280Hal13WriteRegisterEtPht+0x7a>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016d8:	2201      	movs	r2, #1
 80016da:	4619      	mov	r1, r3
 80016dc:	f002 fd2e 	bl	800413c <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80016ea:	4619      	mov	r1, r3
 80016ec:	4610      	mov	r0, r2
 80016ee:	f002 fd0d 	bl	800410c <HAL_GPIO_ReadPin>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf14      	ite	ne
 80016f8:	2301      	movne	r3, #1
 80016fa:	2300      	moveq	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d000      	beq.n	8001704 <_ZN9SX1280Hal13WriteRegisterEtPht+0xd0>
 8001702:	e7ed      	b.n	80016e0 <_ZN9SX1280Hal13WriteRegisterEtPht+0xac>
}
 8001704:	bf00      	nop
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_ZN9SX1280Hal13WriteRegisterEth>:

void SX1280Hal::WriteRegister( uint16_t address, uint8_t value )
{
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
 8001718:	4613      	mov	r3, r2
 800171a:	707b      	strb	r3, [r7, #1]
    WriteRegister( address, &value, 1 );
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3318      	adds	r3, #24
 8001722:	681c      	ldr	r4, [r3, #0]
 8001724:	1c7a      	adds	r2, r7, #1
 8001726:	8879      	ldrh	r1, [r7, #2]
 8001728:	2301      	movs	r3, #1
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	47a0      	blx	r4
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bd90      	pop	{r4, r7, pc}

08001736 <_ZN9SX1280Hal12ReadRegisterEtPht>:

void SX1280Hal::ReadRegister( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001736:	b590      	push	{r4, r7, lr}
 8001738:	b087      	sub	sp, #28
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	461a      	mov	r2, r3
 8001742:	460b      	mov	r3, r1
 8001744:	817b      	strh	r3, [r7, #10]
 8001746:	4613      	mov	r3, r2
 8001748:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001754:	4619      	mov	r1, r3
 8001756:	4610      	mov	r0, r2
 8001758:	f002 fcd8 	bl	800410c <HAL_GPIO_ReadPin>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d000      	beq.n	800176e <_ZN9SX1280Hal12ReadRegisterEtPht+0x38>
 800176c:	e7ed      	b.n	800174a <_ZN9SX1280Hal12ReadRegisterEtPht+0x14>

    if( RadioSpi != NULL )
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001772:	2b00      	cmp	r3, #0
 8001774:	d03a      	beq.n	80017ec <_ZN9SX1280Hal12ReadRegisterEtPht+0xb6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001780:	2200      	movs	r2, #0
 8001782:	4619      	mov	r1, r3
 8001784:	f002 fcda 	bl	800413c <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_READ_REGISTER );
 8001788:	2119      	movs	r1, #25
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f926 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( ( address & 0xFF00 ) >> 8 );
 8001790:	897b      	ldrh	r3, [r7, #10]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	b29b      	uxth	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4619      	mov	r1, r3
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 f91e 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( address & 0x00FF );
 80017a0:	897b      	ldrh	r3, [r7, #10]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	4619      	mov	r1, r3
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f918 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 80017ac:	2100      	movs	r1, #0
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f914 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80017b4:	2300      	movs	r3, #0
 80017b6:	82fb      	strh	r3, [r7, #22]
 80017b8:	8afa      	ldrh	r2, [r7, #22]
 80017ba:	893b      	ldrh	r3, [r7, #8]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d20c      	bcs.n	80017da <_ZN9SX1280Hal12ReadRegisterEtPht+0xa4>
        {
            buffer[i] = SpiTransmitReceiveByte( 0 );
 80017c0:	8afb      	ldrh	r3, [r7, #22]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	18d4      	adds	r4, r2, r3
 80017c6:	2100      	movs	r1, #0
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f907 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80017ce:	4603      	mov	r3, r0
 80017d0:	7023      	strb	r3, [r4, #0]
        for( uint16_t i = 0; i < size; i++ )
 80017d2:	8afb      	ldrh	r3, [r7, #22]
 80017d4:	3301      	adds	r3, #1
 80017d6:	82fb      	strh	r3, [r7, #22]
 80017d8:	e7ee      	b.n	80017b8 <_ZN9SX1280Hal12ReadRegisterEtPht+0x82>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017e4:	2201      	movs	r2, #1
 80017e6:	4619      	mov	r1, r3
 80017e8:	f002 fca8 	bl	800413c <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80017f6:	4619      	mov	r1, r3
 80017f8:	4610      	mov	r0, r2
 80017fa:	f002 fc87 	bl	800410c <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf14      	ite	ne
 8001804:	2301      	movne	r3, #1
 8001806:	2300      	moveq	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d000      	beq.n	8001810 <_ZN9SX1280Hal12ReadRegisterEtPht+0xda>
 800180e:	e7ed      	b.n	80017ec <_ZN9SX1280Hal12ReadRegisterEtPht+0xb6>
}
 8001810:	bf00      	nop
 8001812:	371c      	adds	r7, #28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}

08001818 <_ZN9SX1280Hal12ReadRegisterEt>:

uint8_t SX1280Hal::ReadRegister( uint16_t address )
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
    uint8_t data;

    ReadRegister( address, &data, 1 );
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3320      	adds	r3, #32
 800182a:	681c      	ldr	r4, [r3, #0]
 800182c:	f107 020f 	add.w	r2, r7, #15
 8001830:	8879      	ldrh	r1, [r7, #2]
 8001832:	2301      	movs	r3, #1
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	47a0      	blx	r4
    return data;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bd90      	pop	{r4, r7, pc}

08001842 <_ZN9SX1280Hal11WriteBufferEhPhh>:

void SX1280Hal::WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	461a      	mov	r2, r3
 800184e:	460b      	mov	r3, r1
 8001850:	72fb      	strb	r3, [r7, #11]
 8001852:	4613      	mov	r3, r2
 8001854:	72bb      	strb	r3, [r7, #10]
    WaitOnBusy( );
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001860:	4619      	mov	r1, r3
 8001862:	4610      	mov	r0, r2
 8001864:	f002 fc52 	bl	800410c <HAL_GPIO_ReadPin>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	bf14      	ite	ne
 800186e:	2301      	movne	r3, #1
 8001870:	2300      	moveq	r3, #0
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d000      	beq.n	800187a <_ZN9SX1280Hal11WriteBufferEhPhh+0x38>
 8001878:	e7ed      	b.n	8001856 <_ZN9SX1280Hal11WriteBufferEhPhh+0x14>

    if( RadioSpi != NULL )
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187e:	2b00      	cmp	r3, #0
 8001880:	d02d      	beq.n	80018de <_ZN9SX1280Hal11WriteBufferEhPhh+0x9c>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800188c:	2200      	movs	r2, #0
 800188e:	4619      	mov	r1, r3
 8001890:	f002 fc54 	bl	800413c <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_WRITE_BUFFER );
 8001894:	211a      	movs	r1, #26
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 f8a0 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( offset );
 800189c:	7afb      	ldrb	r3, [r7, #11]
 800189e:	4619      	mov	r1, r3
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 f89b 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80018a6:	2300      	movs	r3, #0
 80018a8:	82fb      	strh	r3, [r7, #22]
 80018aa:	7abb      	ldrb	r3, [r7, #10]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	8afa      	ldrh	r2, [r7, #22]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d20b      	bcs.n	80018cc <_ZN9SX1280Hal11WriteBufferEhPhh+0x8a>
        {
            SpiTransmitReceiveByte( buffer[i] );
 80018b4:	8afb      	ldrh	r3, [r7, #22]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 f88c 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80018c4:	8afb      	ldrh	r3, [r7, #22]
 80018c6:	3301      	adds	r3, #1
 80018c8:	82fb      	strh	r3, [r7, #22]
 80018ca:	e7ee      	b.n	80018aa <_ZN9SX1280Hal11WriteBufferEhPhh+0x68>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018d6:	2201      	movs	r2, #1
 80018d8:	4619      	mov	r1, r3
 80018da:	f002 fc2f 	bl	800413c <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80018e8:	4619      	mov	r1, r3
 80018ea:	4610      	mov	r0, r2
 80018ec:	f002 fc0e 	bl	800410c <HAL_GPIO_ReadPin>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	bf14      	ite	ne
 80018f6:	2301      	movne	r3, #1
 80018f8:	2300      	moveq	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d000      	beq.n	8001902 <_ZN9SX1280Hal11WriteBufferEhPhh+0xc0>
 8001900:	e7ed      	b.n	80018de <_ZN9SX1280Hal11WriteBufferEhPhh+0x9c>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_ZN9SX1280Hal10ReadBufferEhPhh>:

void SX1280Hal::ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800190a:	b590      	push	{r4, r7, lr}
 800190c:	b087      	sub	sp, #28
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	461a      	mov	r2, r3
 8001916:	460b      	mov	r3, r1
 8001918:	72fb      	strb	r3, [r7, #11]
 800191a:	4613      	mov	r3, r2
 800191c:	72bb      	strb	r3, [r7, #10]
    WaitOnBusy( );
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001928:	4619      	mov	r1, r3
 800192a:	4610      	mov	r0, r2
 800192c:	f002 fbee 	bl	800410c <HAL_GPIO_ReadPin>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	bf14      	ite	ne
 8001936:	2301      	movne	r3, #1
 8001938:	2300      	moveq	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d000      	beq.n	8001942 <_ZN9SX1280Hal10ReadBufferEhPhh+0x38>
 8001940:	e7ed      	b.n	800191e <_ZN9SX1280Hal10ReadBufferEhPhh+0x14>

    if( RadioSpi != NULL )
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	2b00      	cmp	r3, #0
 8001948:	d032      	beq.n	80019b0 <_ZN9SX1280Hal10ReadBufferEhPhh+0xa6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001954:	2200      	movs	r2, #0
 8001956:	4619      	mov	r1, r3
 8001958:	f002 fbf0 	bl	800413c <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_READ_BUFFER );
 800195c:	211b      	movs	r1, #27
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f83c 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( offset );
 8001964:	7afb      	ldrb	r3, [r7, #11]
 8001966:	4619      	mov	r1, r3
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 f837 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 800196e:	2100      	movs	r1, #0
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f833 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 8001976:	2300      	movs	r3, #0
 8001978:	82fb      	strh	r3, [r7, #22]
 800197a:	7abb      	ldrb	r3, [r7, #10]
 800197c:	b29b      	uxth	r3, r3
 800197e:	8afa      	ldrh	r2, [r7, #22]
 8001980:	429a      	cmp	r2, r3
 8001982:	d20c      	bcs.n	800199e <_ZN9SX1280Hal10ReadBufferEhPhh+0x94>
        {
            buffer[i] = SpiTransmitReceiveByte( 0 );
 8001984:	8afb      	ldrh	r3, [r7, #22]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	18d4      	adds	r4, r2, r3
 800198a:	2100      	movs	r1, #0
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f825 	bl	80019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 8001992:	4603      	mov	r3, r0
 8001994:	7023      	strb	r3, [r4, #0]
        for( uint16_t i = 0; i < size; i++ )
 8001996:	8afb      	ldrh	r3, [r7, #22]
 8001998:	3301      	adds	r3, #1
 800199a:	82fb      	strh	r3, [r7, #22]
 800199c:	e7ed      	b.n	800197a <_ZN9SX1280Hal10ReadBufferEhPhh+0x70>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019a8:	2201      	movs	r2, #1
 80019aa:	4619      	mov	r1, r3
 80019ac:	f002 fbc6 	bl	800413c <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80019ba:	4619      	mov	r1, r3
 80019bc:	4610      	mov	r0, r2
 80019be:	f002 fba5 	bl	800410c <HAL_GPIO_ReadPin>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf14      	ite	ne
 80019c8:	2301      	movne	r3, #1
 80019ca:	2300      	moveq	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d000      	beq.n	80019d4 <_ZN9SX1280Hal10ReadBufferEhPhh+0xca>
 80019d2:	e7ed      	b.n	80019b0 <_ZN9SX1280Hal10ReadBufferEhPhh+0xa6>
}
 80019d4:	bf00      	nop
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}

080019dc <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>:

uint8_t SX1280Hal::SpiTransmitReceiveByte( uint8_t byte )
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	70fb      	strb	r3, [r7, #3]
	//Se for IT ou DMA a função acaba antes de terminar de transmitir
	uint8_t receivedByte;
	HAL_SPI_TransmitReceive(RadioSpi, &byte, &receivedByte, 1, 100);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019ec:	f107 020f 	add.w	r2, r7, #15
 80019f0:	1cf9      	adds	r1, r7, #3
 80019f2:	2364      	movs	r3, #100	; 0x64
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	f005 faaf 	bl	8006f5a <HAL_SPI_TransmitReceive>
	return receivedByte;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_ZN9SX1280Hal20HalInterruptCallbackEv>:

void SX1280Hal::HalInterruptCallback(void){
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
	if(RadioIrqHandler != NULL){
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d107      	bne.n	8001a26 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x20>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x20>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x22>
 8001a26:	2300      	movs	r3, #0
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d019      	beq.n	8001a60 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x5a>
		(this->*RadioIrqHandler)();
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001a32:	1052      	asrs	r2, r2, #1
 8001a34:	1899      	adds	r1, r3, r2
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x42>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	e009      	b.n	8001a5c <_ZN9SX1280Hal20HalInterruptCallbackEv+0x56>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001a4e:	1052      	asrs	r2, r2, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a58:	4413      	add	r3, r2
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	4798      	blx	r3
	}
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_ZN6SX12804InitEv>:
 * \brief Radio hardware registers initialization
 */
const RadioRegisters_t RadioRegsInit[] = RADIO_INIT_REGISTERS_VALUE;

void SX1280::Init( void )
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    Reset( );
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	3308      	adds	r3, #8
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	4798      	blx	r3
    IoIrqInit( dioIrq );
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3334      	adds	r3, #52	; 0x34
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	322c      	adds	r2, #44	; 0x2c
 8001a88:	ca06      	ldmia	r2, {r1, r2}
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	4798      	blx	r3
    Wakeup( );
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3338      	adds	r3, #56	; 0x38
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
    SetRegistersDefault( );
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f804 	bl	8001aa8 <_ZN6SX128019SetRegistersDefaultEv>
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_ZN6SX128019SetRegistersDefaultEv>:

void SX1280::SetRegistersDefault( void )
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
    for( int16_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	81fb      	strh	r3, [r7, #14]
    {
        WriteRegister( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    }
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_ZN6SX128018GetFirmwareVersionEv>:

uint16_t SX1280::GetFirmwareVersion( void )
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3324      	adds	r3, #36	; 0x24
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f240 1153 	movw	r1, #339	; 0x153
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4798      	blx	r3
 8001ad8:	4603      	mov	r3, r0
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	b21c      	sxth	r4, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3324      	adds	r3, #36	; 0x24
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	4798      	blx	r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	4323      	orrs	r3, r4
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	b29b      	uxth	r3, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd90      	pop	{r4, r7, pc}

08001b00 <_ZN6SX12809GetStatusEv>:

RadioStatus_t SX1280::GetStatus( void )
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    uint8_t stat = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
    RadioStatus_t status;

    ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3314      	adds	r3, #20
 8001b12:	681c      	ldr	r4, [r3, #0]
 8001b14:	f107 020f 	add.w	r2, r7, #15
 8001b18:	2301      	movs	r3, #1
 8001b1a:	21c0      	movs	r1, #192	; 0xc0
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	47a0      	blx	r4
    status.Value = stat;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	733b      	strb	r3, [r7, #12]
    return( status );
 8001b24:	7b3b      	ldrb	r3, [r7, #12]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}

08001b2e <_ZN6SX12809GetOpModeEv>:

RadioOperatingModes_t SX1280::GetOpMode( void )
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
    return( OperatingMode );
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>:
    OperatingMode = MODE_SLEEP;
    WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
}

void SX1280::SetStandby( RadioStandbyModes_t standbyConfig )
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
    WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3310      	adds	r3, #16
 8001b5a:	681c      	ldr	r4, [r3, #0]
 8001b5c:	1cfa      	adds	r2, r7, #3
 8001b5e:	2301      	movs	r3, #1
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	47a0      	blx	r4
    if( standbyConfig == STDBY_RC )
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d104      	bne.n	8001b76 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x2e>
    {
        OperatingMode = MODE_STDBY_RC;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8001b74:	e003      	b.n	8001b7e <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x36>
        OperatingMode = MODE_STDBY_XOSC;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2203      	movs	r2, #3
 8001b7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}

08001b86 <_ZN6SX12805SetTxE10TickTime_s>:
    WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SX1280::SetTx( TickTime_t timeout )
{
 8001b86:	b590      	push	{r4, r7, lr}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    buf[0] = timeout.PeriodBase;
 8001b90:	783b      	ldrb	r3, [r7, #0]
 8001b92:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	73bb      	strb	r3, [r7, #14]

    ClearIrqStatus( IRQ_RADIO_ALL );
 8001ba4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 fad0 	bl	800214e <_ZN6SX128014ClearIrqStatusEt>

    // If the radio is doing ranging operations, then apply the specific calls
    // prior to SetTx
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
 8001bae:	2101      	movs	r1, #1
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f86b 	bl	8001c8c <_ZN6SX128013GetPacketTypeEb>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <_ZN6SX12805SetTxE10TickTime_s+0x48>
    {
        SetRangingRole( RADIO_RANGING_ROLE_MASTER );
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 fb41 	bl	8002250 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    }
    WriteCommand( RADIO_SET_TX, buf, 3 );
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3310      	adds	r3, #16
 8001bd4:	681c      	ldr	r4, [r3, #0]
 8001bd6:	f107 020c 	add.w	r2, r7, #12
 8001bda:	2303      	movs	r3, #3
 8001bdc:	2183      	movs	r1, #131	; 0x83
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	47a0      	blx	r4
    OperatingMode = MODE_TX;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2206      	movs	r2, #6
 8001be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd90      	pop	{r4, r7, pc}

08001bf2 <_ZN6SX12805SetRxE10TickTime_s>:

void SX1280::SetRx( TickTime_t timeout )
{
 8001bf2:	b590      	push	{r4, r7, lr}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    buf[0] = timeout.PeriodBase;
 8001bfc:	783b      	ldrb	r3, [r7, #0]
 8001bfe:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	73bb      	strb	r3, [r7, #14]

    ClearIrqStatus( IRQ_RADIO_ALL );
 8001c10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fa9a 	bl	800214e <_ZN6SX128014ClearIrqStatusEt>

    // If the radio is doing ranging operations, then apply the specific calls
    // prior to SetRx
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f835 	bl	8001c8c <_ZN6SX128013GetPacketTypeEb>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <_ZN6SX12805SetRxE10TickTime_s+0x48>
    {
        SetRangingRole( RADIO_RANGING_ROLE_SLAVE );
 8001c32:	2100      	movs	r1, #0
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 fb0b 	bl	8002250 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    }
    WriteCommand( RADIO_SET_RX, buf, 3 );
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3310      	adds	r3, #16
 8001c40:	681c      	ldr	r4, [r3, #0]
 8001c42:	f107 020c 	add.w	r2, r7, #12
 8001c46:	2303      	movs	r3, #3
 8001c48:	2182      	movs	r1, #130	; 0x82
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	47a0      	blx	r4
    OperatingMode = MODE_RX;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2205      	movs	r2, #5
 8001c52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}

08001c5e <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>:
{
    WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX1280::SetPacketType( RadioPacketTypes_t packetType )
{
 8001c5e:	b590      	push	{r4, r7, lr}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	70fb      	strb	r3, [r7, #3]
    // Save packet type internally to avoid questioning the radio
    this->PacketType = packetType;
 8001c6a:	78fa      	ldrb	r2, [r7, #3]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3310      	adds	r3, #16
 8001c78:	681c      	ldr	r4, [r3, #0]
 8001c7a:	1cfa      	adds	r2, r7, #3
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	218a      	movs	r1, #138	; 0x8a
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	47a0      	blx	r4
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd90      	pop	{r4, r7, pc}

08001c8c <_ZN6SX128013GetPacketTypeEb>:

RadioPacketTypes_t SX1280::GetPacketType( bool returnLocalCopy )
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
    RadioPacketTypes_t packetType = PACKET_TYPE_NONE;
 8001c98:	230f      	movs	r3, #15
 8001c9a:	73fb      	strb	r3, [r7, #15]
    if( returnLocalCopy == false )
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d114      	bne.n	8001ccc <_ZN6SX128013GetPacketTypeEb+0x40>
    {
        ReadCommand( RADIO_GET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3314      	adds	r3, #20
 8001ca8:	681c      	ldr	r4, [r3, #0]
 8001caa:	f107 020f 	add.w	r2, r7, #15
 8001cae:	2301      	movs	r3, #1
 8001cb0:	2103      	movs	r1, #3
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	47a0      	blx	r4
        if( this->PacketType != packetType )
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d008      	beq.n	8001cd4 <_ZN6SX128013GetPacketTypeEb+0x48>
        {
            this->PacketType = packetType;
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001cca:	e003      	b.n	8001cd4 <_ZN6SX128013GetPacketTypeEb+0x48>
        }
    }
    else
    {
        packetType = this->PacketType;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001cd2:	73fb      	strb	r3, [r7, #15]
    }
    return packetType;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd90      	pop	{r4, r7, pc}
	...

08001ce0 <_ZN6SX128014SetRfFrequencyEm>:

void SX1280::SetRfFrequency( uint32_t rfFrequency )
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    uint32_t freq = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]

    freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
 8001cee:	6838      	ldr	r0, [r7, #0]
 8001cf0:	f7fe fbac 	bl	800044c <__aeabi_ui2d>
 8001cf4:	a312      	add	r3, pc, #72	; (adr r3, 8001d40 <_ZN6SX128014SetRfFrequencyEm+0x60>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fd4b 	bl	8000794 <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe fe2d 	bl	8000964 <__aeabi_d2uiz>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	0c1b      	lsrs	r3, r3, #16
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq & 0xFF );
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	72bb      	strb	r3, [r7, #10]
    WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3310      	adds	r3, #16
 8001d2a:	681c      	ldr	r4, [r3, #0]
 8001d2c:	f107 0208 	add.w	r2, r7, #8
 8001d30:	2303      	movs	r3, #3
 8001d32:	2186      	movs	r1, #134	; 0x86
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	47a0      	blx	r4
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd90      	pop	{r4, r7, pc}
 8001d40:	00000000 	.word	0x00000000
 8001d44:	4068cba8 	.word	0x4068cba8

08001d48 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>:

void SX1280::SetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	70fb      	strb	r3, [r7, #3]
 8001d54:	4613      	mov	r3, r2
 8001d56:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[2];

    // The power value to send on SPI/UART is in the range [0..31] and the
    // physical output power is in the range [-18..13]dBm
    buf[0] = power + 18;
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	3312      	adds	r3, #18
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8001d60:	78bb      	ldrb	r3, [r7, #2]
 8001d62:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3310      	adds	r3, #16
 8001d6a:	681c      	ldr	r4, [r3, #0]
 8001d6c:	f107 020c 	add.w	r2, r7, #12
 8001d70:	2302      	movs	r3, #2
 8001d72:	218e      	movs	r1, #142	; 0x8e
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	47a0      	blx	r4
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}

08001d80 <_ZN6SX128022SetBufferBaseAddressesEhh>:
    WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
    OperatingMode = MODE_CAD;
}

void SX1280::SetBufferBaseAddresses( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	70fb      	strb	r3, [r7, #3]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8001d94:	78bb      	ldrb	r3, [r7, #2]
 8001d96:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3310      	adds	r3, #16
 8001d9e:	681c      	ldr	r4, [r3, #0]
 8001da0:	f107 020c 	add.w	r2, r7, #12
 8001da4:	2302      	movs	r3, #2
 8001da6:	218f      	movs	r1, #143	; 0x8f
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	47a0      	blx	r4
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}

08001db4 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>:

void SX1280::SetModulationParams( ModulationParams_t *modParams )
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != modParams->PacketType )
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d005      	beq.n	8001dd8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x24>
    {
        this->SetPacketType( modParams->PacketType );
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ff43 	bl	8001c5e <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( modParams->PacketType )
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	d857      	bhi.n	8001e90 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
 8001de0:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x34>)
 8001de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de6:	bf00      	nop
 8001de8:	08001e29 	.word	0x08001e29
 8001dec:	08001e3d 	.word	0x08001e3d
 8001df0:	08001e3d 	.word	0x08001e3d
 8001df4:	08001e5b 	.word	0x08001e5b
 8001df8:	08001e6f 	.word	0x08001e6f
 8001dfc:	08001e91 	.word	0x08001e91
 8001e00:	08001e91 	.word	0x08001e91
 8001e04:	08001e91 	.word	0x08001e91
 8001e08:	08001e91 	.word	0x08001e91
 8001e0c:	08001e91 	.word	0x08001e91
 8001e10:	08001e91 	.word	0x08001e91
 8001e14:	08001e91 	.word	0x08001e91
 8001e18:	08001e91 	.word	0x08001e91
 8001e1c:	08001e91 	.word	0x08001e91
 8001e20:	08001e91 	.word	0x08001e91
 8001e24:	08001e83 	.word	0x08001e83
    {
        case PACKET_TYPE_GFSK:
            buf[0] = modParams->Params.Gfsk.BitrateBandwidth;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	785b      	ldrb	r3, [r3, #1]
 8001e2c:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Gfsk.ModulationIndex;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	789b      	ldrb	r3, [r3, #2]
 8001e32:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Gfsk.ModulationShaping;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	78db      	ldrb	r3, [r3, #3]
 8001e38:	73bb      	strb	r3, [r7, #14]
            break;
 8001e3a:	e029      	b.n	8001e90 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_LORA:
        case PACKET_TYPE_RANGING:
            buf[0] = modParams->Params.LoRa.SpreadingFactor;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	791b      	ldrb	r3, [r3, #4]
 8001e40:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.LoRa.Bandwidth;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	795b      	ldrb	r3, [r3, #5]
 8001e46:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.LoRa.CodingRate;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	799b      	ldrb	r3, [r3, #6]
 8001e4c:	73bb      	strb	r3, [r7, #14]
            this->LoRaBandwidth = modParams->Params.LoRa.Bandwidth;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	795a      	ldrb	r2, [r3, #5]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            break;
 8001e58:	e01a      	b.n	8001e90 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_FLRC:
            buf[0] = modParams->Params.Flrc.BitrateBandwidth;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	79db      	ldrb	r3, [r3, #7]
 8001e5e:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Flrc.CodingRate;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	7a1b      	ldrb	r3, [r3, #8]
 8001e64:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Flrc.ModulationShaping;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	7a5b      	ldrb	r3, [r3, #9]
 8001e6a:	73bb      	strb	r3, [r7, #14]
            break;
 8001e6c:	e010      	b.n	8001e90 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_BLE:
            buf[0] = modParams->Params.Ble.BitrateBandwidth;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	7a9b      	ldrb	r3, [r3, #10]
 8001e72:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Ble.ModulationIndex;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	7adb      	ldrb	r3, [r3, #11]
 8001e78:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Ble.ModulationShaping;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	7b1b      	ldrb	r3, [r3, #12]
 8001e7e:	73bb      	strb	r3, [r7, #14]
            break;
 8001e80:	e006      	b.n	8001e90 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_NONE:
            buf[0] = NULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	733b      	strb	r3, [r7, #12]
            buf[1] = NULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	737b      	strb	r3, [r7, #13]
            buf[2] = NULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73bb      	strb	r3, [r7, #14]
            break;
 8001e8e:	bf00      	nop
    }
    WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3310      	adds	r3, #16
 8001e96:	681c      	ldr	r4, [r3, #0]
 8001e98:	f107 020c 	add.w	r2, r7, #12
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	218b      	movs	r1, #139	; 0x8b
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	47a0      	blx	r4
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd90      	pop	{r4, r7, pc}

08001eac <_ZN6SX128015SetPacketParamsEP14PacketParams_t>:

void SX1280::SetPacketParams( PacketParams_t *packetParams )
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
    uint8_t buf[7];
    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != packetParams->PacketType )
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d005      	beq.n	8001ed0 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x24>
    {
        this->SetPacketType( packetParams->PacketType );
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fec7 	bl	8001c5e <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( packetParams->PacketType )
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	f200 8085 	bhi.w	8001fe4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x34>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001f21 	.word	0x08001f21
 8001ee4:	08001f4d 	.word	0x08001f4d
 8001ee8:	08001f4d 	.word	0x08001f4d
 8001eec:	08001f75 	.word	0x08001f75
 8001ef0:	08001fa1 	.word	0x08001fa1
 8001ef4:	08001fe5 	.word	0x08001fe5
 8001ef8:	08001fe5 	.word	0x08001fe5
 8001efc:	08001fe5 	.word	0x08001fe5
 8001f00:	08001fe5 	.word	0x08001fe5
 8001f04:	08001fe5 	.word	0x08001fe5
 8001f08:	08001fe5 	.word	0x08001fe5
 8001f0c:	08001fe5 	.word	0x08001fe5
 8001f10:	08001fe5 	.word	0x08001fe5
 8001f14:	08001fe5 	.word	0x08001fe5
 8001f18:	08001fe5 	.word	0x08001fe5
 8001f1c:	08001fc7 	.word	0x08001fc7
    {
        case PACKET_TYPE_GFSK:
            buf[0] = packetParams->Params.Gfsk.PreambleLength;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	785b      	ldrb	r3, [r3, #1]
 8001f24:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Gfsk.SyncWordLength;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	789b      	ldrb	r3, [r3, #2]
 8001f2a:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Gfsk.SyncWordMatch;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	78db      	ldrb	r3, [r3, #3]
 8001f30:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Gfsk.HeaderType;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	791b      	ldrb	r3, [r3, #4]
 8001f36:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.Gfsk.PayloadLength;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	795b      	ldrb	r3, [r3, #5]
 8001f3c:	733b      	strb	r3, [r7, #12]
            buf[5] = packetParams->Params.Gfsk.CrcLength;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	799b      	ldrb	r3, [r3, #6]
 8001f42:	737b      	strb	r3, [r7, #13]
            buf[6] = packetParams->Params.Gfsk.Whitening;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	79db      	ldrb	r3, [r3, #7]
 8001f48:	73bb      	strb	r3, [r7, #14]
            break;
 8001f4a:	e04b      	b.n	8001fe4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_LORA:
        case PACKET_TYPE_RANGING:
            buf[0] = packetParams->Params.LoRa.PreambleLength;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	7a1b      	ldrb	r3, [r3, #8]
 8001f50:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.LoRa.HeaderType;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	7a5b      	ldrb	r3, [r3, #9]
 8001f56:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.LoRa.PayloadLength;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	7a9b      	ldrb	r3, [r3, #10]
 8001f5c:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.LoRa.Crc;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	7adb      	ldrb	r3, [r3, #11]
 8001f62:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.LoRa.InvertIQ;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	7b1b      	ldrb	r3, [r3, #12]
 8001f68:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73bb      	strb	r3, [r7, #14]
            break;
 8001f72:	e037      	b.n	8001fe4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_FLRC:
            buf[0] = packetParams->Params.Flrc.PreambleLength;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	7b5b      	ldrb	r3, [r3, #13]
 8001f78:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Flrc.SyncWordLength;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	7b9b      	ldrb	r3, [r3, #14]
 8001f7e:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Flrc.SyncWordMatch;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	7bdb      	ldrb	r3, [r3, #15]
 8001f84:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Flrc.HeaderType;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	7c1b      	ldrb	r3, [r3, #16]
 8001f8a:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.Flrc.PayloadLength;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	7c5b      	ldrb	r3, [r3, #17]
 8001f90:	733b      	strb	r3, [r7, #12]
            buf[5] = packetParams->Params.Flrc.CrcLength;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	7c9b      	ldrb	r3, [r3, #18]
 8001f96:	737b      	strb	r3, [r7, #13]
            buf[6] = packetParams->Params.Flrc.Whitening;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	7cdb      	ldrb	r3, [r3, #19]
 8001f9c:	73bb      	strb	r3, [r7, #14]
            break;
 8001f9e:	e021      	b.n	8001fe4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_BLE:
            buf[0] = packetParams->Params.Ble.ConnectionState;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	7d1b      	ldrb	r3, [r3, #20]
 8001fa4:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Ble.CrcLength;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	7d5b      	ldrb	r3, [r3, #21]
 8001faa:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Ble.BleTestPayload;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	7d9b      	ldrb	r3, [r3, #22]
 8001fb0:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Ble.Whitening;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	7ddb      	ldrb	r3, [r3, #23]
 8001fb6:	72fb      	strb	r3, [r7, #11]
            buf[4] = NULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73bb      	strb	r3, [r7, #14]
            break;
 8001fc4:	e00e      	b.n	8001fe4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_NONE:
            buf[0] = NULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	723b      	strb	r3, [r7, #8]
            buf[1] = NULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	727b      	strb	r3, [r7, #9]
            buf[2] = NULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	72bb      	strb	r3, [r7, #10]
            buf[3] = NULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	72fb      	strb	r3, [r7, #11]
            buf[4] = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73bb      	strb	r3, [r7, #14]
            break;
 8001fe2:	bf00      	nop
    }
    WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3310      	adds	r3, #16
 8001fea:	681c      	ldr	r4, [r3, #0]
 8001fec:	f107 0208 	add.w	r2, r7, #8
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	218c      	movs	r1, #140	; 0x8c
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	47a0      	blx	r4
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}

08002000 <_ZN6SX128017GetRxBufferStatusEPhS0_>:
{
    this->WriteRegister( REG_LR_PREAMBLELENGTH, ( this->ReadRegister( REG_LR_PREAMBLELENGTH ) & MASK_FORCE_PREAMBLELENGTH ) | preambleLength );
}

void SX1280::GetRxBufferStatus( uint8_t *rxPayloadLength, uint8_t *rxStartBufferPointer )
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
    uint8_t status[2];

    ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3314      	adds	r3, #20
 8002012:	681c      	ldr	r4, [r3, #0]
 8002014:	f107 0214 	add.w	r2, r7, #20
 8002018:	2302      	movs	r3, #2
 800201a:	2117      	movs	r1, #23
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	47a0      	blx	r4

    // In case of LORA fixed header, the rxPayloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( this -> GetPacketType( true ) == PACKET_TYPE_LORA ) && ( ReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 8002020:	2101      	movs	r1, #1
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f7ff fe32 	bl	8001c8c <_ZN6SX128013GetPacketTypeEb>
 8002028:	4603      	mov	r3, r0
 800202a:	2b01      	cmp	r3, #1
 800202c:	d10e      	bne.n	800204c <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4c>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3324      	adds	r3, #36	; 0x24
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f640 1103 	movw	r1, #2307	; 0x903
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	4798      	blx	r3
 800203e:	4603      	mov	r3, r0
 8002040:	09db      	lsrs	r3, r3, #7
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4c>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4e>
 800204c:	2300      	movs	r3, #0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00c      	beq.n	800206c <_ZN6SX128017GetRxBufferStatusEPhS0_+0x6c>
    {
        *rxPayloadLength = ReadRegister( REG_LR_PAYLOADLENGTH );
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3324      	adds	r3, #36	; 0x24
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f640 1101 	movw	r1, #2305	; 0x901
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	4798      	blx	r3
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e014      	b.n	8002096 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x96>
    }
    else if( this -> GetPacketType( true ) == PACKET_TYPE_BLE )
 800206c:	2101      	movs	r1, #1
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f7ff fe0c 	bl	8001c8c <_ZN6SX128013GetPacketTypeEb>
 8002074:	4603      	mov	r3, r0
 8002076:	2b04      	cmp	r3, #4
 8002078:	bf0c      	ite	eq
 800207a:	2301      	moveq	r3, #1
 800207c:	2300      	movne	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x90>
    {
        // In the case of BLE, the size returned in status[0] do not include the 2-byte length PDU header
        // so it is added there
        *rxPayloadLength = status[0] + 2;
 8002084:	7d3b      	ldrb	r3, [r7, #20]
 8002086:	3302      	adds	r3, #2
 8002088:	b2da      	uxtb	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e002      	b.n	8002096 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x96>
    }
    else
    {
        *rxPayloadLength = status[0];
 8002090:	7d3a      	ldrb	r2, [r7, #20]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	701a      	strb	r2, [r3, #0]
    }

    *rxStartBufferPointer = status[1];
 8002096:	7d7a      	ldrb	r2, [r7, #21]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	701a      	strb	r2, [r3, #0]
}
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd90      	pop	{r4, r7, pc}

080020a4 <_ZN6SX128015SetDioIrqParamsEtttt>:

    return ( int8_t ) ( -raw / 2 );
}

void SX1280::SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	817b      	strh	r3, [r7, #10]
 80020b6:	460b      	mov	r3, r1
 80020b8:	813b      	strh	r3, [r7, #8]
 80020ba:	4613      	mov	r3, r2
 80020bc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80020be:	897b      	ldrh	r3, [r7, #10]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	743b      	strb	r3, [r7, #16]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80020c8:	897b      	ldrh	r3, [r7, #10]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80020ce:	893b      	ldrh	r3, [r7, #8]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80020d8:	893b      	ldrh	r3, [r7, #8]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80020ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	75bb      	strb	r3, [r7, #22]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80020f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	75fb      	strb	r3, [r7, #23]
    WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3310      	adds	r3, #16
 8002104:	681c      	ldr	r4, [r3, #0]
 8002106:	f107 0210 	add.w	r2, r7, #16
 800210a:	2308      	movs	r3, #8
 800210c:	218d      	movs	r1, #141	; 0x8d
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	47a0      	blx	r4
}
 8002112:	bf00      	nop
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd90      	pop	{r4, r7, pc}

0800211a <_ZN6SX128012GetIrqStatusEv>:

uint16_t SX1280::GetIrqStatus( void )
{
 800211a:	b590      	push	{r4, r7, lr}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
    uint8_t irqStatus[2];
    ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3314      	adds	r3, #20
 8002128:	681c      	ldr	r4, [r3, #0]
 800212a:	f107 020c 	add.w	r2, r7, #12
 800212e:	2302      	movs	r3, #2
 8002130:	2115      	movs	r1, #21
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	47a0      	blx	r4
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 8002136:	7b3b      	ldrb	r3, [r7, #12]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	b21a      	sxth	r2, r3
 800213c:	7b7b      	ldrb	r3, [r7, #13]
 800213e:	b21b      	sxth	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b21b      	sxth	r3, r3
 8002144:	b29b      	uxth	r3, r3
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bd90      	pop	{r4, r7, pc}

0800214e <_ZN6SX128014ClearIrqStatusEt>:

void SX1280::ClearIrqStatus( uint16_t irqMask )
{
 800214e:	b590      	push	{r4, r7, lr}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	b29b      	uxth	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3310      	adds	r3, #16
 8002170:	681c      	ldr	r4, [r3, #0]
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	2302      	movs	r3, #2
 8002178:	2197      	movs	r1, #151	; 0x97
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	47a0      	blx	r4
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bd90      	pop	{r4, r7, pc}

08002186 <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>:
                  ( calibParam.RC64KEnable );
    WriteCommand( RADIO_CALIBRATE, &cal, 1 );
}

void SX1280::SetRegulatorMode( RadioRegulatorModes_t mode )
{
 8002186:	b590      	push	{r4, r7, lr}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	70fb      	strb	r3, [r7, #3]
    WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3310      	adds	r3, #16
 8002198:	681c      	ldr	r4, [r3, #0]
 800219a:	1cfa      	adds	r2, r7, #3
 800219c:	2301      	movs	r3, #1
 800219e:	2196      	movs	r1, #150	; 0x96
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	47a0      	blx	r4
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd90      	pop	{r4, r7, pc}

080021ac <_ZN6SX128010SetPayloadEPhhh>:
{
    WriteCommand( RADIO_SET_LONGPREAMBLE, ( uint8_t * )&enable, 1 );
}

void SX1280::SetPayload( uint8_t *buffer, uint8_t size, uint8_t offset )
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	4611      	mov	r1, r2
 80021b8:	461a      	mov	r2, r3
 80021ba:	460b      	mov	r3, r1
 80021bc:	71fb      	strb	r3, [r7, #7]
 80021be:	4613      	mov	r3, r2
 80021c0:	71bb      	strb	r3, [r7, #6]
    WriteBuffer( offset, buffer, size );
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3328      	adds	r3, #40	; 0x28
 80021c8:	681c      	ldr	r4, [r3, #0]
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	79b9      	ldrb	r1, [r7, #6]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	47a0      	blx	r4
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd90      	pop	{r4, r7, pc}

080021dc <_ZN6SX128010GetPayloadEPhS0_h>:

uint8_t SX1280::GetPayload( uint8_t *buffer, uint8_t *size , uint8_t maxSize )
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	70fb      	strb	r3, [r7, #3]
    uint8_t offset;

    GetRxBufferStatus( size, &offset );
 80021ea:	f107 0317 	add.w	r3, r7, #23
 80021ee:	461a      	mov	r2, r3
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff ff04 	bl	8002000 <_ZN6SX128017GetRxBufferStatusEPhS0_>
    if( *size > maxSize )
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d201      	bcs.n	8002206 <_ZN6SX128010GetPayloadEPhS0_h+0x2a>
    {
        return 1;
 8002202:	2301      	movs	r3, #1
 8002204:	e00a      	b.n	800221c <_ZN6SX128010GetPayloadEPhS0_h+0x40>
    }
    ReadBuffer( offset, buffer, *size );
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	332c      	adds	r3, #44	; 0x2c
 800220c:	681c      	ldr	r4, [r3, #0]
 800220e:	7df9      	ldrb	r1, [r7, #23]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	47a0      	blx	r4
    return 0;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd90      	pop	{r4, r7, pc}

08002224 <_ZN6SX128011SendPayloadEPhh10TickTime_sh>:

void SX1280::SendPayload( uint8_t *payload, uint8_t size, TickTime_t timeout, uint8_t offset )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	71fb      	strb	r3, [r7, #7]
    SetPayload( payload, size, offset );
 8002234:	7e3b      	ldrb	r3, [r7, #24]
 8002236:	79fa      	ldrb	r2, [r7, #7]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7ff ffb6 	bl	80021ac <_ZN6SX128010SetPayloadEPhhh>
    SetTx( timeout );
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f7ff fc9f 	bl	8001b86 <_ZN6SX12805SetTxE10TickTime_s>
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>:
    // Silently set 8 as minimum value
    WriteRegister( REG_LR_RANGINGFILTERWINDOWSIZE, ( num < DEFAULT_RANGING_FILTER_SIZE ) ? DEFAULT_RANGING_FILTER_SIZE : num );
}

void SX1280::SetRangingRole( RadioRangingRoles_t role )
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[1];

    buf[0] = role;
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	733b      	strb	r3, [r7, #12]
    WriteCommand( RADIO_SET_RANGING_ROLE, &buf[0], 1 );
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3310      	adds	r3, #16
 8002266:	681c      	ldr	r4, [r3, #0]
 8002268:	f107 020c 	add.w	r2, r7, #12
 800226c:	2301      	movs	r3, #1
 800226e:	21a3      	movs	r1, #163	; 0xa3
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	47a0      	blx	r4
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bd90      	pop	{r4, r7, pc}

0800227c <_ZN6SX128014SetPollingModeEv>:

    return efeHz;
}

void SX1280::SetPollingMode( void )
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    this->PollingMode = true;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_ZN6SX12808OnDioIrqEv>:
{
    this->PollingMode = false;
}

void SX1280::OnDioIrq( void )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
    /*
     * When polling mode is activated, it is up to the application to call
     * ProcessIrqs( ). Otherwise, the driver automatically calls ProcessIrqs( )
     * on radio interrupt.
     */
    if( this->PollingMode == true )
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d104      	bne.n	80022b4 <_ZN6SX12808OnDioIrqEv+0x1c>
    {
        this->IrqState = true;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    }
    else
    {
        this->ProcessIrqs( );
    }
}
 80022b2:	e002      	b.n	80022ba <_ZN6SX12808OnDioIrqEv+0x22>
        this->ProcessIrqs( );
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f805 	bl	80022c4 <_ZN6SX128011ProcessIrqsEv>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <_ZN6SX128011ProcessIrqsEv>:

void SX1280::ProcessIrqs( void )
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
    RadioPacketTypes_t packetType = PACKET_TYPE_NONE;
 80022cc:	230f      	movs	r3, #15
 80022ce:	73fb      	strb	r3, [r7, #15]

    if( this->PollingMode == true )
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10d      	bne.n	80022f6 <_ZN6SX128011ProcessIrqsEv+0x32>
    {
        if( this->IrqState == true )
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	f040 81c1 	bne.w	8002668 <_ZN6SX128011ProcessIrqsEv+0x3a4>
  __ASM volatile ("cpsid i" : : : "memory");
 80022e6:	b672      	cpsid	i
}
 80022e8:	bf00      	nop
        {
            __disable_irq( );
            this->IrqState = false;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  __ASM volatile ("cpsie i" : : : "memory");
 80022f2:	b662      	cpsie	i
}
 80022f4:	bf00      	nop
        {
            return;
        }
    }

    packetType = GetPacketType( true );
 80022f6:	2101      	movs	r1, #1
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff fcc7 	bl	8001c8c <_ZN6SX128013GetPacketTypeEb>
 80022fe:	4603      	mov	r3, r0
 8002300:	73fb      	strb	r3, [r7, #15]
    uint16_t irqRegs = GetIrqStatus( );
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ff09 	bl	800211a <_ZN6SX128012GetIrqStatusEv>
 8002308:	4603      	mov	r3, r0
 800230a:	81bb      	strh	r3, [r7, #12]
    ClearIrqStatus( IRQ_RADIO_ALL );
 800230c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff1c 	bl	800214e <_ZN6SX128014ClearIrqStatusEt>
    }
    TEST_PIN_1 = 0;
    TEST_PIN_2 = 0;
#endif

    switch( packetType )
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	2b04      	cmp	r3, #4
 800231a:	f200 81a7 	bhi.w	800266c <_ZN6SX128011ProcessIrqsEv+0x3a8>
 800231e:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <_ZN6SX128011ProcessIrqsEv+0x60>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002339 	.word	0x08002339
 8002328:	08002437 	.word	0x08002437
 800232c:	0800257f 	.word	0x0800257f
 8002330:	08002339 	.word	0x08002339
 8002334:	08002339 	.word	0x08002339
    {
        case PACKET_TYPE_GFSK:
        case PACKET_TYPE_FLRC:
        case PACKET_TYPE_BLE:
            switch( OperatingMode )
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800233e:	2b05      	cmp	r3, #5
 8002340:	d002      	beq.n	8002348 <_ZN6SX128011ProcessIrqsEv+0x84>
 8002342:	2b06      	cmp	r3, #6
 8002344:	d05a      	beq.n	80023fc <_ZN6SX128011ProcessIrqsEv+0x138>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 8002346:	e075      	b.n	8002434 <_ZN6SX128011ProcessIrqsEv+0x170>
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8002348:	89bb      	ldrh	r3, [r7, #12]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d022      	beq.n	8002398 <_ZN6SX128011ProcessIrqsEv+0xd4>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 8002352:	89bb      	ldrh	r3, [r7, #12]
 8002354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <_ZN6SX128011ProcessIrqsEv+0xaa>
                            if( rxError != NULL )
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d019      	beq.n	8002398 <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxError( IRQ_CRC_ERROR_CODE );
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	2002      	movs	r0, #2
 800236a:	4798      	blx	r3
 800236c:	e014      	b.n	8002398 <_ZN6SX128011ProcessIrqsEv+0xd4>
                        else if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
 800236e:	89bb      	ldrh	r3, [r7, #12]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <_ZN6SX128011ProcessIrqsEv+0xc6>
                            if( rxError != NULL )
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00b      	beq.n	8002398 <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxError( IRQ_SYNCWORD_ERROR_CODE );
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2001      	movs	r0, #1
 8002386:	4798      	blx	r3
 8002388:	e006      	b.n	8002398 <_ZN6SX128011ProcessIrqsEv+0xd4>
                            if( rxDone != NULL )
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxDone( );
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4798      	blx	r3
                    if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
 8002398:	89bb      	ldrh	r3, [r7, #12]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <_ZN6SX128011ProcessIrqsEv+0xec>
                        if( rxSyncWordDone != NULL )
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <_ZN6SX128011ProcessIrqsEv+0xec>
                            rxSyncWordDone( );
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	4798      	blx	r3
                    if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
 80023b0:	89bb      	ldrh	r3, [r7, #12]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d007      	beq.n	80023ca <_ZN6SX128011ProcessIrqsEv+0x106>
                        if( rxError != NULL )
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <_ZN6SX128011ProcessIrqsEv+0x106>
                            rxError( IRQ_SYNCWORD_ERROR_CODE );
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	2001      	movs	r0, #1
 80023c8:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80023ca:	89bb      	ldrh	r3, [r7, #12]
 80023cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <_ZN6SX128011ProcessIrqsEv+0x11e>
                        if( rxTimeout != NULL )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <_ZN6SX128011ProcessIrqsEv+0x11e>
                            rxTimeout( );
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	4798      	blx	r3
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80023e2:	89bb      	ldrh	r3, [r7, #12]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <_ZN6SX128011ProcessIrqsEv+0x16a>
                        if( txDone != NULL )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01c      	beq.n	800242e <_ZN6SX128011ProcessIrqsEv+0x16a>
                            txDone( );
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4798      	blx	r3
                    break;
 80023fa:	e018      	b.n	800242e <_ZN6SX128011ProcessIrqsEv+0x16a>
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80023fc:	89bb      	ldrh	r3, [r7, #12]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <_ZN6SX128011ProcessIrqsEv+0x150>
                        if( txDone != NULL )
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <_ZN6SX128011ProcessIrqsEv+0x150>
                            txDone( );
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002414:	89bb      	ldrh	r3, [r7, #12]
 8002416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <_ZN6SX128011ProcessIrqsEv+0x16e>
                        if( txTimeout != NULL )
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <_ZN6SX128011ProcessIrqsEv+0x16e>
                            txTimeout( );
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	4798      	blx	r3
                    break;
 800242c:	e001      	b.n	8002432 <_ZN6SX128011ProcessIrqsEv+0x16e>
                    break;
 800242e:	bf00      	nop
 8002430:	e11d      	b.n	800266e <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 8002432:	bf00      	nop
            }
            break;
 8002434:	e11b      	b.n	800266e <_ZN6SX128011ProcessIrqsEv+0x3aa>
        case PACKET_TYPE_LORA:
            switch( OperatingMode )
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800243c:	2b07      	cmp	r3, #7
 800243e:	d06d      	beq.n	800251c <_ZN6SX128011ProcessIrqsEv+0x258>
 8002440:	2b07      	cmp	r3, #7
 8002442:	f300 8094 	bgt.w	800256e <_ZN6SX128011ProcessIrqsEv+0x2aa>
 8002446:	2b05      	cmp	r3, #5
 8002448:	d002      	beq.n	8002450 <_ZN6SX128011ProcessIrqsEv+0x18c>
 800244a:	2b06      	cmp	r3, #6
 800244c:	d04d      	beq.n	80024ea <_ZN6SX128011ProcessIrqsEv+0x226>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 800244e:	e08e      	b.n	800256e <_ZN6SX128011ProcessIrqsEv+0x2aa>
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8002450:	89bb      	ldrh	r3, [r7, #12]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d014      	beq.n	8002484 <_ZN6SX128011ProcessIrqsEv+0x1c0>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 800245a:	89bb      	ldrh	r3, [r7, #12]
 800245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <_ZN6SX128011ProcessIrqsEv+0x1b2>
                            if( rxError != NULL )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00b      	beq.n	8002484 <_ZN6SX128011ProcessIrqsEv+0x1c0>
                                rxError( IRQ_CRC_ERROR_CODE );
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	2002      	movs	r0, #2
 8002472:	4798      	blx	r3
 8002474:	e006      	b.n	8002484 <_ZN6SX128011ProcessIrqsEv+0x1c0>
                            if( rxDone != NULL )
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <_ZN6SX128011ProcessIrqsEv+0x1c0>
                                rxDone( );
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 8002484:	89bb      	ldrh	r3, [r7, #12]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <_ZN6SX128011ProcessIrqsEv+0x1d8>
                        if( rxHeaderDone != NULL )
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <_ZN6SX128011ProcessIrqsEv+0x1d8>
                            rxHeaderDone( );
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 800249c:	89bb      	ldrh	r3, [r7, #12]
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <_ZN6SX128011ProcessIrqsEv+0x1f2>
                        if( rxError != NULL )
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <_ZN6SX128011ProcessIrqsEv+0x1f2>
                            rxError( IRQ_HEADER_ERROR_CODE );
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	2000      	movs	r0, #0
 80024b4:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80024b6:	89bb      	ldrh	r3, [r7, #12]
 80024b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d006      	beq.n	80024ce <_ZN6SX128011ProcessIrqsEv+0x20a>
                        if( rxTimeout != NULL )
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <_ZN6SX128011ProcessIrqsEv+0x20a>
                            rxTimeout( );
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
 80024ce:	89bb      	ldrh	r3, [r7, #12]
 80024d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d04c      	beq.n	8002572 <_ZN6SX128011ProcessIrqsEv+0x2ae>
                        if( rxError != NULL )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d048      	beq.n	8002572 <_ZN6SX128011ProcessIrqsEv+0x2ae>
                            rxError( IRQ_RANGING_ON_LORA_ERROR_CODE );
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2003      	movs	r0, #3
 80024e6:	4798      	blx	r3
                    break;
 80024e8:	e043      	b.n	8002572 <_ZN6SX128011ProcessIrqsEv+0x2ae>
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80024ea:	89bb      	ldrh	r3, [r7, #12]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d006      	beq.n	8002502 <_ZN6SX128011ProcessIrqsEv+0x23e>
                        if( txDone != NULL )
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <_ZN6SX128011ProcessIrqsEv+0x23e>
                            txDone( );
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002502:	89bb      	ldrh	r3, [r7, #12]
 8002504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d034      	beq.n	8002576 <_ZN6SX128011ProcessIrqsEv+0x2b2>
                        if( txTimeout != NULL )
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d030      	beq.n	8002576 <_ZN6SX128011ProcessIrqsEv+0x2b2>
                            txTimeout( );
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	4798      	blx	r3
                    break;
 800251a:	e02c      	b.n	8002576 <_ZN6SX128011ProcessIrqsEv+0x2b2>
                    if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 800251c:	89bb      	ldrh	r3, [r7, #12]
 800251e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <_ZN6SX128011ProcessIrqsEv+0x290>
                        if( ( irqRegs & IRQ_CAD_DETECTED ) == IRQ_CAD_DETECTED )
 8002526:	89bb      	ldrh	r3, [r7, #12]
 8002528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <_ZN6SX128011ProcessIrqsEv+0x27e>
                            if( cadDone != NULL )
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <_ZN6SX128011ProcessIrqsEv+0x2b6>
                                cadDone( true );
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	2001      	movs	r0, #1
 800253e:	4798      	blx	r3
                    break;
 8002540:	e01b      	b.n	800257a <_ZN6SX128011ProcessIrqsEv+0x2b6>
                            if( cadDone != NULL )
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2b00      	cmp	r3, #0
 8002548:	d017      	beq.n	800257a <_ZN6SX128011ProcessIrqsEv+0x2b6>
                                cadDone( false );
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	2000      	movs	r0, #0
 8002550:	4798      	blx	r3
                    break;
 8002552:	e012      	b.n	800257a <_ZN6SX128011ProcessIrqsEv+0x2b6>
                    else if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002554:	89bb      	ldrh	r3, [r7, #12]
 8002556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <_ZN6SX128011ProcessIrqsEv+0x2b6>
                        if( rxTimeout != NULL )
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d009      	beq.n	800257a <_ZN6SX128011ProcessIrqsEv+0x2b6>
                            rxTimeout( );
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	4798      	blx	r3
                    break;
 800256c:	e005      	b.n	800257a <_ZN6SX128011ProcessIrqsEv+0x2b6>
                    break;
 800256e:	bf00      	nop
 8002570:	e07d      	b.n	800266e <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 8002572:	bf00      	nop
 8002574:	e07b      	b.n	800266e <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 8002576:	bf00      	nop
 8002578:	e079      	b.n	800266e <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 800257a:	bf00      	nop
            }
            break;
 800257c:	e077      	b.n	800266e <_ZN6SX128011ProcessIrqsEv+0x3aa>
        case PACKET_TYPE_RANGING:
            switch( OperatingMode )
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002584:	2b05      	cmp	r3, #5
 8002586:	d002      	beq.n	800258e <_ZN6SX128011ProcessIrqsEv+0x2ca>
 8002588:	2b06      	cmp	r3, #6
 800258a:	d04e      	beq.n	800262a <_ZN6SX128011ProcessIrqsEv+0x366>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 800258c:	e06b      	b.n	8002666 <_ZN6SX128011ProcessIrqsEv+0x3a2>
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
 800258e:	89bb      	ldrh	r3, [r7, #12]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <_ZN6SX128011ProcessIrqsEv+0x2e4>
                        if( rangingDone != NULL )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <_ZN6SX128011ProcessIrqsEv+0x2e4>
                            rangingDone( IRQ_RANGING_SLAVE_ERROR_CODE );
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	2000      	movs	r0, #0
 80025a6:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_VALID ) == IRQ_RANGING_SLAVE_REQUEST_VALID )
 80025a8:	89bb      	ldrh	r3, [r7, #12]
 80025aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <_ZN6SX128011ProcessIrqsEv+0x2fe>
                        if( rangingDone != NULL )
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <_ZN6SX128011ProcessIrqsEv+0x2fe>
                            rangingDone( IRQ_RANGING_SLAVE_VALID_CODE );
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	2001      	movs	r0, #1
 80025c0:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_RESPONSE_DONE ) == IRQ_RANGING_SLAVE_RESPONSE_DONE )
 80025c2:	89bb      	ldrh	r3, [r7, #12]
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <_ZN6SX128011ProcessIrqsEv+0x318>
                        if( rangingDone != NULL )
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <_ZN6SX128011ProcessIrqsEv+0x318>
                            rangingDone( IRQ_RANGING_SLAVE_VALID_CODE );
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	2001      	movs	r0, #1
 80025da:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80025dc:	89bb      	ldrh	r3, [r7, #12]
 80025de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <_ZN6SX128011ProcessIrqsEv+0x332>
                        if( rangingDone != NULL )
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <_ZN6SX128011ProcessIrqsEv+0x332>
                            rangingDone( IRQ_RANGING_SLAVE_ERROR_CODE );
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	2000      	movs	r0, #0
 80025f4:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 80025f6:	89bb      	ldrh	r3, [r7, #12]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <_ZN6SX128011ProcessIrqsEv+0x34a>
                        if( rxHeaderDone != NULL )
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <_ZN6SX128011ProcessIrqsEv+0x34a>
                            rxHeaderDone( );
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 800260e:	89bb      	ldrh	r3, [r7, #12]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d023      	beq.n	8002660 <_ZN6SX128011ProcessIrqsEv+0x39c>
                        if( rxError != NULL )
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01f      	beq.n	8002660 <_ZN6SX128011ProcessIrqsEv+0x39c>
                            rxError( IRQ_HEADER_ERROR_CODE );
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2000      	movs	r0, #0
 8002626:	4798      	blx	r3
                    break;
 8002628:	e01a      	b.n	8002660 <_ZN6SX128011ProcessIrqsEv+0x39c>
                    if( ( irqRegs & IRQ_RANGING_MASTER_TIMEOUT ) == IRQ_RANGING_MASTER_TIMEOUT )
 800262a:	89bb      	ldrh	r3, [r7, #12]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <_ZN6SX128011ProcessIrqsEv+0x380>
                        if( rangingDone != NULL )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <_ZN6SX128011ProcessIrqsEv+0x380>
                            rangingDone( IRQ_RANGING_MASTER_ERROR_CODE );
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	2002      	movs	r0, #2
 8002642:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_MASTER_RESULT_VALID ) == IRQ_RANGING_MASTER_RESULT_VALID )
 8002644:	89bb      	ldrh	r3, [r7, #12]
 8002646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <_ZN6SX128011ProcessIrqsEv+0x3a0>
                        if( rangingDone != NULL )
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <_ZN6SX128011ProcessIrqsEv+0x3a0>
                            rangingDone( IRQ_RANGING_MASTER_VALID_CODE );
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	2003      	movs	r0, #3
 800265c:	4798      	blx	r3
                    break;
 800265e:	e001      	b.n	8002664 <_ZN6SX128011ProcessIrqsEv+0x3a0>
                    break;
 8002660:	bf00      	nop
 8002662:	e004      	b.n	800266e <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 8002664:	bf00      	nop
            }
            break;
 8002666:	e002      	b.n	800266e <_ZN6SX128011ProcessIrqsEv+0x3aa>
            return;
 8002668:	bf00      	nop
 800266a:	e000      	b.n	800266e <_ZN6SX128011ProcessIrqsEv+0x3aa>
        default:
            // Unexpected IRQ: silently returns
            break;
 800266c:	bf00      	nop
    }
}
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002678:	f000 fe88 	bl	800338c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800267c:	f000 f816 	bl	80026ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002680:	f000 f9d8 	bl	8002a34 <MX_GPIO_Init>
  MX_DMA_Init();
 8002684:	f000 f9a6 	bl	80029d4 <MX_DMA_Init>
  MX_I2C1_Init();
 8002688:	f000 f87a 	bl	8002780 <MX_I2C1_Init>
  MX_I2S3_Init();
 800268c:	f000 f8a6 	bl	80027dc <MX_I2S3_Init>
  MX_SPI1_Init();
 8002690:	f000 f8d4 	bl	800283c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8002694:	f009 fc78 	bl	800bf88 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8002698:	f000 f972 	bl	8002980 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800269c:	f000 f93a 	bl	8002914 <MX_TIM6_Init>
  MX_SPI2_Init();
 80026a0:	f000 f902 	bl	80028a8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  start();
 80026a4:	f7fe fcda 	bl	800105c <start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <main+0x34>
	...

080026ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b094      	sub	sp, #80	; 0x50
 80026b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026b2:	f107 0320 	add.w	r3, r7, #32
 80026b6:	2230      	movs	r2, #48	; 0x30
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f00a f9ec 	bl	800ca98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c0:	f107 030c 	add.w	r3, r7, #12
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <SystemClock_Config+0xcc>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	4a27      	ldr	r2, [pc, #156]	; (8002778 <SystemClock_Config+0xcc>)
 80026da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026de:	6413      	str	r3, [r2, #64]	; 0x40
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <SystemClock_Config+0xcc>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ec:	2300      	movs	r3, #0
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <SystemClock_Config+0xd0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a21      	ldr	r2, [pc, #132]	; (800277c <SystemClock_Config+0xd0>)
 80026f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <SystemClock_Config+0xd0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002708:	2301      	movs	r3, #1
 800270a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800270c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002712:	2302      	movs	r3, #2
 8002714:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800271c:	2308      	movs	r3, #8
 800271e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002720:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002726:	2302      	movs	r3, #2
 8002728:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800272a:	2307      	movs	r3, #7
 800272c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800272e:	f107 0320 	add.w	r3, r7, #32
 8002732:	4618      	mov	r0, r3
 8002734:	f003 fdb0 	bl	8006298 <HAL_RCC_OscConfig>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800273e:	f000 fad5 	bl	8002cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002742:	230f      	movs	r3, #15
 8002744:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002746:	2302      	movs	r3, #2
 8002748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800274e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800275a:	f107 030c 	add.w	r3, r7, #12
 800275e:	2105      	movs	r1, #5
 8002760:	4618      	mov	r0, r3
 8002762:	f004 f811 	bl	8006788 <HAL_RCC_ClockConfig>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800276c:	f000 fabe 	bl	8002cec <Error_Handler>
  }
}
 8002770:	bf00      	nop
 8002772:	3750      	adds	r7, #80	; 0x50
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	40007000 	.word	0x40007000

08002780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <MX_I2C1_Init+0x50>)
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <MX_I2C1_Init+0x54>)
 8002788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <MX_I2C1_Init+0x50>)
 800278c:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <MX_I2C1_Init+0x58>)
 800278e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <MX_I2C1_Init+0x50>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <MX_I2C1_Init+0x50>)
 8002798:	2200      	movs	r2, #0
 800279a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <MX_I2C1_Init+0x50>)
 800279e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <MX_I2C1_Init+0x50>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <MX_I2C1_Init+0x50>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <MX_I2C1_Init+0x50>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <MX_I2C1_Init+0x50>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027bc:	4804      	ldr	r0, [pc, #16]	; (80027d0 <MX_I2C1_Init+0x50>)
 80027be:	f001 fd09 	bl	80041d4 <HAL_I2C_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027c8:	f000 fa90 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000380 	.word	0x20000380
 80027d4:	40005400 	.word	0x40005400
 80027d8:	000186a0 	.word	0x000186a0

080027dc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <MX_I2S3_Init+0x54>)
 80027e2:	4a14      	ldr	r2, [pc, #80]	; (8002834 <MX_I2S3_Init+0x58>)
 80027e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <MX_I2S3_Init+0x54>)
 80027e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <MX_I2S3_Init+0x54>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <MX_I2S3_Init+0x54>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <MX_I2S3_Init+0x54>)
 80027fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002800:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <MX_I2S3_Init+0x54>)
 8002804:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <MX_I2S3_Init+0x5c>)
 8002806:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <MX_I2S3_Init+0x54>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800280e:	4b08      	ldr	r3, [pc, #32]	; (8002830 <MX_I2S3_Init+0x54>)
 8002810:	2200      	movs	r2, #0
 8002812:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <MX_I2S3_Init+0x54>)
 8002816:	2200      	movs	r2, #0
 8002818:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800281a:	4805      	ldr	r0, [pc, #20]	; (8002830 <MX_I2S3_Init+0x54>)
 800281c:	f001 fe1e 	bl	800445c <HAL_I2S_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002826:	f000 fa61 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	200003d4 	.word	0x200003d4
 8002834:	40003c00 	.word	0x40003c00
 8002838:	00017700 	.word	0x00017700

0800283c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002840:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002842:	4a18      	ldr	r2, [pc, #96]	; (80028a4 <MX_SPI1_Init+0x68>)
 8002844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002846:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800284c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_SPI1_Init+0x64>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002862:	2200      	movs	r2, #0
 8002864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002870:	2200      	movs	r2, #0
 8002872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002876:	2200      	movs	r2, #0
 8002878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <MX_SPI1_Init+0x64>)
 800287c:	2200      	movs	r2, #0
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002880:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002882:	2200      	movs	r2, #0
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002888:	220a      	movs	r2, #10
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800288c:	4804      	ldr	r0, [pc, #16]	; (80028a0 <MX_SPI1_Init+0x64>)
 800288e:	f004 fadb 	bl	8006e48 <HAL_SPI_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002898:	f000 fa28 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	2000041c 	.word	0x2000041c
 80028a4:	40013000 	.word	0x40013000

080028a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <MX_SPI2_Init+0x64>)
 80028ae:	4a18      	ldr	r2, [pc, #96]	; (8002910 <MX_SPI2_Init+0x68>)
 80028b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <MX_SPI2_Init+0x64>)
 80028b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <MX_SPI2_Init+0x64>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <MX_SPI2_Init+0x64>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_SPI2_Init+0x64>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <MX_SPI2_Init+0x64>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <MX_SPI2_Init+0x64>)
 80028d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80028da:	4b0c      	ldr	r3, [pc, #48]	; (800290c <MX_SPI2_Init+0x64>)
 80028dc:	2228      	movs	r2, #40	; 0x28
 80028de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <MX_SPI2_Init+0x64>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <MX_SPI2_Init+0x64>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <MX_SPI2_Init+0x64>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <MX_SPI2_Init+0x64>)
 80028f4:	220a      	movs	r2, #10
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028f8:	4804      	ldr	r0, [pc, #16]	; (800290c <MX_SPI2_Init+0x64>)
 80028fa:	f004 faa5 	bl	8006e48 <HAL_SPI_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002904:	f000 f9f2 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000474 	.word	0x20000474
 8002910:	40003800 	.word	0x40003800

08002914 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291a:	463b      	mov	r3, r7
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <MX_TIM6_Init+0x64>)
 8002924:	4a15      	ldr	r2, [pc, #84]	; (800297c <MX_TIM6_Init+0x68>)
 8002926:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 167;
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <MX_TIM6_Init+0x64>)
 800292a:	22a7      	movs	r2, #167	; 0xa7
 800292c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292e:	4b12      	ldr	r3, [pc, #72]	; (8002978 <MX_TIM6_Init+0x64>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <MX_TIM6_Init+0x64>)
 8002936:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800293a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <MX_TIM6_Init+0x64>)
 800293e:	2200      	movs	r2, #0
 8002940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <MX_TIM6_Init+0x64>)
 8002944:	f004 fe94 	bl	8007670 <HAL_TIM_Base_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800294e:	f000 f9cd 	bl	8002cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800295a:	463b      	mov	r3, r7
 800295c:	4619      	mov	r1, r3
 800295e:	4806      	ldr	r0, [pc, #24]	; (8002978 <MX_TIM6_Init+0x64>)
 8002960:	f004 ff76 	bl	8007850 <HAL_TIMEx_MasterConfigSynchronization>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800296a:	f000 f9bf 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	2000058c 	.word	0x2000058c
 800297c:	40001000 	.word	0x40001000

08002980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <MX_USART2_UART_Init+0x4c>)
 8002986:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <MX_USART2_UART_Init+0x50>)
 8002988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <MX_USART2_UART_Init+0x4c>)
 800298c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002992:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <MX_USART2_UART_Init+0x4c>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <MX_USART2_UART_Init+0x4c>)
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <MX_USART2_UART_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029a4:	4b09      	ldr	r3, [pc, #36]	; (80029cc <MX_USART2_UART_Init+0x4c>)
 80029a6:	220c      	movs	r2, #12
 80029a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029aa:	4b08      	ldr	r3, [pc, #32]	; (80029cc <MX_USART2_UART_Init+0x4c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <MX_USART2_UART_Init+0x4c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029b6:	4805      	ldr	r0, [pc, #20]	; (80029cc <MX_USART2_UART_Init+0x4c>)
 80029b8:	f004 ffc6 	bl	8007948 <HAL_UART_Init>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029c2:	f000 f993 	bl	8002cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200005d4 	.word	0x200005d4
 80029d0:	40004400 	.word	0x40004400

080029d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <MX_DMA_Init+0x5c>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <MX_DMA_Init+0x5c>)
 80029e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <MX_DMA_Init+0x5c>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	200e      	movs	r0, #14
 80029fc:	f000 fe37 	bl	800366e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002a00:	200e      	movs	r0, #14
 8002a02:	f000 fe50 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	200f      	movs	r0, #15
 8002a0c:	f000 fe2f 	bl	800366e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002a10:	200f      	movs	r0, #15
 8002a12:	f000 fe48 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	2011      	movs	r0, #17
 8002a1c:	f000 fe27 	bl	800366e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002a20:	2011      	movs	r0, #17
 8002a22:	f000 fe40 	bl	80036a6 <HAL_NVIC_EnableIRQ>

}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800

08002a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	; 0x30
 8002a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	60da      	str	r2, [r3, #12]
 8002a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	4ba1      	ldr	r3, [pc, #644]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4aa0      	ldr	r2, [pc, #640]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002a54:	f043 0310 	orr.w	r3, r3, #16
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b9e      	ldr	r3, [pc, #632]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0310 	and.w	r3, r3, #16
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	4b9a      	ldr	r3, [pc, #616]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a99      	ldr	r2, [pc, #612]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b97      	ldr	r3, [pc, #604]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	4b93      	ldr	r3, [pc, #588]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a92      	ldr	r2, [pc, #584]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b90      	ldr	r3, [pc, #576]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b8c      	ldr	r3, [pc, #560]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a8b      	ldr	r2, [pc, #556]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6313      	str	r3, [r2, #48]	; 0x30
 8002aae:	4b89      	ldr	r3, [pc, #548]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	4b85      	ldr	r3, [pc, #532]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	4a84      	ldr	r2, [pc, #528]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aca:	4b82      	ldr	r3, [pc, #520]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]
 8002ada:	4b7e      	ldr	r3, [pc, #504]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a7d      	ldr	r2, [pc, #500]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002ae0:	f043 0308 	orr.w	r3, r3, #8
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b7b      	ldr	r3, [pc, #492]	; (8002cd4 <MX_GPIO_Init+0x2a0>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|SX_FB_RST_Pin|SX_FB_NSS_Pin, GPIO_PIN_RESET);
 8002af2:	2200      	movs	r2, #0
 8002af4:	f242 4108 	movw	r1, #9224	; 0x2408
 8002af8:	4877      	ldr	r0, [pc, #476]	; (8002cd8 <MX_GPIO_Init+0x2a4>)
 8002afa:	f001 fb1f 	bl	800413c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002afe:	2201      	movs	r2, #1
 8002b00:	2101      	movs	r1, #1
 8002b02:	4876      	ldr	r0, [pc, #472]	; (8002cdc <MX_GPIO_Init+0x2a8>)
 8002b04:	f001 fb1a 	bl	800413c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, GPIO_PIN_SET);
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b0e:	4874      	ldr	r0, [pc, #464]	; (8002ce0 <MX_GPIO_Init+0x2ac>)
 8002b10:	f001 fb14 	bl	800413c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8002b14:	2201      	movs	r2, #1
 8002b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b1a:	4872      	ldr	r0, [pc, #456]	; (8002ce4 <MX_GPIO_Init+0x2b0>)
 8002b1c:	f001 fb0e 	bl	800413c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002b20:	2200      	movs	r2, #0
 8002b22:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002b26:	486f      	ldr	r0, [pc, #444]	; (8002ce4 <MX_GPIO_Init+0x2b0>)
 8002b28:	f001 fb08 	bl	800413c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin SX_FB_RST_Pin SX_FB_NSS_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|SX_FB_RST_Pin|SX_FB_NSS_Pin;
 8002b2c:	f242 4308 	movw	r3, #9224	; 0x2408
 8002b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b32:	2301      	movs	r3, #1
 8002b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b3e:	f107 031c 	add.w	r3, r7, #28
 8002b42:	4619      	mov	r1, r3
 8002b44:	4864      	ldr	r0, [pc, #400]	; (8002cd8 <MX_GPIO_Init+0x2a4>)
 8002b46:	f001 f945 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002b5a:	f107 031c 	add.w	r3, r7, #28
 8002b5e:	4619      	mov	r1, r3
 8002b60:	485e      	ldr	r0, [pc, #376]	; (8002cdc <MX_GPIO_Init+0x2a8>)
 8002b62:	f001 f937 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002b66:	2308      	movs	r3, #8
 8002b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b76:	2305      	movs	r3, #5
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002b7a:	f107 031c 	add.w	r3, r7, #28
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4856      	ldr	r0, [pc, #344]	; (8002cdc <MX_GPIO_Init+0x2a8>)
 8002b82:	f001 f927 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b86:	2301      	movs	r3, #1
 8002b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b8a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4853      	ldr	r0, [pc, #332]	; (8002ce8 <MX_GPIO_Init+0x2b4>)
 8002b9c:	f001 f91a 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002bac:	f107 031c 	add.w	r3, r7, #28
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	484b      	ldr	r0, [pc, #300]	; (8002ce0 <MX_GPIO_Init+0x2ac>)
 8002bb4:	f001 f90e 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_FB_BUSY_Pin */
  GPIO_InitStruct.Pin = SX_FB_BUSY_Pin;
 8002bb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX_FB_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002bc6:	f107 031c 	add.w	r3, r7, #28
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4842      	ldr	r0, [pc, #264]	; (8002cd8 <MX_GPIO_Init+0x2a4>)
 8002bce:	f001 f901 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_FB_INT_Pin */
  GPIO_InitStruct.Pin = SX_FB_INT_Pin;
 8002bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bd8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX_FB_INT_GPIO_Port, &GPIO_InitStruct);
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	4619      	mov	r1, r3
 8002be8:	483b      	ldr	r0, [pc, #236]	; (8002cd8 <MX_GPIO_Init+0x2a4>)
 8002bea:	f001 f8f3 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c00:	2305      	movs	r3, #5
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002c04:	f107 031c 	add.w	r3, r7, #28
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4835      	ldr	r0, [pc, #212]	; (8002ce0 <MX_GPIO_Init+0x2ac>)
 8002c0c:	f001 f8e2 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_NSS_Pin */
  GPIO_InitStruct.Pin = SX1280_NSS_Pin;
 8002c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c16:	2301      	movs	r3, #1
 8002c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX1280_NSS_GPIO_Port, &GPIO_InitStruct);
 8002c22:	f107 031c 	add.w	r3, r7, #28
 8002c26:	4619      	mov	r1, r3
 8002c28:	482d      	ldr	r0, [pc, #180]	; (8002ce0 <MX_GPIO_Init+0x2ac>)
 8002c2a:	f001 f8d3 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_INT_Pin */
  GPIO_InitStruct.Pin = SX1280_INT_Pin;
 8002c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX1280_INT_GPIO_Port, &GPIO_InitStruct);
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	4619      	mov	r1, r3
 8002c44:	4827      	ldr	r0, [pc, #156]	; (8002ce4 <MX_GPIO_Init+0x2b0>)
 8002c46:	f001 f8c5 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX1280_BUSY_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SX1280_BUSY_Pin|OTG_FS_OverCurrent_Pin;
 8002c4a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c50:	2300      	movs	r3, #0
 8002c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c58:	f107 031c 	add.w	r3, r7, #28
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4821      	ldr	r0, [pc, #132]	; (8002ce4 <MX_GPIO_Init+0x2b0>)
 8002c60:	f001 f8b8 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 8002c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002c6a:	2311      	movs	r3, #17
 8002c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c72:	2300      	movs	r3, #0
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 8002c76:	f107 031c 	add.w	r3, r7, #28
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4819      	ldr	r0, [pc, #100]	; (8002ce4 <MX_GPIO_Init+0x2b0>)
 8002c7e:	f001 f8a9 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002c82:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002c86:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4812      	ldr	r0, [pc, #72]	; (8002ce4 <MX_GPIO_Init+0x2b0>)
 8002c9c:	f001 f89a 	bl	8003dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ca4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002cae:	f107 031c 	add.w	r3, r7, #28
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4808      	ldr	r0, [pc, #32]	; (8002cd8 <MX_GPIO_Init+0x2a4>)
 8002cb6:	f001 f88d 	bl	8003dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	2017      	movs	r0, #23
 8002cc0:	f000 fcd5 	bl	800366e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cc4:	2017      	movs	r0, #23
 8002cc6:	f000 fcee 	bl	80036a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cca:	bf00      	nop
 8002ccc:	3730      	adds	r7, #48	; 0x30
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40020800 	.word	0x40020800
 8002ce0:	40020400 	.word	0x40020400
 8002ce4:	40020c00 	.word	0x40020c00
 8002ce8:	40020000 	.word	0x40020000

08002cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf0:	b672      	cpsid	i
}
 8002cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <Error_Handler+0x8>
	...

08002cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <HAL_MspInit+0x4c>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	4a0f      	ldr	r2, [pc, #60]	; (8002d44 <HAL_MspInit+0x4c>)
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <HAL_MspInit+0x4c>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_MspInit+0x4c>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	4a08      	ldr	r2, [pc, #32]	; (8002d44 <HAL_MspInit+0x4c>)
 8002d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d28:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_MspInit+0x4c>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800

08002d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <HAL_I2C_MspInit+0x84>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d12c      	bne.n	8002dc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <HAL_I2C_MspInit+0x88>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <HAL_I2C_MspInit+0x88>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_I2C_MspInit+0x88>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002d86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d8c:	2312      	movs	r3, #18
 8002d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d90:	2301      	movs	r3, #1
 8002d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d98:	2304      	movs	r3, #4
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	4619      	mov	r1, r3
 8002da2:	480c      	ldr	r0, [pc, #48]	; (8002dd4 <HAL_I2C_MspInit+0x8c>)
 8002da4:	f001 f816 	bl	8003dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <HAL_I2C_MspInit+0x88>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <HAL_I2C_MspInit+0x88>)
 8002db2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002db6:	6413      	str	r3, [r2, #64]	; 0x40
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_I2C_MspInit+0x88>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002dc4:	bf00      	nop
 8002dc6:	3728      	adds	r7, #40	; 0x28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40005400 	.word	0x40005400
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40020400 	.word	0x40020400

08002dd8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08e      	sub	sp, #56	; 0x38
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a31      	ldr	r2, [pc, #196]	; (8002ec8 <HAL_I2S_MspInit+0xf0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d15a      	bne.n	8002ebe <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002e0c:	23c0      	movs	r3, #192	; 0xc0
 8002e0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002e10:	2302      	movs	r3, #2
 8002e12:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 fed5 	bl	8006bc8 <HAL_RCCEx_PeriphCLKConfig>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002e24:	f7ff ff62 	bl	8002cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_I2S_MspInit+0xf4>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	4a26      	ldr	r2, [pc, #152]	; (8002ecc <HAL_I2S_MspInit+0xf4>)
 8002e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e36:	6413      	str	r3, [r2, #64]	; 0x40
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_I2S_MspInit+0xf4>)
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_I2S_MspInit+0xf4>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <HAL_I2S_MspInit+0xf4>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6313      	str	r3, [r2, #48]	; 0x30
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_I2S_MspInit+0xf4>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e60:	2300      	movs	r3, #0
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_I2S_MspInit+0xf4>)
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <HAL_I2S_MspInit+0xf4>)
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e70:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <HAL_I2S_MspInit+0xf4>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e8c:	2306      	movs	r3, #6
 8002e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e94:	4619      	mov	r1, r3
 8002e96:	480e      	ldr	r0, [pc, #56]	; (8002ed0 <HAL_I2S_MspInit+0xf8>)
 8002e98:	f000 ff9c 	bl	8003dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002e9c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002eae:	2306      	movs	r3, #6
 8002eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4806      	ldr	r0, [pc, #24]	; (8002ed4 <HAL_I2S_MspInit+0xfc>)
 8002eba:	f000 ff8b 	bl	8003dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ebe:	bf00      	nop
 8002ec0:	3738      	adds	r7, #56	; 0x38
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40003c00 	.word	0x40003c00
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40020800 	.word	0x40020800

08002ed8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08c      	sub	sp, #48	; 0x30
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 031c 	add.w	r3, r7, #28
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a64      	ldr	r2, [pc, #400]	; (8003088 <HAL_SPI_MspInit+0x1b0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d12c      	bne.n	8002f54 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	4b63      	ldr	r3, [pc, #396]	; (800308c <HAL_SPI_MspInit+0x1b4>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4a62      	ldr	r2, [pc, #392]	; (800308c <HAL_SPI_MspInit+0x1b4>)
 8002f04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f08:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0a:	4b60      	ldr	r3, [pc, #384]	; (800308c <HAL_SPI_MspInit+0x1b4>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	4b5c      	ldr	r3, [pc, #368]	; (800308c <HAL_SPI_MspInit+0x1b4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a5b      	ldr	r2, [pc, #364]	; (800308c <HAL_SPI_MspInit+0x1b4>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_SPI_MspInit+0x1b4>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002f32:	23e0      	movs	r3, #224	; 0xe0
 8002f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f36:	2302      	movs	r3, #2
 8002f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f42:	2305      	movs	r3, #5
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f46:	f107 031c 	add.w	r3, r7, #28
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4850      	ldr	r0, [pc, #320]	; (8003090 <HAL_SPI_MspInit+0x1b8>)
 8002f4e:	f000 ff41 	bl	8003dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f52:	e094      	b.n	800307e <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a4e      	ldr	r2, [pc, #312]	; (8003094 <HAL_SPI_MspInit+0x1bc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	f040 808f 	bne.w	800307e <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f60:	2300      	movs	r3, #0
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	4b49      	ldr	r3, [pc, #292]	; (800308c <HAL_SPI_MspInit+0x1b4>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	4a48      	ldr	r2, [pc, #288]	; (800308c <HAL_SPI_MspInit+0x1b4>)
 8002f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f70:	4b46      	ldr	r3, [pc, #280]	; (800308c <HAL_SPI_MspInit+0x1b4>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	4b42      	ldr	r3, [pc, #264]	; (800308c <HAL_SPI_MspInit+0x1b4>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	4a41      	ldr	r2, [pc, #260]	; (800308c <HAL_SPI_MspInit+0x1b4>)
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8c:	4b3f      	ldr	r3, [pc, #252]	; (800308c <HAL_SPI_MspInit+0x1b4>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f98:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002faa:	2305      	movs	r3, #5
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fae:	f107 031c 	add.w	r3, r7, #28
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4838      	ldr	r0, [pc, #224]	; (8003098 <HAL_SPI_MspInit+0x1c0>)
 8002fb6:	f000 ff0d 	bl	8003dd4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002fba:	4b38      	ldr	r3, [pc, #224]	; (800309c <HAL_SPI_MspInit+0x1c4>)
 8002fbc:	4a38      	ldr	r2, [pc, #224]	; (80030a0 <HAL_SPI_MspInit+0x1c8>)
 8002fbe:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002fc0:	4b36      	ldr	r3, [pc, #216]	; (800309c <HAL_SPI_MspInit+0x1c4>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fc6:	4b35      	ldr	r3, [pc, #212]	; (800309c <HAL_SPI_MspInit+0x1c4>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fcc:	4b33      	ldr	r3, [pc, #204]	; (800309c <HAL_SPI_MspInit+0x1c4>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fd2:	4b32      	ldr	r3, [pc, #200]	; (800309c <HAL_SPI_MspInit+0x1c4>)
 8002fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fd8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fda:	4b30      	ldr	r3, [pc, #192]	; (800309c <HAL_SPI_MspInit+0x1c4>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fe0:	4b2e      	ldr	r3, [pc, #184]	; (800309c <HAL_SPI_MspInit+0x1c4>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_SPI_MspInit+0x1c4>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_SPI_MspInit+0x1c4>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ff2:	4b2a      	ldr	r3, [pc, #168]	; (800309c <HAL_SPI_MspInit+0x1c4>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002ff8:	4828      	ldr	r0, [pc, #160]	; (800309c <HAL_SPI_MspInit+0x1c4>)
 8002ffa:	f000 fb6f 	bl	80036dc <HAL_DMA_Init>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8003004:	f7ff fe72 	bl	8002cec <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a24      	ldr	r2, [pc, #144]	; (800309c <HAL_SPI_MspInit+0x1c4>)
 800300c:	64da      	str	r2, [r3, #76]	; 0x4c
 800300e:	4a23      	ldr	r2, [pc, #140]	; (800309c <HAL_SPI_MspInit+0x1c4>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003014:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <HAL_SPI_MspInit+0x1cc>)
 8003016:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <HAL_SPI_MspInit+0x1d0>)
 8003018:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800301a:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <HAL_SPI_MspInit+0x1cc>)
 800301c:	2200      	movs	r2, #0
 800301e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003020:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <HAL_SPI_MspInit+0x1cc>)
 8003022:	2240      	movs	r2, #64	; 0x40
 8003024:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003026:	4b1f      	ldr	r3, [pc, #124]	; (80030a4 <HAL_SPI_MspInit+0x1cc>)
 8003028:	2200      	movs	r2, #0
 800302a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800302c:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <HAL_SPI_MspInit+0x1cc>)
 800302e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003032:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_SPI_MspInit+0x1cc>)
 8003036:	2200      	movs	r2, #0
 8003038:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800303a:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <HAL_SPI_MspInit+0x1cc>)
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8003040:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_SPI_MspInit+0x1cc>)
 8003042:	2200      	movs	r2, #0
 8003044:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003046:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <HAL_SPI_MspInit+0x1cc>)
 8003048:	2200      	movs	r2, #0
 800304a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800304c:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <HAL_SPI_MspInit+0x1cc>)
 800304e:	2200      	movs	r2, #0
 8003050:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003052:	4814      	ldr	r0, [pc, #80]	; (80030a4 <HAL_SPI_MspInit+0x1cc>)
 8003054:	f000 fb42 	bl	80036dc <HAL_DMA_Init>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 800305e:	f7ff fe45 	bl	8002cec <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a0f      	ldr	r2, [pc, #60]	; (80030a4 <HAL_SPI_MspInit+0x1cc>)
 8003066:	649a      	str	r2, [r3, #72]	; 0x48
 8003068:	4a0e      	ldr	r2, [pc, #56]	; (80030a4 <HAL_SPI_MspInit+0x1cc>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800306e:	2200      	movs	r2, #0
 8003070:	2100      	movs	r1, #0
 8003072:	2024      	movs	r0, #36	; 0x24
 8003074:	f000 fafb 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003078:	2024      	movs	r0, #36	; 0x24
 800307a:	f000 fb14 	bl	80036a6 <HAL_NVIC_EnableIRQ>
}
 800307e:	bf00      	nop
 8003080:	3730      	adds	r7, #48	; 0x30
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40013000 	.word	0x40013000
 800308c:	40023800 	.word	0x40023800
 8003090:	40020000 	.word	0x40020000
 8003094:	40003800 	.word	0x40003800
 8003098:	40020400 	.word	0x40020400
 800309c:	200004cc 	.word	0x200004cc
 80030a0:	40026058 	.word	0x40026058
 80030a4:	2000052c 	.word	0x2000052c
 80030a8:	40026070 	.word	0x40026070

080030ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0b      	ldr	r2, [pc, #44]	; (80030e8 <HAL_TIM_Base_MspInit+0x3c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d10d      	bne.n	80030da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <HAL_TIM_Base_MspInit+0x40>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a09      	ldr	r2, [pc, #36]	; (80030ec <HAL_TIM_Base_MspInit+0x40>)
 80030c8:	f043 0310 	orr.w	r3, r3, #16
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40
 80030ce:	4b07      	ldr	r3, [pc, #28]	; (80030ec <HAL_TIM_Base_MspInit+0x40>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40001000 	.word	0x40001000
 80030ec:	40023800 	.word	0x40023800

080030f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a34      	ldr	r2, [pc, #208]	; (80031e0 <HAL_UART_MspInit+0xf0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d161      	bne.n	80031d6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	4b33      	ldr	r3, [pc, #204]	; (80031e4 <HAL_UART_MspInit+0xf4>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a32      	ldr	r2, [pc, #200]	; (80031e4 <HAL_UART_MspInit+0xf4>)
 800311c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <HAL_UART_MspInit+0xf4>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b2c      	ldr	r3, [pc, #176]	; (80031e4 <HAL_UART_MspInit+0xf4>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	4a2b      	ldr	r2, [pc, #172]	; (80031e4 <HAL_UART_MspInit+0xf4>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6313      	str	r3, [r2, #48]	; 0x30
 800313e:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <HAL_UART_MspInit+0xf4>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800314a:	230c      	movs	r3, #12
 800314c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003156:	2303      	movs	r3, #3
 8003158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800315a:	2307      	movs	r3, #7
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315e:	f107 0314 	add.w	r3, r7, #20
 8003162:	4619      	mov	r1, r3
 8003164:	4820      	ldr	r0, [pc, #128]	; (80031e8 <HAL_UART_MspInit+0xf8>)
 8003166:	f000 fe35 	bl	8003dd4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_UART_MspInit+0xfc>)
 800316c:	4a20      	ldr	r2, [pc, #128]	; (80031f0 <HAL_UART_MspInit+0x100>)
 800316e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003170:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <HAL_UART_MspInit+0xfc>)
 8003172:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003176:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003178:	4b1c      	ldr	r3, [pc, #112]	; (80031ec <HAL_UART_MspInit+0xfc>)
 800317a:	2240      	movs	r2, #64	; 0x40
 800317c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_UART_MspInit+0xfc>)
 8003180:	2200      	movs	r2, #0
 8003182:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003184:	4b19      	ldr	r3, [pc, #100]	; (80031ec <HAL_UART_MspInit+0xfc>)
 8003186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800318a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800318c:	4b17      	ldr	r3, [pc, #92]	; (80031ec <HAL_UART_MspInit+0xfc>)
 800318e:	2200      	movs	r2, #0
 8003190:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <HAL_UART_MspInit+0xfc>)
 8003194:	2200      	movs	r2, #0
 8003196:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003198:	4b14      	ldr	r3, [pc, #80]	; (80031ec <HAL_UART_MspInit+0xfc>)
 800319a:	2200      	movs	r2, #0
 800319c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800319e:	4b13      	ldr	r3, [pc, #76]	; (80031ec <HAL_UART_MspInit+0xfc>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <HAL_UART_MspInit+0xfc>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80031aa:	4810      	ldr	r0, [pc, #64]	; (80031ec <HAL_UART_MspInit+0xfc>)
 80031ac:	f000 fa96 	bl	80036dc <HAL_DMA_Init>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80031b6:	f7ff fd99 	bl	8002cec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <HAL_UART_MspInit+0xfc>)
 80031be:	635a      	str	r2, [r3, #52]	; 0x34
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <HAL_UART_MspInit+0xfc>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2100      	movs	r1, #0
 80031ca:	2026      	movs	r0, #38	; 0x26
 80031cc:	f000 fa4f 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031d0:	2026      	movs	r0, #38	; 0x26
 80031d2:	f000 fa68 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031d6:	bf00      	nop
 80031d8:	3728      	adds	r7, #40	; 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40004400 	.word	0x40004400
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40020000 	.word	0x40020000
 80031ec:	20000618 	.word	0x20000618
 80031f0:	400260a0 	.word	0x400260a0

080031f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <NMI_Handler+0x4>

080031fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fe:	e7fe      	b.n	80031fe <HardFault_Handler+0x4>

08003200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003204:	e7fe      	b.n	8003204 <MemManage_Handler+0x4>

08003206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800320a:	e7fe      	b.n	800320a <BusFault_Handler+0x4>

0800320c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003210:	e7fe      	b.n	8003210 <UsageFault_Handler+0x4>

08003212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003240:	f000 f8f6 	bl	8003430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}

08003248 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <DMA1_Stream3_IRQHandler+0x10>)
 800324e:	f000 fb85 	bl	800395c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200004cc 	.word	0x200004cc

0800325c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003260:	4802      	ldr	r0, [pc, #8]	; (800326c <DMA1_Stream4_IRQHandler+0x10>)
 8003262:	f000 fb7b 	bl	800395c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	2000052c 	.word	0x2000052c

08003270 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003274:	4802      	ldr	r0, [pc, #8]	; (8003280 <DMA1_Stream6_IRQHandler+0x10>)
 8003276:	f000 fb71 	bl	800395c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000618 	.word	0x20000618

08003284 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX1280_INT_Pin);
 8003288:	f44f 7080 	mov.w	r0, #256	; 0x100
 800328c:	f000 ff8a 	bl	80041a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}

08003294 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003298:	4802      	ldr	r0, [pc, #8]	; (80032a4 <SPI2_IRQHandler+0x10>)
 800329a:	f004 f801 	bl	80072a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000474 	.word	0x20000474

080032a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032ac:	4802      	ldr	r0, [pc, #8]	; (80032b8 <USART2_IRQHandler+0x10>)
 80032ae:	f004 fb99 	bl	80079e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200005d4 	.word	0x200005d4

080032bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80032c0:	4802      	ldr	r0, [pc, #8]	; (80032cc <OTG_FS_IRQHandler+0x10>)
 80032c2:	f001 febb 	bl	800503c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20001b5c 	.word	0x20001b5c

080032d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return 1;
 80032d4:	2301      	movs	r3, #1
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <_kill>:

int _kill(int pid, int sig)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032ea:	f009 fb95 	bl	800ca18 <__errno>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2216      	movs	r2, #22
 80032f2:	601a      	str	r2, [r3, #0]
  return -1;
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_exit>:

void _exit (int status)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003308:	f04f 31ff 	mov.w	r1, #4294967295
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ffe7 	bl	80032e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003312:	e7fe      	b.n	8003312 <_exit+0x12>

08003314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <SystemInit+0x20>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	4a05      	ldr	r2, [pc, #20]	; (8003334 <SystemInit+0x20>)
 8003320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003370 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800333c:	480d      	ldr	r0, [pc, #52]	; (8003374 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800333e:	490e      	ldr	r1, [pc, #56]	; (8003378 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003340:	4a0e      	ldr	r2, [pc, #56]	; (800337c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003344:	e002      	b.n	800334c <LoopCopyDataInit>

08003346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800334a:	3304      	adds	r3, #4

0800334c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800334c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800334e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003350:	d3f9      	bcc.n	8003346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003352:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003354:	4c0b      	ldr	r4, [pc, #44]	; (8003384 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003358:	e001      	b.n	800335e <LoopFillZerobss>

0800335a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800335a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800335c:	3204      	adds	r2, #4

0800335e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800335e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003360:	d3fb      	bcc.n	800335a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003362:	f7ff ffd7 	bl	8003314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003366:	f009 fb5d 	bl	800ca24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800336a:	f7ff f983 	bl	8002674 <main>
  bx  lr    
 800336e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003378:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 800337c:	0800cd50 	.word	0x0800cd50
  ldr r2, =_sbss
 8003380:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8003384:	20002294 	.word	0x20002294

08003388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003388:	e7fe      	b.n	8003388 <ADC_IRQHandler>
	...

0800338c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003390:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <HAL_Init+0x40>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0d      	ldr	r2, [pc, #52]	; (80033cc <HAL_Init+0x40>)
 8003396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800339a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_Init+0x40>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <HAL_Init+0x40>)
 80033a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_Init+0x40>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a07      	ldr	r2, [pc, #28]	; (80033cc <HAL_Init+0x40>)
 80033ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b4:	2003      	movs	r0, #3
 80033b6:	f000 f94f 	bl	8003658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ba:	2000      	movs	r0, #0
 80033bc:	f000 f808 	bl	80033d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033c0:	f7ff fc9a 	bl	8002cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023c00 	.word	0x40023c00

080033d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033d8:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_InitTick+0x54>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_InitTick+0x58>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f967 	bl	80036c2 <HAL_SYSTICK_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e00e      	b.n	800341c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b0f      	cmp	r3, #15
 8003402:	d80a      	bhi.n	800341a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003404:	2200      	movs	r2, #0
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	f04f 30ff 	mov.w	r0, #4294967295
 800340c:	f000 f92f 	bl	800366e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003410:	4a06      	ldr	r2, [pc, #24]	; (800342c <HAL_InitTick+0x5c>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000024 	.word	0x20000024
 8003428:	2000002c 	.word	0x2000002c
 800342c:	20000028 	.word	0x20000028

08003430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_IncTick+0x20>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_IncTick+0x24>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4413      	add	r3, r2
 8003440:	4a04      	ldr	r2, [pc, #16]	; (8003454 <HAL_IncTick+0x24>)
 8003442:	6013      	str	r3, [r2, #0]
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	2000002c 	.word	0x2000002c
 8003454:	20000678 	.word	0x20000678

08003458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return uwTick;
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_GetTick+0x14>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000678 	.word	0x20000678

08003470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003478:	f7ff ffee 	bl	8003458 <HAL_GetTick>
 800347c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d005      	beq.n	8003496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_Delay+0x44>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4413      	add	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003496:	bf00      	nop
 8003498:	f7ff ffde 	bl	8003458 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d8f7      	bhi.n	8003498 <HAL_Delay+0x28>
  {
  }
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	2000002c 	.word	0x2000002c

080034b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c8:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d4:	4013      	ands	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ea:	4a04      	ldr	r2, [pc, #16]	; (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	60d3      	str	r3, [r2, #12]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <__NVIC_GetPriorityGrouping+0x18>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	f003 0307 	and.w	r3, r3, #7
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	2b00      	cmp	r3, #0
 800352c:	db0b      	blt.n	8003546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	4907      	ldr	r1, [pc, #28]	; (8003554 <__NVIC_EnableIRQ+0x38>)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	2001      	movs	r0, #1
 800353e:	fa00 f202 	lsl.w	r2, r0, r2
 8003542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000e100 	.word	0xe000e100

08003558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	2b00      	cmp	r3, #0
 800356a:	db0a      	blt.n	8003582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	490c      	ldr	r1, [pc, #48]	; (80035a4 <__NVIC_SetPriority+0x4c>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	0112      	lsls	r2, r2, #4
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	440b      	add	r3, r1
 800357c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003580:	e00a      	b.n	8003598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4908      	ldr	r1, [pc, #32]	; (80035a8 <__NVIC_SetPriority+0x50>)
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	3b04      	subs	r3, #4
 8003590:	0112      	lsls	r2, r2, #4
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	440b      	add	r3, r1
 8003596:	761a      	strb	r2, [r3, #24]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	e000e100 	.word	0xe000e100
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f1c3 0307 	rsb	r3, r3, #7
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	bf28      	it	cs
 80035ca:	2304      	movcs	r3, #4
 80035cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d902      	bls.n	80035dc <NVIC_EncodePriority+0x30>
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3b03      	subs	r3, #3
 80035da:	e000      	b.n	80035de <NVIC_EncodePriority+0x32>
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	f04f 32ff 	mov.w	r2, #4294967295
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	401a      	ands	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f4:	f04f 31ff 	mov.w	r1, #4294967295
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	43d9      	mvns	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	4313      	orrs	r3, r2
         );
}
 8003606:	4618      	mov	r0, r3
 8003608:	3724      	adds	r7, #36	; 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003624:	d301      	bcc.n	800362a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003626:	2301      	movs	r3, #1
 8003628:	e00f      	b.n	800364a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362a:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <SysTick_Config+0x40>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3b01      	subs	r3, #1
 8003630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003632:	210f      	movs	r1, #15
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	f7ff ff8e 	bl	8003558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <SysTick_Config+0x40>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003642:	4b04      	ldr	r3, [pc, #16]	; (8003654 <SysTick_Config+0x40>)
 8003644:	2207      	movs	r2, #7
 8003646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	e000e010 	.word	0xe000e010

08003658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ff29 	bl	80034b8 <__NVIC_SetPriorityGrouping>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af00      	add	r7, sp, #0
 8003674:	4603      	mov	r3, r0
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003680:	f7ff ff3e 	bl	8003500 <__NVIC_GetPriorityGrouping>
 8003684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7ff ff8e 	bl	80035ac <NVIC_EncodePriority>
 8003690:	4602      	mov	r2, r0
 8003692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff ff5d 	bl	8003558 <__NVIC_SetPriority>
}
 800369e:	bf00      	nop
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff ff31 	bl	800351c <__NVIC_EnableIRQ>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ffa2 	bl	8003614 <SysTick_Config>
 80036d0:	4603      	mov	r3, r0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036e8:	f7ff feb6 	bl	8003458 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e099      	b.n	800382c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003718:	e00f      	b.n	800373a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800371a:	f7ff fe9d 	bl	8003458 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b05      	cmp	r3, #5
 8003726:	d908      	bls.n	800373a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2203      	movs	r2, #3
 8003732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e078      	b.n	800382c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e8      	bne.n	800371a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4b38      	ldr	r3, [pc, #224]	; (8003834 <HAL_DMA_Init+0x158>)
 8003754:	4013      	ands	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003766:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003772:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800377e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	2b04      	cmp	r3, #4
 8003792:	d107      	bne.n	80037a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	4313      	orrs	r3, r2
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f023 0307 	bic.w	r3, r3, #7
 80037ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d117      	bne.n	80037fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00e      	beq.n	80037fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fa7b 	bl	8003cdc <DMA_CheckFifoParam>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2240      	movs	r2, #64	; 0x40
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037fa:	2301      	movs	r3, #1
 80037fc:	e016      	b.n	800382c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa32 	bl	8003c70 <DMA_CalcBaseAndBitshift>
 800380c:	4603      	mov	r3, r0
 800380e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	223f      	movs	r2, #63	; 0x3f
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	f010803f 	.word	0xf010803f

08003838 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003846:	f7ff fe07 	bl	8003458 <HAL_GetTick>
 800384a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d008      	beq.n	800386a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2280      	movs	r2, #128	; 0x80
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e052      	b.n	8003910 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0216 	bic.w	r2, r2, #22
 8003878:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003888:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <HAL_DMA_Abort+0x62>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0208 	bic.w	r2, r2, #8
 80038a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ba:	e013      	b.n	80038e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038bc:	f7ff fdcc 	bl	8003458 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b05      	cmp	r3, #5
 80038c8:	d90c      	bls.n	80038e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2203      	movs	r2, #3
 80038d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e015      	b.n	8003910 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e4      	bne.n	80038bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	223f      	movs	r2, #63	; 0x3f
 80038f8:	409a      	lsls	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d004      	beq.n	8003936 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2280      	movs	r2, #128	; 0x80
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e00c      	b.n	8003950 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2205      	movs	r2, #5
 800393a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003968:	4b8e      	ldr	r3, [pc, #568]	; (8003ba4 <HAL_DMA_IRQHandler+0x248>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a8e      	ldr	r2, [pc, #568]	; (8003ba8 <HAL_DMA_IRQHandler+0x24c>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	0a9b      	lsrs	r3, r3, #10
 8003974:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003986:	2208      	movs	r2, #8
 8003988:	409a      	lsls	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4013      	ands	r3, r2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01a      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d013      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0204 	bic.w	r2, r2, #4
 80039ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	2208      	movs	r2, #8
 80039b6:	409a      	lsls	r2, r3
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	2201      	movs	r2, #1
 80039ce:	409a      	lsls	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d012      	beq.n	80039fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	2201      	movs	r2, #1
 80039ec:	409a      	lsls	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f6:	f043 0202 	orr.w	r2, r3, #2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	2204      	movs	r2, #4
 8003a04:	409a      	lsls	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d012      	beq.n	8003a34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	2204      	movs	r2, #4
 8003a22:	409a      	lsls	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	f043 0204 	orr.w	r2, r3, #4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	2210      	movs	r2, #16
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d043      	beq.n	8003acc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d03c      	beq.n	8003acc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	2210      	movs	r2, #16
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d018      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d108      	bne.n	8003a8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d024      	beq.n	8003acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	4798      	blx	r3
 8003a8a:	e01f      	b.n	8003acc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01b      	beq.n	8003acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
 8003a9c:	e016      	b.n	8003acc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d107      	bne.n	8003abc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0208 	bic.w	r2, r2, #8
 8003aba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 808f 	beq.w	8003bfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8087 	beq.w	8003bfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af2:	2220      	movs	r2, #32
 8003af4:	409a      	lsls	r2, r3
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b05      	cmp	r3, #5
 8003b04:	d136      	bne.n	8003b74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0216 	bic.w	r2, r2, #22
 8003b14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <HAL_DMA_IRQHandler+0x1da>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0208 	bic.w	r2, r2, #8
 8003b44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4a:	223f      	movs	r2, #63	; 0x3f
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d07e      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	4798      	blx	r3
        }
        return;
 8003b72:	e079      	b.n	8003c68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01d      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10d      	bne.n	8003bac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d031      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4798      	blx	r3
 8003ba0:	e02c      	b.n	8003bfc <HAL_DMA_IRQHandler+0x2a0>
 8003ba2:	bf00      	nop
 8003ba4:	20000024 	.word	0x20000024
 8003ba8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d023      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
 8003bbc:	e01e      	b.n	8003bfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10f      	bne.n	8003bec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0210 	bic.w	r2, r2, #16
 8003bda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d032      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d022      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2205      	movs	r2, #5
 8003c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d307      	bcc.n	8003c44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f2      	bne.n	8003c28 <HAL_DMA_IRQHandler+0x2cc>
 8003c42:	e000      	b.n	8003c46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4798      	blx	r3
 8003c66:	e000      	b.n	8003c6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c68:	bf00      	nop
    }
  }
}
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	3b10      	subs	r3, #16
 8003c80:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <DMA_CalcBaseAndBitshift+0x64>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <DMA_CalcBaseAndBitshift+0x68>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d909      	bls.n	8003cb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ca6:	f023 0303 	bic.w	r3, r3, #3
 8003caa:	1d1a      	adds	r2, r3, #4
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	659a      	str	r2, [r3, #88]	; 0x58
 8003cb0:	e007      	b.n	8003cc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	aaaaaaab 	.word	0xaaaaaaab
 8003cd8:	0800cd2c 	.word	0x0800cd2c

08003cdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11f      	bne.n	8003d36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d856      	bhi.n	8003daa <DMA_CheckFifoParam+0xce>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <DMA_CheckFifoParam+0x28>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d15 	.word	0x08003d15
 8003d08:	08003d27 	.word	0x08003d27
 8003d0c:	08003d15 	.word	0x08003d15
 8003d10:	08003dab 	.word	0x08003dab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d046      	beq.n	8003dae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d24:	e043      	b.n	8003dae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d2e:	d140      	bne.n	8003db2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d34:	e03d      	b.n	8003db2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3e:	d121      	bne.n	8003d84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d837      	bhi.n	8003db6 <DMA_CheckFifoParam+0xda>
 8003d46:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <DMA_CheckFifoParam+0x70>)
 8003d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4c:	08003d5d 	.word	0x08003d5d
 8003d50:	08003d63 	.word	0x08003d63
 8003d54:	08003d5d 	.word	0x08003d5d
 8003d58:	08003d75 	.word	0x08003d75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d60:	e030      	b.n	8003dc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d025      	beq.n	8003dba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d72:	e022      	b.n	8003dba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d7c:	d11f      	bne.n	8003dbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d82:	e01c      	b.n	8003dbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d903      	bls.n	8003d92 <DMA_CheckFifoParam+0xb6>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d003      	beq.n	8003d98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d90:	e018      	b.n	8003dc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
      break;
 8003d96:	e015      	b.n	8003dc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00e      	beq.n	8003dc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
      break;
 8003da8:	e00b      	b.n	8003dc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003daa:	bf00      	nop
 8003dac:	e00a      	b.n	8003dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dae:	bf00      	nop
 8003db0:	e008      	b.n	8003dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003db2:	bf00      	nop
 8003db4:	e006      	b.n	8003dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003db6:	bf00      	nop
 8003db8:	e004      	b.n	8003dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dba:	bf00      	nop
 8003dbc:	e002      	b.n	8003dc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dc2:	bf00      	nop
    }
  } 
  
  return status; 
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop

08003dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b089      	sub	sp, #36	; 0x24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	e16b      	b.n	80040c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003df0:	2201      	movs	r2, #1
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	f040 815a 	bne.w	80040c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d005      	beq.n	8003e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d130      	bne.n	8003e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	2203      	movs	r2, #3
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 0201 	and.w	r2, r3, #1
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d017      	beq.n	8003ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d123      	bne.n	8003f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	08da      	lsrs	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3208      	adds	r2, #8
 8003ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	08da      	lsrs	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3208      	adds	r2, #8
 8003f12:	69b9      	ldr	r1, [r7, #24]
 8003f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	2203      	movs	r2, #3
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0203 	and.w	r2, r3, #3
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80b4 	beq.w	80040c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	4b60      	ldr	r3, [pc, #384]	; (80040e0 <HAL_GPIO_Init+0x30c>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	4a5f      	ldr	r2, [pc, #380]	; (80040e0 <HAL_GPIO_Init+0x30c>)
 8003f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f68:	6453      	str	r3, [r2, #68]	; 0x44
 8003f6a:	4b5d      	ldr	r3, [pc, #372]	; (80040e0 <HAL_GPIO_Init+0x30c>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f76:	4a5b      	ldr	r2, [pc, #364]	; (80040e4 <HAL_GPIO_Init+0x310>)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	089b      	lsrs	r3, r3, #2
 8003f7c:	3302      	adds	r3, #2
 8003f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	220f      	movs	r2, #15
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a52      	ldr	r2, [pc, #328]	; (80040e8 <HAL_GPIO_Init+0x314>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d02b      	beq.n	8003ffa <HAL_GPIO_Init+0x226>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a51      	ldr	r2, [pc, #324]	; (80040ec <HAL_GPIO_Init+0x318>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d025      	beq.n	8003ff6 <HAL_GPIO_Init+0x222>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a50      	ldr	r2, [pc, #320]	; (80040f0 <HAL_GPIO_Init+0x31c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01f      	beq.n	8003ff2 <HAL_GPIO_Init+0x21e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a4f      	ldr	r2, [pc, #316]	; (80040f4 <HAL_GPIO_Init+0x320>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d019      	beq.n	8003fee <HAL_GPIO_Init+0x21a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <HAL_GPIO_Init+0x324>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d013      	beq.n	8003fea <HAL_GPIO_Init+0x216>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a4d      	ldr	r2, [pc, #308]	; (80040fc <HAL_GPIO_Init+0x328>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_GPIO_Init+0x212>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a4c      	ldr	r2, [pc, #304]	; (8004100 <HAL_GPIO_Init+0x32c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <HAL_GPIO_Init+0x20e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a4b      	ldr	r2, [pc, #300]	; (8004104 <HAL_GPIO_Init+0x330>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <HAL_GPIO_Init+0x20a>
 8003fda:	2307      	movs	r3, #7
 8003fdc:	e00e      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003fde:	2308      	movs	r3, #8
 8003fe0:	e00c      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003fe2:	2306      	movs	r3, #6
 8003fe4:	e00a      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003fe6:	2305      	movs	r3, #5
 8003fe8:	e008      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003fea:	2304      	movs	r3, #4
 8003fec:	e006      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e004      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e002      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <HAL_GPIO_Init+0x228>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	f002 0203 	and.w	r2, r2, #3
 8004002:	0092      	lsls	r2, r2, #2
 8004004:	4093      	lsls	r3, r2
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800400c:	4935      	ldr	r1, [pc, #212]	; (80040e4 <HAL_GPIO_Init+0x310>)
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	089b      	lsrs	r3, r3, #2
 8004012:	3302      	adds	r3, #2
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800401a:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <HAL_GPIO_Init+0x334>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	43db      	mvns	r3, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4013      	ands	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800403e:	4a32      	ldr	r2, [pc, #200]	; (8004108 <HAL_GPIO_Init+0x334>)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004044:	4b30      	ldr	r3, [pc, #192]	; (8004108 <HAL_GPIO_Init+0x334>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004068:	4a27      	ldr	r2, [pc, #156]	; (8004108 <HAL_GPIO_Init+0x334>)
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800406e:	4b26      	ldr	r3, [pc, #152]	; (8004108 <HAL_GPIO_Init+0x334>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	43db      	mvns	r3, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4013      	ands	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004092:	4a1d      	ldr	r2, [pc, #116]	; (8004108 <HAL_GPIO_Init+0x334>)
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_GPIO_Init+0x334>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040bc:	4a12      	ldr	r2, [pc, #72]	; (8004108 <HAL_GPIO_Init+0x334>)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3301      	adds	r3, #1
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	2b0f      	cmp	r3, #15
 80040cc:	f67f ae90 	bls.w	8003df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	3724      	adds	r7, #36	; 0x24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40013800 	.word	0x40013800
 80040e8:	40020000 	.word	0x40020000
 80040ec:	40020400 	.word	0x40020400
 80040f0:	40020800 	.word	0x40020800
 80040f4:	40020c00 	.word	0x40020c00
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40021400 	.word	0x40021400
 8004100:	40021800 	.word	0x40021800
 8004104:	40021c00 	.word	0x40021c00
 8004108:	40013c00 	.word	0x40013c00

0800410c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
 8004128:	e001      	b.n	800412e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
 8004148:	4613      	mov	r3, r2
 800414a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800414c:	787b      	ldrb	r3, [r7, #1]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004152:	887a      	ldrh	r2, [r7, #2]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004158:	e003      	b.n	8004162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800415a:	887b      	ldrh	r3, [r7, #2]
 800415c:	041a      	lsls	r2, r3, #16
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	619a      	str	r2, [r3, #24]
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	460b      	mov	r3, r1
 8004178:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004180:	887a      	ldrh	r2, [r7, #2]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4013      	ands	r3, r2
 8004186:	041a      	lsls	r2, r3, #16
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	43d9      	mvns	r1, r3
 800418c:	887b      	ldrh	r3, [r7, #2]
 800418e:	400b      	ands	r3, r1
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	619a      	str	r2, [r3, #24]
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041ae:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d006      	beq.n	80041c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041ba:	4a05      	ldr	r2, [pc, #20]	; (80041d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc ff36 	bl	8001034 <HAL_GPIO_EXTI_Callback>
  }
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40013c00 	.word	0x40013c00

080041d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e12b      	b.n	800443e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fe fda4 	bl	8002d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	; 0x24
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004226:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004236:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004238:	f002 fc9e 	bl	8006b78 <HAL_RCC_GetPCLK1Freq>
 800423c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	4a81      	ldr	r2, [pc, #516]	; (8004448 <HAL_I2C_Init+0x274>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d807      	bhi.n	8004258 <HAL_I2C_Init+0x84>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4a80      	ldr	r2, [pc, #512]	; (800444c <HAL_I2C_Init+0x278>)
 800424c:	4293      	cmp	r3, r2
 800424e:	bf94      	ite	ls
 8004250:	2301      	movls	r3, #1
 8004252:	2300      	movhi	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	e006      	b.n	8004266 <HAL_I2C_Init+0x92>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4a7d      	ldr	r2, [pc, #500]	; (8004450 <HAL_I2C_Init+0x27c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	bf94      	ite	ls
 8004260:	2301      	movls	r3, #1
 8004262:	2300      	movhi	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e0e7      	b.n	800443e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a78      	ldr	r2, [pc, #480]	; (8004454 <HAL_I2C_Init+0x280>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	0c9b      	lsrs	r3, r3, #18
 8004278:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4a6a      	ldr	r2, [pc, #424]	; (8004448 <HAL_I2C_Init+0x274>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d802      	bhi.n	80042a8 <HAL_I2C_Init+0xd4>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	3301      	adds	r3, #1
 80042a6:	e009      	b.n	80042bc <HAL_I2C_Init+0xe8>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042ae:	fb02 f303 	mul.w	r3, r2, r3
 80042b2:	4a69      	ldr	r2, [pc, #420]	; (8004458 <HAL_I2C_Init+0x284>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	099b      	lsrs	r3, r3, #6
 80042ba:	3301      	adds	r3, #1
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	430b      	orrs	r3, r1
 80042c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	495c      	ldr	r1, [pc, #368]	; (8004448 <HAL_I2C_Init+0x274>)
 80042d8:	428b      	cmp	r3, r1
 80042da:	d819      	bhi.n	8004310 <HAL_I2C_Init+0x13c>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	1e59      	subs	r1, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ea:	1c59      	adds	r1, r3, #1
 80042ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042f0:	400b      	ands	r3, r1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_I2C_Init+0x138>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1e59      	subs	r1, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fbb1 f3f3 	udiv	r3, r1, r3
 8004304:	3301      	adds	r3, #1
 8004306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430a:	e051      	b.n	80043b0 <HAL_I2C_Init+0x1dc>
 800430c:	2304      	movs	r3, #4
 800430e:	e04f      	b.n	80043b0 <HAL_I2C_Init+0x1dc>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d111      	bne.n	800433c <HAL_I2C_Init+0x168>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	1e58      	subs	r0, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6859      	ldr	r1, [r3, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	440b      	add	r3, r1
 8004326:	fbb0 f3f3 	udiv	r3, r0, r3
 800432a:	3301      	adds	r3, #1
 800432c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e012      	b.n	8004362 <HAL_I2C_Init+0x18e>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1e58      	subs	r0, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	0099      	lsls	r1, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004352:	3301      	adds	r3, #1
 8004354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_I2C_Init+0x196>
 8004366:	2301      	movs	r3, #1
 8004368:	e022      	b.n	80043b0 <HAL_I2C_Init+0x1dc>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10e      	bne.n	8004390 <HAL_I2C_Init+0x1bc>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1e58      	subs	r0, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6859      	ldr	r1, [r3, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	440b      	add	r3, r1
 8004380:	fbb0 f3f3 	udiv	r3, r0, r3
 8004384:	3301      	adds	r3, #1
 8004386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438e:	e00f      	b.n	80043b0 <HAL_I2C_Init+0x1dc>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1e58      	subs	r0, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	0099      	lsls	r1, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a6:	3301      	adds	r3, #1
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	6809      	ldr	r1, [r1, #0]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6911      	ldr	r1, [r2, #16]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68d2      	ldr	r2, [r2, #12]
 80043ea:	4311      	orrs	r1, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	430b      	orrs	r3, r1
 80043f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695a      	ldr	r2, [r3, #20]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	000186a0 	.word	0x000186a0
 800444c:	001e847f 	.word	0x001e847f
 8004450:	003d08ff 	.word	0x003d08ff
 8004454:	431bde83 	.word	0x431bde83
 8004458:	10624dd3 	.word	0x10624dd3

0800445c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e128      	b.n	80046c0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a90      	ldr	r2, [pc, #576]	; (80046c8 <HAL_I2S_Init+0x26c>)
 8004486:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fe fca5 	bl	8002dd8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80044a4:	f023 030f 	bic.w	r3, r3, #15
 80044a8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2202      	movs	r2, #2
 80044b0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d060      	beq.n	800457c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80044c2:	2310      	movs	r3, #16
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	e001      	b.n	80044cc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80044c8:	2320      	movs	r3, #32
 80044ca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d802      	bhi.n	80044da <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80044da:	2001      	movs	r0, #1
 80044dc:	f002 fc56 	bl	8006d8c <HAL_RCCEx_GetPeriphCLKFreq>
 80044e0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ea:	d125      	bne.n	8004538 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d010      	beq.n	8004516 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	461a      	mov	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	3305      	adds	r3, #5
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	e01f      	b.n	8004556 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	461a      	mov	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004532:	3305      	adds	r3, #5
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	e00e      	b.n	8004556 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	461a      	mov	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	3305      	adds	r3, #5
 8004554:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4a5c      	ldr	r2, [pc, #368]	; (80046cc <HAL_I2S_Init+0x270>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	08db      	lsrs	r3, r3, #3
 8004560:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	e003      	b.n	8004584 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800457c:	2302      	movs	r3, #2
 800457e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d902      	bls.n	8004590 <HAL_I2S_Init+0x134>
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	2bff      	cmp	r3, #255	; 0xff
 800458e:	d907      	bls.n	80045a0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	f043 0210 	orr.w	r2, r3, #16
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e08f      	b.n	80046c0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	ea42 0103 	orr.w	r1, r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80045be:	f023 030f 	bic.w	r3, r3, #15
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6851      	ldr	r1, [r2, #4]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6892      	ldr	r2, [r2, #8]
 80045ca:	4311      	orrs	r1, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68d2      	ldr	r2, [r2, #12]
 80045d0:	4311      	orrs	r1, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6992      	ldr	r2, [r2, #24]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d161      	bne.n	80046b0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a38      	ldr	r2, [pc, #224]	; (80046d0 <HAL_I2S_Init+0x274>)
 80045f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a37      	ldr	r2, [pc, #220]	; (80046d4 <HAL_I2S_Init+0x278>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d101      	bne.n	8004600 <HAL_I2S_Init+0x1a4>
 80045fc:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <HAL_I2S_Init+0x27c>)
 80045fe:	e001      	b.n	8004604 <HAL_I2S_Init+0x1a8>
 8004600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	4932      	ldr	r1, [pc, #200]	; (80046d4 <HAL_I2S_Init+0x278>)
 800460c:	428a      	cmp	r2, r1
 800460e:	d101      	bne.n	8004614 <HAL_I2S_Init+0x1b8>
 8004610:	4a31      	ldr	r2, [pc, #196]	; (80046d8 <HAL_I2S_Init+0x27c>)
 8004612:	e001      	b.n	8004618 <HAL_I2S_Init+0x1bc>
 8004614:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004618:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800461c:	f023 030f 	bic.w	r3, r3, #15
 8004620:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a2b      	ldr	r2, [pc, #172]	; (80046d4 <HAL_I2S_Init+0x278>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d101      	bne.n	8004630 <HAL_I2S_Init+0x1d4>
 800462c:	4b2a      	ldr	r3, [pc, #168]	; (80046d8 <HAL_I2S_Init+0x27c>)
 800462e:	e001      	b.n	8004634 <HAL_I2S_Init+0x1d8>
 8004630:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004634:	2202      	movs	r2, #2
 8004636:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a25      	ldr	r2, [pc, #148]	; (80046d4 <HAL_I2S_Init+0x278>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d101      	bne.n	8004646 <HAL_I2S_Init+0x1ea>
 8004642:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <HAL_I2S_Init+0x27c>)
 8004644:	e001      	b.n	800464a <HAL_I2S_Init+0x1ee>
 8004646:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004656:	d003      	beq.n	8004660 <HAL_I2S_Init+0x204>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d103      	bne.n	8004668 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	e001      	b.n	800466c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004668:	2300      	movs	r3, #0
 800466a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004676:	4313      	orrs	r3, r2
 8004678:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004680:	4313      	orrs	r3, r2
 8004682:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800468a:	4313      	orrs	r3, r2
 800468c:	b29a      	uxth	r2, r3
 800468e:	897b      	ldrh	r3, [r7, #10]
 8004690:	4313      	orrs	r3, r2
 8004692:	b29b      	uxth	r3, r3
 8004694:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004698:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a0d      	ldr	r2, [pc, #52]	; (80046d4 <HAL_I2S_Init+0x278>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d101      	bne.n	80046a8 <HAL_I2S_Init+0x24c>
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <HAL_I2S_Init+0x27c>)
 80046a6:	e001      	b.n	80046ac <HAL_I2S_Init+0x250>
 80046a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046ac:	897a      	ldrh	r2, [r7, #10]
 80046ae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	080047d3 	.word	0x080047d3
 80046cc:	cccccccd 	.word	0xcccccccd
 80046d0:	080048e9 	.word	0x080048e9
 80046d4:	40003800 	.word	0x40003800
 80046d8:	40003400 	.word	0x40003400

080046dc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	881a      	ldrh	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	1c9a      	adds	r2, r3, #2
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10e      	bne.n	800476c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800475c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff ffb8 	bl	80046dc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800476c:	bf00      	nop
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	b292      	uxth	r2, r2
 8004788:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	1c9a      	adds	r2, r3, #2
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10e      	bne.n	80047ca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047ba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff ff93 	bl	80046f0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b086      	sub	sp, #24
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d13a      	bne.n	8004864 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d109      	bne.n	800480c <I2S_IRQHandler+0x3a>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d102      	bne.n	800480c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff ffb4 	bl	8004774 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b40      	cmp	r3, #64	; 0x40
 8004814:	d126      	bne.n	8004864 <I2S_IRQHandler+0x92>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b20      	cmp	r3, #32
 8004822:	d11f      	bne.n	8004864 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004832:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004834:	2300      	movs	r3, #0
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	f043 0202 	orr.w	r2, r3, #2
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7ff ff50 	bl	8004704 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b03      	cmp	r3, #3
 800486e:	d136      	bne.n	80048de <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	d109      	bne.n	800488e <I2S_IRQHandler+0xbc>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004884:	2b80      	cmp	r3, #128	; 0x80
 8004886:	d102      	bne.n	800488e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff ff45 	bl	8004718 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b08      	cmp	r3, #8
 8004896:	d122      	bne.n	80048de <I2S_IRQHandler+0x10c>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d11b      	bne.n	80048de <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048b4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d0:	f043 0204 	orr.w	r2, r3, #4
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff ff13 	bl	8004704 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048de:	bf00      	nop
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a92      	ldr	r2, [pc, #584]	; (8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d101      	bne.n	8004906 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004902:	4b92      	ldr	r3, [pc, #584]	; (8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004904:	e001      	b.n	800490a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a8b      	ldr	r2, [pc, #556]	; (8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d101      	bne.n	8004924 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004920:	4b8a      	ldr	r3, [pc, #552]	; (8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004922:	e001      	b.n	8004928 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004934:	d004      	beq.n	8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f040 8099 	bne.w	8004a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d107      	bne.n	800495a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f925 	bl	8004ba4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b01      	cmp	r3, #1
 8004962:	d107      	bne.n	8004974 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f9c8 	bl	8004d04 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d13a      	bne.n	80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d035      	beq.n	80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a6e      	ldr	r2, [pc, #440]	; (8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d101      	bne.n	8004996 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004992:	4b6e      	ldr	r3, [pc, #440]	; (8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004994:	e001      	b.n	800499a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004996:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4969      	ldr	r1, [pc, #420]	; (8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049a2:	428b      	cmp	r3, r1
 80049a4:	d101      	bne.n	80049aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80049a6:	4b69      	ldr	r3, [pc, #420]	; (8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049a8:	e001      	b.n	80049ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80049aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	f043 0202 	orr.w	r2, r3, #2
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff fe88 	bl	8004704 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	f040 80c3 	bne.w	8004b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80bd 	beq.w	8004b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a49      	ldr	r2, [pc, #292]	; (8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d101      	bne.n	8004a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004a26:	4b49      	ldr	r3, [pc, #292]	; (8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a28:	e001      	b.n	8004a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004a2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4944      	ldr	r1, [pc, #272]	; (8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a36:	428b      	cmp	r3, r1
 8004a38:	d101      	bne.n	8004a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004a3a:	4b44      	ldr	r3, [pc, #272]	; (8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a3c:	e001      	b.n	8004a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004a3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a46:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	f043 0204 	orr.w	r2, r3, #4
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7ff fe4a 	bl	8004704 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a70:	e089      	b.n	8004b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d107      	bne.n	8004a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f8be 	bl	8004c08 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d107      	bne.n	8004aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f8fd 	bl	8004ca0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b40      	cmp	r3, #64	; 0x40
 8004aae:	d12f      	bne.n	8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d02a      	beq.n	8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ac8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d101      	bne.n	8004ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ad4:	4b1d      	ldr	r3, [pc, #116]	; (8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ad6:	e001      	b.n	8004adc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ad8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4919      	ldr	r1, [pc, #100]	; (8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ae4:	428b      	cmp	r3, r1
 8004ae6:	d101      	bne.n	8004aec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004ae8:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aea:	e001      	b.n	8004af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004aec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004af0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004af4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	f043 0202 	orr.w	r2, r3, #2
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fdfa 	bl	8004704 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d136      	bne.n	8004b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d031      	beq.n	8004b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a07      	ldr	r2, [pc, #28]	; (8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d101      	bne.n	8004b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004b2e:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b30:	e001      	b.n	8004b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4902      	ldr	r1, [pc, #8]	; (8004b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b3e:	428b      	cmp	r3, r1
 8004b40:	d106      	bne.n	8004b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004b42:	4b02      	ldr	r3, [pc, #8]	; (8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b44:	e006      	b.n	8004b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004b46:	bf00      	nop
 8004b48:	40003800 	.word	0x40003800
 8004b4c:	40003400 	.word	0x40003400
 8004b50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b58:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	f043 0204 	orr.w	r2, r3, #4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff fdc0 	bl	8004704 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b84:	e000      	b.n	8004b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b86:	bf00      	nop
}
 8004b88:	bf00      	nop
 8004b8a:	3720      	adds	r7, #32
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	1c99      	adds	r1, r3, #2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6251      	str	r1, [r2, #36]	; 0x24
 8004bb6:	881a      	ldrh	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d113      	bne.n	8004bfe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004be4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d106      	bne.n	8004bfe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff ffc9 	bl	8004b90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	1c99      	adds	r1, r3, #2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6251      	str	r1, [r2, #36]	; 0x24
 8004c1a:	8819      	ldrh	r1, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <I2SEx_TxISR_I2SExt+0x90>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d101      	bne.n	8004c2a <I2SEx_TxISR_I2SExt+0x22>
 8004c26:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <I2SEx_TxISR_I2SExt+0x94>)
 8004c28:	e001      	b.n	8004c2e <I2SEx_TxISR_I2SExt+0x26>
 8004c2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c2e:	460a      	mov	r2, r1
 8004c30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d121      	bne.n	8004c8e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a12      	ldr	r2, [pc, #72]	; (8004c98 <I2SEx_TxISR_I2SExt+0x90>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d101      	bne.n	8004c58 <I2SEx_TxISR_I2SExt+0x50>
 8004c54:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <I2SEx_TxISR_I2SExt+0x94>)
 8004c56:	e001      	b.n	8004c5c <I2SEx_TxISR_I2SExt+0x54>
 8004c58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	490d      	ldr	r1, [pc, #52]	; (8004c98 <I2SEx_TxISR_I2SExt+0x90>)
 8004c64:	428b      	cmp	r3, r1
 8004c66:	d101      	bne.n	8004c6c <I2SEx_TxISR_I2SExt+0x64>
 8004c68:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <I2SEx_TxISR_I2SExt+0x94>)
 8004c6a:	e001      	b.n	8004c70 <I2SEx_TxISR_I2SExt+0x68>
 8004c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ff81 	bl	8004b90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40003800 	.word	0x40003800
 8004c9c:	40003400 	.word	0x40003400

08004ca0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68d8      	ldr	r0, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	1c99      	adds	r1, r3, #2
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004cb8:	b282      	uxth	r2, r0
 8004cba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d113      	bne.n	8004cfc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ce2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff ff4a 	bl	8004b90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a20      	ldr	r2, [pc, #128]	; (8004d94 <I2SEx_RxISR_I2SExt+0x90>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d101      	bne.n	8004d1a <I2SEx_RxISR_I2SExt+0x16>
 8004d16:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <I2SEx_RxISR_I2SExt+0x94>)
 8004d18:	e001      	b.n	8004d1e <I2SEx_RxISR_I2SExt+0x1a>
 8004d1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d1e:	68d8      	ldr	r0, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	1c99      	adds	r1, r3, #2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d2a:	b282      	uxth	r2, r0
 8004d2c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d121      	bne.n	8004d8a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <I2SEx_RxISR_I2SExt+0x90>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d101      	bne.n	8004d54 <I2SEx_RxISR_I2SExt+0x50>
 8004d50:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <I2SEx_RxISR_I2SExt+0x94>)
 8004d52:	e001      	b.n	8004d58 <I2SEx_RxISR_I2SExt+0x54>
 8004d54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	490d      	ldr	r1, [pc, #52]	; (8004d94 <I2SEx_RxISR_I2SExt+0x90>)
 8004d60:	428b      	cmp	r3, r1
 8004d62:	d101      	bne.n	8004d68 <I2SEx_RxISR_I2SExt+0x64>
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <I2SEx_RxISR_I2SExt+0x94>)
 8004d66:	e001      	b.n	8004d6c <I2SEx_RxISR_I2SExt+0x68>
 8004d68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d70:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff ff03 	bl	8004b90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40003800 	.word	0x40003800
 8004d98:	40003400 	.word	0x40003400

08004d9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d9e:	b08f      	sub	sp, #60	; 0x3c
 8004da0:	af0a      	add	r7, sp, #40	; 0x28
 8004da2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e10f      	b.n	8004fce <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d106      	bne.n	8004dce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f007 fae3 	bl	800c394 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f003 fdca 	bl	8008986 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	687e      	ldr	r6, [r7, #4]
 8004dfa:	466d      	mov	r5, sp
 8004dfc:	f106 0410 	add.w	r4, r6, #16
 8004e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e10:	1d33      	adds	r3, r6, #4
 8004e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e14:	6838      	ldr	r0, [r7, #0]
 8004e16:	f003 fca1 	bl	800875c <USB_CoreInit>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0d0      	b.n	8004fce <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2100      	movs	r1, #0
 8004e32:	4618      	mov	r0, r3
 8004e34:	f003 fdb8 	bl	80089a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]
 8004e3c:	e04a      	b.n	8004ed4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e3e:	7bfa      	ldrb	r2, [r7, #15]
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	333d      	adds	r3, #61	; 0x3d
 8004e4e:	2201      	movs	r2, #1
 8004e50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e52:	7bfa      	ldrb	r2, [r7, #15]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	333c      	adds	r3, #60	; 0x3c
 8004e62:	7bfa      	ldrb	r2, [r7, #15]
 8004e64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e66:	7bfa      	ldrb	r2, [r7, #15]
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	b298      	uxth	r0, r3
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	3344      	adds	r3, #68	; 0x44
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e7e:	7bfa      	ldrb	r2, [r7, #15]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	3340      	adds	r3, #64	; 0x40
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e92:	7bfa      	ldrb	r2, [r7, #15]
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	3348      	adds	r3, #72	; 0x48
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ea6:	7bfa      	ldrb	r2, [r7, #15]
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	334c      	adds	r3, #76	; 0x4c
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004eba:	7bfa      	ldrb	r2, [r7, #15]
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	3354      	adds	r3, #84	; 0x54
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
 8004ed4:	7bfa      	ldrb	r2, [r7, #15]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d3af      	bcc.n	8004e3e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ede:	2300      	movs	r3, #0
 8004ee0:	73fb      	strb	r3, [r7, #15]
 8004ee2:	e044      	b.n	8004f6e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ee4:	7bfa      	ldrb	r2, [r7, #15]
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004efa:	7bfa      	ldrb	r2, [r7, #15]
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004f0c:	7bfa      	ldrb	r2, [r7, #15]
 8004f0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f10:	7bfa      	ldrb	r2, [r7, #15]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f22:	2200      	movs	r2, #0
 8004f24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f26:	7bfa      	ldrb	r2, [r7, #15]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f3c:	7bfa      	ldrb	r2, [r7, #15]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f52:	7bfa      	ldrb	r2, [r7, #15]
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
 8004f6e:	7bfa      	ldrb	r2, [r7, #15]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d3b5      	bcc.n	8004ee4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	603b      	str	r3, [r7, #0]
 8004f7e:	687e      	ldr	r6, [r7, #4]
 8004f80:	466d      	mov	r5, sp
 8004f82:	f106 0410 	add.w	r4, r6, #16
 8004f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f92:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f96:	1d33      	adds	r3, r6, #4
 8004f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f9a:	6838      	ldr	r0, [r7, #0]
 8004f9c:	f003 fd50 	bl	8008a40 <USB_DevInit>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e00d      	b.n	8004fce <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f004 fe9f 	bl	8009d0a <USB_DevDisconnect>

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_PCD_Start+0x1c>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e020      	b.n	8005034 <HAL_PCD_Start+0x5e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d109      	bne.n	8005016 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005006:	2b01      	cmp	r3, #1
 8005008:	d005      	beq.n	8005016 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f003 fca2 	bl	8008964 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f004 fe4f 	bl	8009cc8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800503c:	b590      	push	{r4, r7, lr}
 800503e:	b08d      	sub	sp, #52	; 0x34
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f004 ff0d 	bl	8009e72 <USB_GetMode>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 848a 	bne.w	8005974 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4618      	mov	r0, r3
 8005066:	f004 fe71 	bl	8009d4c <USB_ReadInterrupts>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8480 	beq.w	8005972 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	0a1b      	lsrs	r3, r3, #8
 800507c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f004 fe5e 	bl	8009d4c <USB_ReadInterrupts>
 8005090:	4603      	mov	r3, r0
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b02      	cmp	r3, #2
 8005098:	d107      	bne.n	80050aa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f002 0202 	and.w	r2, r2, #2
 80050a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f004 fe4c 	bl	8009d4c <USB_ReadInterrupts>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b10      	cmp	r3, #16
 80050bc:	d161      	bne.n	8005182 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699a      	ldr	r2, [r3, #24]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0210 	bic.w	r2, r2, #16
 80050cc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f003 020f 	and.w	r2, r3, #15
 80050da:	4613      	mov	r3, r2
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	4413      	add	r3, r2
 80050ea:	3304      	adds	r3, #4
 80050ec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	0c5b      	lsrs	r3, r3, #17
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d124      	bne.n	8005144 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005100:	4013      	ands	r3, r2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d035      	beq.n	8005172 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005114:	b29b      	uxth	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	6a38      	ldr	r0, [r7, #32]
 800511a:	f004 fc83 	bl	8009a24 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	091b      	lsrs	r3, r3, #4
 8005126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800512a:	441a      	add	r2, r3
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	6a1a      	ldr	r2, [r3, #32]
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800513c:	441a      	add	r2, r3
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	621a      	str	r2, [r3, #32]
 8005142:	e016      	b.n	8005172 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	0c5b      	lsrs	r3, r3, #17
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	2b06      	cmp	r3, #6
 800514e:	d110      	bne.n	8005172 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005156:	2208      	movs	r2, #8
 8005158:	4619      	mov	r1, r3
 800515a:	6a38      	ldr	r0, [r7, #32]
 800515c:	f004 fc62 	bl	8009a24 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	6a1a      	ldr	r2, [r3, #32]
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800516c:	441a      	add	r2, r3
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699a      	ldr	r2, [r3, #24]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0210 	orr.w	r2, r2, #16
 8005180:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f004 fde0 	bl	8009d4c <USB_ReadInterrupts>
 800518c:	4603      	mov	r3, r0
 800518e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005192:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005196:	f040 80a7 	bne.w	80052e8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f004 fde5 	bl	8009d72 <USB_ReadDevAllOutEpInterrupt>
 80051a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80051aa:	e099      	b.n	80052e0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 808e 	beq.w	80052d4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	4611      	mov	r1, r2
 80051c2:	4618      	mov	r0, r3
 80051c4:	f004 fe09 	bl	8009dda <USB_ReadDevOutEPInterrupt>
 80051c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00c      	beq.n	80051ee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e0:	461a      	mov	r2, r3
 80051e2:	2301      	movs	r3, #1
 80051e4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80051e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fec3 	bl	8005f74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00c      	beq.n	8005212 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	461a      	mov	r2, r3
 8005206:	2308      	movs	r3, #8
 8005208:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800520a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 ff99 	bl	8006144 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005228:	461a      	mov	r2, r3
 800522a:	2310      	movs	r3, #16
 800522c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d030      	beq.n	800529a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005240:	2b80      	cmp	r3, #128	; 0x80
 8005242:	d109      	bne.n	8005258 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	69fa      	ldr	r2, [r7, #28]
 800524e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005256:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	4613      	mov	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	4413      	add	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	4413      	add	r3, r2
 800526a:	3304      	adds	r3, #4
 800526c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	78db      	ldrb	r3, [r3, #3]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d108      	bne.n	8005288 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2200      	movs	r2, #0
 800527a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	b2db      	uxtb	r3, r3
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f007 f99a 	bl	800c5bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005294:	461a      	mov	r2, r3
 8005296:	2302      	movs	r3, #2
 8005298:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b0:	461a      	mov	r2, r3
 80052b2:	2320      	movs	r3, #32
 80052b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d009      	beq.n	80052d4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052cc:	461a      	mov	r2, r3
 80052ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052d2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	3301      	adds	r3, #1
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f47f af62 	bne.w	80051ac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f004 fd2d 	bl	8009d4c <USB_ReadInterrupts>
 80052f2:	4603      	mov	r3, r0
 80052f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052fc:	f040 80db 	bne.w	80054b6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f004 fd4e 	bl	8009da6 <USB_ReadDevAllInEpInterrupt>
 800530a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005310:	e0cd      	b.n	80054ae <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80c2 	beq.w	80054a2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	4611      	mov	r1, r2
 8005328:	4618      	mov	r0, r3
 800532a:	f004 fd74 	bl	8009e16 <USB_ReadDevInEPInterrupt>
 800532e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d057      	beq.n	80053ea <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	2201      	movs	r2, #1
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	43db      	mvns	r3, r3
 8005354:	69f9      	ldr	r1, [r7, #28]
 8005356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800535a:	4013      	ands	r3, r2
 800535c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536a:	461a      	mov	r2, r3
 800536c:	2301      	movs	r3, #1
 800536e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d132      	bne.n	80053de <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537c:	4613      	mov	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	334c      	adds	r3, #76	; 0x4c
 8005388:	6819      	ldr	r1, [r3, #0]
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538e:	4613      	mov	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	4413      	add	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4403      	add	r3, r0
 8005398:	3348      	adds	r3, #72	; 0x48
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4419      	add	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a2:	4613      	mov	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4403      	add	r3, r0
 80053ac:	334c      	adds	r3, #76	; 0x4c
 80053ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d113      	bne.n	80053de <HAL_PCD_IRQHandler+0x3a2>
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ba:	4613      	mov	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	3354      	adds	r3, #84	; 0x54
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d108      	bne.n	80053de <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053d6:	461a      	mov	r2, r3
 80053d8:	2101      	movs	r1, #1
 80053da:	f004 fd7b 	bl	8009ed4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f007 f864 	bl	800c4b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d008      	beq.n	8005406 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005400:	461a      	mov	r2, r3
 8005402:	2308      	movs	r3, #8
 8005404:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	461a      	mov	r2, r3
 800541e:	2310      	movs	r3, #16
 8005420:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005438:	461a      	mov	r2, r3
 800543a:	2340      	movs	r3, #64	; 0x40
 800543c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d023      	beq.n	8005490 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800544a:	6a38      	ldr	r0, [r7, #32]
 800544c:	f003 fc5c 	bl	8008d08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005452:	4613      	mov	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	3338      	adds	r3, #56	; 0x38
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	4413      	add	r3, r2
 8005460:	3304      	adds	r3, #4
 8005462:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	78db      	ldrb	r3, [r3, #3]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d108      	bne.n	800547e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2200      	movs	r2, #0
 8005470:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	b2db      	uxtb	r3, r3
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f007 f8b1 	bl	800c5e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548a:	461a      	mov	r2, r3
 800548c:	2302      	movs	r3, #2
 800548e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800549a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fcdb 	bl	8005e58 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	3301      	adds	r3, #1
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f47f af2e 	bne.w	8005312 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f004 fc46 	bl	8009d4c <USB_ReadInterrupts>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ca:	d122      	bne.n	8005512 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d108      	bne.n	80054fc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054f2:	2100      	movs	r1, #0
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fec3 	bl	8006280 <HAL_PCDEx_LPM_Callback>
 80054fa:	e002      	b.n	8005502 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f007 f84f 	bl	800c5a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695a      	ldr	r2, [r3, #20]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f004 fc18 	bl	8009d4c <USB_ReadInterrupts>
 800551c:	4603      	mov	r3, r0
 800551e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005526:	d112      	bne.n	800554e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b01      	cmp	r3, #1
 8005536:	d102      	bne.n	800553e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f007 f80b 	bl	800c554 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695a      	ldr	r2, [r3, #20]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800554c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f004 fbfa 	bl	8009d4c <USB_ReadInterrupts>
 8005558:	4603      	mov	r3, r0
 800555a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800555e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005562:	f040 80b7 	bne.w	80056d4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2110      	movs	r1, #16
 8005580:	4618      	mov	r0, r3
 8005582:	f003 fbc1 	bl	8008d08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005586:	2300      	movs	r3, #0
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558a:	e046      	b.n	800561a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	461a      	mov	r2, r3
 800559a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800559e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055cc:	461a      	mov	r2, r3
 80055ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e4:	0151      	lsls	r1, r2, #5
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	440a      	add	r2, r1
 80055ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005604:	0151      	lsls	r1, r2, #5
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	440a      	add	r2, r1
 800560a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005612:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005616:	3301      	adds	r3, #1
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005620:	429a      	cmp	r2, r3
 8005622:	d3b3      	bcc.n	800558c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005632:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005636:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563c:	2b00      	cmp	r3, #0
 800563e:	d016      	beq.n	800566e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005650:	f043 030b 	orr.w	r3, r3, #11
 8005654:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005666:	f043 030b 	orr.w	r3, r3, #11
 800566a:	6453      	str	r3, [r2, #68]	; 0x44
 800566c:	e015      	b.n	800569a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800567c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005680:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005684:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005694:	f043 030b 	orr.w	r3, r3, #11
 8005698:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056ac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056be:	461a      	mov	r2, r3
 80056c0:	f004 fc08 	bl	8009ed4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695a      	ldr	r2, [r3, #20]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80056d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	f004 fb37 	bl	8009d4c <USB_ReadInterrupts>
 80056de:	4603      	mov	r3, r0
 80056e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e8:	d124      	bne.n	8005734 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f004 fbcd 	bl	8009e8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f003 fb82 	bl	8008e02 <USB_GetDevSpeed>
 80056fe:	4603      	mov	r3, r0
 8005700:	461a      	mov	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681c      	ldr	r4, [r3, #0]
 800570a:	f001 fa29 	bl	8006b60 <HAL_RCC_GetHCLKFreq>
 800570e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005714:	b2db      	uxtb	r3, r3
 8005716:	461a      	mov	r2, r3
 8005718:	4620      	mov	r0, r4
 800571a:	f003 f881 	bl	8008820 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f006 feef 	bl	800c502 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695a      	ldr	r2, [r3, #20]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005732:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f004 fb07 	bl	8009d4c <USB_ReadInterrupts>
 800573e:	4603      	mov	r3, r0
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b08      	cmp	r3, #8
 8005746:	d10a      	bne.n	800575e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f006 fecc 	bl	800c4e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695a      	ldr	r2, [r3, #20]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f002 0208 	and.w	r2, r2, #8
 800575c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f004 faf2 	bl	8009d4c <USB_ReadInterrupts>
 8005768:	4603      	mov	r3, r0
 800576a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d122      	bne.n	80057b8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800577e:	2301      	movs	r3, #1
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
 8005782:	e014      	b.n	80057ae <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005788:	4613      	mov	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d105      	bne.n	80057a8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fb27 	bl	8005df6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	3301      	adds	r3, #1
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d3e5      	bcc.n	8005784 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4618      	mov	r0, r3
 80057be:	f004 fac5 	bl	8009d4c <USB_ReadInterrupts>
 80057c2:	4603      	mov	r3, r0
 80057c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057cc:	d13b      	bne.n	8005846 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057ce:	2301      	movs	r3, #1
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
 80057d2:	e02b      	b.n	800582c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	440b      	add	r3, r1
 80057f2:	3340      	adds	r3, #64	; 0x40
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d115      	bne.n	8005826 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80057fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	da12      	bge.n	8005826 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005804:	4613      	mov	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	333f      	adds	r3, #63	; 0x3f
 8005810:	2201      	movs	r2, #1
 8005812:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800581c:	b2db      	uxtb	r3, r3
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fae8 	bl	8005df6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	3301      	adds	r3, #1
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005832:	429a      	cmp	r2, r3
 8005834:	d3ce      	bcc.n	80057d4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695a      	ldr	r2, [r3, #20]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f004 fa7e 	bl	8009d4c <USB_ReadInterrupts>
 8005850:	4603      	mov	r3, r0
 8005852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800585a:	d155      	bne.n	8005908 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800585c:	2301      	movs	r3, #1
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
 8005860:	e045      	b.n	80058ee <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005876:	4613      	mov	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d12e      	bne.n	80058e8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800588a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800588c:	2b00      	cmp	r3, #0
 800588e:	da2b      	bge.n	80058e8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800589c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d121      	bne.n	80058e8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a8:	4613      	mov	r3, r2
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	440b      	add	r3, r1
 80058b2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80058b6:	2201      	movs	r2, #1
 80058b8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058e4:	6053      	str	r3, [r2, #4]
            break;
 80058e6:	e007      	b.n	80058f8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	3301      	adds	r3, #1
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d3b4      	bcc.n	8005862 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695a      	ldr	r2, [r3, #20]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f004 fa1d 	bl	8009d4c <USB_ReadInterrupts>
 8005912:	4603      	mov	r3, r0
 8005914:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591c:	d10a      	bne.n	8005934 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f006 fe70 	bl	800c604 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f004 fa07 	bl	8009d4c <USB_ReadInterrupts>
 800593e:	4603      	mov	r3, r0
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b04      	cmp	r3, #4
 8005946:	d115      	bne.n	8005974 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f006 fe60 	bl	800c620 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
 8005970:	e000      	b.n	8005974 <HAL_PCD_IRQHandler+0x938>
      return;
 8005972:	bf00      	nop
    }
  }
}
 8005974:	3734      	adds	r7, #52	; 0x34
 8005976:	46bd      	mov	sp, r7
 8005978:	bd90      	pop	{r4, r7, pc}

0800597a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <HAL_PCD_SetAddress+0x1a>
 8005990:	2302      	movs	r3, #2
 8005992:	e013      	b.n	80059bc <HAL_PCD_SetAddress+0x42>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	78fa      	ldrb	r2, [r7, #3]
 80059a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	78fa      	ldrb	r2, [r7, #3]
 80059aa:	4611      	mov	r1, r2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f004 f965 	bl	8009c7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	4608      	mov	r0, r1
 80059ce:	4611      	mov	r1, r2
 80059d0:	461a      	mov	r2, r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	70fb      	strb	r3, [r7, #3]
 80059d6:	460b      	mov	r3, r1
 80059d8:	803b      	strh	r3, [r7, #0]
 80059da:	4613      	mov	r3, r2
 80059dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	da0f      	bge.n	8005a0a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	f003 020f 	and.w	r2, r3, #15
 80059f0:	4613      	mov	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	3338      	adds	r3, #56	; 0x38
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	4413      	add	r3, r2
 80059fe:	3304      	adds	r3, #4
 8005a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	705a      	strb	r2, [r3, #1]
 8005a08:	e00f      	b.n	8005a2a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a0a:	78fb      	ldrb	r3, [r7, #3]
 8005a0c:	f003 020f 	and.w	r2, r3, #15
 8005a10:	4613      	mov	r3, r2
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	4413      	add	r3, r2
 8005a20:	3304      	adds	r3, #4
 8005a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a36:	883a      	ldrh	r2, [r7, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	78ba      	ldrb	r2, [r7, #2]
 8005a40:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	785b      	ldrb	r3, [r3, #1]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d004      	beq.n	8005a54 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a54:	78bb      	ldrb	r3, [r7, #2]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d102      	bne.n	8005a60 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d101      	bne.n	8005a6e <HAL_PCD_EP_Open+0xaa>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e00e      	b.n	8005a8c <HAL_PCD_EP_Open+0xc8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68f9      	ldr	r1, [r7, #12]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f003 f9e5 	bl	8008e4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005a8a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	da0f      	bge.n	8005ac8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	f003 020f 	and.w	r2, r3, #15
 8005aae:	4613      	mov	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	3338      	adds	r3, #56	; 0x38
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	4413      	add	r3, r2
 8005abc:	3304      	adds	r3, #4
 8005abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	705a      	strb	r2, [r3, #1]
 8005ac6:	e00f      	b.n	8005ae8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	f003 020f 	and.w	r2, r3, #15
 8005ace:	4613      	mov	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	3304      	adds	r3, #4
 8005ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_PCD_EP_Close+0x6e>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e00e      	b.n	8005b20 <HAL_PCD_EP_Close+0x8c>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f003 fa23 	bl	8008f5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	607a      	str	r2, [r7, #4]
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	460b      	mov	r3, r1
 8005b36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b38:	7afb      	ldrb	r3, [r7, #11]
 8005b3a:	f003 020f 	and.w	r2, r3, #15
 8005b3e:	4613      	mov	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3304      	adds	r3, #4
 8005b50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2200      	movs	r2, #0
 8005b62:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2200      	movs	r2, #0
 8005b68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b6a:	7afb      	ldrb	r3, [r7, #11]
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d102      	bne.n	8005b84 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b84:	7afb      	ldrb	r3, [r7, #11]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d109      	bne.n	8005ba2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6979      	ldr	r1, [r7, #20]
 8005b9c:	f003 fd02 	bl	80095a4 <USB_EP0StartXfer>
 8005ba0:	e008      	b.n	8005bb4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	461a      	mov	r2, r3
 8005bae:	6979      	ldr	r1, [r7, #20]
 8005bb0:	f003 fab0 	bl	8009114 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	f003 020f 	and.w	r2, r3, #15
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005be0:	681b      	ldr	r3, [r3, #0]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b086      	sub	sp, #24
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bfe:	7afb      	ldrb	r3, [r7, #11]
 8005c00:	f003 020f 	and.w	r2, r3, #15
 8005c04:	4613      	mov	r3, r2
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	3338      	adds	r3, #56	; 0x38
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	3304      	adds	r3, #4
 8005c14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2200      	movs	r2, #0
 8005c26:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c2e:	7afb      	ldrb	r3, [r7, #11]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d102      	bne.n	8005c48 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c48:	7afb      	ldrb	r3, [r7, #11]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6979      	ldr	r1, [r7, #20]
 8005c60:	f003 fca0 	bl	80095a4 <USB_EP0StartXfer>
 8005c64:	e008      	b.n	8005c78 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	6979      	ldr	r1, [r7, #20]
 8005c74:	f003 fa4e 	bl	8009114 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	f003 020f 	and.w	r2, r3, #15
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d901      	bls.n	8005ca0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e050      	b.n	8005d42 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	da0f      	bge.n	8005cc8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	f003 020f 	and.w	r2, r3, #15
 8005cae:	4613      	mov	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	3338      	adds	r3, #56	; 0x38
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	4413      	add	r3, r2
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	705a      	strb	r2, [r3, #1]
 8005cc6:	e00d      	b.n	8005ce4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cc8:	78fa      	ldrb	r2, [r7, #3]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	4413      	add	r3, r2
 8005cda:	3304      	adds	r3, #4
 8005cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d101      	bne.n	8005d04 <HAL_PCD_EP_SetStall+0x82>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e01e      	b.n	8005d42 <HAL_PCD_EP_SetStall+0xc0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68f9      	ldr	r1, [r7, #12]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f003 fede 	bl	8009ad4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	b2d9      	uxtb	r1, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d32:	461a      	mov	r2, r3
 8005d34:	f004 f8ce 	bl	8009ed4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d56:	78fb      	ldrb	r3, [r7, #3]
 8005d58:	f003 020f 	and.w	r2, r3, #15
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d901      	bls.n	8005d68 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e042      	b.n	8005dee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	da0f      	bge.n	8005d90 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	f003 020f 	and.w	r2, r3, #15
 8005d76:	4613      	mov	r3, r2
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	3338      	adds	r3, #56	; 0x38
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4413      	add	r3, r2
 8005d84:	3304      	adds	r3, #4
 8005d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	705a      	strb	r2, [r3, #1]
 8005d8e:	e00f      	b.n	8005db0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	f003 020f 	and.w	r2, r3, #15
 8005d96:	4613      	mov	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	4413      	add	r3, r2
 8005da6:	3304      	adds	r3, #4
 8005da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_PCD_EP_ClrStall+0x86>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e00e      	b.n	8005dee <HAL_PCD_EP_ClrStall+0xa4>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68f9      	ldr	r1, [r7, #12]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f003 fee6 	bl	8009bb0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	da0c      	bge.n	8005e24 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	f003 020f 	and.w	r2, r3, #15
 8005e10:	4613      	mov	r3, r2
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	3338      	adds	r3, #56	; 0x38
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	3304      	adds	r3, #4
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	e00c      	b.n	8005e3e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	f003 020f 	and.w	r2, r3, #15
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	4413      	add	r3, r2
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68f9      	ldr	r1, [r7, #12]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f003 fd05 	bl	8009854 <USB_EPStopXfer>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005e4e:	7afb      	ldrb	r3, [r7, #11]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	; 0x28
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	3338      	adds	r3, #56	; 0x38
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d901      	bls.n	8005e90 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e06c      	b.n	8005f6a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d902      	bls.n	8005eac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	3303      	adds	r3, #3
 8005eb0:	089b      	lsrs	r3, r3, #2
 8005eb2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005eb4:	e02b      	b.n	8005f0e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d902      	bls.n	8005ed2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	3303      	adds	r3, #3
 8005ed6:	089b      	lsrs	r3, r3, #2
 8005ed8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6919      	ldr	r1, [r3, #16]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	4603      	mov	r3, r0
 8005ef0:	6978      	ldr	r0, [r7, #20]
 8005ef2:	f003 fd59 	bl	80099a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	441a      	add	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a1a      	ldr	r2, [r3, #32]
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	441a      	add	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d809      	bhi.n	8005f38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a1a      	ldr	r2, [r3, #32]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d203      	bcs.n	8005f38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1be      	bne.n	8005eb6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	699a      	ldr	r2, [r3, #24]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d811      	bhi.n	8005f68 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f50:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	6939      	ldr	r1, [r7, #16]
 8005f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f64:	4013      	ands	r3, r2
 8005f66:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3720      	adds	r7, #32
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	333c      	adds	r3, #60	; 0x3c
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d17b      	bne.n	80060a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d015      	beq.n	8005fe0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	4a61      	ldr	r2, [pc, #388]	; (800613c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	f240 80b9 	bls.w	8006130 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 80b3 	beq.w	8006130 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fdc:	6093      	str	r3, [r2, #8]
 8005fde:	e0a7      	b.n	8006130 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d009      	beq.n	8005ffe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	2320      	movs	r3, #32
 8005ffa:	6093      	str	r3, [r2, #8]
 8005ffc:	e098      	b.n	8006130 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 8093 	bne.w	8006130 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4a4b      	ldr	r2, [pc, #300]	; (800613c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d90f      	bls.n	8006032 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	461a      	mov	r2, r3
 800602a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602e:	6093      	str	r3, [r2, #8]
 8006030:	e07e      	b.n	8006130 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	4613      	mov	r3, r2
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	4413      	add	r3, r2
 8006044:	3304      	adds	r3, #4
 8006046:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	0159      	lsls	r1, r3, #5
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	440b      	add	r3, r1
 8006054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800605e:	1ad2      	subs	r2, r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d114      	bne.n	8006094 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6818      	ldr	r0, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800607c:	461a      	mov	r2, r3
 800607e:	2101      	movs	r1, #1
 8006080:	f003 ff28 	bl	8009ed4 <USB_EP0_OutStart>
 8006084:	e006      	b.n	8006094 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	441a      	add	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f006 f9ee 	bl	800c47c <HAL_PCD_DataOutStageCallback>
 80060a0:	e046      	b.n	8006130 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	4a26      	ldr	r2, [pc, #152]	; (8006140 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d124      	bne.n	80060f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	461a      	mov	r2, r3
 80060c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c6:	6093      	str	r3, [r2, #8]
 80060c8:	e032      	b.n	8006130 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	461a      	mov	r2, r3
 80060e2:	2320      	movs	r3, #32
 80060e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f006 f9c5 	bl	800c47c <HAL_PCD_DataOutStageCallback>
 80060f2:	e01d      	b.n	8006130 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d114      	bne.n	8006124 <PCD_EP_OutXfrComplete_int+0x1b0>
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	440b      	add	r3, r1
 8006108:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d108      	bne.n	8006124 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800611c:	461a      	mov	r2, r3
 800611e:	2100      	movs	r1, #0
 8006120:	f003 fed8 	bl	8009ed4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	b2db      	uxtb	r3, r3
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f006 f9a6 	bl	800c47c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	4f54300a 	.word	0x4f54300a
 8006140:	4f54310a 	.word	0x4f54310a

08006144 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	333c      	adds	r3, #60	; 0x3c
 800615c:	3304      	adds	r3, #4
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4a15      	ldr	r2, [pc, #84]	; (80061cc <PCD_EP_OutSetupPacket_int+0x88>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d90e      	bls.n	8006198 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006180:	2b00      	cmp	r3, #0
 8006182:	d009      	beq.n	8006198 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006190:	461a      	mov	r2, r3
 8006192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006196:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f006 f95d 	bl	800c458 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <PCD_EP_OutSetupPacket_int+0x88>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d90c      	bls.n	80061c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d108      	bne.n	80061c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061b8:	461a      	mov	r2, r3
 80061ba:	2101      	movs	r1, #1
 80061bc:	f003 fe8a 	bl	8009ed4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	4f54300a 	.word	0x4f54300a

080061d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
 80061dc:	4613      	mov	r3, r2
 80061de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d107      	bne.n	80061fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80061ee:	883b      	ldrh	r3, [r7, #0]
 80061f0:	0419      	lsls	r1, r3, #16
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	629a      	str	r2, [r3, #40]	; 0x28
 80061fc:	e028      	b.n	8006250 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	4413      	add	r3, r2
 800620a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800620c:	2300      	movs	r3, #0
 800620e:	73fb      	strb	r3, [r7, #15]
 8006210:	e00d      	b.n	800622e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	3340      	adds	r3, #64	; 0x40
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	0c1b      	lsrs	r3, r3, #16
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	4413      	add	r3, r2
 8006226:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	3301      	adds	r3, #1
 800622c:	73fb      	strb	r3, [r7, #15]
 800622e:	7bfa      	ldrb	r2, [r7, #15]
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	3b01      	subs	r3, #1
 8006234:	429a      	cmp	r2, r3
 8006236:	d3ec      	bcc.n	8006212 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006238:	883b      	ldrh	r3, [r7, #0]
 800623a:	0418      	lsls	r0, r3, #16
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6819      	ldr	r1, [r3, #0]
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	3b01      	subs	r3, #1
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	4302      	orrs	r2, r0
 8006248:	3340      	adds	r3, #64	; 0x40
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	440b      	add	r3, r1
 800624e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	887a      	ldrh	r2, [r7, #2]
 8006270:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e267      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d075      	beq.n	80063a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062b6:	4b88      	ldr	r3, [pc, #544]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 030c 	and.w	r3, r3, #12
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d00c      	beq.n	80062dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062c2:	4b85      	ldr	r3, [pc, #532]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d112      	bne.n	80062f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ce:	4b82      	ldr	r3, [pc, #520]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062da:	d10b      	bne.n	80062f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062dc:	4b7e      	ldr	r3, [pc, #504]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d05b      	beq.n	80063a0 <HAL_RCC_OscConfig+0x108>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d157      	bne.n	80063a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e242      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fc:	d106      	bne.n	800630c <HAL_RCC_OscConfig+0x74>
 80062fe:	4b76      	ldr	r3, [pc, #472]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a75      	ldr	r2, [pc, #468]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 8006304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	e01d      	b.n	8006348 <HAL_RCC_OscConfig+0xb0>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006314:	d10c      	bne.n	8006330 <HAL_RCC_OscConfig+0x98>
 8006316:	4b70      	ldr	r3, [pc, #448]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a6f      	ldr	r2, [pc, #444]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 800631c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	4b6d      	ldr	r3, [pc, #436]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a6c      	ldr	r2, [pc, #432]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 8006328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	e00b      	b.n	8006348 <HAL_RCC_OscConfig+0xb0>
 8006330:	4b69      	ldr	r3, [pc, #420]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a68      	ldr	r2, [pc, #416]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 8006336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	4b66      	ldr	r3, [pc, #408]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a65      	ldr	r2, [pc, #404]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 8006342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d013      	beq.n	8006378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006350:	f7fd f882 	bl	8003458 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006358:	f7fd f87e 	bl	8003458 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b64      	cmp	r3, #100	; 0x64
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e207      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636a:	4b5b      	ldr	r3, [pc, #364]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0xc0>
 8006376:	e014      	b.n	80063a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006378:	f7fd f86e 	bl	8003458 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006380:	f7fd f86a 	bl	8003458 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b64      	cmp	r3, #100	; 0x64
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e1f3      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006392:	4b51      	ldr	r3, [pc, #324]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f0      	bne.n	8006380 <HAL_RCC_OscConfig+0xe8>
 800639e:	e000      	b.n	80063a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d063      	beq.n	8006476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063ae:	4b4a      	ldr	r3, [pc, #296]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 030c 	and.w	r3, r3, #12
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ba:	4b47      	ldr	r3, [pc, #284]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063c2:	2b08      	cmp	r3, #8
 80063c4:	d11c      	bne.n	8006400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063c6:	4b44      	ldr	r3, [pc, #272]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d116      	bne.n	8006400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063d2:	4b41      	ldr	r3, [pc, #260]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <HAL_RCC_OscConfig+0x152>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d001      	beq.n	80063ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e1c7      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ea:	4b3b      	ldr	r3, [pc, #236]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	4937      	ldr	r1, [pc, #220]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063fe:	e03a      	b.n	8006476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d020      	beq.n	800644a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006408:	4b34      	ldr	r3, [pc, #208]	; (80064dc <HAL_RCC_OscConfig+0x244>)
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640e:	f7fd f823 	bl	8003458 <HAL_GetTick>
 8006412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006414:	e008      	b.n	8006428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006416:	f7fd f81f 	bl	8003458 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e1a8      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006428:	4b2b      	ldr	r3, [pc, #172]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0f0      	beq.n	8006416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006434:	4b28      	ldr	r3, [pc, #160]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	4925      	ldr	r1, [pc, #148]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 8006444:	4313      	orrs	r3, r2
 8006446:	600b      	str	r3, [r1, #0]
 8006448:	e015      	b.n	8006476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800644a:	4b24      	ldr	r3, [pc, #144]	; (80064dc <HAL_RCC_OscConfig+0x244>)
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006450:	f7fd f802 	bl	8003458 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006458:	f7fc fffe 	bl	8003458 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e187      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800646a:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f0      	bne.n	8006458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d036      	beq.n	80064f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d016      	beq.n	80064b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800648a:	4b15      	ldr	r3, [pc, #84]	; (80064e0 <HAL_RCC_OscConfig+0x248>)
 800648c:	2201      	movs	r2, #1
 800648e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006490:	f7fc ffe2 	bl	8003458 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006498:	f7fc ffde 	bl	8003458 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e167      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064aa:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <HAL_RCC_OscConfig+0x240>)
 80064ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0f0      	beq.n	8006498 <HAL_RCC_OscConfig+0x200>
 80064b6:	e01b      	b.n	80064f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064b8:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <HAL_RCC_OscConfig+0x248>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064be:	f7fc ffcb 	bl	8003458 <HAL_GetTick>
 80064c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c4:	e00e      	b.n	80064e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064c6:	f7fc ffc7 	bl	8003458 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d907      	bls.n	80064e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e150      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
 80064d8:	40023800 	.word	0x40023800
 80064dc:	42470000 	.word	0x42470000
 80064e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064e4:	4b88      	ldr	r3, [pc, #544]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 80064e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1ea      	bne.n	80064c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 8097 	beq.w	800662c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064fe:	2300      	movs	r3, #0
 8006500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006502:	4b81      	ldr	r3, [pc, #516]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10f      	bne.n	800652e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800650e:	2300      	movs	r3, #0
 8006510:	60bb      	str	r3, [r7, #8]
 8006512:	4b7d      	ldr	r3, [pc, #500]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	4a7c      	ldr	r2, [pc, #496]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 8006518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800651c:	6413      	str	r3, [r2, #64]	; 0x40
 800651e:	4b7a      	ldr	r3, [pc, #488]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006526:	60bb      	str	r3, [r7, #8]
 8006528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800652a:	2301      	movs	r3, #1
 800652c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800652e:	4b77      	ldr	r3, [pc, #476]	; (800670c <HAL_RCC_OscConfig+0x474>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d118      	bne.n	800656c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800653a:	4b74      	ldr	r3, [pc, #464]	; (800670c <HAL_RCC_OscConfig+0x474>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a73      	ldr	r2, [pc, #460]	; (800670c <HAL_RCC_OscConfig+0x474>)
 8006540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006546:	f7fc ff87 	bl	8003458 <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800654c:	e008      	b.n	8006560 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800654e:	f7fc ff83 	bl	8003458 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b02      	cmp	r3, #2
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e10c      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006560:	4b6a      	ldr	r3, [pc, #424]	; (800670c <HAL_RCC_OscConfig+0x474>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0f0      	beq.n	800654e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d106      	bne.n	8006582 <HAL_RCC_OscConfig+0x2ea>
 8006574:	4b64      	ldr	r3, [pc, #400]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 8006576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006578:	4a63      	ldr	r2, [pc, #396]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	6713      	str	r3, [r2, #112]	; 0x70
 8006580:	e01c      	b.n	80065bc <HAL_RCC_OscConfig+0x324>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	2b05      	cmp	r3, #5
 8006588:	d10c      	bne.n	80065a4 <HAL_RCC_OscConfig+0x30c>
 800658a:	4b5f      	ldr	r3, [pc, #380]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 800658c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658e:	4a5e      	ldr	r2, [pc, #376]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 8006590:	f043 0304 	orr.w	r3, r3, #4
 8006594:	6713      	str	r3, [r2, #112]	; 0x70
 8006596:	4b5c      	ldr	r3, [pc, #368]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 8006598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659a:	4a5b      	ldr	r2, [pc, #364]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	6713      	str	r3, [r2, #112]	; 0x70
 80065a2:	e00b      	b.n	80065bc <HAL_RCC_OscConfig+0x324>
 80065a4:	4b58      	ldr	r3, [pc, #352]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 80065a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a8:	4a57      	ldr	r2, [pc, #348]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 80065aa:	f023 0301 	bic.w	r3, r3, #1
 80065ae:	6713      	str	r3, [r2, #112]	; 0x70
 80065b0:	4b55      	ldr	r3, [pc, #340]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 80065b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b4:	4a54      	ldr	r2, [pc, #336]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 80065b6:	f023 0304 	bic.w	r3, r3, #4
 80065ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d015      	beq.n	80065f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c4:	f7fc ff48 	bl	8003458 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ca:	e00a      	b.n	80065e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065cc:	f7fc ff44 	bl	8003458 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065da:	4293      	cmp	r3, r2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e0cb      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065e2:	4b49      	ldr	r3, [pc, #292]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 80065e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0ee      	beq.n	80065cc <HAL_RCC_OscConfig+0x334>
 80065ee:	e014      	b.n	800661a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065f0:	f7fc ff32 	bl	8003458 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065f6:	e00a      	b.n	800660e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f8:	f7fc ff2e 	bl	8003458 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	f241 3288 	movw	r2, #5000	; 0x1388
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e0b5      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800660e:	4b3e      	ldr	r3, [pc, #248]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 8006610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1ee      	bne.n	80065f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800661a:	7dfb      	ldrb	r3, [r7, #23]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d105      	bne.n	800662c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006620:	4b39      	ldr	r3, [pc, #228]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	4a38      	ldr	r2, [pc, #224]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 8006626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800662a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 80a1 	beq.w	8006778 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006636:	4b34      	ldr	r3, [pc, #208]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f003 030c 	and.w	r3, r3, #12
 800663e:	2b08      	cmp	r3, #8
 8006640:	d05c      	beq.n	80066fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	2b02      	cmp	r3, #2
 8006648:	d141      	bne.n	80066ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800664a:	4b31      	ldr	r3, [pc, #196]	; (8006710 <HAL_RCC_OscConfig+0x478>)
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006650:	f7fc ff02 	bl	8003458 <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006658:	f7fc fefe 	bl	8003458 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e087      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800666a:	4b27      	ldr	r3, [pc, #156]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f0      	bne.n	8006658 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69da      	ldr	r2, [r3, #28]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	019b      	lsls	r3, r3, #6
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	3b01      	subs	r3, #1
 8006690:	041b      	lsls	r3, r3, #16
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	061b      	lsls	r3, r3, #24
 800669a:	491b      	ldr	r1, [pc, #108]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 800669c:	4313      	orrs	r3, r2
 800669e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066a0:	4b1b      	ldr	r3, [pc, #108]	; (8006710 <HAL_RCC_OscConfig+0x478>)
 80066a2:	2201      	movs	r2, #1
 80066a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a6:	f7fc fed7 	bl	8003458 <HAL_GetTick>
 80066aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ac:	e008      	b.n	80066c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ae:	f7fc fed3 	bl	8003458 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e05c      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066c0:	4b11      	ldr	r3, [pc, #68]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0f0      	beq.n	80066ae <HAL_RCC_OscConfig+0x416>
 80066cc:	e054      	b.n	8006778 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ce:	4b10      	ldr	r3, [pc, #64]	; (8006710 <HAL_RCC_OscConfig+0x478>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d4:	f7fc fec0 	bl	8003458 <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066dc:	f7fc febc 	bl	8003458 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e045      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ee:	4b06      	ldr	r3, [pc, #24]	; (8006708 <HAL_RCC_OscConfig+0x470>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f0      	bne.n	80066dc <HAL_RCC_OscConfig+0x444>
 80066fa:	e03d      	b.n	8006778 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d107      	bne.n	8006714 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e038      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
 8006708:	40023800 	.word	0x40023800
 800670c:	40007000 	.word	0x40007000
 8006710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006714:	4b1b      	ldr	r3, [pc, #108]	; (8006784 <HAL_RCC_OscConfig+0x4ec>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d028      	beq.n	8006774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800672c:	429a      	cmp	r2, r3
 800672e:	d121      	bne.n	8006774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800673a:	429a      	cmp	r2, r3
 800673c:	d11a      	bne.n	8006774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006744:	4013      	ands	r3, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800674a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800674c:	4293      	cmp	r3, r2
 800674e:	d111      	bne.n	8006774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675a:	085b      	lsrs	r3, r3, #1
 800675c:	3b01      	subs	r3, #1
 800675e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006760:	429a      	cmp	r2, r3
 8006762:	d107      	bne.n	8006774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006770:	429a      	cmp	r2, r3
 8006772:	d001      	beq.n	8006778 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	40023800 	.word	0x40023800

08006788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e0cc      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800679c:	4b68      	ldr	r3, [pc, #416]	; (8006940 <HAL_RCC_ClockConfig+0x1b8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d90c      	bls.n	80067c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067aa:	4b65      	ldr	r3, [pc, #404]	; (8006940 <HAL_RCC_ClockConfig+0x1b8>)
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b2:	4b63      	ldr	r3, [pc, #396]	; (8006940 <HAL_RCC_ClockConfig+0x1b8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d001      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0b8      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d020      	beq.n	8006812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067dc:	4b59      	ldr	r3, [pc, #356]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	4a58      	ldr	r2, [pc, #352]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d005      	beq.n	8006800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067f4:	4b53      	ldr	r3, [pc, #332]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	4a52      	ldr	r2, [pc, #328]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80067fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006800:	4b50      	ldr	r3, [pc, #320]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	494d      	ldr	r1, [pc, #308]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 800680e:	4313      	orrs	r3, r2
 8006810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d044      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d107      	bne.n	8006836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006826:	4b47      	ldr	r3, [pc, #284]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d119      	bne.n	8006866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e07f      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d003      	beq.n	8006846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006842:	2b03      	cmp	r3, #3
 8006844:	d107      	bne.n	8006856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006846:	4b3f      	ldr	r3, [pc, #252]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e06f      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006856:	4b3b      	ldr	r3, [pc, #236]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e067      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006866:	4b37      	ldr	r3, [pc, #220]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f023 0203 	bic.w	r2, r3, #3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	4934      	ldr	r1, [pc, #208]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006874:	4313      	orrs	r3, r2
 8006876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006878:	f7fc fdee 	bl	8003458 <HAL_GetTick>
 800687c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687e:	e00a      	b.n	8006896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006880:	f7fc fdea 	bl	8003458 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	f241 3288 	movw	r2, #5000	; 0x1388
 800688e:	4293      	cmp	r3, r2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e04f      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006896:	4b2b      	ldr	r3, [pc, #172]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 020c 	and.w	r2, r3, #12
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d1eb      	bne.n	8006880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068a8:	4b25      	ldr	r3, [pc, #148]	; (8006940 <HAL_RCC_ClockConfig+0x1b8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d20c      	bcs.n	80068d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b6:	4b22      	ldr	r3, [pc, #136]	; (8006940 <HAL_RCC_ClockConfig+0x1b8>)
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068be:	4b20      	ldr	r3, [pc, #128]	; (8006940 <HAL_RCC_ClockConfig+0x1b8>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0307 	and.w	r3, r3, #7
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d001      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e032      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d008      	beq.n	80068ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068dc:	4b19      	ldr	r3, [pc, #100]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	4916      	ldr	r1, [pc, #88]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068fa:	4b12      	ldr	r3, [pc, #72]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	490e      	ldr	r1, [pc, #56]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	4313      	orrs	r3, r2
 800690c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800690e:	f000 f821 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 8006912:	4602      	mov	r2, r0
 8006914:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	091b      	lsrs	r3, r3, #4
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	490a      	ldr	r1, [pc, #40]	; (8006948 <HAL_RCC_ClockConfig+0x1c0>)
 8006920:	5ccb      	ldrb	r3, [r1, r3]
 8006922:	fa22 f303 	lsr.w	r3, r2, r3
 8006926:	4a09      	ldr	r2, [pc, #36]	; (800694c <HAL_RCC_ClockConfig+0x1c4>)
 8006928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800692a:	4b09      	ldr	r3, [pc, #36]	; (8006950 <HAL_RCC_ClockConfig+0x1c8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f7fc fd4e 	bl	80033d0 <HAL_InitTick>

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40023c00 	.word	0x40023c00
 8006944:	40023800 	.word	0x40023800
 8006948:	0800cd14 	.word	0x0800cd14
 800694c:	20000024 	.word	0x20000024
 8006950:	20000028 	.word	0x20000028

08006954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006958:	b094      	sub	sp, #80	; 0x50
 800695a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	647b      	str	r3, [r7, #68]	; 0x44
 8006960:	2300      	movs	r3, #0
 8006962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006964:	2300      	movs	r3, #0
 8006966:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800696c:	4b79      	ldr	r3, [pc, #484]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x200>)
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 030c 	and.w	r3, r3, #12
 8006974:	2b08      	cmp	r3, #8
 8006976:	d00d      	beq.n	8006994 <HAL_RCC_GetSysClockFreq+0x40>
 8006978:	2b08      	cmp	r3, #8
 800697a:	f200 80e1 	bhi.w	8006b40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <HAL_RCC_GetSysClockFreq+0x34>
 8006982:	2b04      	cmp	r3, #4
 8006984:	d003      	beq.n	800698e <HAL_RCC_GetSysClockFreq+0x3a>
 8006986:	e0db      	b.n	8006b40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006988:	4b73      	ldr	r3, [pc, #460]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x204>)
 800698a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800698c:	e0db      	b.n	8006b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800698e:	4b73      	ldr	r3, [pc, #460]	; (8006b5c <HAL_RCC_GetSysClockFreq+0x208>)
 8006990:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006992:	e0d8      	b.n	8006b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006994:	4b6f      	ldr	r3, [pc, #444]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800699c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800699e:	4b6d      	ldr	r3, [pc, #436]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d063      	beq.n	8006a72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069aa:	4b6a      	ldr	r3, [pc, #424]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	099b      	lsrs	r3, r3, #6
 80069b0:	2200      	movs	r2, #0
 80069b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80069b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069bc:	633b      	str	r3, [r7, #48]	; 0x30
 80069be:	2300      	movs	r3, #0
 80069c0:	637b      	str	r3, [r7, #52]	; 0x34
 80069c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80069c6:	4622      	mov	r2, r4
 80069c8:	462b      	mov	r3, r5
 80069ca:	f04f 0000 	mov.w	r0, #0
 80069ce:	f04f 0100 	mov.w	r1, #0
 80069d2:	0159      	lsls	r1, r3, #5
 80069d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069d8:	0150      	lsls	r0, r2, #5
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4621      	mov	r1, r4
 80069e0:	1a51      	subs	r1, r2, r1
 80069e2:	6139      	str	r1, [r7, #16]
 80069e4:	4629      	mov	r1, r5
 80069e6:	eb63 0301 	sbc.w	r3, r3, r1
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069f8:	4659      	mov	r1, fp
 80069fa:	018b      	lsls	r3, r1, #6
 80069fc:	4651      	mov	r1, sl
 80069fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a02:	4651      	mov	r1, sl
 8006a04:	018a      	lsls	r2, r1, #6
 8006a06:	4651      	mov	r1, sl
 8006a08:	ebb2 0801 	subs.w	r8, r2, r1
 8006a0c:	4659      	mov	r1, fp
 8006a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a26:	4690      	mov	r8, r2
 8006a28:	4699      	mov	r9, r3
 8006a2a:	4623      	mov	r3, r4
 8006a2c:	eb18 0303 	adds.w	r3, r8, r3
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	462b      	mov	r3, r5
 8006a34:	eb49 0303 	adc.w	r3, r9, r3
 8006a38:	60fb      	str	r3, [r7, #12]
 8006a3a:	f04f 0200 	mov.w	r2, #0
 8006a3e:	f04f 0300 	mov.w	r3, #0
 8006a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a46:	4629      	mov	r1, r5
 8006a48:	024b      	lsls	r3, r1, #9
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a50:	4621      	mov	r1, r4
 8006a52:	024a      	lsls	r2, r1, #9
 8006a54:	4610      	mov	r0, r2
 8006a56:	4619      	mov	r1, r3
 8006a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a64:	f7f9 ff9e 	bl	80009a4 <__aeabi_uldivmod>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a70:	e058      	b.n	8006b24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a72:	4b38      	ldr	r3, [pc, #224]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	099b      	lsrs	r3, r3, #6
 8006a78:	2200      	movs	r2, #0
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a82:	623b      	str	r3, [r7, #32]
 8006a84:	2300      	movs	r3, #0
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
 8006a88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	464b      	mov	r3, r9
 8006a90:	f04f 0000 	mov.w	r0, #0
 8006a94:	f04f 0100 	mov.w	r1, #0
 8006a98:	0159      	lsls	r1, r3, #5
 8006a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a9e:	0150      	lsls	r0, r2, #5
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4641      	mov	r1, r8
 8006aa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006aaa:	4649      	mov	r1, r9
 8006aac:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ab0:	f04f 0200 	mov.w	r2, #0
 8006ab4:	f04f 0300 	mov.w	r3, #0
 8006ab8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006abc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ac0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ac4:	ebb2 040a 	subs.w	r4, r2, sl
 8006ac8:	eb63 050b 	sbc.w	r5, r3, fp
 8006acc:	f04f 0200 	mov.w	r2, #0
 8006ad0:	f04f 0300 	mov.w	r3, #0
 8006ad4:	00eb      	lsls	r3, r5, #3
 8006ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ada:	00e2      	lsls	r2, r4, #3
 8006adc:	4614      	mov	r4, r2
 8006ade:	461d      	mov	r5, r3
 8006ae0:	4643      	mov	r3, r8
 8006ae2:	18e3      	adds	r3, r4, r3
 8006ae4:	603b      	str	r3, [r7, #0]
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	eb45 0303 	adc.w	r3, r5, r3
 8006aec:	607b      	str	r3, [r7, #4]
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	f04f 0300 	mov.w	r3, #0
 8006af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006afa:	4629      	mov	r1, r5
 8006afc:	028b      	lsls	r3, r1, #10
 8006afe:	4621      	mov	r1, r4
 8006b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b04:	4621      	mov	r1, r4
 8006b06:	028a      	lsls	r2, r1, #10
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b0e:	2200      	movs	r2, #0
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	61fa      	str	r2, [r7, #28]
 8006b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b18:	f7f9 ff44 	bl	80009a4 <__aeabi_uldivmod>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4613      	mov	r3, r2
 8006b22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b24:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	0c1b      	lsrs	r3, r3, #16
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	3301      	adds	r3, #1
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b3e:	e002      	b.n	8006b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b40:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3750      	adds	r7, #80	; 0x50
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b52:	bf00      	nop
 8006b54:	40023800 	.word	0x40023800
 8006b58:	00f42400 	.word	0x00f42400
 8006b5c:	007a1200 	.word	0x007a1200

08006b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b64:	4b03      	ldr	r3, [pc, #12]	; (8006b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b66:	681b      	ldr	r3, [r3, #0]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	20000024 	.word	0x20000024

08006b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b7c:	f7ff fff0 	bl	8006b60 <HAL_RCC_GetHCLKFreq>
 8006b80:	4602      	mov	r2, r0
 8006b82:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	0a9b      	lsrs	r3, r3, #10
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	4903      	ldr	r1, [pc, #12]	; (8006b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b8e:	5ccb      	ldrb	r3, [r1, r3]
 8006b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	0800cd24 	.word	0x0800cd24

08006ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ba4:	f7ff ffdc 	bl	8006b60 <HAL_RCC_GetHCLKFreq>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	0b5b      	lsrs	r3, r3, #13
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	4903      	ldr	r1, [pc, #12]	; (8006bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bb6:	5ccb      	ldrb	r3, [r1, r3]
 8006bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40023800 	.word	0x40023800
 8006bc4:	0800cd24 	.word	0x0800cd24

08006bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d105      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d035      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006bf0:	4b62      	ldr	r3, [pc, #392]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bf6:	f7fc fc2f 	bl	8003458 <HAL_GetTick>
 8006bfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bfe:	f7fc fc2b 	bl	8003458 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e0b0      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c10:	4b5b      	ldr	r3, [pc, #364]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f0      	bne.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	019a      	lsls	r2, r3, #6
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	071b      	lsls	r3, r3, #28
 8006c28:	4955      	ldr	r1, [pc, #340]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c30:	4b52      	ldr	r3, [pc, #328]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c32:	2201      	movs	r2, #1
 8006c34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c36:	f7fc fc0f 	bl	8003458 <HAL_GetTick>
 8006c3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c3c:	e008      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c3e:	f7fc fc0b 	bl	8003458 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e090      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c50:	4b4b      	ldr	r3, [pc, #300]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0f0      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8083 	beq.w	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	4b44      	ldr	r3, [pc, #272]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	4a43      	ldr	r2, [pc, #268]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c78:	6413      	str	r3, [r2, #64]	; 0x40
 8006c7a:	4b41      	ldr	r3, [pc, #260]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c86:	4b3f      	ldr	r3, [pc, #252]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a3e      	ldr	r2, [pc, #248]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c92:	f7fc fbe1 	bl	8003458 <HAL_GetTick>
 8006c96:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c98:	e008      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c9a:	f7fc fbdd 	bl	8003458 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e062      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cac:	4b35      	ldr	r3, [pc, #212]	; (8006d84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0f0      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cb8:	4b31      	ldr	r3, [pc, #196]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d02f      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d028      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cd6:	4b2a      	ldr	r3, [pc, #168]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cde:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ce0:	4b29      	ldr	r3, [pc, #164]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ce6:	4b28      	ldr	r3, [pc, #160]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006cec:	4a24      	ldr	r2, [pc, #144]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cf2:	4b23      	ldr	r3, [pc, #140]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d114      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006cfe:	f7fc fbab 	bl	8003458 <HAL_GetTick>
 8006d02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d04:	e00a      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d06:	f7fc fba7 	bl	8003458 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e02a      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d1c:	4b18      	ldr	r3, [pc, #96]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0ee      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d34:	d10d      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d36:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d4a:	490d      	ldr	r1, [pc, #52]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	608b      	str	r3, [r1, #8]
 8006d50:	e005      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d52:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	4a0a      	ldr	r2, [pc, #40]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d58:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d5c:	6093      	str	r3, [r2, #8]
 8006d5e:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d6a:	4905      	ldr	r1, [pc, #20]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	42470068 	.word	0x42470068
 8006d80:	40023800 	.word	0x40023800
 8006d84:	40007000 	.word	0x40007000
 8006d88:	42470e40 	.word	0x42470e40

08006d8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d13e      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006daa:	4b23      	ldr	r3, [pc, #140]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d005      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d12f      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006dc0:	4b1e      	ldr	r3, [pc, #120]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dc2:	617b      	str	r3, [r7, #20]
          break;
 8006dc4:	e02f      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006dc6:	4b1c      	ldr	r3, [pc, #112]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dd2:	d108      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006dd4:	4b18      	ldr	r3, [pc, #96]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ddc:	4a18      	ldr	r2, [pc, #96]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de2:	613b      	str	r3, [r7, #16]
 8006de4:	e007      	b.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006de6:	4b14      	ldr	r3, [pc, #80]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dee:	4a15      	ldr	r2, [pc, #84]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006df6:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dfc:	099b      	lsrs	r3, r3, #6
 8006dfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	fb02 f303 	mul.w	r3, r2, r3
 8006e08:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e10:	0f1b      	lsrs	r3, r3, #28
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1c:	617b      	str	r3, [r7, #20]
          break;
 8006e1e:	e002      	b.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]
          break;
 8006e24:	bf00      	nop
        }
      }
      break;
 8006e26:	bf00      	nop
    }
  }
  return frequency;
 8006e28:	697b      	ldr	r3, [r7, #20]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40023800 	.word	0x40023800
 8006e3c:	00bb8000 	.word	0x00bb8000
 8006e40:	007a1200 	.word	0x007a1200
 8006e44:	00f42400 	.word	0x00f42400

08006e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e07b      	b.n	8006f52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d108      	bne.n	8006e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e6a:	d009      	beq.n	8006e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	61da      	str	r2, [r3, #28]
 8006e72:	e005      	b.n	8006e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d106      	bne.n	8006ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fc f81c 	bl	8002ed8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	431a      	orrs	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f04:	ea42 0103 	orr.w	r1, r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	0c1b      	lsrs	r3, r3, #16
 8006f1e:	f003 0104 	and.w	r1, r3, #4
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	f003 0210 	and.w	r2, r3, #16
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69da      	ldr	r2, [r3, #28]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b08c      	sub	sp, #48	; 0x30
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	607a      	str	r2, [r7, #4]
 8006f66:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_SPI_TransmitReceive+0x26>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e18a      	b.n	8007296 <HAL_SPI_TransmitReceive+0x33c>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f88:	f7fc fa66 	bl	8003458 <HAL_GetTick>
 8006f8c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006f9e:	887b      	ldrh	r3, [r7, #2]
 8006fa0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d00f      	beq.n	8006fca <HAL_SPI_TransmitReceive+0x70>
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fb0:	d107      	bne.n	8006fc2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d103      	bne.n	8006fc2 <HAL_SPI_TransmitReceive+0x68>
 8006fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d003      	beq.n	8006fca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006fc8:	e15b      	b.n	8007282 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <HAL_SPI_TransmitReceive+0x82>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <HAL_SPI_TransmitReceive+0x82>
 8006fd6:	887b      	ldrh	r3, [r7, #2]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d103      	bne.n	8006fe4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006fe2:	e14e      	b.n	8007282 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d003      	beq.n	8006ff8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2205      	movs	r2, #5
 8006ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	887a      	ldrh	r2, [r7, #2]
 8007008:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	887a      	ldrh	r2, [r7, #2]
 800700e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	887a      	ldrh	r2, [r7, #2]
 800701a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	887a      	ldrh	r2, [r7, #2]
 8007020:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	d007      	beq.n	800704c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800704a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007054:	d178      	bne.n	8007148 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x10a>
 800705e:	8b7b      	ldrh	r3, [r7, #26]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d166      	bne.n	8007132 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007068:	881a      	ldrh	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007074:	1c9a      	adds	r2, r3, #2
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007088:	e053      	b.n	8007132 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b02      	cmp	r3, #2
 8007096:	d11b      	bne.n	80070d0 <HAL_SPI_TransmitReceive+0x176>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800709c:	b29b      	uxth	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d016      	beq.n	80070d0 <HAL_SPI_TransmitReceive+0x176>
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d113      	bne.n	80070d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	881a      	ldrh	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b8:	1c9a      	adds	r2, r3, #2
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d119      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x1b8>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d014      	beq.n	8007112 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	b292      	uxth	r2, r2
 80070f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	1c9a      	adds	r2, r3, #2
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	b29a      	uxth	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800710e:	2301      	movs	r3, #1
 8007110:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007112:	f7fc f9a1 	bl	8003458 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800711e:	429a      	cmp	r2, r3
 8007120:	d807      	bhi.n	8007132 <HAL_SPI_TransmitReceive+0x1d8>
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007128:	d003      	beq.n	8007132 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007130:	e0a7      	b.n	8007282 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007136:	b29b      	uxth	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1a6      	bne.n	800708a <HAL_SPI_TransmitReceive+0x130>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1a1      	bne.n	800708a <HAL_SPI_TransmitReceive+0x130>
 8007146:	e07c      	b.n	8007242 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <HAL_SPI_TransmitReceive+0x1fc>
 8007150:	8b7b      	ldrh	r3, [r7, #26]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d16b      	bne.n	800722e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	330c      	adds	r3, #12
 8007160:	7812      	ldrb	r2, [r2, #0]
 8007162:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800717c:	e057      	b.n	800722e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b02      	cmp	r3, #2
 800718a:	d11c      	bne.n	80071c6 <HAL_SPI_TransmitReceive+0x26c>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d017      	beq.n	80071c6 <HAL_SPI_TransmitReceive+0x26c>
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	2b01      	cmp	r3, #1
 800719a:	d114      	bne.n	80071c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	330c      	adds	r3, #12
 80071a6:	7812      	ldrb	r2, [r2, #0]
 80071a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d119      	bne.n	8007208 <HAL_SPI_TransmitReceive+0x2ae>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d014      	beq.n	8007208 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	b2d2      	uxtb	r2, r2
 80071ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007204:	2301      	movs	r3, #1
 8007206:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007208:	f7fc f926 	bl	8003458 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007214:	429a      	cmp	r2, r3
 8007216:	d803      	bhi.n	8007220 <HAL_SPI_TransmitReceive+0x2c6>
 8007218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721e:	d102      	bne.n	8007226 <HAL_SPI_TransmitReceive+0x2cc>
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	2b00      	cmp	r3, #0
 8007224:	d103      	bne.n	800722e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800722c:	e029      	b.n	8007282 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007232:	b29b      	uxth	r3, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1a2      	bne.n	800717e <HAL_SPI_TransmitReceive+0x224>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d19d      	bne.n	800717e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007244:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 f9d0 	bl	80075ec <SPI_EndRxTxTransaction>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d006      	beq.n	8007260 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2220      	movs	r2, #32
 800725c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800725e:	e010      	b.n	8007282 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10b      	bne.n	8007280 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	e000      	b.n	8007282 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007280:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007292:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007296:	4618      	mov	r0, r3
 8007298:	3730      	adds	r7, #48	; 0x30
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	099b      	lsrs	r3, r3, #6
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10f      	bne.n	80072e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	099b      	lsrs	r3, r3, #6
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d004      	beq.n	80072e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
    return;
 80072e2:	e0d7      	b.n	8007494 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	085b      	lsrs	r3, r3, #1
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <HAL_SPI_IRQHandler+0x66>
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	09db      	lsrs	r3, r3, #7
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
    return;
 8007304:	e0c6      	b.n	8007494 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10c      	bne.n	800732c <HAL_SPI_IRQHandler+0x8c>
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	099b      	lsrs	r3, r3, #6
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	0a1b      	lsrs	r3, r3, #8
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 80b4 	beq.w	8007494 <HAL_SPI_IRQHandler+0x1f4>
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	095b      	lsrs	r3, r3, #5
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80ad 	beq.w	8007494 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	099b      	lsrs	r3, r3, #6
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d023      	beq.n	800738e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b03      	cmp	r3, #3
 8007350:	d011      	beq.n	8007376 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007356:	f043 0204 	orr.w	r2, r3, #4
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	617b      	str	r3, [r7, #20]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	e00b      	b.n	800738e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007376:	2300      	movs	r3, #0
 8007378:	613b      	str	r3, [r7, #16]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	613b      	str	r3, [r7, #16]
 800738a:	693b      	ldr	r3, [r7, #16]
        return;
 800738c:	e082      	b.n	8007494 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d014      	beq.n	80073c4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739e:	f043 0201 	orr.w	r2, r3, #1
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00c      	beq.n	80073ea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d4:	f043 0208 	orr.w	r2, r3, #8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073dc:	2300      	movs	r3, #0
 80073de:	60bb      	str	r3, [r7, #8]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	60bb      	str	r3, [r7, #8]
 80073e8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d04f      	beq.n	8007492 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007400:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d104      	bne.n	800741e <HAL_SPI_IRQHandler+0x17e>
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d034      	beq.n	8007488 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 0203 	bic.w	r2, r2, #3
 800742c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007432:	2b00      	cmp	r3, #0
 8007434:	d011      	beq.n	800745a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800743a:	4a18      	ldr	r2, [pc, #96]	; (800749c <HAL_SPI_IRQHandler+0x1fc>)
 800743c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007442:	4618      	mov	r0, r3
 8007444:	f7fc fa68 	bl	8003918 <HAL_DMA_Abort_IT>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007452:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745e:	2b00      	cmp	r3, #0
 8007460:	d016      	beq.n	8007490 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007466:	4a0d      	ldr	r2, [pc, #52]	; (800749c <HAL_SPI_IRQHandler+0x1fc>)
 8007468:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800746e:	4618      	mov	r0, r3
 8007470:	f7fc fa52 	bl	8003918 <HAL_DMA_Abort_IT>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007486:	e003      	b.n	8007490 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f809 	bl	80074a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800748e:	e000      	b.n	8007492 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007490:	bf00      	nop
    return;
 8007492:	bf00      	nop
  }
}
 8007494:	3720      	adds	r7, #32
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	080074b5 	.word	0x080074b5

080074a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f7ff ffe6 	bl	80074a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074d4:	bf00      	nop
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	4613      	mov	r3, r2
 80074ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074ec:	f7fb ffb4 	bl	8003458 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	4413      	add	r3, r2
 80074fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074fc:	f7fb ffac 	bl	8003458 <HAL_GetTick>
 8007500:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007502:	4b39      	ldr	r3, [pc, #228]	; (80075e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	015b      	lsls	r3, r3, #5
 8007508:	0d1b      	lsrs	r3, r3, #20
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	fb02 f303 	mul.w	r3, r2, r3
 8007510:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007512:	e054      	b.n	80075be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	d050      	beq.n	80075be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800751c:	f7fb ff9c 	bl	8003458 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	69fa      	ldr	r2, [r7, #28]
 8007528:	429a      	cmp	r2, r3
 800752a:	d902      	bls.n	8007532 <SPI_WaitFlagStateUntilTimeout+0x56>
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d13d      	bne.n	80075ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007540:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800754a:	d111      	bne.n	8007570 <SPI_WaitFlagStateUntilTimeout+0x94>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007554:	d004      	beq.n	8007560 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800755e:	d107      	bne.n	8007570 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800756e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007578:	d10f      	bne.n	800759a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007598:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e017      	b.n	80075de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4013      	ands	r3, r2
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	bf0c      	ite	eq
 80075ce:	2301      	moveq	r3, #1
 80075d0:	2300      	movne	r3, #0
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	79fb      	ldrb	r3, [r7, #7]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d19b      	bne.n	8007514 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3720      	adds	r7, #32
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	20000024 	.word	0x20000024

080075ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af02      	add	r7, sp, #8
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075f8:	4b1b      	ldr	r3, [pc, #108]	; (8007668 <SPI_EndRxTxTransaction+0x7c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a1b      	ldr	r2, [pc, #108]	; (800766c <SPI_EndRxTxTransaction+0x80>)
 80075fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007602:	0d5b      	lsrs	r3, r3, #21
 8007604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007608:	fb02 f303 	mul.w	r3, r2, r3
 800760c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007616:	d112      	bne.n	800763e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2200      	movs	r2, #0
 8007620:	2180      	movs	r1, #128	; 0x80
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f7ff ff5a 	bl	80074dc <SPI_WaitFlagStateUntilTimeout>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d016      	beq.n	800765c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007632:	f043 0220 	orr.w	r2, r3, #32
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e00f      	b.n	800765e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	3b01      	subs	r3, #1
 8007648:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007654:	2b80      	cmp	r3, #128	; 0x80
 8007656:	d0f2      	beq.n	800763e <SPI_EndRxTxTransaction+0x52>
 8007658:	e000      	b.n	800765c <SPI_EndRxTxTransaction+0x70>
        break;
 800765a:	bf00      	nop
  }

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000024 	.word	0x20000024
 800766c:	165e9f81 	.word	0x165e9f81

08007670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e041      	b.n	8007706 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d106      	bne.n	800769c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7fb fd08 	bl	80030ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3304      	adds	r3, #4
 80076ac:	4619      	mov	r1, r3
 80076ae:	4610      	mov	r0, r2
 80076b0:	f000 f82e 	bl	8007710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a40      	ldr	r2, [pc, #256]	; (8007824 <TIM_Base_SetConfig+0x114>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d013      	beq.n	8007750 <TIM_Base_SetConfig+0x40>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800772e:	d00f      	beq.n	8007750 <TIM_Base_SetConfig+0x40>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a3d      	ldr	r2, [pc, #244]	; (8007828 <TIM_Base_SetConfig+0x118>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d00b      	beq.n	8007750 <TIM_Base_SetConfig+0x40>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a3c      	ldr	r2, [pc, #240]	; (800782c <TIM_Base_SetConfig+0x11c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d007      	beq.n	8007750 <TIM_Base_SetConfig+0x40>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a3b      	ldr	r2, [pc, #236]	; (8007830 <TIM_Base_SetConfig+0x120>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_Base_SetConfig+0x40>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a3a      	ldr	r2, [pc, #232]	; (8007834 <TIM_Base_SetConfig+0x124>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d108      	bne.n	8007762 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a2f      	ldr	r2, [pc, #188]	; (8007824 <TIM_Base_SetConfig+0x114>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d02b      	beq.n	80077c2 <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007770:	d027      	beq.n	80077c2 <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a2c      	ldr	r2, [pc, #176]	; (8007828 <TIM_Base_SetConfig+0x118>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d023      	beq.n	80077c2 <TIM_Base_SetConfig+0xb2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a2b      	ldr	r2, [pc, #172]	; (800782c <TIM_Base_SetConfig+0x11c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d01f      	beq.n	80077c2 <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a2a      	ldr	r2, [pc, #168]	; (8007830 <TIM_Base_SetConfig+0x120>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d01b      	beq.n	80077c2 <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a29      	ldr	r2, [pc, #164]	; (8007834 <TIM_Base_SetConfig+0x124>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d017      	beq.n	80077c2 <TIM_Base_SetConfig+0xb2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a28      	ldr	r2, [pc, #160]	; (8007838 <TIM_Base_SetConfig+0x128>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d013      	beq.n	80077c2 <TIM_Base_SetConfig+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a27      	ldr	r2, [pc, #156]	; (800783c <TIM_Base_SetConfig+0x12c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d00f      	beq.n	80077c2 <TIM_Base_SetConfig+0xb2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a26      	ldr	r2, [pc, #152]	; (8007840 <TIM_Base_SetConfig+0x130>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00b      	beq.n	80077c2 <TIM_Base_SetConfig+0xb2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a25      	ldr	r2, [pc, #148]	; (8007844 <TIM_Base_SetConfig+0x134>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d007      	beq.n	80077c2 <TIM_Base_SetConfig+0xb2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a24      	ldr	r2, [pc, #144]	; (8007848 <TIM_Base_SetConfig+0x138>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d003      	beq.n	80077c2 <TIM_Base_SetConfig+0xb2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a23      	ldr	r2, [pc, #140]	; (800784c <TIM_Base_SetConfig+0x13c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d108      	bne.n	80077d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a0a      	ldr	r2, [pc, #40]	; (8007824 <TIM_Base_SetConfig+0x114>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d003      	beq.n	8007808 <TIM_Base_SetConfig+0xf8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a0c      	ldr	r2, [pc, #48]	; (8007834 <TIM_Base_SetConfig+0x124>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d103      	bne.n	8007810 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	691a      	ldr	r2, [r3, #16]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	615a      	str	r2, [r3, #20]
}
 8007816:	bf00      	nop
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	40010000 	.word	0x40010000
 8007828:	40000400 	.word	0x40000400
 800782c:	40000800 	.word	0x40000800
 8007830:	40000c00 	.word	0x40000c00
 8007834:	40010400 	.word	0x40010400
 8007838:	40014000 	.word	0x40014000
 800783c:	40014400 	.word	0x40014400
 8007840:	40014800 	.word	0x40014800
 8007844:	40001800 	.word	0x40001800
 8007848:	40001c00 	.word	0x40001c00
 800784c:	40002000 	.word	0x40002000

08007850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007860:	2b01      	cmp	r3, #1
 8007862:	d101      	bne.n	8007868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007864:	2302      	movs	r3, #2
 8007866:	e05a      	b.n	800791e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a21      	ldr	r2, [pc, #132]	; (800792c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d022      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b4:	d01d      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a1d      	ldr	r2, [pc, #116]	; (8007930 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d018      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a1b      	ldr	r2, [pc, #108]	; (8007934 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d013      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a1a      	ldr	r2, [pc, #104]	; (8007938 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00e      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a18      	ldr	r2, [pc, #96]	; (800793c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d009      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a17      	ldr	r2, [pc, #92]	; (8007940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d004      	beq.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a15      	ldr	r2, [pc, #84]	; (8007944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d10c      	bne.n	800790c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	4313      	orrs	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40010000 	.word	0x40010000
 8007930:	40000400 	.word	0x40000400
 8007934:	40000800 	.word	0x40000800
 8007938:	40000c00 	.word	0x40000c00
 800793c:	40010400 	.word	0x40010400
 8007940:	40014000 	.word	0x40014000
 8007944:	40001800 	.word	0x40001800

08007948 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e03f      	b.n	80079da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d106      	bne.n	8007974 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7fb fbbe 	bl	80030f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2224      	movs	r2, #36	; 0x24
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800798a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fc71 	bl	8008274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	691a      	ldr	r2, [r3, #16]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	695a      	ldr	r2, [r3, #20]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2220      	movs	r2, #32
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b0ba      	sub	sp, #232	; 0xe8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1a:	f003 030f 	and.w	r3, r3, #15
 8007a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10f      	bne.n	8007a4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <HAL_UART_IRQHandler+0x66>
 8007a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fb5b 	bl	80080fe <UART_Receive_IT>
      return;
 8007a48:	e256      	b.n	8007ef8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 80de 	beq.w	8007c10 <HAL_UART_IRQHandler+0x22c>
 8007a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d106      	bne.n	8007a6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 80d1 	beq.w	8007c10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00b      	beq.n	8007a92 <HAL_UART_IRQHandler+0xae>
 8007a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d005      	beq.n	8007a92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	f043 0201 	orr.w	r2, r3, #1
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a96:	f003 0304 	and.w	r3, r3, #4
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00b      	beq.n	8007ab6 <HAL_UART_IRQHandler+0xd2>
 8007a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d005      	beq.n	8007ab6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	f043 0202 	orr.w	r2, r3, #2
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00b      	beq.n	8007ada <HAL_UART_IRQHandler+0xf6>
 8007ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d005      	beq.n	8007ada <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	f043 0204 	orr.w	r2, r3, #4
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ade:	f003 0308 	and.w	r3, r3, #8
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d011      	beq.n	8007b0a <HAL_UART_IRQHandler+0x126>
 8007ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d105      	bne.n	8007afe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d005      	beq.n	8007b0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	f043 0208 	orr.w	r2, r3, #8
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 81ed 	beq.w	8007eee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b18:	f003 0320 	and.w	r3, r3, #32
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d008      	beq.n	8007b32 <HAL_UART_IRQHandler+0x14e>
 8007b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fae6 	bl	80080fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b3c:	2b40      	cmp	r3, #64	; 0x40
 8007b3e:	bf0c      	ite	eq
 8007b40:	2301      	moveq	r3, #1
 8007b42:	2300      	movne	r3, #0
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	f003 0308 	and.w	r3, r3, #8
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d103      	bne.n	8007b5e <HAL_UART_IRQHandler+0x17a>
 8007b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d04f      	beq.n	8007bfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f9ee 	bl	8007f40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6e:	2b40      	cmp	r3, #64	; 0x40
 8007b70:	d141      	bne.n	8007bf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3314      	adds	r3, #20
 8007b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3314      	adds	r3, #20
 8007b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1d9      	bne.n	8007b72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d013      	beq.n	8007bee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	4a7d      	ldr	r2, [pc, #500]	; (8007dc0 <HAL_UART_IRQHandler+0x3dc>)
 8007bcc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fb fea0 	bl	8003918 <HAL_DMA_Abort_IT>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d016      	beq.n	8007c0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bec:	e00e      	b.n	8007c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f990 	bl	8007f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	e00a      	b.n	8007c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f98c 	bl	8007f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfc:	e006      	b.n	8007c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f988 	bl	8007f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c0a:	e170      	b.n	8007eee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0c:	bf00      	nop
    return;
 8007c0e:	e16e      	b.n	8007eee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	f040 814a 	bne.w	8007eae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1e:	f003 0310 	and.w	r3, r3, #16
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 8143 	beq.w	8007eae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c2c:	f003 0310 	and.w	r3, r3, #16
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 813c 	beq.w	8007eae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c36:	2300      	movs	r3, #0
 8007c38:	60bb      	str	r3, [r7, #8]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	60bb      	str	r3, [r7, #8]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	60bb      	str	r3, [r7, #8]
 8007c4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c56:	2b40      	cmp	r3, #64	; 0x40
 8007c58:	f040 80b4 	bne.w	8007dc4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8140 	beq.w	8007ef2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	f080 8139 	bcs.w	8007ef2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c92:	f000 8088 	beq.w	8007da6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	330c      	adds	r3, #12
 8007c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	330c      	adds	r3, #12
 8007cbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1d9      	bne.n	8007c96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3314      	adds	r3, #20
 8007ce8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cf4:	f023 0301 	bic.w	r3, r3, #1
 8007cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3314      	adds	r3, #20
 8007d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e1      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3314      	adds	r3, #20
 8007d24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3314      	adds	r3, #20
 8007d3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e3      	bne.n	8007d1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	330c      	adds	r3, #12
 8007d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d6e:	e853 3f00 	ldrex	r3, [r3]
 8007d72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d76:	f023 0310 	bic.w	r3, r3, #16
 8007d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	330c      	adds	r3, #12
 8007d84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d88:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d90:	e841 2300 	strex	r3, r2, [r1]
 8007d94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e3      	bne.n	8007d64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fb fd49 	bl	8003838 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f8b6 	bl	8007f28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dbc:	e099      	b.n	8007ef2 <HAL_UART_IRQHandler+0x50e>
 8007dbe:	bf00      	nop
 8007dc0:	08008007 	.word	0x08008007
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 808b 	beq.w	8007ef6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8086 	beq.w	8007ef6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	330c      	adds	r3, #12
 8007df0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	330c      	adds	r3, #12
 8007e0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e0e:	647a      	str	r2, [r7, #68]	; 0x44
 8007e10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e3      	bne.n	8007dea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3314      	adds	r3, #20
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	623b      	str	r3, [r7, #32]
   return(result);
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	f023 0301 	bic.w	r3, r3, #1
 8007e38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3314      	adds	r3, #20
 8007e42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e46:	633a      	str	r2, [r7, #48]	; 0x30
 8007e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e3      	bne.n	8007e22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	330c      	adds	r3, #12
 8007e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	e853 3f00 	ldrex	r3, [r3]
 8007e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0310 	bic.w	r3, r3, #16
 8007e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	330c      	adds	r3, #12
 8007e88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e8c:	61fa      	str	r2, [r7, #28]
 8007e8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e90:	69b9      	ldr	r1, [r7, #24]
 8007e92:	69fa      	ldr	r2, [r7, #28]
 8007e94:	e841 2300 	strex	r3, r2, [r1]
 8007e98:	617b      	str	r3, [r7, #20]
   return(result);
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1e3      	bne.n	8007e68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f83e 	bl	8007f28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007eac:	e023      	b.n	8007ef6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d009      	beq.n	8007ece <HAL_UART_IRQHandler+0x4ea>
 8007eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f8b1 	bl	800802e <UART_Transmit_IT>
    return;
 8007ecc:	e014      	b.n	8007ef8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00e      	beq.n	8007ef8 <HAL_UART_IRQHandler+0x514>
 8007eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d008      	beq.n	8007ef8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f8f1 	bl	80080ce <UART_EndTransmit_IT>
    return;
 8007eec:	e004      	b.n	8007ef8 <HAL_UART_IRQHandler+0x514>
    return;
 8007eee:	bf00      	nop
 8007ef0:	e002      	b.n	8007ef8 <HAL_UART_IRQHandler+0x514>
      return;
 8007ef2:	bf00      	nop
 8007ef4:	e000      	b.n	8007ef8 <HAL_UART_IRQHandler+0x514>
      return;
 8007ef6:	bf00      	nop
  }
}
 8007ef8:	37e8      	adds	r7, #232	; 0xe8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop

08007f00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b095      	sub	sp, #84	; 0x54
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	330c      	adds	r3, #12
 8007f4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	330c      	adds	r3, #12
 8007f66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f68:	643a      	str	r2, [r7, #64]	; 0x40
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e5      	bne.n	8007f48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3314      	adds	r3, #20
 8007f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	f023 0301 	bic.w	r3, r3, #1
 8007f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3314      	adds	r3, #20
 8007f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fa4:	e841 2300 	strex	r3, r2, [r1]
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e5      	bne.n	8007f7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d119      	bne.n	8007fec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	330c      	adds	r3, #12
 8007fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f023 0310 	bic.w	r3, r3, #16
 8007fce:	647b      	str	r3, [r7, #68]	; 0x44
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	330c      	adds	r3, #12
 8007fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fd8:	61ba      	str	r2, [r7, #24]
 8007fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fdc:	6979      	ldr	r1, [r7, #20]
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	e841 2300 	strex	r3, r2, [r1]
 8007fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1e5      	bne.n	8007fb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ffa:	bf00      	nop
 8007ffc:	3754      	adds	r7, #84	; 0x54
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008012:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f7ff ff77 	bl	8007f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008026:	bf00      	nop
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800802e:	b480      	push	{r7}
 8008030:	b085      	sub	sp, #20
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b21      	cmp	r3, #33	; 0x21
 8008040:	d13e      	bne.n	80080c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800804a:	d114      	bne.n	8008076 <UART_Transmit_IT+0x48>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d110      	bne.n	8008076 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008068:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	1c9a      	adds	r2, r3, #2
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	621a      	str	r2, [r3, #32]
 8008074:	e008      	b.n	8008088 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	1c59      	adds	r1, r3, #1
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	6211      	str	r1, [r2, #32]
 8008080:	781a      	ldrb	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	b29b      	uxth	r3, r3
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	4619      	mov	r1, r3
 8008096:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10f      	bne.n	80080bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68da      	ldr	r2, [r3, #12]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	e000      	b.n	80080c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080c0:	2302      	movs	r3, #2
  }
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7f8 ff95 	bl	800101e <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b08c      	sub	sp, #48	; 0x30
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b22      	cmp	r3, #34	; 0x22
 8008110:	f040 80ab 	bne.w	800826a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800811c:	d117      	bne.n	800814e <UART_Receive_IT+0x50>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d113      	bne.n	800814e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008126:	2300      	movs	r3, #0
 8008128:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b29b      	uxth	r3, r3
 8008138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800813c:	b29a      	uxth	r2, r3
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	1c9a      	adds	r2, r3, #2
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	629a      	str	r2, [r3, #40]	; 0x28
 800814c:	e026      	b.n	800819c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008154:	2300      	movs	r3, #0
 8008156:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008160:	d007      	beq.n	8008172 <UART_Receive_IT+0x74>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10a      	bne.n	8008180 <UART_Receive_IT+0x82>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d106      	bne.n	8008180 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	b2da      	uxtb	r2, r3
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	701a      	strb	r2, [r3, #0]
 800817e:	e008      	b.n	8008192 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800818c:	b2da      	uxtb	r2, r3
 800818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008190:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	4619      	mov	r1, r3
 80081aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d15a      	bne.n	8008266 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0220 	bic.w	r2, r2, #32
 80081be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695a      	ldr	r2, [r3, #20]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 0201 	bic.w	r2, r2, #1
 80081de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2220      	movs	r2, #32
 80081e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d135      	bne.n	800825c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	330c      	adds	r3, #12
 80081fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	e853 3f00 	ldrex	r3, [r3]
 8008204:	613b      	str	r3, [r7, #16]
   return(result);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f023 0310 	bic.w	r3, r3, #16
 800820c:	627b      	str	r3, [r7, #36]	; 0x24
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	330c      	adds	r3, #12
 8008214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008216:	623a      	str	r2, [r7, #32]
 8008218:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	69f9      	ldr	r1, [r7, #28]
 800821c:	6a3a      	ldr	r2, [r7, #32]
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	61bb      	str	r3, [r7, #24]
   return(result);
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e5      	bne.n	80081f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0310 	and.w	r3, r3, #16
 8008234:	2b10      	cmp	r3, #16
 8008236:	d10a      	bne.n	800824e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008238:	2300      	movs	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff fe67 	bl	8007f28 <HAL_UARTEx_RxEventCallback>
 800825a:	e002      	b.n	8008262 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff fe4f 	bl	8007f00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	e002      	b.n	800826c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	e000      	b.n	800826c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800826a:	2302      	movs	r3, #2
  }
}
 800826c:	4618      	mov	r0, r3
 800826e:	3730      	adds	r7, #48	; 0x30
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008278:	b0c0      	sub	sp, #256	; 0x100
 800827a:	af00      	add	r7, sp, #0
 800827c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800828c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008290:	68d9      	ldr	r1, [r3, #12]
 8008292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	ea40 0301 	orr.w	r3, r0, r1
 800829c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800829e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	431a      	orrs	r2, r3
 80082ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	431a      	orrs	r2, r3
 80082b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80082c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80082cc:	f021 010c 	bic.w	r1, r1, #12
 80082d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082da:	430b      	orrs	r3, r1
 80082dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80082ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ee:	6999      	ldr	r1, [r3, #24]
 80082f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	ea40 0301 	orr.w	r3, r0, r1
 80082fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b8f      	ldr	r3, [pc, #572]	; (8008540 <UART_SetConfig+0x2cc>)
 8008304:	429a      	cmp	r2, r3
 8008306:	d005      	beq.n	8008314 <UART_SetConfig+0xa0>
 8008308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	4b8d      	ldr	r3, [pc, #564]	; (8008544 <UART_SetConfig+0x2d0>)
 8008310:	429a      	cmp	r2, r3
 8008312:	d104      	bne.n	800831e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008314:	f7fe fc44 	bl	8006ba0 <HAL_RCC_GetPCLK2Freq>
 8008318:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800831c:	e003      	b.n	8008326 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800831e:	f7fe fc2b 	bl	8006b78 <HAL_RCC_GetPCLK1Freq>
 8008322:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008330:	f040 810c 	bne.w	800854c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008338:	2200      	movs	r2, #0
 800833a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800833e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008342:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008346:	4622      	mov	r2, r4
 8008348:	462b      	mov	r3, r5
 800834a:	1891      	adds	r1, r2, r2
 800834c:	65b9      	str	r1, [r7, #88]	; 0x58
 800834e:	415b      	adcs	r3, r3
 8008350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008352:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008356:	4621      	mov	r1, r4
 8008358:	eb12 0801 	adds.w	r8, r2, r1
 800835c:	4629      	mov	r1, r5
 800835e:	eb43 0901 	adc.w	r9, r3, r1
 8008362:	f04f 0200 	mov.w	r2, #0
 8008366:	f04f 0300 	mov.w	r3, #0
 800836a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800836e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008376:	4690      	mov	r8, r2
 8008378:	4699      	mov	r9, r3
 800837a:	4623      	mov	r3, r4
 800837c:	eb18 0303 	adds.w	r3, r8, r3
 8008380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008384:	462b      	mov	r3, r5
 8008386:	eb49 0303 	adc.w	r3, r9, r3
 800838a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800838e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800839a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800839e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80083a2:	460b      	mov	r3, r1
 80083a4:	18db      	adds	r3, r3, r3
 80083a6:	653b      	str	r3, [r7, #80]	; 0x50
 80083a8:	4613      	mov	r3, r2
 80083aa:	eb42 0303 	adc.w	r3, r2, r3
 80083ae:	657b      	str	r3, [r7, #84]	; 0x54
 80083b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80083b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80083b8:	f7f8 faf4 	bl	80009a4 <__aeabi_uldivmod>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	4b61      	ldr	r3, [pc, #388]	; (8008548 <UART_SetConfig+0x2d4>)
 80083c2:	fba3 2302 	umull	r2, r3, r3, r2
 80083c6:	095b      	lsrs	r3, r3, #5
 80083c8:	011c      	lsls	r4, r3, #4
 80083ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80083d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80083dc:	4642      	mov	r2, r8
 80083de:	464b      	mov	r3, r9
 80083e0:	1891      	adds	r1, r2, r2
 80083e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80083e4:	415b      	adcs	r3, r3
 80083e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80083ec:	4641      	mov	r1, r8
 80083ee:	eb12 0a01 	adds.w	sl, r2, r1
 80083f2:	4649      	mov	r1, r9
 80083f4:	eb43 0b01 	adc.w	fp, r3, r1
 80083f8:	f04f 0200 	mov.w	r2, #0
 80083fc:	f04f 0300 	mov.w	r3, #0
 8008400:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008404:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800840c:	4692      	mov	sl, r2
 800840e:	469b      	mov	fp, r3
 8008410:	4643      	mov	r3, r8
 8008412:	eb1a 0303 	adds.w	r3, sl, r3
 8008416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800841a:	464b      	mov	r3, r9
 800841c:	eb4b 0303 	adc.w	r3, fp, r3
 8008420:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008430:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008438:	460b      	mov	r3, r1
 800843a:	18db      	adds	r3, r3, r3
 800843c:	643b      	str	r3, [r7, #64]	; 0x40
 800843e:	4613      	mov	r3, r2
 8008440:	eb42 0303 	adc.w	r3, r2, r3
 8008444:	647b      	str	r3, [r7, #68]	; 0x44
 8008446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800844a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800844e:	f7f8 faa9 	bl	80009a4 <__aeabi_uldivmod>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4611      	mov	r1, r2
 8008458:	4b3b      	ldr	r3, [pc, #236]	; (8008548 <UART_SetConfig+0x2d4>)
 800845a:	fba3 2301 	umull	r2, r3, r3, r1
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	2264      	movs	r2, #100	; 0x64
 8008462:	fb02 f303 	mul.w	r3, r2, r3
 8008466:	1acb      	subs	r3, r1, r3
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800846e:	4b36      	ldr	r3, [pc, #216]	; (8008548 <UART_SetConfig+0x2d4>)
 8008470:	fba3 2302 	umull	r2, r3, r3, r2
 8008474:	095b      	lsrs	r3, r3, #5
 8008476:	005b      	lsls	r3, r3, #1
 8008478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800847c:	441c      	add	r4, r3
 800847e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008482:	2200      	movs	r2, #0
 8008484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008488:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800848c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008490:	4642      	mov	r2, r8
 8008492:	464b      	mov	r3, r9
 8008494:	1891      	adds	r1, r2, r2
 8008496:	63b9      	str	r1, [r7, #56]	; 0x38
 8008498:	415b      	adcs	r3, r3
 800849a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800849c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80084a0:	4641      	mov	r1, r8
 80084a2:	1851      	adds	r1, r2, r1
 80084a4:	6339      	str	r1, [r7, #48]	; 0x30
 80084a6:	4649      	mov	r1, r9
 80084a8:	414b      	adcs	r3, r1
 80084aa:	637b      	str	r3, [r7, #52]	; 0x34
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80084b8:	4659      	mov	r1, fp
 80084ba:	00cb      	lsls	r3, r1, #3
 80084bc:	4651      	mov	r1, sl
 80084be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084c2:	4651      	mov	r1, sl
 80084c4:	00ca      	lsls	r2, r1, #3
 80084c6:	4610      	mov	r0, r2
 80084c8:	4619      	mov	r1, r3
 80084ca:	4603      	mov	r3, r0
 80084cc:	4642      	mov	r2, r8
 80084ce:	189b      	adds	r3, r3, r2
 80084d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084d4:	464b      	mov	r3, r9
 80084d6:	460a      	mov	r2, r1
 80084d8:	eb42 0303 	adc.w	r3, r2, r3
 80084dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80084ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80084f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80084f4:	460b      	mov	r3, r1
 80084f6:	18db      	adds	r3, r3, r3
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80084fa:	4613      	mov	r3, r2
 80084fc:	eb42 0303 	adc.w	r3, r2, r3
 8008500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008506:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800850a:	f7f8 fa4b 	bl	80009a4 <__aeabi_uldivmod>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	4b0d      	ldr	r3, [pc, #52]	; (8008548 <UART_SetConfig+0x2d4>)
 8008514:	fba3 1302 	umull	r1, r3, r3, r2
 8008518:	095b      	lsrs	r3, r3, #5
 800851a:	2164      	movs	r1, #100	; 0x64
 800851c:	fb01 f303 	mul.w	r3, r1, r3
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	3332      	adds	r3, #50	; 0x32
 8008526:	4a08      	ldr	r2, [pc, #32]	; (8008548 <UART_SetConfig+0x2d4>)
 8008528:	fba2 2303 	umull	r2, r3, r2, r3
 800852c:	095b      	lsrs	r3, r3, #5
 800852e:	f003 0207 	and.w	r2, r3, #7
 8008532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4422      	add	r2, r4
 800853a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800853c:	e105      	b.n	800874a <UART_SetConfig+0x4d6>
 800853e:	bf00      	nop
 8008540:	40011000 	.word	0x40011000
 8008544:	40011400 	.word	0x40011400
 8008548:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800854c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008550:	2200      	movs	r2, #0
 8008552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008556:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800855a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800855e:	4642      	mov	r2, r8
 8008560:	464b      	mov	r3, r9
 8008562:	1891      	adds	r1, r2, r2
 8008564:	6239      	str	r1, [r7, #32]
 8008566:	415b      	adcs	r3, r3
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
 800856a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800856e:	4641      	mov	r1, r8
 8008570:	1854      	adds	r4, r2, r1
 8008572:	4649      	mov	r1, r9
 8008574:	eb43 0501 	adc.w	r5, r3, r1
 8008578:	f04f 0200 	mov.w	r2, #0
 800857c:	f04f 0300 	mov.w	r3, #0
 8008580:	00eb      	lsls	r3, r5, #3
 8008582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008586:	00e2      	lsls	r2, r4, #3
 8008588:	4614      	mov	r4, r2
 800858a:	461d      	mov	r5, r3
 800858c:	4643      	mov	r3, r8
 800858e:	18e3      	adds	r3, r4, r3
 8008590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008594:	464b      	mov	r3, r9
 8008596:	eb45 0303 	adc.w	r3, r5, r3
 800859a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800859e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80085aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085ae:	f04f 0200 	mov.w	r2, #0
 80085b2:	f04f 0300 	mov.w	r3, #0
 80085b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80085ba:	4629      	mov	r1, r5
 80085bc:	008b      	lsls	r3, r1, #2
 80085be:	4621      	mov	r1, r4
 80085c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085c4:	4621      	mov	r1, r4
 80085c6:	008a      	lsls	r2, r1, #2
 80085c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80085cc:	f7f8 f9ea 	bl	80009a4 <__aeabi_uldivmod>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4b60      	ldr	r3, [pc, #384]	; (8008758 <UART_SetConfig+0x4e4>)
 80085d6:	fba3 2302 	umull	r2, r3, r3, r2
 80085da:	095b      	lsrs	r3, r3, #5
 80085dc:	011c      	lsls	r4, r3, #4
 80085de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e2:	2200      	movs	r2, #0
 80085e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80085e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80085ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80085f0:	4642      	mov	r2, r8
 80085f2:	464b      	mov	r3, r9
 80085f4:	1891      	adds	r1, r2, r2
 80085f6:	61b9      	str	r1, [r7, #24]
 80085f8:	415b      	adcs	r3, r3
 80085fa:	61fb      	str	r3, [r7, #28]
 80085fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008600:	4641      	mov	r1, r8
 8008602:	1851      	adds	r1, r2, r1
 8008604:	6139      	str	r1, [r7, #16]
 8008606:	4649      	mov	r1, r9
 8008608:	414b      	adcs	r3, r1
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	f04f 0200 	mov.w	r2, #0
 8008610:	f04f 0300 	mov.w	r3, #0
 8008614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008618:	4659      	mov	r1, fp
 800861a:	00cb      	lsls	r3, r1, #3
 800861c:	4651      	mov	r1, sl
 800861e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008622:	4651      	mov	r1, sl
 8008624:	00ca      	lsls	r2, r1, #3
 8008626:	4610      	mov	r0, r2
 8008628:	4619      	mov	r1, r3
 800862a:	4603      	mov	r3, r0
 800862c:	4642      	mov	r2, r8
 800862e:	189b      	adds	r3, r3, r2
 8008630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008634:	464b      	mov	r3, r9
 8008636:	460a      	mov	r2, r1
 8008638:	eb42 0303 	adc.w	r3, r2, r3
 800863c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	67bb      	str	r3, [r7, #120]	; 0x78
 800864a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	f04f 0300 	mov.w	r3, #0
 8008654:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008658:	4649      	mov	r1, r9
 800865a:	008b      	lsls	r3, r1, #2
 800865c:	4641      	mov	r1, r8
 800865e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008662:	4641      	mov	r1, r8
 8008664:	008a      	lsls	r2, r1, #2
 8008666:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800866a:	f7f8 f99b 	bl	80009a4 <__aeabi_uldivmod>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	4b39      	ldr	r3, [pc, #228]	; (8008758 <UART_SetConfig+0x4e4>)
 8008674:	fba3 1302 	umull	r1, r3, r3, r2
 8008678:	095b      	lsrs	r3, r3, #5
 800867a:	2164      	movs	r1, #100	; 0x64
 800867c:	fb01 f303 	mul.w	r3, r1, r3
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	011b      	lsls	r3, r3, #4
 8008684:	3332      	adds	r3, #50	; 0x32
 8008686:	4a34      	ldr	r2, [pc, #208]	; (8008758 <UART_SetConfig+0x4e4>)
 8008688:	fba2 2303 	umull	r2, r3, r2, r3
 800868c:	095b      	lsrs	r3, r3, #5
 800868e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008692:	441c      	add	r4, r3
 8008694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008698:	2200      	movs	r2, #0
 800869a:	673b      	str	r3, [r7, #112]	; 0x70
 800869c:	677a      	str	r2, [r7, #116]	; 0x74
 800869e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80086a2:	4642      	mov	r2, r8
 80086a4:	464b      	mov	r3, r9
 80086a6:	1891      	adds	r1, r2, r2
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	415b      	adcs	r3, r3
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086b2:	4641      	mov	r1, r8
 80086b4:	1851      	adds	r1, r2, r1
 80086b6:	6039      	str	r1, [r7, #0]
 80086b8:	4649      	mov	r1, r9
 80086ba:	414b      	adcs	r3, r1
 80086bc:	607b      	str	r3, [r7, #4]
 80086be:	f04f 0200 	mov.w	r2, #0
 80086c2:	f04f 0300 	mov.w	r3, #0
 80086c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80086ca:	4659      	mov	r1, fp
 80086cc:	00cb      	lsls	r3, r1, #3
 80086ce:	4651      	mov	r1, sl
 80086d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086d4:	4651      	mov	r1, sl
 80086d6:	00ca      	lsls	r2, r1, #3
 80086d8:	4610      	mov	r0, r2
 80086da:	4619      	mov	r1, r3
 80086dc:	4603      	mov	r3, r0
 80086de:	4642      	mov	r2, r8
 80086e0:	189b      	adds	r3, r3, r2
 80086e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80086e4:	464b      	mov	r3, r9
 80086e6:	460a      	mov	r2, r1
 80086e8:	eb42 0303 	adc.w	r3, r2, r3
 80086ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	663b      	str	r3, [r7, #96]	; 0x60
 80086f8:	667a      	str	r2, [r7, #100]	; 0x64
 80086fa:	f04f 0200 	mov.w	r2, #0
 80086fe:	f04f 0300 	mov.w	r3, #0
 8008702:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008706:	4649      	mov	r1, r9
 8008708:	008b      	lsls	r3, r1, #2
 800870a:	4641      	mov	r1, r8
 800870c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008710:	4641      	mov	r1, r8
 8008712:	008a      	lsls	r2, r1, #2
 8008714:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008718:	f7f8 f944 	bl	80009a4 <__aeabi_uldivmod>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4b0d      	ldr	r3, [pc, #52]	; (8008758 <UART_SetConfig+0x4e4>)
 8008722:	fba3 1302 	umull	r1, r3, r3, r2
 8008726:	095b      	lsrs	r3, r3, #5
 8008728:	2164      	movs	r1, #100	; 0x64
 800872a:	fb01 f303 	mul.w	r3, r1, r3
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	3332      	adds	r3, #50	; 0x32
 8008734:	4a08      	ldr	r2, [pc, #32]	; (8008758 <UART_SetConfig+0x4e4>)
 8008736:	fba2 2303 	umull	r2, r3, r2, r3
 800873a:	095b      	lsrs	r3, r3, #5
 800873c:	f003 020f 	and.w	r2, r3, #15
 8008740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4422      	add	r2, r4
 8008748:	609a      	str	r2, [r3, #8]
}
 800874a:	bf00      	nop
 800874c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008750:	46bd      	mov	sp, r7
 8008752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008756:	bf00      	nop
 8008758:	51eb851f 	.word	0x51eb851f

0800875c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800875c:	b084      	sub	sp, #16
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	f107 001c 	add.w	r0, r7, #28
 800876a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	2b01      	cmp	r3, #1
 8008772:	d122      	bne.n	80087ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008778:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800879c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d105      	bne.n	80087ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f001 fbee 	bl	8009f90 <USB_CoreReset>
 80087b4:	4603      	mov	r3, r0
 80087b6:	73fb      	strb	r3, [r7, #15]
 80087b8:	e01a      	b.n	80087f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 fbe2 	bl	8009f90 <USB_CoreReset>
 80087cc:	4603      	mov	r3, r0
 80087ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80087d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d106      	bne.n	80087e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	639a      	str	r2, [r3, #56]	; 0x38
 80087e2:	e005      	b.n	80087f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d10b      	bne.n	800880e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f043 0206 	orr.w	r2, r3, #6
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f043 0220 	orr.w	r2, r3, #32
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800880e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800881a:	b004      	add	sp, #16
 800881c:	4770      	bx	lr
	...

08008820 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	4613      	mov	r3, r2
 800882c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800882e:	79fb      	ldrb	r3, [r7, #7]
 8008830:	2b02      	cmp	r3, #2
 8008832:	d165      	bne.n	8008900 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	4a41      	ldr	r2, [pc, #260]	; (800893c <USB_SetTurnaroundTime+0x11c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d906      	bls.n	800884a <USB_SetTurnaroundTime+0x2a>
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	4a40      	ldr	r2, [pc, #256]	; (8008940 <USB_SetTurnaroundTime+0x120>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d202      	bcs.n	800884a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008844:	230f      	movs	r3, #15
 8008846:	617b      	str	r3, [r7, #20]
 8008848:	e062      	b.n	8008910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	4a3c      	ldr	r2, [pc, #240]	; (8008940 <USB_SetTurnaroundTime+0x120>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d306      	bcc.n	8008860 <USB_SetTurnaroundTime+0x40>
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	4a3b      	ldr	r2, [pc, #236]	; (8008944 <USB_SetTurnaroundTime+0x124>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d202      	bcs.n	8008860 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800885a:	230e      	movs	r3, #14
 800885c:	617b      	str	r3, [r7, #20]
 800885e:	e057      	b.n	8008910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	4a38      	ldr	r2, [pc, #224]	; (8008944 <USB_SetTurnaroundTime+0x124>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d306      	bcc.n	8008876 <USB_SetTurnaroundTime+0x56>
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4a37      	ldr	r2, [pc, #220]	; (8008948 <USB_SetTurnaroundTime+0x128>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d202      	bcs.n	8008876 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008870:	230d      	movs	r3, #13
 8008872:	617b      	str	r3, [r7, #20]
 8008874:	e04c      	b.n	8008910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	4a33      	ldr	r2, [pc, #204]	; (8008948 <USB_SetTurnaroundTime+0x128>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d306      	bcc.n	800888c <USB_SetTurnaroundTime+0x6c>
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	4a32      	ldr	r2, [pc, #200]	; (800894c <USB_SetTurnaroundTime+0x12c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d802      	bhi.n	800888c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008886:	230c      	movs	r3, #12
 8008888:	617b      	str	r3, [r7, #20]
 800888a:	e041      	b.n	8008910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	4a2f      	ldr	r2, [pc, #188]	; (800894c <USB_SetTurnaroundTime+0x12c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d906      	bls.n	80088a2 <USB_SetTurnaroundTime+0x82>
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	4a2e      	ldr	r2, [pc, #184]	; (8008950 <USB_SetTurnaroundTime+0x130>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d802      	bhi.n	80088a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800889c:	230b      	movs	r3, #11
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	e036      	b.n	8008910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	4a2a      	ldr	r2, [pc, #168]	; (8008950 <USB_SetTurnaroundTime+0x130>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d906      	bls.n	80088b8 <USB_SetTurnaroundTime+0x98>
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	4a29      	ldr	r2, [pc, #164]	; (8008954 <USB_SetTurnaroundTime+0x134>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d802      	bhi.n	80088b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80088b2:	230a      	movs	r3, #10
 80088b4:	617b      	str	r3, [r7, #20]
 80088b6:	e02b      	b.n	8008910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	4a26      	ldr	r2, [pc, #152]	; (8008954 <USB_SetTurnaroundTime+0x134>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d906      	bls.n	80088ce <USB_SetTurnaroundTime+0xae>
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	4a25      	ldr	r2, [pc, #148]	; (8008958 <USB_SetTurnaroundTime+0x138>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d202      	bcs.n	80088ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80088c8:	2309      	movs	r3, #9
 80088ca:	617b      	str	r3, [r7, #20]
 80088cc:	e020      	b.n	8008910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	4a21      	ldr	r2, [pc, #132]	; (8008958 <USB_SetTurnaroundTime+0x138>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d306      	bcc.n	80088e4 <USB_SetTurnaroundTime+0xc4>
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	4a20      	ldr	r2, [pc, #128]	; (800895c <USB_SetTurnaroundTime+0x13c>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d802      	bhi.n	80088e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80088de:	2308      	movs	r3, #8
 80088e0:	617b      	str	r3, [r7, #20]
 80088e2:	e015      	b.n	8008910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4a1d      	ldr	r2, [pc, #116]	; (800895c <USB_SetTurnaroundTime+0x13c>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d906      	bls.n	80088fa <USB_SetTurnaroundTime+0xda>
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	4a1c      	ldr	r2, [pc, #112]	; (8008960 <USB_SetTurnaroundTime+0x140>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d202      	bcs.n	80088fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80088f4:	2307      	movs	r3, #7
 80088f6:	617b      	str	r3, [r7, #20]
 80088f8:	e00a      	b.n	8008910 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80088fa:	2306      	movs	r3, #6
 80088fc:	617b      	str	r3, [r7, #20]
 80088fe:	e007      	b.n	8008910 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008900:	79fb      	ldrb	r3, [r7, #7]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d102      	bne.n	800890c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008906:	2309      	movs	r3, #9
 8008908:	617b      	str	r3, [r7, #20]
 800890a:	e001      	b.n	8008910 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800890c:	2309      	movs	r3, #9
 800890e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	029b      	lsls	r3, r3, #10
 8008924:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008928:	431a      	orrs	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	371c      	adds	r7, #28
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	00d8acbf 	.word	0x00d8acbf
 8008940:	00e4e1c0 	.word	0x00e4e1c0
 8008944:	00f42400 	.word	0x00f42400
 8008948:	01067380 	.word	0x01067380
 800894c:	011a499f 	.word	0x011a499f
 8008950:	01312cff 	.word	0x01312cff
 8008954:	014ca43f 	.word	0x014ca43f
 8008958:	016e3600 	.word	0x016e3600
 800895c:	01a6ab1f 	.word	0x01a6ab1f
 8008960:	01e84800 	.word	0x01e84800

08008964 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f043 0201 	orr.w	r2, r3, #1
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008986:	b480      	push	{r7}
 8008988:	b083      	sub	sp, #12
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f023 0201 	bic.w	r2, r3, #1
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	460b      	mov	r3, r1
 80089b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80089b4:	2300      	movs	r3, #0
 80089b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80089c4:	78fb      	ldrb	r3, [r7, #3]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d115      	bne.n	80089f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089d6:	2001      	movs	r0, #1
 80089d8:	f7fa fd4a 	bl	8003470 <HAL_Delay>
      ms++;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3301      	adds	r3, #1
 80089e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f001 fa45 	bl	8009e72 <USB_GetMode>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d01e      	beq.n	8008a2c <USB_SetCurrentMode+0x84>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b31      	cmp	r3, #49	; 0x31
 80089f2:	d9f0      	bls.n	80089d6 <USB_SetCurrentMode+0x2e>
 80089f4:	e01a      	b.n	8008a2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80089f6:	78fb      	ldrb	r3, [r7, #3]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d115      	bne.n	8008a28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a08:	2001      	movs	r0, #1
 8008a0a:	f7fa fd31 	bl	8003470 <HAL_Delay>
      ms++;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3301      	adds	r3, #1
 8008a12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 fa2c 	bl	8009e72 <USB_GetMode>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <USB_SetCurrentMode+0x84>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b31      	cmp	r3, #49	; 0x31
 8008a24:	d9f0      	bls.n	8008a08 <USB_SetCurrentMode+0x60>
 8008a26:	e001      	b.n	8008a2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e005      	b.n	8008a38 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b32      	cmp	r3, #50	; 0x32
 8008a30:	d101      	bne.n	8008a36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e000      	b.n	8008a38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a40:	b084      	sub	sp, #16
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b086      	sub	sp, #24
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	613b      	str	r3, [r7, #16]
 8008a5e:	e009      	b.n	8008a74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	3340      	adds	r3, #64	; 0x40
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	3301      	adds	r3, #1
 8008a72:	613b      	str	r3, [r7, #16]
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	2b0e      	cmp	r3, #14
 8008a78:	d9f2      	bls.n	8008a60 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d11c      	bne.n	8008aba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a8e:	f043 0302 	orr.w	r3, r3, #2
 8008a92:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	639a      	str	r2, [r3, #56]	; 0x38
 8008ab8:	e00b      	b.n	8008ad2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ad8:	461a      	mov	r2, r3
 8008ada:	2300      	movs	r3, #0
 8008adc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aec:	461a      	mov	r2, r3
 8008aee:	680b      	ldr	r3, [r1, #0]
 8008af0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d10c      	bne.n	8008b12 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d104      	bne.n	8008b08 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008afe:	2100      	movs	r1, #0
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f965 	bl	8008dd0 <USB_SetDevSpeed>
 8008b06:	e008      	b.n	8008b1a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b08:	2101      	movs	r1, #1
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f960 	bl	8008dd0 <USB_SetDevSpeed>
 8008b10:	e003      	b.n	8008b1a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b12:	2103      	movs	r1, #3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f95b 	bl	8008dd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b1a:	2110      	movs	r1, #16
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f8f3 	bl	8008d08 <USB_FlushTxFifo>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f91f 	bl	8008d70 <USB_FlushRxFifo>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b42:	461a      	mov	r2, r3
 8008b44:	2300      	movs	r3, #0
 8008b46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4e:	461a      	mov	r2, r3
 8008b50:	2300      	movs	r3, #0
 8008b52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b60:	2300      	movs	r3, #0
 8008b62:	613b      	str	r3, [r7, #16]
 8008b64:	e043      	b.n	8008bee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b7c:	d118      	bne.n	8008bb0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	015a      	lsls	r2, r3, #5
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b90:	461a      	mov	r2, r3
 8008b92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	e013      	b.n	8008bc2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	e008      	b.n	8008bc2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bce:	461a      	mov	r2, r3
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be0:	461a      	mov	r2, r3
 8008be2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008be6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	3301      	adds	r3, #1
 8008bec:	613b      	str	r3, [r7, #16]
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d3b7      	bcc.n	8008b66 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	613b      	str	r3, [r7, #16]
 8008bfa:	e043      	b.n	8008c84 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c12:	d118      	bne.n	8008c46 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10a      	bne.n	8008c30 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	015a      	lsls	r2, r3, #5
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	4413      	add	r3, r2
 8008c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c26:	461a      	mov	r2, r3
 8008c28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	e013      	b.n	8008c58 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	e008      	b.n	8008c58 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c52:	461a      	mov	r2, r3
 8008c54:	2300      	movs	r3, #0
 8008c56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c64:	461a      	mov	r2, r3
 8008c66:	2300      	movs	r3, #0
 8008c68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c76:	461a      	mov	r2, r3
 8008c78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	3301      	adds	r3, #1
 8008c82:	613b      	str	r3, [r7, #16]
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d3b7      	bcc.n	8008bfc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008cac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d105      	bne.n	8008cc0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	f043 0210 	orr.w	r2, r3, #16
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	699a      	ldr	r2, [r3, #24]
 8008cc4:	4b0f      	ldr	r3, [pc, #60]	; (8008d04 <USB_DevInit+0x2c4>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	f043 0208 	orr.w	r2, r3, #8
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d107      	bne.n	8008cf4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cec:	f043 0304 	orr.w	r3, r3, #4
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d00:	b004      	add	sp, #16
 8008d02:	4770      	bx	lr
 8008d04:	803c3800 	.word	0x803c3800

08008d08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4a13      	ldr	r2, [pc, #76]	; (8008d6c <USB_FlushTxFifo+0x64>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d901      	bls.n	8008d28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e01b      	b.n	8008d60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	daf2      	bge.n	8008d16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	019b      	lsls	r3, r3, #6
 8008d38:	f043 0220 	orr.w	r2, r3, #32
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3301      	adds	r3, #1
 8008d44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	4a08      	ldr	r2, [pc, #32]	; (8008d6c <USB_FlushTxFifo+0x64>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d901      	bls.n	8008d52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e006      	b.n	8008d60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	f003 0320 	and.w	r3, r3, #32
 8008d5a:	2b20      	cmp	r3, #32
 8008d5c:	d0f0      	beq.n	8008d40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	00030d40 	.word	0x00030d40

08008d70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4a11      	ldr	r2, [pc, #68]	; (8008dcc <USB_FlushRxFifo+0x5c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d901      	bls.n	8008d8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e018      	b.n	8008dc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	daf2      	bge.n	8008d7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2210      	movs	r2, #16
 8008d9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3301      	adds	r3, #1
 8008da4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4a08      	ldr	r2, [pc, #32]	; (8008dcc <USB_FlushRxFifo+0x5c>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d901      	bls.n	8008db2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e006      	b.n	8008dc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f003 0310 	and.w	r3, r3, #16
 8008dba:	2b10      	cmp	r3, #16
 8008dbc:	d0f0      	beq.n	8008da0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	00030d40 	.word	0x00030d40

08008dd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	78fb      	ldrb	r3, [r7, #3]
 8008dea:	68f9      	ldr	r1, [r7, #12]
 8008dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008df0:	4313      	orrs	r3, r2
 8008df2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b087      	sub	sp, #28
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f003 0306 	and.w	r3, r3, #6
 8008e1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d102      	bne.n	8008e28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008e22:	2300      	movs	r3, #0
 8008e24:	75fb      	strb	r3, [r7, #23]
 8008e26:	e00a      	b.n	8008e3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d002      	beq.n	8008e34 <USB_GetDevSpeed+0x32>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b06      	cmp	r3, #6
 8008e32:	d102      	bne.n	8008e3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008e34:	2302      	movs	r3, #2
 8008e36:	75fb      	strb	r3, [r7, #23]
 8008e38:	e001      	b.n	8008e3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008e3a:	230f      	movs	r3, #15
 8008e3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	371c      	adds	r7, #28
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	785b      	ldrb	r3, [r3, #1]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d13a      	bne.n	8008ede <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e6e:	69da      	ldr	r2, [r3, #28]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	f003 030f 	and.w	r3, r3, #15
 8008e78:	2101      	movs	r1, #1
 8008e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	68f9      	ldr	r1, [r7, #12]
 8008e82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e86:	4313      	orrs	r3, r2
 8008e88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d155      	bne.n	8008f4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	791b      	ldrb	r3, [r3, #4]
 8008eba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ebc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	059b      	lsls	r3, r3, #22
 8008ec2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	0151      	lsls	r1, r2, #5
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	440a      	add	r2, r1
 8008ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	e036      	b.n	8008f4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee4:	69da      	ldr	r2, [r3, #28]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	f003 030f 	and.w	r3, r3, #15
 8008eee:	2101      	movs	r1, #1
 8008ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef4:	041b      	lsls	r3, r3, #16
 8008ef6:	68f9      	ldr	r1, [r7, #12]
 8008ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008efc:	4313      	orrs	r3, r2
 8008efe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d11a      	bne.n	8008f4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	791b      	ldrb	r3, [r3, #4]
 8008f30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f32:	430b      	orrs	r3, r1
 8008f34:	4313      	orrs	r3, r2
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	0151      	lsls	r1, r2, #5
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	440a      	add	r2, r1
 8008f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
	...

08008f5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	785b      	ldrb	r3, [r3, #1]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d161      	bne.n	800903c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	015a      	lsls	r2, r3, #5
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f8e:	d11f      	bne.n	8008fd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	0151      	lsls	r1, r2, #5
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	440a      	add	r2, r1
 8008fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008faa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	015a      	lsls	r2, r3, #5
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	0151      	lsls	r1, r2, #5
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	440a      	add	r2, r1
 8008fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	f003 030f 	and.w	r3, r3, #15
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	43db      	mvns	r3, r3
 8008fea:	68f9      	ldr	r1, [r7, #12]
 8008fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffa:	69da      	ldr	r2, [r3, #28]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f003 030f 	and.w	r3, r3, #15
 8009004:	2101      	movs	r1, #1
 8009006:	fa01 f303 	lsl.w	r3, r1, r3
 800900a:	b29b      	uxth	r3, r3
 800900c:	43db      	mvns	r3, r3
 800900e:	68f9      	ldr	r1, [r7, #12]
 8009010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009014:	4013      	ands	r3, r2
 8009016:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	0159      	lsls	r1, r3, #5
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	440b      	add	r3, r1
 800902e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009032:	4619      	mov	r1, r3
 8009034:	4b35      	ldr	r3, [pc, #212]	; (800910c <USB_DeactivateEndpoint+0x1b0>)
 8009036:	4013      	ands	r3, r2
 8009038:	600b      	str	r3, [r1, #0]
 800903a:	e060      	b.n	80090fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	015a      	lsls	r2, r3, #5
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	4413      	add	r3, r2
 8009044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800904e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009052:	d11f      	bne.n	8009094 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4413      	add	r3, r2
 800905c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	0151      	lsls	r1, r2, #5
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	440a      	add	r2, r1
 800906a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800906e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009072:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4413      	add	r3, r2
 800907c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	0151      	lsls	r1, r2, #5
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	440a      	add	r2, r1
 800908a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800908e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009092:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	f003 030f 	and.w	r3, r3, #15
 80090a4:	2101      	movs	r1, #1
 80090a6:	fa01 f303 	lsl.w	r3, r1, r3
 80090aa:	041b      	lsls	r3, r3, #16
 80090ac:	43db      	mvns	r3, r3
 80090ae:	68f9      	ldr	r1, [r7, #12]
 80090b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b4:	4013      	ands	r3, r2
 80090b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090be:	69da      	ldr	r2, [r3, #28]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	f003 030f 	and.w	r3, r3, #15
 80090c8:	2101      	movs	r1, #1
 80090ca:	fa01 f303 	lsl.w	r3, r1, r3
 80090ce:	041b      	lsls	r3, r3, #16
 80090d0:	43db      	mvns	r3, r3
 80090d2:	68f9      	ldr	r1, [r7, #12]
 80090d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090d8:	4013      	ands	r3, r2
 80090da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	0159      	lsls	r1, r3, #5
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	440b      	add	r3, r1
 80090f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f6:	4619      	mov	r1, r3
 80090f8:	4b05      	ldr	r3, [pc, #20]	; (8009110 <USB_DeactivateEndpoint+0x1b4>)
 80090fa:	4013      	ands	r3, r2
 80090fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	ec337800 	.word	0xec337800
 8009110:	eff37800 	.word	0xeff37800

08009114 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08a      	sub	sp, #40	; 0x28
 8009118:	af02      	add	r7, sp, #8
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	4613      	mov	r3, r2
 8009120:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	785b      	ldrb	r3, [r3, #1]
 8009130:	2b01      	cmp	r3, #1
 8009132:	f040 815c 	bne.w	80093ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d132      	bne.n	80091a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	4413      	add	r3, r2
 8009146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	69ba      	ldr	r2, [r7, #24]
 800914e:	0151      	lsls	r1, r2, #5
 8009150:	69fa      	ldr	r2, [r7, #28]
 8009152:	440a      	add	r2, r1
 8009154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009158:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800915c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009160:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	4413      	add	r3, r2
 800916a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	0151      	lsls	r1, r2, #5
 8009174:	69fa      	ldr	r2, [r7, #28]
 8009176:	440a      	add	r2, r1
 8009178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800917c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009180:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	0151      	lsls	r1, r2, #5
 8009194:	69fa      	ldr	r2, [r7, #28]
 8009196:	440a      	add	r2, r1
 8009198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800919c:	0cdb      	lsrs	r3, r3, #19
 800919e:	04db      	lsls	r3, r3, #19
 80091a0:	6113      	str	r3, [r2, #16]
 80091a2:	e074      	b.n	800928e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	0151      	lsls	r1, r2, #5
 80091b6:	69fa      	ldr	r2, [r7, #28]
 80091b8:	440a      	add	r2, r1
 80091ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091be:	0cdb      	lsrs	r3, r3, #19
 80091c0:	04db      	lsls	r3, r3, #19
 80091c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	0151      	lsls	r1, r2, #5
 80091d6:	69fa      	ldr	r2, [r7, #28]
 80091d8:	440a      	add	r2, r1
 80091da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	6999      	ldr	r1, [r3, #24]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	440b      	add	r3, r1
 8009200:	1e59      	subs	r1, r3, #1
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	fbb1 f3f3 	udiv	r3, r1, r3
 800920a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800920c:	4b9d      	ldr	r3, [pc, #628]	; (8009484 <USB_EPStartXfer+0x370>)
 800920e:	400b      	ands	r3, r1
 8009210:	69b9      	ldr	r1, [r7, #24]
 8009212:	0148      	lsls	r0, r1, #5
 8009214:	69f9      	ldr	r1, [r7, #28]
 8009216:	4401      	add	r1, r0
 8009218:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800921c:	4313      	orrs	r3, r2
 800921e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922c:	691a      	ldr	r2, [r3, #16]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009236:	69b9      	ldr	r1, [r7, #24]
 8009238:	0148      	lsls	r0, r1, #5
 800923a:	69f9      	ldr	r1, [r7, #28]
 800923c:	4401      	add	r1, r0
 800923e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009242:	4313      	orrs	r3, r2
 8009244:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	791b      	ldrb	r3, [r3, #4]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d11f      	bne.n	800928e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	0151      	lsls	r1, r2, #5
 8009260:	69fa      	ldr	r2, [r7, #28]
 8009262:	440a      	add	r2, r1
 8009264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009268:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800926c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	69ba      	ldr	r2, [r7, #24]
 800927e:	0151      	lsls	r1, r2, #5
 8009280:	69fa      	ldr	r2, [r7, #28]
 8009282:	440a      	add	r2, r1
 8009284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009288:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800928c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800928e:	79fb      	ldrb	r3, [r7, #7]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d14b      	bne.n	800932c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d009      	beq.n	80092b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	015a      	lsls	r2, r3, #5
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a8:	461a      	mov	r2, r3
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	791b      	ldrb	r3, [r3, #4]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d128      	bne.n	800930a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d110      	bne.n	80092ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	69ba      	ldr	r2, [r7, #24]
 80092d8:	0151      	lsls	r1, r2, #5
 80092da:	69fa      	ldr	r2, [r7, #28]
 80092dc:	440a      	add	r2, r1
 80092de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	e00f      	b.n	800930a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	0151      	lsls	r1, r2, #5
 80092fc:	69fa      	ldr	r2, [r7, #28]
 80092fe:	440a      	add	r2, r1
 8009300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009308:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	69ba      	ldr	r2, [r7, #24]
 800931a:	0151      	lsls	r1, r2, #5
 800931c:	69fa      	ldr	r2, [r7, #28]
 800931e:	440a      	add	r2, r1
 8009320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009324:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009328:	6013      	str	r3, [r2, #0]
 800932a:	e133      	b.n	8009594 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69ba      	ldr	r2, [r7, #24]
 800933c:	0151      	lsls	r1, r2, #5
 800933e:	69fa      	ldr	r2, [r7, #28]
 8009340:	440a      	add	r2, r1
 8009342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009346:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800934a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	791b      	ldrb	r3, [r3, #4]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d015      	beq.n	8009380 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 811b 	beq.w	8009594 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	f003 030f 	and.w	r3, r3, #15
 800936e:	2101      	movs	r1, #1
 8009370:	fa01 f303 	lsl.w	r3, r1, r3
 8009374:	69f9      	ldr	r1, [r7, #28]
 8009376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800937a:	4313      	orrs	r3, r2
 800937c:	634b      	str	r3, [r1, #52]	; 0x34
 800937e:	e109      	b.n	8009594 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938c:	2b00      	cmp	r3, #0
 800938e:	d110      	bne.n	80093b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	4413      	add	r3, r2
 8009398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	0151      	lsls	r1, r2, #5
 80093a2:	69fa      	ldr	r2, [r7, #28]
 80093a4:	440a      	add	r2, r1
 80093a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093ae:	6013      	str	r3, [r2, #0]
 80093b0:	e00f      	b.n	80093d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	015a      	lsls	r2, r3, #5
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	4413      	add	r3, r2
 80093ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	0151      	lsls	r1, r2, #5
 80093c4:	69fa      	ldr	r2, [r7, #28]
 80093c6:	440a      	add	r2, r1
 80093c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	6919      	ldr	r1, [r3, #16]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	781a      	ldrb	r2, [r3, #0]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	b298      	uxth	r0, r3
 80093e0:	79fb      	ldrb	r3, [r7, #7]
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	4603      	mov	r3, r0
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 fade 	bl	80099a8 <USB_WritePacket>
 80093ec:	e0d2      	b.n	8009594 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	0151      	lsls	r1, r2, #5
 8009400:	69fa      	ldr	r2, [r7, #28]
 8009402:	440a      	add	r2, r1
 8009404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009408:	0cdb      	lsrs	r3, r3, #19
 800940a:	04db      	lsls	r3, r3, #19
 800940c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	4413      	add	r3, r2
 8009416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	69ba      	ldr	r2, [r7, #24]
 800941e:	0151      	lsls	r1, r2, #5
 8009420:	69fa      	ldr	r2, [r7, #28]
 8009422:	440a      	add	r2, r1
 8009424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800942c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009430:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d126      	bne.n	8009488 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	4413      	add	r3, r2
 8009442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009446:	691a      	ldr	r2, [r3, #16]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009450:	69b9      	ldr	r1, [r7, #24]
 8009452:	0148      	lsls	r0, r1, #5
 8009454:	69f9      	ldr	r1, [r7, #28]
 8009456:	4401      	add	r1, r0
 8009458:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800945c:	4313      	orrs	r3, r2
 800945e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	69ba      	ldr	r2, [r7, #24]
 8009470:	0151      	lsls	r1, r2, #5
 8009472:	69fa      	ldr	r2, [r7, #28]
 8009474:	440a      	add	r2, r1
 8009476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800947a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800947e:	6113      	str	r3, [r2, #16]
 8009480:	e03a      	b.n	80094f8 <USB_EPStartXfer+0x3e4>
 8009482:	bf00      	nop
 8009484:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	699a      	ldr	r2, [r3, #24]
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	4413      	add	r3, r2
 8009492:	1e5a      	subs	r2, r3, #1
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	fbb2 f3f3 	udiv	r3, r2, r3
 800949c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	8afa      	ldrh	r2, [r7, #22]
 80094a4:	fb03 f202 	mul.w	r2, r3, r2
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	015a      	lsls	r2, r3, #5
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b8:	691a      	ldr	r2, [r3, #16]
 80094ba:	8afb      	ldrh	r3, [r7, #22]
 80094bc:	04d9      	lsls	r1, r3, #19
 80094be:	4b38      	ldr	r3, [pc, #224]	; (80095a0 <USB_EPStartXfer+0x48c>)
 80094c0:	400b      	ands	r3, r1
 80094c2:	69b9      	ldr	r1, [r7, #24]
 80094c4:	0148      	lsls	r0, r1, #5
 80094c6:	69f9      	ldr	r1, [r7, #28]
 80094c8:	4401      	add	r1, r0
 80094ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094ce:	4313      	orrs	r3, r2
 80094d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	015a      	lsls	r2, r3, #5
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	4413      	add	r3, r2
 80094da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094de:	691a      	ldr	r2, [r3, #16]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094e8:	69b9      	ldr	r1, [r7, #24]
 80094ea:	0148      	lsls	r0, r1, #5
 80094ec:	69f9      	ldr	r1, [r7, #28]
 80094ee:	4401      	add	r1, r0
 80094f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094f4:	4313      	orrs	r3, r2
 80094f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80094f8:	79fb      	ldrb	r3, [r7, #7]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d10d      	bne.n	800951a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d009      	beq.n	800951a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	6919      	ldr	r1, [r3, #16]
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	4413      	add	r3, r2
 8009512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009516:	460a      	mov	r2, r1
 8009518:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	791b      	ldrb	r3, [r3, #4]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d128      	bne.n	8009574 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800952e:	2b00      	cmp	r3, #0
 8009530:	d110      	bne.n	8009554 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	015a      	lsls	r2, r3, #5
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	4413      	add	r3, r2
 800953a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	0151      	lsls	r1, r2, #5
 8009544:	69fa      	ldr	r2, [r7, #28]
 8009546:	440a      	add	r2, r1
 8009548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800954c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	e00f      	b.n	8009574 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	69fa      	ldr	r2, [r7, #28]
 8009568:	440a      	add	r2, r1
 800956a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800956e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009572:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	69ba      	ldr	r2, [r7, #24]
 8009584:	0151      	lsls	r1, r2, #5
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	440a      	add	r2, r1
 800958a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800958e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009592:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3720      	adds	r7, #32
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	1ff80000 	.word	0x1ff80000

080095a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	4613      	mov	r3, r2
 80095b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	785b      	ldrb	r3, [r3, #1]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	f040 80ce 	bne.w	8009762 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d132      	bne.n	8009634 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	015a      	lsls	r2, r3, #5
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	0151      	lsls	r1, r2, #5
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	440a      	add	r2, r1
 8009608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800960c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	015a      	lsls	r2, r3, #5
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	4413      	add	r3, r2
 800961a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	0151      	lsls	r1, r2, #5
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	440a      	add	r2, r1
 8009628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800962c:	0cdb      	lsrs	r3, r3, #19
 800962e:	04db      	lsls	r3, r3, #19
 8009630:	6113      	str	r3, [r2, #16]
 8009632:	e04e      	b.n	80096d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	0151      	lsls	r1, r2, #5
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	440a      	add	r2, r1
 800964a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800964e:	0cdb      	lsrs	r3, r3, #19
 8009650:	04db      	lsls	r3, r3, #19
 8009652:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	0151      	lsls	r1, r2, #5
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	440a      	add	r2, r1
 800966a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800966e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009672:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009676:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	699a      	ldr	r2, [r3, #24]
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	429a      	cmp	r2, r3
 8009682:	d903      	bls.n	800968c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	68da      	ldr	r2, [r3, #12]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	693a      	ldr	r2, [r7, #16]
 800969c:	0151      	lsls	r1, r2, #5
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	440a      	add	r2, r1
 80096a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	015a      	lsls	r2, r3, #5
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b8:	691a      	ldr	r2, [r3, #16]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096c2:	6939      	ldr	r1, [r7, #16]
 80096c4:	0148      	lsls	r0, r1, #5
 80096c6:	6979      	ldr	r1, [r7, #20]
 80096c8:	4401      	add	r1, r0
 80096ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80096ce:	4313      	orrs	r3, r2
 80096d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d11e      	bne.n	8009716 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d009      	beq.n	80096f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ec:	461a      	mov	r2, r3
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	015a      	lsls	r2, r3, #5
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	4413      	add	r3, r2
 80096fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	0151      	lsls	r1, r2, #5
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	440a      	add	r2, r1
 800970a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800970e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	e097      	b.n	8009846 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	0151      	lsls	r1, r2, #5
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	440a      	add	r2, r1
 800972c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009730:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009734:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 8083 	beq.w	8009846 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	f003 030f 	and.w	r3, r3, #15
 8009750:	2101      	movs	r1, #1
 8009752:	fa01 f303 	lsl.w	r3, r1, r3
 8009756:	6979      	ldr	r1, [r7, #20]
 8009758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800975c:	4313      	orrs	r3, r2
 800975e:	634b      	str	r3, [r1, #52]	; 0x34
 8009760:	e071      	b.n	8009846 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	015a      	lsls	r2, r3, #5
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	4413      	add	r3, r2
 800976a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	0151      	lsls	r1, r2, #5
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	440a      	add	r2, r1
 8009778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800977c:	0cdb      	lsrs	r3, r3, #19
 800977e:	04db      	lsls	r3, r3, #19
 8009780:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	0151      	lsls	r1, r2, #5
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	440a      	add	r2, r1
 8009798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800979c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	68da      	ldr	r2, [r3, #12]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	0151      	lsls	r1, r2, #5
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	440a      	add	r2, r1
 80097d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ea:	691a      	ldr	r2, [r3, #16]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097f4:	6939      	ldr	r1, [r7, #16]
 80097f6:	0148      	lsls	r0, r1, #5
 80097f8:	6979      	ldr	r1, [r7, #20]
 80097fa:	4401      	add	r1, r0
 80097fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009800:	4313      	orrs	r3, r2
 8009802:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d10d      	bne.n	8009826 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d009      	beq.n	8009826 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	6919      	ldr	r1, [r3, #16]
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	4413      	add	r3, r2
 800981e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009822:	460a      	mov	r2, r1
 8009824:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	0151      	lsls	r1, r2, #5
 8009838:	697a      	ldr	r2, [r7, #20]
 800983a:	440a      	add	r2, r1
 800983c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009840:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009844:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	371c      	adds	r7, #28
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009854:	b480      	push	{r7}
 8009856:	b087      	sub	sp, #28
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800985e:	2300      	movs	r3, #0
 8009860:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	785b      	ldrb	r3, [r3, #1]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d14a      	bne.n	8009908 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	4413      	add	r3, r2
 800987c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800988a:	f040 8086 	bne.w	800999a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	4413      	add	r3, r2
 8009898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	7812      	ldrb	r2, [r2, #0]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80098b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	7812      	ldrb	r2, [r2, #0]
 80098c6:	0151      	lsls	r1, r2, #5
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	440a      	add	r2, r1
 80098cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3301      	adds	r3, #1
 80098da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f242 7210 	movw	r2, #10000	; 0x2710
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d902      	bls.n	80098ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	75fb      	strb	r3, [r7, #23]
          break;
 80098ea:	e056      	b.n	800999a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009904:	d0e7      	beq.n	80098d6 <USB_EPStopXfer+0x82>
 8009906:	e048      	b.n	800999a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	015a      	lsls	r2, r3, #5
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800991c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009920:	d13b      	bne.n	800999a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	7812      	ldrb	r2, [r2, #0]
 8009936:	0151      	lsls	r1, r2, #5
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	440a      	add	r2, r1
 800993c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009940:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009944:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	015a      	lsls	r2, r3, #5
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	4413      	add	r3, r2
 8009950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	7812      	ldrb	r2, [r2, #0]
 800995a:	0151      	lsls	r1, r2, #5
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	440a      	add	r2, r1
 8009960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009964:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009968:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3301      	adds	r3, #1
 800996e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f242 7210 	movw	r2, #10000	; 0x2710
 8009976:	4293      	cmp	r3, r2
 8009978:	d902      	bls.n	8009980 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	75fb      	strb	r3, [r7, #23]
          break;
 800997e:	e00c      	b.n	800999a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	015a      	lsls	r2, r3, #5
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	4413      	add	r3, r2
 800998a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009998:	d0e7      	beq.n	800996a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800999a:	7dfb      	ldrb	r3, [r7, #23]
}
 800999c:	4618      	mov	r0, r3
 800999e:	371c      	adds	r7, #28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b089      	sub	sp, #36	; 0x24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	4611      	mov	r1, r2
 80099b4:	461a      	mov	r2, r3
 80099b6:	460b      	mov	r3, r1
 80099b8:	71fb      	strb	r3, [r7, #7]
 80099ba:	4613      	mov	r3, r2
 80099bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80099c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d123      	bne.n	8009a16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80099ce:	88bb      	ldrh	r3, [r7, #4]
 80099d0:	3303      	adds	r3, #3
 80099d2:	089b      	lsrs	r3, r3, #2
 80099d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80099d6:	2300      	movs	r3, #0
 80099d8:	61bb      	str	r3, [r7, #24]
 80099da:	e018      	b.n	8009a0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80099dc:	79fb      	ldrb	r3, [r7, #7]
 80099de:	031a      	lsls	r2, r3, #12
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	4413      	add	r3, r2
 80099e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099e8:	461a      	mov	r2, r3
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	3301      	adds	r3, #1
 80099f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	3301      	adds	r3, #1
 80099fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	3301      	adds	r3, #1
 8009a00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	3301      	adds	r3, #1
 8009a06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	61bb      	str	r3, [r7, #24]
 8009a0e:	69ba      	ldr	r2, [r7, #24]
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d3e2      	bcc.n	80099dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3724      	adds	r7, #36	; 0x24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b08b      	sub	sp, #44	; 0x2c
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009a3a:	88fb      	ldrh	r3, [r7, #6]
 8009a3c:	089b      	lsrs	r3, r3, #2
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009a42:	88fb      	ldrh	r3, [r7, #6]
 8009a44:	f003 0303 	and.w	r3, r3, #3
 8009a48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	623b      	str	r3, [r7, #32]
 8009a4e:	e014      	b.n	8009a7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	3301      	adds	r3, #1
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	3301      	adds	r3, #1
 8009a66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	3301      	adds	r3, #1
 8009a72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	3301      	adds	r3, #1
 8009a78:	623b      	str	r3, [r7, #32]
 8009a7a:	6a3a      	ldr	r2, [r7, #32]
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d3e6      	bcc.n	8009a50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009a82:	8bfb      	ldrh	r3, [r7, #30]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d01e      	beq.n	8009ac6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a92:	461a      	mov	r2, r3
 8009a94:	f107 0310 	add.w	r3, r7, #16
 8009a98:	6812      	ldr	r2, [r2, #0]
 8009a9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	00db      	lsls	r3, r3, #3
 8009aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aac:	701a      	strb	r2, [r3, #0]
      i++;
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	623b      	str	r3, [r7, #32]
      pDest++;
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009aba:	8bfb      	ldrh	r3, [r7, #30]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009ac0:	8bfb      	ldrh	r3, [r7, #30]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1ea      	bne.n	8009a9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	372c      	adds	r7, #44	; 0x2c
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	785b      	ldrb	r3, [r3, #1]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d12c      	bne.n	8009b4a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	db12      	blt.n	8009b28 <USB_EPSetStall+0x54>
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00f      	beq.n	8009b28 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	015a      	lsls	r2, r3, #5
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	0151      	lsls	r1, r2, #5
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	440a      	add	r2, r1
 8009b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b26:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	015a      	lsls	r2, r3, #5
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	0151      	lsls	r1, r2, #5
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	440a      	add	r2, r1
 8009b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	e02b      	b.n	8009ba2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	db12      	blt.n	8009b82 <USB_EPSetStall+0xae>
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00f      	beq.n	8009b82 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	015a      	lsls	r2, r3, #5
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	0151      	lsls	r1, r2, #5
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	440a      	add	r2, r1
 8009b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b80:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	015a      	lsls	r2, r3, #5
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	4413      	add	r3, r2
 8009b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	0151      	lsls	r1, r2, #5
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	440a      	add	r2, r1
 8009b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ba0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	785b      	ldrb	r3, [r3, #1]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d128      	bne.n	8009c1e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	015a      	lsls	r2, r3, #5
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	0151      	lsls	r1, r2, #5
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	440a      	add	r2, r1
 8009be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009be6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	791b      	ldrb	r3, [r3, #4]
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d003      	beq.n	8009bfc <USB_EPClearStall+0x4c>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	791b      	ldrb	r3, [r3, #4]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d138      	bne.n	8009c6e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	015a      	lsls	r2, r3, #5
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4413      	add	r3, r2
 8009c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	0151      	lsls	r1, r2, #5
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	440a      	add	r2, r1
 8009c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	e027      	b.n	8009c6e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	015a      	lsls	r2, r3, #5
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	4413      	add	r3, r2
 8009c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	0151      	lsls	r1, r2, #5
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	440a      	add	r2, r1
 8009c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	791b      	ldrb	r3, [r3, #4]
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d003      	beq.n	8009c4e <USB_EPClearStall+0x9e>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	791b      	ldrb	r3, [r3, #4]
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d10f      	bne.n	8009c6e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	015a      	lsls	r2, r3, #5
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	0151      	lsls	r1, r2, #5
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	440a      	add	r2, r1
 8009c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c6c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	460b      	mov	r3, r1
 8009c86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c9e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	78fb      	ldrb	r3, [r7, #3]
 8009caa:	011b      	lsls	r3, r3, #4
 8009cac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009cb0:	68f9      	ldr	r1, [r7, #12]
 8009cb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ce2:	f023 0303 	bic.w	r3, r3, #3
 8009ce6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf6:	f023 0302 	bic.w	r3, r3, #2
 8009cfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b085      	sub	sp, #20
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d24:	f023 0303 	bic.w	r3, r3, #3
 8009d28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d38:	f043 0302 	orr.w	r3, r3, #2
 8009d3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	4013      	ands	r3, r2
 8009d62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d64:	68fb      	ldr	r3, [r7, #12]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b085      	sub	sp, #20
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d84:	699b      	ldr	r3, [r3, #24]
 8009d86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d8e:	69db      	ldr	r3, [r3, #28]
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	4013      	ands	r3, r2
 8009d94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	0c1b      	lsrs	r3, r3, #16
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3714      	adds	r7, #20
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009da6:	b480      	push	{r7}
 8009da8:	b085      	sub	sp, #20
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dc2:	69db      	ldr	r3, [r3, #28]
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	b29b      	uxth	r3, r3
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b085      	sub	sp, #20
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	460b      	mov	r3, r1
 8009de4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009dea:	78fb      	ldrb	r3, [r7, #3]
 8009dec:	015a      	lsls	r2, r3, #5
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	4413      	add	r3, r2
 8009df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	4013      	ands	r3, r2
 8009e06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e08:	68bb      	ldr	r3, [r7, #8]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b087      	sub	sp, #28
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	460b      	mov	r3, r1
 8009e20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009e3a:	78fb      	ldrb	r3, [r7, #3]
 8009e3c:	f003 030f 	and.w	r3, r3, #15
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	fa22 f303 	lsr.w	r3, r2, r3
 8009e46:	01db      	lsls	r3, r3, #7
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	4013      	ands	r3, r2
 8009e62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e64:	68bb      	ldr	r3, [r7, #8]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	371c      	adds	r7, #28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b083      	sub	sp, #12
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	f003 0301 	and.w	r3, r3, #1
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b085      	sub	sp, #20
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ea8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009eac:	f023 0307 	bic.w	r3, r3, #7
 8009eb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ec4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	460b      	mov	r3, r1
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	333c      	adds	r3, #60	; 0x3c
 8009eea:	3304      	adds	r3, #4
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	4a26      	ldr	r2, [pc, #152]	; (8009f8c <USB_EP0_OutStart+0xb8>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d90a      	bls.n	8009f0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f08:	d101      	bne.n	8009f0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e037      	b.n	8009f7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f14:	461a      	mov	r2, r3
 8009f16:	2300      	movs	r3, #0
 8009f18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f3c:	f043 0318 	orr.w	r3, r3, #24
 8009f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009f54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009f56:	7afb      	ldrb	r3, [r7, #11]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d10f      	bne.n	8009f7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f62:	461a      	mov	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	697a      	ldr	r2, [r7, #20]
 8009f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009f7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	4f54300a 	.word	0x4f54300a

08009f90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4a13      	ldr	r2, [pc, #76]	; (8009ff4 <USB_CoreReset+0x64>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d901      	bls.n	8009fae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e01b      	b.n	8009fe6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	daf2      	bge.n	8009f9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	f043 0201 	orr.w	r2, r3, #1
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	4a09      	ldr	r2, [pc, #36]	; (8009ff4 <USB_CoreReset+0x64>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d901      	bls.n	8009fd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009fd4:	2303      	movs	r3, #3
 8009fd6:	e006      	b.n	8009fe6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d0f0      	beq.n	8009fc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	00030d40 	.word	0x00030d40

08009ff8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a004:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a008:	f002 fca2 	bl	800c950 <USBD_static_malloc>
 800a00c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d109      	bne.n	800a028 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	32b0      	adds	r2, #176	; 0xb0
 800a01e:	2100      	movs	r1, #0
 800a020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a024:	2302      	movs	r3, #2
 800a026:	e0d4      	b.n	800a1d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a028:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a02c:	2100      	movs	r1, #0
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f002 fd32 	bl	800ca98 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	32b0      	adds	r2, #176	; 0xb0
 800a03e:	68f9      	ldr	r1, [r7, #12]
 800a040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	32b0      	adds	r2, #176	; 0xb0
 800a04e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	7c1b      	ldrb	r3, [r3, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d138      	bne.n	800a0d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a060:	4b5e      	ldr	r3, [pc, #376]	; (800a1dc <USBD_CDC_Init+0x1e4>)
 800a062:	7819      	ldrb	r1, [r3, #0]
 800a064:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a068:	2202      	movs	r2, #2
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f002 fb4d 	bl	800c70a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a070:	4b5a      	ldr	r3, [pc, #360]	; (800a1dc <USBD_CDC_Init+0x1e4>)
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	f003 020f 	and.w	r2, r3, #15
 800a078:	6879      	ldr	r1, [r7, #4]
 800a07a:	4613      	mov	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4413      	add	r3, r2
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	440b      	add	r3, r1
 800a084:	3324      	adds	r3, #36	; 0x24
 800a086:	2201      	movs	r2, #1
 800a088:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a08a:	4b55      	ldr	r3, [pc, #340]	; (800a1e0 <USBD_CDC_Init+0x1e8>)
 800a08c:	7819      	ldrb	r1, [r3, #0]
 800a08e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a092:	2202      	movs	r2, #2
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f002 fb38 	bl	800c70a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a09a:	4b51      	ldr	r3, [pc, #324]	; (800a1e0 <USBD_CDC_Init+0x1e8>)
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	f003 020f 	and.w	r2, r3, #15
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	440b      	add	r3, r1
 800a0ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a0b6:	4b4b      	ldr	r3, [pc, #300]	; (800a1e4 <USBD_CDC_Init+0x1ec>)
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	f003 020f 	and.w	r2, r3, #15
 800a0be:	6879      	ldr	r1, [r7, #4]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	440b      	add	r3, r1
 800a0ca:	3326      	adds	r3, #38	; 0x26
 800a0cc:	2210      	movs	r2, #16
 800a0ce:	801a      	strh	r2, [r3, #0]
 800a0d0:	e035      	b.n	800a13e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a0d2:	4b42      	ldr	r3, [pc, #264]	; (800a1dc <USBD_CDC_Init+0x1e4>)
 800a0d4:	7819      	ldrb	r1, [r3, #0]
 800a0d6:	2340      	movs	r3, #64	; 0x40
 800a0d8:	2202      	movs	r2, #2
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f002 fb15 	bl	800c70a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a0e0:	4b3e      	ldr	r3, [pc, #248]	; (800a1dc <USBD_CDC_Init+0x1e4>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	f003 020f 	and.w	r2, r3, #15
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	440b      	add	r3, r1
 800a0f4:	3324      	adds	r3, #36	; 0x24
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a0fa:	4b39      	ldr	r3, [pc, #228]	; (800a1e0 <USBD_CDC_Init+0x1e8>)
 800a0fc:	7819      	ldrb	r1, [r3, #0]
 800a0fe:	2340      	movs	r3, #64	; 0x40
 800a100:	2202      	movs	r2, #2
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f002 fb01 	bl	800c70a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a108:	4b35      	ldr	r3, [pc, #212]	; (800a1e0 <USBD_CDC_Init+0x1e8>)
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	f003 020f 	and.w	r2, r3, #15
 800a110:	6879      	ldr	r1, [r7, #4]
 800a112:	4613      	mov	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	440b      	add	r3, r1
 800a11c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a120:	2201      	movs	r2, #1
 800a122:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a124:	4b2f      	ldr	r3, [pc, #188]	; (800a1e4 <USBD_CDC_Init+0x1ec>)
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	f003 020f 	and.w	r2, r3, #15
 800a12c:	6879      	ldr	r1, [r7, #4]
 800a12e:	4613      	mov	r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	4413      	add	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	440b      	add	r3, r1
 800a138:	3326      	adds	r3, #38	; 0x26
 800a13a:	2210      	movs	r2, #16
 800a13c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a13e:	4b29      	ldr	r3, [pc, #164]	; (800a1e4 <USBD_CDC_Init+0x1ec>)
 800a140:	7819      	ldrb	r1, [r3, #0]
 800a142:	2308      	movs	r3, #8
 800a144:	2203      	movs	r2, #3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f002 fadf 	bl	800c70a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a14c:	4b25      	ldr	r3, [pc, #148]	; (800a1e4 <USBD_CDC_Init+0x1ec>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	f003 020f 	and.w	r2, r3, #15
 800a154:	6879      	ldr	r1, [r7, #4]
 800a156:	4613      	mov	r3, r2
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	440b      	add	r3, r1
 800a160:	3324      	adds	r3, #36	; 0x24
 800a162:	2201      	movs	r2, #1
 800a164:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	33b0      	adds	r3, #176	; 0xb0
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4413      	add	r3, r2
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a19c:	2302      	movs	r3, #2
 800a19e:	e018      	b.n	800a1d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	7c1b      	ldrb	r3, [r3, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10a      	bne.n	800a1be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1a8:	4b0d      	ldr	r3, [pc, #52]	; (800a1e0 <USBD_CDC_Init+0x1e8>)
 800a1aa:	7819      	ldrb	r1, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f002 fb96 	bl	800c8e8 <USBD_LL_PrepareReceive>
 800a1bc:	e008      	b.n	800a1d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1be:	4b08      	ldr	r3, [pc, #32]	; (800a1e0 <USBD_CDC_Init+0x1e8>)
 800a1c0:	7819      	ldrb	r1, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1c8:	2340      	movs	r3, #64	; 0x40
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f002 fb8c 	bl	800c8e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	200000b7 	.word	0x200000b7
 800a1e0:	200000b8 	.word	0x200000b8
 800a1e4:	200000b9 	.word	0x200000b9

0800a1e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a1f4:	4b3a      	ldr	r3, [pc, #232]	; (800a2e0 <USBD_CDC_DeInit+0xf8>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f002 faab 	bl	800c756 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a200:	4b37      	ldr	r3, [pc, #220]	; (800a2e0 <USBD_CDC_DeInit+0xf8>)
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	f003 020f 	and.w	r2, r3, #15
 800a208:	6879      	ldr	r1, [r7, #4]
 800a20a:	4613      	mov	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	440b      	add	r3, r1
 800a214:	3324      	adds	r3, #36	; 0x24
 800a216:	2200      	movs	r2, #0
 800a218:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a21a:	4b32      	ldr	r3, [pc, #200]	; (800a2e4 <USBD_CDC_DeInit+0xfc>)
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	4619      	mov	r1, r3
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f002 fa98 	bl	800c756 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a226:	4b2f      	ldr	r3, [pc, #188]	; (800a2e4 <USBD_CDC_DeInit+0xfc>)
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	f003 020f 	and.w	r2, r3, #15
 800a22e:	6879      	ldr	r1, [r7, #4]
 800a230:	4613      	mov	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	440b      	add	r3, r1
 800a23a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a23e:	2200      	movs	r2, #0
 800a240:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a242:	4b29      	ldr	r3, [pc, #164]	; (800a2e8 <USBD_CDC_DeInit+0x100>)
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	4619      	mov	r1, r3
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f002 fa84 	bl	800c756 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a24e:	4b26      	ldr	r3, [pc, #152]	; (800a2e8 <USBD_CDC_DeInit+0x100>)
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	f003 020f 	and.w	r2, r3, #15
 800a256:	6879      	ldr	r1, [r7, #4]
 800a258:	4613      	mov	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	440b      	add	r3, r1
 800a262:	3324      	adds	r3, #36	; 0x24
 800a264:	2200      	movs	r2, #0
 800a266:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a268:	4b1f      	ldr	r3, [pc, #124]	; (800a2e8 <USBD_CDC_DeInit+0x100>)
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	f003 020f 	and.w	r2, r3, #15
 800a270:	6879      	ldr	r1, [r7, #4]
 800a272:	4613      	mov	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4413      	add	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	440b      	add	r3, r1
 800a27c:	3326      	adds	r3, #38	; 0x26
 800a27e:	2200      	movs	r2, #0
 800a280:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	32b0      	adds	r2, #176	; 0xb0
 800a28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d01f      	beq.n	800a2d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	33b0      	adds	r3, #176	; 0xb0
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	32b0      	adds	r2, #176	; 0xb0
 800a2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f002 fb58 	bl	800c96c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	32b0      	adds	r2, #176	; 0xb0
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	200000b7 	.word	0x200000b7
 800a2e4:	200000b8 	.word	0x200000b8
 800a2e8:	200000b9 	.word	0x200000b9

0800a2ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	32b0      	adds	r2, #176	; 0xb0
 800a300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a304:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a306:	2300      	movs	r3, #0
 800a308:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a30a:	2300      	movs	r3, #0
 800a30c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a30e:	2300      	movs	r3, #0
 800a310:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d101      	bne.n	800a31c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a318:	2303      	movs	r3, #3
 800a31a:	e0bf      	b.n	800a49c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a324:	2b00      	cmp	r3, #0
 800a326:	d050      	beq.n	800a3ca <USBD_CDC_Setup+0xde>
 800a328:	2b20      	cmp	r3, #32
 800a32a:	f040 80af 	bne.w	800a48c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	88db      	ldrh	r3, [r3, #6]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d03a      	beq.n	800a3ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	b25b      	sxtb	r3, r3
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	da1b      	bge.n	800a378 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	33b0      	adds	r3, #176	; 0xb0
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a356:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	88d2      	ldrh	r2, [r2, #6]
 800a35c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	88db      	ldrh	r3, [r3, #6]
 800a362:	2b07      	cmp	r3, #7
 800a364:	bf28      	it	cs
 800a366:	2307      	movcs	r3, #7
 800a368:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	89fa      	ldrh	r2, [r7, #14]
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f001 fd89 	bl	800be88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a376:	e090      	b.n	800a49a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	785a      	ldrb	r2, [r3, #1]
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	88db      	ldrh	r3, [r3, #6]
 800a386:	2b3f      	cmp	r3, #63	; 0x3f
 800a388:	d803      	bhi.n	800a392 <USBD_CDC_Setup+0xa6>
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	88db      	ldrh	r3, [r3, #6]
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	e000      	b.n	800a394 <USBD_CDC_Setup+0xa8>
 800a392:	2240      	movs	r2, #64	; 0x40
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a39a:	6939      	ldr	r1, [r7, #16]
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f001 fd9b 	bl	800bee0 <USBD_CtlPrepareRx>
      break;
 800a3aa:	e076      	b.n	800a49a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	33b0      	adds	r3, #176	; 0xb0
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	7850      	ldrb	r0, [r2, #1]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	4798      	blx	r3
      break;
 800a3c8:	e067      	b.n	800a49a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	785b      	ldrb	r3, [r3, #1]
 800a3ce:	2b0b      	cmp	r3, #11
 800a3d0:	d851      	bhi.n	800a476 <USBD_CDC_Setup+0x18a>
 800a3d2:	a201      	add	r2, pc, #4	; (adr r2, 800a3d8 <USBD_CDC_Setup+0xec>)
 800a3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d8:	0800a409 	.word	0x0800a409
 800a3dc:	0800a485 	.word	0x0800a485
 800a3e0:	0800a477 	.word	0x0800a477
 800a3e4:	0800a477 	.word	0x0800a477
 800a3e8:	0800a477 	.word	0x0800a477
 800a3ec:	0800a477 	.word	0x0800a477
 800a3f0:	0800a477 	.word	0x0800a477
 800a3f4:	0800a477 	.word	0x0800a477
 800a3f8:	0800a477 	.word	0x0800a477
 800a3fc:	0800a477 	.word	0x0800a477
 800a400:	0800a433 	.word	0x0800a433
 800a404:	0800a45d 	.word	0x0800a45d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b03      	cmp	r3, #3
 800a412:	d107      	bne.n	800a424 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a414:	f107 030a 	add.w	r3, r7, #10
 800a418:	2202      	movs	r2, #2
 800a41a:	4619      	mov	r1, r3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f001 fd33 	bl	800be88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a422:	e032      	b.n	800a48a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f001 fcbd 	bl	800bda6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a42c:	2303      	movs	r3, #3
 800a42e:	75fb      	strb	r3, [r7, #23]
          break;
 800a430:	e02b      	b.n	800a48a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	d107      	bne.n	800a44e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a43e:	f107 030d 	add.w	r3, r7, #13
 800a442:	2201      	movs	r2, #1
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f001 fd1e 	bl	800be88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a44c:	e01d      	b.n	800a48a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f001 fca8 	bl	800bda6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a456:	2303      	movs	r3, #3
 800a458:	75fb      	strb	r3, [r7, #23]
          break;
 800a45a:	e016      	b.n	800a48a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a462:	b2db      	uxtb	r3, r3
 800a464:	2b03      	cmp	r3, #3
 800a466:	d00f      	beq.n	800a488 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a468:	6839      	ldr	r1, [r7, #0]
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f001 fc9b 	bl	800bda6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a470:	2303      	movs	r3, #3
 800a472:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a474:	e008      	b.n	800a488 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f001 fc94 	bl	800bda6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a47e:	2303      	movs	r3, #3
 800a480:	75fb      	strb	r3, [r7, #23]
          break;
 800a482:	e002      	b.n	800a48a <USBD_CDC_Setup+0x19e>
          break;
 800a484:	bf00      	nop
 800a486:	e008      	b.n	800a49a <USBD_CDC_Setup+0x1ae>
          break;
 800a488:	bf00      	nop
      }
      break;
 800a48a:	e006      	b.n	800a49a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f001 fc89 	bl	800bda6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a494:	2303      	movs	r3, #3
 800a496:	75fb      	strb	r3, [r7, #23]
      break;
 800a498:	bf00      	nop
  }

  return (uint8_t)ret;
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3718      	adds	r7, #24
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	32b0      	adds	r2, #176	; 0xb0
 800a4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d101      	bne.n	800a4ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e065      	b.n	800a59a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	32b0      	adds	r2, #176	; 0xb0
 800a4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a4de:	78fb      	ldrb	r3, [r7, #3]
 800a4e0:	f003 020f 	and.w	r2, r3, #15
 800a4e4:	6879      	ldr	r1, [r7, #4]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	440b      	add	r3, r1
 800a4f0:	3318      	adds	r3, #24
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d02f      	beq.n	800a558 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a4f8:	78fb      	ldrb	r3, [r7, #3]
 800a4fa:	f003 020f 	and.w	r2, r3, #15
 800a4fe:	6879      	ldr	r1, [r7, #4]
 800a500:	4613      	mov	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	440b      	add	r3, r1
 800a50a:	3318      	adds	r3, #24
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	78fb      	ldrb	r3, [r7, #3]
 800a510:	f003 010f 	and.w	r1, r3, #15
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	460b      	mov	r3, r1
 800a518:	00db      	lsls	r3, r3, #3
 800a51a:	440b      	add	r3, r1
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4403      	add	r3, r0
 800a520:	3348      	adds	r3, #72	; 0x48
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	fbb2 f1f3 	udiv	r1, r2, r3
 800a528:	fb01 f303 	mul.w	r3, r1, r3
 800a52c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d112      	bne.n	800a558 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a532:	78fb      	ldrb	r3, [r7, #3]
 800a534:	f003 020f 	and.w	r2, r3, #15
 800a538:	6879      	ldr	r1, [r7, #4]
 800a53a:	4613      	mov	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	440b      	add	r3, r1
 800a544:	3318      	adds	r3, #24
 800a546:	2200      	movs	r2, #0
 800a548:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a54a:	78f9      	ldrb	r1, [r7, #3]
 800a54c:	2300      	movs	r3, #0
 800a54e:	2200      	movs	r2, #0
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f002 f9a8 	bl	800c8a6 <USBD_LL_Transmit>
 800a556:	e01f      	b.n	800a598 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	33b0      	adds	r3, #176	; 0xb0
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d010      	beq.n	800a598 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	33b0      	adds	r3, #176	; 0xb0
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a594:	78fa      	ldrb	r2, [r7, #3]
 800a596:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b084      	sub	sp, #16
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	32b0      	adds	r2, #176	; 0xb0
 800a5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	32b0      	adds	r2, #176	; 0xb0
 800a5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e01a      	b.n	800a60a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a5d4:	78fb      	ldrb	r3, [r7, #3]
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f002 f9a6 	bl	800c92a <USBD_LL_GetRxDataSize>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	33b0      	adds	r3, #176	; 0xb0
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4413      	add	r3, r2
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a604:	4611      	mov	r1, r2
 800a606:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	32b0      	adds	r2, #176	; 0xb0
 800a624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a628:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a630:	2303      	movs	r3, #3
 800a632:	e025      	b.n	800a680 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	33b0      	adds	r3, #176	; 0xb0
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d01a      	beq.n	800a67e <USBD_CDC_EP0_RxReady+0x6c>
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a64e:	2bff      	cmp	r3, #255	; 0xff
 800a650:	d015      	beq.n	800a67e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	33b0      	adds	r3, #176	; 0xb0
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a66a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a672:	b292      	uxth	r2, r2
 800a674:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	22ff      	movs	r2, #255	; 0xff
 800a67a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a690:	2182      	movs	r1, #130	; 0x82
 800a692:	4818      	ldr	r0, [pc, #96]	; (800a6f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a694:	f000 fd4f 	bl	800b136 <USBD_GetEpDesc>
 800a698:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a69a:	2101      	movs	r1, #1
 800a69c:	4815      	ldr	r0, [pc, #84]	; (800a6f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a69e:	f000 fd4a 	bl	800b136 <USBD_GetEpDesc>
 800a6a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a6a4:	2181      	movs	r1, #129	; 0x81
 800a6a6:	4813      	ldr	r0, [pc, #76]	; (800a6f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a6a8:	f000 fd45 	bl	800b136 <USBD_GetEpDesc>
 800a6ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	2210      	movs	r2, #16
 800a6b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d006      	beq.n	800a6ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6c8:	711a      	strb	r2, [r3, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d006      	beq.n	800a6e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6dc:	711a      	strb	r2, [r3, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2243      	movs	r2, #67	; 0x43
 800a6e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a6e8:	4b02      	ldr	r3, [pc, #8]	; (800a6f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3718      	adds	r7, #24
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	20000074 	.word	0x20000074

0800a6f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a700:	2182      	movs	r1, #130	; 0x82
 800a702:	4818      	ldr	r0, [pc, #96]	; (800a764 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a704:	f000 fd17 	bl	800b136 <USBD_GetEpDesc>
 800a708:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a70a:	2101      	movs	r1, #1
 800a70c:	4815      	ldr	r0, [pc, #84]	; (800a764 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a70e:	f000 fd12 	bl	800b136 <USBD_GetEpDesc>
 800a712:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a714:	2181      	movs	r1, #129	; 0x81
 800a716:	4813      	ldr	r0, [pc, #76]	; (800a764 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a718:	f000 fd0d 	bl	800b136 <USBD_GetEpDesc>
 800a71c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d002      	beq.n	800a72a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	2210      	movs	r2, #16
 800a728:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d006      	beq.n	800a73e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	2200      	movs	r2, #0
 800a734:	711a      	strb	r2, [r3, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	f042 0202 	orr.w	r2, r2, #2
 800a73c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d006      	beq.n	800a752 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	711a      	strb	r2, [r3, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f042 0202 	orr.w	r2, r2, #2
 800a750:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2243      	movs	r2, #67	; 0x43
 800a756:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a758:	4b02      	ldr	r3, [pc, #8]	; (800a764 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3718      	adds	r7, #24
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	20000074 	.word	0x20000074

0800a768 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a770:	2182      	movs	r1, #130	; 0x82
 800a772:	4818      	ldr	r0, [pc, #96]	; (800a7d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a774:	f000 fcdf 	bl	800b136 <USBD_GetEpDesc>
 800a778:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a77a:	2101      	movs	r1, #1
 800a77c:	4815      	ldr	r0, [pc, #84]	; (800a7d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a77e:	f000 fcda 	bl	800b136 <USBD_GetEpDesc>
 800a782:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a784:	2181      	movs	r1, #129	; 0x81
 800a786:	4813      	ldr	r0, [pc, #76]	; (800a7d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a788:	f000 fcd5 	bl	800b136 <USBD_GetEpDesc>
 800a78c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2210      	movs	r2, #16
 800a798:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d006      	beq.n	800a7ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7a8:	711a      	strb	r2, [r3, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d006      	beq.n	800a7c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7bc:	711a      	strb	r2, [r3, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2243      	movs	r2, #67	; 0x43
 800a7c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a7c8:	4b02      	ldr	r3, [pc, #8]	; (800a7d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	20000074 	.word	0x20000074

0800a7d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	220a      	movs	r2, #10
 800a7e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a7e6:	4b03      	ldr	r3, [pc, #12]	; (800a7f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr
 800a7f4:	20000030 	.word	0x20000030

0800a7f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a808:	2303      	movs	r3, #3
 800a80a:	e009      	b.n	800a820 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	33b0      	adds	r3, #176	; 0xb0
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	4413      	add	r3, r2
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	32b0      	adds	r2, #176	; 0xb0
 800a842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a846:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a84e:	2303      	movs	r3, #3
 800a850:	e008      	b.n	800a864 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	371c      	adds	r7, #28
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	32b0      	adds	r2, #176	; 0xb0
 800a884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a888:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d101      	bne.n	800a894 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a890:	2303      	movs	r3, #3
 800a892:	e004      	b.n	800a89e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
	...

0800a8ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	32b0      	adds	r2, #176	; 0xb0
 800a8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	32b0      	adds	r2, #176	; 0xb0
 800a8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d101      	bne.n	800a8de <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	e025      	b.n	800a92a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d11f      	bne.n	800a928 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a8f0:	4b10      	ldr	r3, [pc, #64]	; (800a934 <USBD_CDC_TransmitPacket+0x88>)
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	f003 020f 	and.w	r2, r3, #15
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	4613      	mov	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4413      	add	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4403      	add	r3, r0
 800a90a:	3318      	adds	r3, #24
 800a90c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a90e:	4b09      	ldr	r3, [pc, #36]	; (800a934 <USBD_CDC_TransmitPacket+0x88>)
 800a910:	7819      	ldrb	r1, [r3, #0]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f001 ffc1 	bl	800c8a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a924:	2300      	movs	r3, #0
 800a926:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a928:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	200000b7 	.word	0x200000b7

0800a938 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	32b0      	adds	r2, #176	; 0xb0
 800a94a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	32b0      	adds	r2, #176	; 0xb0
 800a95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d101      	bne.n	800a966 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a962:	2303      	movs	r3, #3
 800a964:	e018      	b.n	800a998 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	7c1b      	ldrb	r3, [r3, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10a      	bne.n	800a984 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a96e:	4b0c      	ldr	r3, [pc, #48]	; (800a9a0 <USBD_CDC_ReceivePacket+0x68>)
 800a970:	7819      	ldrb	r1, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f001 ffb3 	bl	800c8e8 <USBD_LL_PrepareReceive>
 800a982:	e008      	b.n	800a996 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a984:	4b06      	ldr	r3, [pc, #24]	; (800a9a0 <USBD_CDC_ReceivePacket+0x68>)
 800a986:	7819      	ldrb	r1, [r3, #0]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a98e:	2340      	movs	r3, #64	; 0x40
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f001 ffa9 	bl	800c8e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	200000b8 	.word	0x200000b8

0800a9a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b086      	sub	sp, #24
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	e01f      	b.n	800a9fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	79fa      	ldrb	r2, [r7, #7]
 800a9ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f001 fe23 	bl	800c63c <USBD_LL_Init>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3718      	adds	r7, #24
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	e025      	b.n	800aa68 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	32ae      	adds	r2, #174	; 0xae
 800aa2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00f      	beq.n	800aa58 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	32ae      	adds	r2, #174	; 0xae
 800aa42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa48:	f107 020e 	add.w	r2, r7, #14
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	4798      	blx	r3
 800aa50:	4602      	mov	r2, r0
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aa5e:	1c5a      	adds	r2, r3, #1
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 fe2b 	bl	800c6d4 <USBD_LL_Start>
 800aa7e:	4603      	mov	r3, r0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	370c      	adds	r7, #12
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b084      	sub	sp, #16
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d009      	beq.n	800aacc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	78fa      	ldrb	r2, [r7, #3]
 800aac2:	4611      	mov	r1, r2
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	4798      	blx	r3
 800aac8:	4603      	mov	r3, r0
 800aaca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	78fa      	ldrb	r2, [r7, #3]
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	4798      	blx	r3
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d001      	beq.n	800ab00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aafc:	2303      	movs	r3, #3
 800aafe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b084      	sub	sp, #16
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab1a:	6839      	ldr	r1, [r7, #0]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f001 f908 	bl	800bd32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ab30:	461a      	mov	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab3e:	f003 031f 	and.w	r3, r3, #31
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d01a      	beq.n	800ab7c <USBD_LL_SetupStage+0x72>
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d822      	bhi.n	800ab90 <USBD_LL_SetupStage+0x86>
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d002      	beq.n	800ab54 <USBD_LL_SetupStage+0x4a>
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d00a      	beq.n	800ab68 <USBD_LL_SetupStage+0x5e>
 800ab52:	e01d      	b.n	800ab90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fb5f 	bl	800b220 <USBD_StdDevReq>
 800ab62:	4603      	mov	r3, r0
 800ab64:	73fb      	strb	r3, [r7, #15]
      break;
 800ab66:	e020      	b.n	800abaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fbc7 	bl	800b304 <USBD_StdItfReq>
 800ab76:	4603      	mov	r3, r0
 800ab78:	73fb      	strb	r3, [r7, #15]
      break;
 800ab7a:	e016      	b.n	800abaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fc29 	bl	800b3dc <USBD_StdEPReq>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab8e:	e00c      	b.n	800abaa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f001 fdf8 	bl	800c794 <USBD_LL_StallEP>
 800aba4:	4603      	mov	r3, r0
 800aba6:	73fb      	strb	r3, [r7, #15]
      break;
 800aba8:	bf00      	nop
  }

  return ret;
 800abaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	460b      	mov	r3, r1
 800abbe:	607a      	str	r2, [r7, #4]
 800abc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800abc2:	2300      	movs	r3, #0
 800abc4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800abc6:	7afb      	ldrb	r3, [r7, #11]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d16e      	bne.n	800acaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800abd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800abda:	2b03      	cmp	r3, #3
 800abdc:	f040 8098 	bne.w	800ad10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d913      	bls.n	800ac14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	689a      	ldr	r2, [r3, #8]
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	1ad2      	subs	r2, r2, r3
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	68da      	ldr	r2, [r3, #12]
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	4293      	cmp	r3, r2
 800ac04:	bf28      	it	cs
 800ac06:	4613      	movcs	r3, r2
 800ac08:	461a      	mov	r2, r3
 800ac0a:	6879      	ldr	r1, [r7, #4]
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f001 f984 	bl	800bf1a <USBD_CtlContinueRx>
 800ac12:	e07d      	b.n	800ad10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac1a:	f003 031f 	and.w	r3, r3, #31
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d014      	beq.n	800ac4c <USBD_LL_DataOutStage+0x98>
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d81d      	bhi.n	800ac62 <USBD_LL_DataOutStage+0xae>
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d002      	beq.n	800ac30 <USBD_LL_DataOutStage+0x7c>
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d003      	beq.n	800ac36 <USBD_LL_DataOutStage+0x82>
 800ac2e:	e018      	b.n	800ac62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ac30:	2300      	movs	r3, #0
 800ac32:	75bb      	strb	r3, [r7, #22]
            break;
 800ac34:	e018      	b.n	800ac68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	4619      	mov	r1, r3
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f000 fa5e 	bl	800b102 <USBD_CoreFindIF>
 800ac46:	4603      	mov	r3, r0
 800ac48:	75bb      	strb	r3, [r7, #22]
            break;
 800ac4a:	e00d      	b.n	800ac68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	4619      	mov	r1, r3
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f000 fa60 	bl	800b11c <USBD_CoreFindEP>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	75bb      	strb	r3, [r7, #22]
            break;
 800ac60:	e002      	b.n	800ac68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ac62:	2300      	movs	r3, #0
 800ac64:	75bb      	strb	r3, [r7, #22]
            break;
 800ac66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ac68:	7dbb      	ldrb	r3, [r7, #22]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d119      	bne.n	800aca2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b03      	cmp	r3, #3
 800ac78:	d113      	bne.n	800aca2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ac7a:	7dba      	ldrb	r2, [r7, #22]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	32ae      	adds	r2, #174	; 0xae
 800ac80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00b      	beq.n	800aca2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ac8a:	7dba      	ldrb	r2, [r7, #22]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ac92:	7dba      	ldrb	r2, [r7, #22]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	32ae      	adds	r2, #174	; 0xae
 800ac98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f001 f94a 	bl	800bf3c <USBD_CtlSendStatus>
 800aca8:	e032      	b.n	800ad10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800acaa:	7afb      	ldrb	r3, [r7, #11]
 800acac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	4619      	mov	r1, r3
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f000 fa31 	bl	800b11c <USBD_CoreFindEP>
 800acba:	4603      	mov	r3, r0
 800acbc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acbe:	7dbb      	ldrb	r3, [r7, #22]
 800acc0:	2bff      	cmp	r3, #255	; 0xff
 800acc2:	d025      	beq.n	800ad10 <USBD_LL_DataOutStage+0x15c>
 800acc4:	7dbb      	ldrb	r3, [r7, #22]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d122      	bne.n	800ad10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d117      	bne.n	800ad06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800acd6:	7dba      	ldrb	r2, [r7, #22]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	32ae      	adds	r2, #174	; 0xae
 800acdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00f      	beq.n	800ad06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ace6:	7dba      	ldrb	r2, [r7, #22]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800acee:	7dba      	ldrb	r2, [r7, #22]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	32ae      	adds	r2, #174	; 0xae
 800acf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	7afa      	ldrb	r2, [r7, #11]
 800acfc:	4611      	mov	r1, r2
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	4798      	blx	r3
 800ad02:	4603      	mov	r3, r0
 800ad04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ad0c:	7dfb      	ldrb	r3, [r7, #23]
 800ad0e:	e000      	b.n	800ad12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3718      	adds	r7, #24
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b086      	sub	sp, #24
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	60f8      	str	r0, [r7, #12]
 800ad22:	460b      	mov	r3, r1
 800ad24:	607a      	str	r2, [r7, #4]
 800ad26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ad28:	7afb      	ldrb	r3, [r7, #11]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d16f      	bne.n	800ae0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3314      	adds	r3, #20
 800ad32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d15a      	bne.n	800adf4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	689a      	ldr	r2, [r3, #8]
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d914      	bls.n	800ad74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	689a      	ldr	r2, [r3, #8]
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	1ad2      	subs	r2, r2, r3
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	6879      	ldr	r1, [r7, #4]
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f001 f8ac 	bl	800bebe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad66:	2300      	movs	r3, #0
 800ad68:	2200      	movs	r2, #0
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f001 fdbb 	bl	800c8e8 <USBD_LL_PrepareReceive>
 800ad72:	e03f      	b.n	800adf4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	68da      	ldr	r2, [r3, #12]
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d11c      	bne.n	800adba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	685a      	ldr	r2, [r3, #4]
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d316      	bcc.n	800adba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d20f      	bcs.n	800adba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f001 f88d 	bl	800bebe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adac:	2300      	movs	r3, #0
 800adae:	2200      	movs	r2, #0
 800adb0:	2100      	movs	r1, #0
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f001 fd98 	bl	800c8e8 <USBD_LL_PrepareReceive>
 800adb8:	e01c      	b.n	800adf4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d10f      	bne.n	800ade6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d009      	beq.n	800ade6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ade6:	2180      	movs	r1, #128	; 0x80
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f001 fcd3 	bl	800c794 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f001 f8b7 	bl	800bf62 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d03a      	beq.n	800ae74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f7ff fe42 	bl	800aa88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ae0c:	e032      	b.n	800ae74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ae0e:	7afb      	ldrb	r3, [r7, #11]
 800ae10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	4619      	mov	r1, r3
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f000 f97f 	bl	800b11c <USBD_CoreFindEP>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	2bff      	cmp	r3, #255	; 0xff
 800ae26:	d025      	beq.n	800ae74 <USBD_LL_DataInStage+0x15a>
 800ae28:	7dfb      	ldrb	r3, [r7, #23]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d122      	bne.n	800ae74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d11c      	bne.n	800ae74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ae3a:	7dfa      	ldrb	r2, [r7, #23]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	32ae      	adds	r2, #174	; 0xae
 800ae40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae44:	695b      	ldr	r3, [r3, #20]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d014      	beq.n	800ae74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ae4a:	7dfa      	ldrb	r2, [r7, #23]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ae52:	7dfa      	ldrb	r2, [r7, #23]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	32ae      	adds	r2, #174	; 0xae
 800ae58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	7afa      	ldrb	r2, [r7, #11]
 800ae60:	4611      	mov	r1, r2
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	4798      	blx	r3
 800ae66:	4603      	mov	r3, r0
 800ae68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ae6a:	7dbb      	ldrb	r3, [r7, #22]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ae70:	7dbb      	ldrb	r3, [r7, #22]
 800ae72:	e000      	b.n	800ae76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3718      	adds	r7, #24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b084      	sub	sp, #16
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d014      	beq.n	800aee4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00e      	beq.n	800aee4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	6852      	ldr	r2, [r2, #4]
 800aed2:	b2d2      	uxtb	r2, r2
 800aed4:	4611      	mov	r1, r2
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	4798      	blx	r3
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d001      	beq.n	800aee4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aee0:	2303      	movs	r3, #3
 800aee2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aee4:	2340      	movs	r3, #64	; 0x40
 800aee6:	2200      	movs	r2, #0
 800aee8:	2100      	movs	r1, #0
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f001 fc0d 	bl	800c70a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2240      	movs	r2, #64	; 0x40
 800aefc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800af00:	2340      	movs	r3, #64	; 0x40
 800af02:	2200      	movs	r2, #0
 800af04:	2180      	movs	r1, #128	; 0x80
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f001 fbff 	bl	800c70a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2240      	movs	r2, #64	; 0x40
 800af16:	621a      	str	r2, [r3, #32]

  return ret;
 800af18:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af22:	b480      	push	{r7}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	460b      	mov	r3, r1
 800af2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	78fa      	ldrb	r2, [r7, #3]
 800af32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	370c      	adds	r7, #12
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af42:	b480      	push	{r7}
 800af44:	b083      	sub	sp, #12
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af50:	b2da      	uxtb	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2204      	movs	r2, #4
 800af5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	370c      	adds	r7, #12
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af6e:	b480      	push	{r7}
 800af70:	b083      	sub	sp, #12
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	2b04      	cmp	r3, #4
 800af80:	d106      	bne.n	800af90 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b082      	sub	sp, #8
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afac:	b2db      	uxtb	r3, r3
 800afae:	2b03      	cmp	r3, #3
 800afb0:	d110      	bne.n	800afd4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00b      	beq.n	800afd4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afc2:	69db      	ldr	r3, [r3, #28]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d005      	beq.n	800afd4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afce:	69db      	ldr	r3, [r3, #28]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b082      	sub	sp, #8
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	460b      	mov	r3, r1
 800afe8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	32ae      	adds	r2, #174	; 0xae
 800aff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800affc:	2303      	movs	r3, #3
 800affe:	e01c      	b.n	800b03a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b006:	b2db      	uxtb	r3, r3
 800b008:	2b03      	cmp	r3, #3
 800b00a:	d115      	bne.n	800b038 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	32ae      	adds	r2, #174	; 0xae
 800b016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01a:	6a1b      	ldr	r3, [r3, #32]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00b      	beq.n	800b038 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	32ae      	adds	r2, #174	; 0xae
 800b02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b02e:	6a1b      	ldr	r3, [r3, #32]
 800b030:	78fa      	ldrb	r2, [r7, #3]
 800b032:	4611      	mov	r1, r2
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b082      	sub	sp, #8
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	460b      	mov	r3, r1
 800b04c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	32ae      	adds	r2, #174	; 0xae
 800b058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b060:	2303      	movs	r3, #3
 800b062:	e01c      	b.n	800b09e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d115      	bne.n	800b09c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	32ae      	adds	r2, #174	; 0xae
 800b07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00b      	beq.n	800b09c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	32ae      	adds	r2, #174	; 0xae
 800b08e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b094:	78fa      	ldrb	r2, [r7, #3]
 800b096:	4611      	mov	r1, r2
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00e      	beq.n	800b0f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	6852      	ldr	r2, [r2, #4]
 800b0e6:	b2d2      	uxtb	r2, r2
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	4798      	blx	r3
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d001      	beq.n	800b0f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b102:	b480      	push	{r7}
 800b104:	b083      	sub	sp, #12
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	460b      	mov	r3, r1
 800b10c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b10e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b110:	4618      	mov	r0, r3
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b128:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr

0800b136 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b086      	sub	sp, #24
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	460b      	mov	r3, r1
 800b140:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	885b      	ldrh	r3, [r3, #2]
 800b152:	b29a      	uxth	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	b29b      	uxth	r3, r3
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d920      	bls.n	800b1a0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	b29b      	uxth	r3, r3
 800b164:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b166:	e013      	b.n	800b190 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b168:	f107 030a 	add.w	r3, r7, #10
 800b16c:	4619      	mov	r1, r3
 800b16e:	6978      	ldr	r0, [r7, #20]
 800b170:	f000 f81b 	bl	800b1aa <USBD_GetNextDesc>
 800b174:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	785b      	ldrb	r3, [r3, #1]
 800b17a:	2b05      	cmp	r3, #5
 800b17c:	d108      	bne.n	800b190 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	789b      	ldrb	r3, [r3, #2]
 800b186:	78fa      	ldrb	r2, [r7, #3]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d008      	beq.n	800b19e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b18c:	2300      	movs	r3, #0
 800b18e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	885b      	ldrh	r3, [r3, #2]
 800b194:	b29a      	uxth	r2, r3
 800b196:	897b      	ldrh	r3, [r7, #10]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d8e5      	bhi.n	800b168 <USBD_GetEpDesc+0x32>
 800b19c:	e000      	b.n	800b1a0 <USBD_GetEpDesc+0x6a>
          break;
 800b19e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b1a0:	693b      	ldr	r3, [r7, #16]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b085      	sub	sp, #20
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	881a      	ldrh	r2, [r3, #0]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	4413      	add	r3, r2
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b202:	8a3b      	ldrh	r3, [r7, #16]
 800b204:	021b      	lsls	r3, r3, #8
 800b206:	b21a      	sxth	r2, r3
 800b208:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	b21b      	sxth	r3, r3
 800b210:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b212:	89fb      	ldrh	r3, [r7, #14]
}
 800b214:	4618      	mov	r0, r3
 800b216:	371c      	adds	r7, #28
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b22a:	2300      	movs	r3, #0
 800b22c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b236:	2b40      	cmp	r3, #64	; 0x40
 800b238:	d005      	beq.n	800b246 <USBD_StdDevReq+0x26>
 800b23a:	2b40      	cmp	r3, #64	; 0x40
 800b23c:	d857      	bhi.n	800b2ee <USBD_StdDevReq+0xce>
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00f      	beq.n	800b262 <USBD_StdDevReq+0x42>
 800b242:	2b20      	cmp	r3, #32
 800b244:	d153      	bne.n	800b2ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	32ae      	adds	r2, #174	; 0xae
 800b250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	4798      	blx	r3
 800b25c:	4603      	mov	r3, r0
 800b25e:	73fb      	strb	r3, [r7, #15]
      break;
 800b260:	e04a      	b.n	800b2f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	785b      	ldrb	r3, [r3, #1]
 800b266:	2b09      	cmp	r3, #9
 800b268:	d83b      	bhi.n	800b2e2 <USBD_StdDevReq+0xc2>
 800b26a:	a201      	add	r2, pc, #4	; (adr r2, 800b270 <USBD_StdDevReq+0x50>)
 800b26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b270:	0800b2c5 	.word	0x0800b2c5
 800b274:	0800b2d9 	.word	0x0800b2d9
 800b278:	0800b2e3 	.word	0x0800b2e3
 800b27c:	0800b2cf 	.word	0x0800b2cf
 800b280:	0800b2e3 	.word	0x0800b2e3
 800b284:	0800b2a3 	.word	0x0800b2a3
 800b288:	0800b299 	.word	0x0800b299
 800b28c:	0800b2e3 	.word	0x0800b2e3
 800b290:	0800b2bb 	.word	0x0800b2bb
 800b294:	0800b2ad 	.word	0x0800b2ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b298:	6839      	ldr	r1, [r7, #0]
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fa3c 	bl	800b718 <USBD_GetDescriptor>
          break;
 800b2a0:	e024      	b.n	800b2ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b2a2:	6839      	ldr	r1, [r7, #0]
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 fba1 	bl	800b9ec <USBD_SetAddress>
          break;
 800b2aa:	e01f      	b.n	800b2ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b2ac:	6839      	ldr	r1, [r7, #0]
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 fbe0 	bl	800ba74 <USBD_SetConfig>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	73fb      	strb	r3, [r7, #15]
          break;
 800b2b8:	e018      	b.n	800b2ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b2ba:	6839      	ldr	r1, [r7, #0]
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 fc83 	bl	800bbc8 <USBD_GetConfig>
          break;
 800b2c2:	e013      	b.n	800b2ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b2c4:	6839      	ldr	r1, [r7, #0]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fcb4 	bl	800bc34 <USBD_GetStatus>
          break;
 800b2cc:	e00e      	b.n	800b2ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 fce3 	bl	800bc9c <USBD_SetFeature>
          break;
 800b2d6:	e009      	b.n	800b2ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fd07 	bl	800bcee <USBD_ClrFeature>
          break;
 800b2e0:	e004      	b.n	800b2ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fd5e 	bl	800bda6 <USBD_CtlError>
          break;
 800b2ea:	bf00      	nop
      }
      break;
 800b2ec:	e004      	b.n	800b2f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fd58 	bl	800bda6 <USBD_CtlError>
      break;
 800b2f6:	bf00      	nop
  }

  return ret;
 800b2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop

0800b304 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b31a:	2b40      	cmp	r3, #64	; 0x40
 800b31c:	d005      	beq.n	800b32a <USBD_StdItfReq+0x26>
 800b31e:	2b40      	cmp	r3, #64	; 0x40
 800b320:	d852      	bhi.n	800b3c8 <USBD_StdItfReq+0xc4>
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <USBD_StdItfReq+0x26>
 800b326:	2b20      	cmp	r3, #32
 800b328:	d14e      	bne.n	800b3c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b330:	b2db      	uxtb	r3, r3
 800b332:	3b01      	subs	r3, #1
 800b334:	2b02      	cmp	r3, #2
 800b336:	d840      	bhi.n	800b3ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	889b      	ldrh	r3, [r3, #4]
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d836      	bhi.n	800b3b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	889b      	ldrh	r3, [r3, #4]
 800b346:	b2db      	uxtb	r3, r3
 800b348:	4619      	mov	r1, r3
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7ff fed9 	bl	800b102 <USBD_CoreFindIF>
 800b350:	4603      	mov	r3, r0
 800b352:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b354:	7bbb      	ldrb	r3, [r7, #14]
 800b356:	2bff      	cmp	r3, #255	; 0xff
 800b358:	d01d      	beq.n	800b396 <USBD_StdItfReq+0x92>
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d11a      	bne.n	800b396 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b360:	7bba      	ldrb	r2, [r7, #14]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	32ae      	adds	r2, #174	; 0xae
 800b366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00f      	beq.n	800b390 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b370:	7bba      	ldrb	r2, [r7, #14]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b378:	7bba      	ldrb	r2, [r7, #14]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	32ae      	adds	r2, #174	; 0xae
 800b37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	4798      	blx	r3
 800b38a:	4603      	mov	r3, r0
 800b38c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b38e:	e004      	b.n	800b39a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b390:	2303      	movs	r3, #3
 800b392:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b394:	e001      	b.n	800b39a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b396:	2303      	movs	r3, #3
 800b398:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	88db      	ldrh	r3, [r3, #6]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d110      	bne.n	800b3c4 <USBD_StdItfReq+0xc0>
 800b3a2:	7bfb      	ldrb	r3, [r7, #15]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10d      	bne.n	800b3c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 fdc7 	bl	800bf3c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b3ae:	e009      	b.n	800b3c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fcf7 	bl	800bda6 <USBD_CtlError>
          break;
 800b3b8:	e004      	b.n	800b3c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fcf2 	bl	800bda6 <USBD_CtlError>
          break;
 800b3c2:	e000      	b.n	800b3c6 <USBD_StdItfReq+0xc2>
          break;
 800b3c4:	bf00      	nop
      }
      break;
 800b3c6:	e004      	b.n	800b3d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fceb 	bl	800bda6 <USBD_CtlError>
      break;
 800b3d0:	bf00      	nop
  }

  return ret;
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	889b      	ldrh	r3, [r3, #4]
 800b3ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3f8:	2b40      	cmp	r3, #64	; 0x40
 800b3fa:	d007      	beq.n	800b40c <USBD_StdEPReq+0x30>
 800b3fc:	2b40      	cmp	r3, #64	; 0x40
 800b3fe:	f200 817f 	bhi.w	800b700 <USBD_StdEPReq+0x324>
 800b402:	2b00      	cmp	r3, #0
 800b404:	d02a      	beq.n	800b45c <USBD_StdEPReq+0x80>
 800b406:	2b20      	cmp	r3, #32
 800b408:	f040 817a 	bne.w	800b700 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b40c:	7bbb      	ldrb	r3, [r7, #14]
 800b40e:	4619      	mov	r1, r3
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f7ff fe83 	bl	800b11c <USBD_CoreFindEP>
 800b416:	4603      	mov	r3, r0
 800b418:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b41a:	7b7b      	ldrb	r3, [r7, #13]
 800b41c:	2bff      	cmp	r3, #255	; 0xff
 800b41e:	f000 8174 	beq.w	800b70a <USBD_StdEPReq+0x32e>
 800b422:	7b7b      	ldrb	r3, [r7, #13]
 800b424:	2b00      	cmp	r3, #0
 800b426:	f040 8170 	bne.w	800b70a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b42a:	7b7a      	ldrb	r2, [r7, #13]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b432:	7b7a      	ldrb	r2, [r7, #13]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	32ae      	adds	r2, #174	; 0xae
 800b438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f000 8163 	beq.w	800b70a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b444:	7b7a      	ldrb	r2, [r7, #13]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	32ae      	adds	r2, #174	; 0xae
 800b44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	4798      	blx	r3
 800b456:	4603      	mov	r3, r0
 800b458:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b45a:	e156      	b.n	800b70a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	785b      	ldrb	r3, [r3, #1]
 800b460:	2b03      	cmp	r3, #3
 800b462:	d008      	beq.n	800b476 <USBD_StdEPReq+0x9a>
 800b464:	2b03      	cmp	r3, #3
 800b466:	f300 8145 	bgt.w	800b6f4 <USBD_StdEPReq+0x318>
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f000 809b 	beq.w	800b5a6 <USBD_StdEPReq+0x1ca>
 800b470:	2b01      	cmp	r3, #1
 800b472:	d03c      	beq.n	800b4ee <USBD_StdEPReq+0x112>
 800b474:	e13e      	b.n	800b6f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d002      	beq.n	800b488 <USBD_StdEPReq+0xac>
 800b482:	2b03      	cmp	r3, #3
 800b484:	d016      	beq.n	800b4b4 <USBD_StdEPReq+0xd8>
 800b486:	e02c      	b.n	800b4e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b488:	7bbb      	ldrb	r3, [r7, #14]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00d      	beq.n	800b4aa <USBD_StdEPReq+0xce>
 800b48e:	7bbb      	ldrb	r3, [r7, #14]
 800b490:	2b80      	cmp	r3, #128	; 0x80
 800b492:	d00a      	beq.n	800b4aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b494:	7bbb      	ldrb	r3, [r7, #14]
 800b496:	4619      	mov	r1, r3
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f001 f97b 	bl	800c794 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b49e:	2180      	movs	r1, #128	; 0x80
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f001 f977 	bl	800c794 <USBD_LL_StallEP>
 800b4a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4a8:	e020      	b.n	800b4ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b4aa:	6839      	ldr	r1, [r7, #0]
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fc7a 	bl	800bda6 <USBD_CtlError>
              break;
 800b4b2:	e01b      	b.n	800b4ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	885b      	ldrh	r3, [r3, #2]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10e      	bne.n	800b4da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b4bc:	7bbb      	ldrb	r3, [r7, #14]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00b      	beq.n	800b4da <USBD_StdEPReq+0xfe>
 800b4c2:	7bbb      	ldrb	r3, [r7, #14]
 800b4c4:	2b80      	cmp	r3, #128	; 0x80
 800b4c6:	d008      	beq.n	800b4da <USBD_StdEPReq+0xfe>
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	88db      	ldrh	r3, [r3, #6]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d104      	bne.n	800b4da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4d0:	7bbb      	ldrb	r3, [r7, #14]
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f001 f95d 	bl	800c794 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 fd2e 	bl	800bf3c <USBD_CtlSendStatus>

              break;
 800b4e0:	e004      	b.n	800b4ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fc5e 	bl	800bda6 <USBD_CtlError>
              break;
 800b4ea:	bf00      	nop
          }
          break;
 800b4ec:	e107      	b.n	800b6fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d002      	beq.n	800b500 <USBD_StdEPReq+0x124>
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d016      	beq.n	800b52c <USBD_StdEPReq+0x150>
 800b4fe:	e04b      	b.n	800b598 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b500:	7bbb      	ldrb	r3, [r7, #14]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00d      	beq.n	800b522 <USBD_StdEPReq+0x146>
 800b506:	7bbb      	ldrb	r3, [r7, #14]
 800b508:	2b80      	cmp	r3, #128	; 0x80
 800b50a:	d00a      	beq.n	800b522 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b50c:	7bbb      	ldrb	r3, [r7, #14]
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f001 f93f 	bl	800c794 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b516:	2180      	movs	r1, #128	; 0x80
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f001 f93b 	bl	800c794 <USBD_LL_StallEP>
 800b51e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b520:	e040      	b.n	800b5a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b522:	6839      	ldr	r1, [r7, #0]
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 fc3e 	bl	800bda6 <USBD_CtlError>
              break;
 800b52a:	e03b      	b.n	800b5a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	885b      	ldrh	r3, [r3, #2]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d136      	bne.n	800b5a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b534:	7bbb      	ldrb	r3, [r7, #14]
 800b536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d004      	beq.n	800b548 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f001 f945 	bl	800c7d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fcf7 	bl	800bf3c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b54e:	7bbb      	ldrb	r3, [r7, #14]
 800b550:	4619      	mov	r1, r3
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7ff fde2 	bl	800b11c <USBD_CoreFindEP>
 800b558:	4603      	mov	r3, r0
 800b55a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b55c:	7b7b      	ldrb	r3, [r7, #13]
 800b55e:	2bff      	cmp	r3, #255	; 0xff
 800b560:	d01f      	beq.n	800b5a2 <USBD_StdEPReq+0x1c6>
 800b562:	7b7b      	ldrb	r3, [r7, #13]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d11c      	bne.n	800b5a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b568:	7b7a      	ldrb	r2, [r7, #13]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b570:	7b7a      	ldrb	r2, [r7, #13]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	32ae      	adds	r2, #174	; 0xae
 800b576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d010      	beq.n	800b5a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b580:	7b7a      	ldrb	r2, [r7, #13]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	32ae      	adds	r2, #174	; 0xae
 800b586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	6839      	ldr	r1, [r7, #0]
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	4798      	blx	r3
 800b592:	4603      	mov	r3, r0
 800b594:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b596:	e004      	b.n	800b5a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fc03 	bl	800bda6 <USBD_CtlError>
              break;
 800b5a0:	e000      	b.n	800b5a4 <USBD_StdEPReq+0x1c8>
              break;
 800b5a2:	bf00      	nop
          }
          break;
 800b5a4:	e0ab      	b.n	800b6fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d002      	beq.n	800b5b8 <USBD_StdEPReq+0x1dc>
 800b5b2:	2b03      	cmp	r3, #3
 800b5b4:	d032      	beq.n	800b61c <USBD_StdEPReq+0x240>
 800b5b6:	e097      	b.n	800b6e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5b8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d007      	beq.n	800b5ce <USBD_StdEPReq+0x1f2>
 800b5be:	7bbb      	ldrb	r3, [r7, #14]
 800b5c0:	2b80      	cmp	r3, #128	; 0x80
 800b5c2:	d004      	beq.n	800b5ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fbed 	bl	800bda6 <USBD_CtlError>
                break;
 800b5cc:	e091      	b.n	800b6f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	da0b      	bge.n	800b5ee <USBD_StdEPReq+0x212>
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5dc:	4613      	mov	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	3310      	adds	r3, #16
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	3304      	adds	r3, #4
 800b5ec:	e00b      	b.n	800b606 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4413      	add	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	4413      	add	r3, r2
 800b604:	3304      	adds	r3, #4
 800b606:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	2200      	movs	r2, #0
 800b60c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	2202      	movs	r2, #2
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fc37 	bl	800be88 <USBD_CtlSendData>
              break;
 800b61a:	e06a      	b.n	800b6f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b61c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b620:	2b00      	cmp	r3, #0
 800b622:	da11      	bge.n	800b648 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b624:	7bbb      	ldrb	r3, [r7, #14]
 800b626:	f003 020f 	and.w	r2, r3, #15
 800b62a:	6879      	ldr	r1, [r7, #4]
 800b62c:	4613      	mov	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	440b      	add	r3, r1
 800b636:	3324      	adds	r3, #36	; 0x24
 800b638:	881b      	ldrh	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d117      	bne.n	800b66e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fbb0 	bl	800bda6 <USBD_CtlError>
                  break;
 800b646:	e054      	b.n	800b6f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b648:	7bbb      	ldrb	r3, [r7, #14]
 800b64a:	f003 020f 	and.w	r2, r3, #15
 800b64e:	6879      	ldr	r1, [r7, #4]
 800b650:	4613      	mov	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4413      	add	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	440b      	add	r3, r1
 800b65a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b65e:	881b      	ldrh	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d104      	bne.n	800b66e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b664:	6839      	ldr	r1, [r7, #0]
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 fb9d 	bl	800bda6 <USBD_CtlError>
                  break;
 800b66c:	e041      	b.n	800b6f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b66e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b672:	2b00      	cmp	r3, #0
 800b674:	da0b      	bge.n	800b68e <USBD_StdEPReq+0x2b2>
 800b676:	7bbb      	ldrb	r3, [r7, #14]
 800b678:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b67c:	4613      	mov	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	3310      	adds	r3, #16
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	4413      	add	r3, r2
 800b68a:	3304      	adds	r3, #4
 800b68c:	e00b      	b.n	800b6a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b68e:	7bbb      	ldrb	r3, [r7, #14]
 800b690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b694:	4613      	mov	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4413      	add	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b6a8:	7bbb      	ldrb	r3, [r7, #14]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d002      	beq.n	800b6b4 <USBD_StdEPReq+0x2d8>
 800b6ae:	7bbb      	ldrb	r3, [r7, #14]
 800b6b0:	2b80      	cmp	r3, #128	; 0x80
 800b6b2:	d103      	bne.n	800b6bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	601a      	str	r2, [r3, #0]
 800b6ba:	e00e      	b.n	800b6da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b6bc:	7bbb      	ldrb	r3, [r7, #14]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f001 f8a5 	bl	800c810 <USBD_LL_IsStallEP>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d003      	beq.n	800b6d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	601a      	str	r2, [r3, #0]
 800b6d2:	e002      	b.n	800b6da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2202      	movs	r2, #2
 800b6de:	4619      	mov	r1, r3
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 fbd1 	bl	800be88 <USBD_CtlSendData>
              break;
 800b6e6:	e004      	b.n	800b6f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b6e8:	6839      	ldr	r1, [r7, #0]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fb5b 	bl	800bda6 <USBD_CtlError>
              break;
 800b6f0:	bf00      	nop
          }
          break;
 800b6f2:	e004      	b.n	800b6fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fb55 	bl	800bda6 <USBD_CtlError>
          break;
 800b6fc:	bf00      	nop
      }
      break;
 800b6fe:	e005      	b.n	800b70c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b700:	6839      	ldr	r1, [r7, #0]
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fb4f 	bl	800bda6 <USBD_CtlError>
      break;
 800b708:	e000      	b.n	800b70c <USBD_StdEPReq+0x330>
      break;
 800b70a:	bf00      	nop
  }

  return ret;
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
	...

0800b718 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b722:	2300      	movs	r3, #0
 800b724:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b726:	2300      	movs	r3, #0
 800b728:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	885b      	ldrh	r3, [r3, #2]
 800b732:	0a1b      	lsrs	r3, r3, #8
 800b734:	b29b      	uxth	r3, r3
 800b736:	3b01      	subs	r3, #1
 800b738:	2b06      	cmp	r3, #6
 800b73a:	f200 8128 	bhi.w	800b98e <USBD_GetDescriptor+0x276>
 800b73e:	a201      	add	r2, pc, #4	; (adr r2, 800b744 <USBD_GetDescriptor+0x2c>)
 800b740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b744:	0800b761 	.word	0x0800b761
 800b748:	0800b779 	.word	0x0800b779
 800b74c:	0800b7b9 	.word	0x0800b7b9
 800b750:	0800b98f 	.word	0x0800b98f
 800b754:	0800b98f 	.word	0x0800b98f
 800b758:	0800b92f 	.word	0x0800b92f
 800b75c:	0800b95b 	.word	0x0800b95b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	7c12      	ldrb	r2, [r2, #16]
 800b76c:	f107 0108 	add.w	r1, r7, #8
 800b770:	4610      	mov	r0, r2
 800b772:	4798      	blx	r3
 800b774:	60f8      	str	r0, [r7, #12]
      break;
 800b776:	e112      	b.n	800b99e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	7c1b      	ldrb	r3, [r3, #16]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10d      	bne.n	800b79c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b788:	f107 0208 	add.w	r2, r7, #8
 800b78c:	4610      	mov	r0, r2
 800b78e:	4798      	blx	r3
 800b790:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	3301      	adds	r3, #1
 800b796:	2202      	movs	r2, #2
 800b798:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b79a:	e100      	b.n	800b99e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a4:	f107 0208 	add.w	r2, r7, #8
 800b7a8:	4610      	mov	r0, r2
 800b7aa:	4798      	blx	r3
 800b7ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	2202      	movs	r2, #2
 800b7b4:	701a      	strb	r2, [r3, #0]
      break;
 800b7b6:	e0f2      	b.n	800b99e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	885b      	ldrh	r3, [r3, #2]
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b05      	cmp	r3, #5
 800b7c0:	f200 80ac 	bhi.w	800b91c <USBD_GetDescriptor+0x204>
 800b7c4:	a201      	add	r2, pc, #4	; (adr r2, 800b7cc <USBD_GetDescriptor+0xb4>)
 800b7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ca:	bf00      	nop
 800b7cc:	0800b7e5 	.word	0x0800b7e5
 800b7d0:	0800b819 	.word	0x0800b819
 800b7d4:	0800b84d 	.word	0x0800b84d
 800b7d8:	0800b881 	.word	0x0800b881
 800b7dc:	0800b8b5 	.word	0x0800b8b5
 800b7e0:	0800b8e9 	.word	0x0800b8e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00b      	beq.n	800b808 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	7c12      	ldrb	r2, [r2, #16]
 800b7fc:	f107 0108 	add.w	r1, r7, #8
 800b800:	4610      	mov	r0, r2
 800b802:	4798      	blx	r3
 800b804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b806:	e091      	b.n	800b92c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 facb 	bl	800bda6 <USBD_CtlError>
            err++;
 800b810:	7afb      	ldrb	r3, [r7, #11]
 800b812:	3301      	adds	r3, #1
 800b814:	72fb      	strb	r3, [r7, #11]
          break;
 800b816:	e089      	b.n	800b92c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00b      	beq.n	800b83c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	7c12      	ldrb	r2, [r2, #16]
 800b830:	f107 0108 	add.w	r1, r7, #8
 800b834:	4610      	mov	r0, r2
 800b836:	4798      	blx	r3
 800b838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b83a:	e077      	b.n	800b92c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b83c:	6839      	ldr	r1, [r7, #0]
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fab1 	bl	800bda6 <USBD_CtlError>
            err++;
 800b844:	7afb      	ldrb	r3, [r7, #11]
 800b846:	3301      	adds	r3, #1
 800b848:	72fb      	strb	r3, [r7, #11]
          break;
 800b84a:	e06f      	b.n	800b92c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00b      	beq.n	800b870 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	7c12      	ldrb	r2, [r2, #16]
 800b864:	f107 0108 	add.w	r1, r7, #8
 800b868:	4610      	mov	r0, r2
 800b86a:	4798      	blx	r3
 800b86c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b86e:	e05d      	b.n	800b92c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fa97 	bl	800bda6 <USBD_CtlError>
            err++;
 800b878:	7afb      	ldrb	r3, [r7, #11]
 800b87a:	3301      	adds	r3, #1
 800b87c:	72fb      	strb	r3, [r7, #11]
          break;
 800b87e:	e055      	b.n	800b92c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00b      	beq.n	800b8a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b892:	691b      	ldr	r3, [r3, #16]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	7c12      	ldrb	r2, [r2, #16]
 800b898:	f107 0108 	add.w	r1, r7, #8
 800b89c:	4610      	mov	r0, r2
 800b89e:	4798      	blx	r3
 800b8a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8a2:	e043      	b.n	800b92c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8a4:	6839      	ldr	r1, [r7, #0]
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 fa7d 	bl	800bda6 <USBD_CtlError>
            err++;
 800b8ac:	7afb      	ldrb	r3, [r7, #11]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8b2:	e03b      	b.n	800b92c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ba:	695b      	ldr	r3, [r3, #20]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00b      	beq.n	800b8d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8c6:	695b      	ldr	r3, [r3, #20]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	7c12      	ldrb	r2, [r2, #16]
 800b8cc:	f107 0108 	add.w	r1, r7, #8
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	4798      	blx	r3
 800b8d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8d6:	e029      	b.n	800b92c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fa63 	bl	800bda6 <USBD_CtlError>
            err++;
 800b8e0:	7afb      	ldrb	r3, [r7, #11]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8e6:	e021      	b.n	800b92c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ee:	699b      	ldr	r3, [r3, #24]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00b      	beq.n	800b90c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8fa:	699b      	ldr	r3, [r3, #24]
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	7c12      	ldrb	r2, [r2, #16]
 800b900:	f107 0108 	add.w	r1, r7, #8
 800b904:	4610      	mov	r0, r2
 800b906:	4798      	blx	r3
 800b908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b90a:	e00f      	b.n	800b92c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fa49 	bl	800bda6 <USBD_CtlError>
            err++;
 800b914:	7afb      	ldrb	r3, [r7, #11]
 800b916:	3301      	adds	r3, #1
 800b918:	72fb      	strb	r3, [r7, #11]
          break;
 800b91a:	e007      	b.n	800b92c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fa41 	bl	800bda6 <USBD_CtlError>
          err++;
 800b924:	7afb      	ldrb	r3, [r7, #11]
 800b926:	3301      	adds	r3, #1
 800b928:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b92a:	bf00      	nop
      }
      break;
 800b92c:	e037      	b.n	800b99e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	7c1b      	ldrb	r3, [r3, #16]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d109      	bne.n	800b94a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b93e:	f107 0208 	add.w	r2, r7, #8
 800b942:	4610      	mov	r0, r2
 800b944:	4798      	blx	r3
 800b946:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b948:	e029      	b.n	800b99e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b94a:	6839      	ldr	r1, [r7, #0]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fa2a 	bl	800bda6 <USBD_CtlError>
        err++;
 800b952:	7afb      	ldrb	r3, [r7, #11]
 800b954:	3301      	adds	r3, #1
 800b956:	72fb      	strb	r3, [r7, #11]
      break;
 800b958:	e021      	b.n	800b99e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	7c1b      	ldrb	r3, [r3, #16]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10d      	bne.n	800b97e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b96a:	f107 0208 	add.w	r2, r7, #8
 800b96e:	4610      	mov	r0, r2
 800b970:	4798      	blx	r3
 800b972:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	3301      	adds	r3, #1
 800b978:	2207      	movs	r2, #7
 800b97a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b97c:	e00f      	b.n	800b99e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fa10 	bl	800bda6 <USBD_CtlError>
        err++;
 800b986:	7afb      	ldrb	r3, [r7, #11]
 800b988:	3301      	adds	r3, #1
 800b98a:	72fb      	strb	r3, [r7, #11]
      break;
 800b98c:	e007      	b.n	800b99e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b98e:	6839      	ldr	r1, [r7, #0]
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 fa08 	bl	800bda6 <USBD_CtlError>
      err++;
 800b996:	7afb      	ldrb	r3, [r7, #11]
 800b998:	3301      	adds	r3, #1
 800b99a:	72fb      	strb	r3, [r7, #11]
      break;
 800b99c:	bf00      	nop
  }

  if (err != 0U)
 800b99e:	7afb      	ldrb	r3, [r7, #11]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d11e      	bne.n	800b9e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	88db      	ldrh	r3, [r3, #6]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d016      	beq.n	800b9da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b9ac:	893b      	ldrh	r3, [r7, #8]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00e      	beq.n	800b9d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	88da      	ldrh	r2, [r3, #6]
 800b9b6:	893b      	ldrh	r3, [r7, #8]
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	bf28      	it	cs
 800b9bc:	4613      	movcs	r3, r2
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b9c2:	893b      	ldrh	r3, [r7, #8]
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	68f9      	ldr	r1, [r7, #12]
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fa5d 	bl	800be88 <USBD_CtlSendData>
 800b9ce:	e009      	b.n	800b9e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b9d0:	6839      	ldr	r1, [r7, #0]
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f9e7 	bl	800bda6 <USBD_CtlError>
 800b9d8:	e004      	b.n	800b9e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 faae 	bl	800bf3c <USBD_CtlSendStatus>
 800b9e0:	e000      	b.n	800b9e4 <USBD_GetDescriptor+0x2cc>
    return;
 800b9e2:	bf00      	nop
  }
}
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop

0800b9ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	889b      	ldrh	r3, [r3, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d131      	bne.n	800ba62 <USBD_SetAddress+0x76>
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	88db      	ldrh	r3, [r3, #6]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d12d      	bne.n	800ba62 <USBD_SetAddress+0x76>
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	885b      	ldrh	r3, [r3, #2]
 800ba0a:	2b7f      	cmp	r3, #127	; 0x7f
 800ba0c:	d829      	bhi.n	800ba62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	885b      	ldrh	r3, [r3, #2]
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	2b03      	cmp	r3, #3
 800ba24:	d104      	bne.n	800ba30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 f9bc 	bl	800bda6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba2e:	e01d      	b.n	800ba6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	7bfa      	ldrb	r2, [r7, #15]
 800ba34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ba38:	7bfb      	ldrb	r3, [r7, #15]
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 ff13 	bl	800c868 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fa7a 	bl	800bf3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba48:	7bfb      	ldrb	r3, [r7, #15]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d004      	beq.n	800ba58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2202      	movs	r2, #2
 800ba52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba56:	e009      	b.n	800ba6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba60:	e004      	b.n	800ba6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba62:	6839      	ldr	r1, [r7, #0]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f99e 	bl	800bda6 <USBD_CtlError>
  }
}
 800ba6a:	bf00      	nop
 800ba6c:	bf00      	nop
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	885b      	ldrh	r3, [r3, #2]
 800ba86:	b2da      	uxtb	r2, r3
 800ba88:	4b4e      	ldr	r3, [pc, #312]	; (800bbc4 <USBD_SetConfig+0x150>)
 800ba8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba8c:	4b4d      	ldr	r3, [pc, #308]	; (800bbc4 <USBD_SetConfig+0x150>)
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d905      	bls.n	800baa0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba94:	6839      	ldr	r1, [r7, #0]
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f985 	bl	800bda6 <USBD_CtlError>
    return USBD_FAIL;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e08c      	b.n	800bbba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d002      	beq.n	800bab2 <USBD_SetConfig+0x3e>
 800baac:	2b03      	cmp	r3, #3
 800baae:	d029      	beq.n	800bb04 <USBD_SetConfig+0x90>
 800bab0:	e075      	b.n	800bb9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bab2:	4b44      	ldr	r3, [pc, #272]	; (800bbc4 <USBD_SetConfig+0x150>)
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d020      	beq.n	800bafc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800baba:	4b42      	ldr	r3, [pc, #264]	; (800bbc4 <USBD_SetConfig+0x150>)
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	461a      	mov	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bac4:	4b3f      	ldr	r3, [pc, #252]	; (800bbc4 <USBD_SetConfig+0x150>)
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7fe ffe7 	bl	800aa9e <USBD_SetClassConfig>
 800bad0:	4603      	mov	r3, r0
 800bad2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bad4:	7bfb      	ldrb	r3, [r7, #15]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d008      	beq.n	800baec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 f962 	bl	800bda6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2202      	movs	r2, #2
 800bae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800baea:	e065      	b.n	800bbb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fa25 	bl	800bf3c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2203      	movs	r2, #3
 800baf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bafa:	e05d      	b.n	800bbb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fa1d 	bl	800bf3c <USBD_CtlSendStatus>
      break;
 800bb02:	e059      	b.n	800bbb8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bb04:	4b2f      	ldr	r3, [pc, #188]	; (800bbc4 <USBD_SetConfig+0x150>)
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d112      	bne.n	800bb32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2202      	movs	r2, #2
 800bb10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bb14:	4b2b      	ldr	r3, [pc, #172]	; (800bbc4 <USBD_SetConfig+0x150>)
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb1e:	4b29      	ldr	r3, [pc, #164]	; (800bbc4 <USBD_SetConfig+0x150>)
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	4619      	mov	r1, r3
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7fe ffd6 	bl	800aad6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fa06 	bl	800bf3c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb30:	e042      	b.n	800bbb8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bb32:	4b24      	ldr	r3, [pc, #144]	; (800bbc4 <USBD_SetConfig+0x150>)
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	461a      	mov	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d02a      	beq.n	800bb96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	4619      	mov	r1, r3
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7fe ffc4 	bl	800aad6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb4e:	4b1d      	ldr	r3, [pc, #116]	; (800bbc4 <USBD_SetConfig+0x150>)
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	461a      	mov	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb58:	4b1a      	ldr	r3, [pc, #104]	; (800bbc4 <USBD_SetConfig+0x150>)
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7fe ff9d 	bl	800aa9e <USBD_SetClassConfig>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00f      	beq.n	800bb8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f918 	bl	800bda6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7fe ffa9 	bl	800aad6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2202      	movs	r2, #2
 800bb88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb8c:	e014      	b.n	800bbb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f9d4 	bl	800bf3c <USBD_CtlSendStatus>
      break;
 800bb94:	e010      	b.n	800bbb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f9d0 	bl	800bf3c <USBD_CtlSendStatus>
      break;
 800bb9c:	e00c      	b.n	800bbb8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f900 	bl	800bda6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bba6:	4b07      	ldr	r3, [pc, #28]	; (800bbc4 <USBD_SetConfig+0x150>)
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f7fe ff92 	bl	800aad6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bbb2:	2303      	movs	r3, #3
 800bbb4:	73fb      	strb	r3, [r7, #15]
      break;
 800bbb6:	bf00      	nop
  }

  return ret;
 800bbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	2000067c 	.word	0x2000067c

0800bbc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	88db      	ldrh	r3, [r3, #6]
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d004      	beq.n	800bbe4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bbda:	6839      	ldr	r1, [r7, #0]
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 f8e2 	bl	800bda6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bbe2:	e023      	b.n	800bc2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	dc02      	bgt.n	800bbf6 <USBD_GetConfig+0x2e>
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dc03      	bgt.n	800bbfc <USBD_GetConfig+0x34>
 800bbf4:	e015      	b.n	800bc22 <USBD_GetConfig+0x5a>
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	d00b      	beq.n	800bc12 <USBD_GetConfig+0x4a>
 800bbfa:	e012      	b.n	800bc22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	3308      	adds	r3, #8
 800bc06:	2201      	movs	r2, #1
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 f93c 	bl	800be88 <USBD_CtlSendData>
        break;
 800bc10:	e00c      	b.n	800bc2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	3304      	adds	r3, #4
 800bc16:	2201      	movs	r2, #1
 800bc18:	4619      	mov	r1, r3
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f934 	bl	800be88 <USBD_CtlSendData>
        break;
 800bc20:	e004      	b.n	800bc2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f8be 	bl	800bda6 <USBD_CtlError>
        break;
 800bc2a:	bf00      	nop
}
 800bc2c:	bf00      	nop
 800bc2e:	3708      	adds	r7, #8
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	3b01      	subs	r3, #1
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d81e      	bhi.n	800bc8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	88db      	ldrh	r3, [r3, #6]
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d004      	beq.n	800bc5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f8a5 	bl	800bda6 <USBD_CtlError>
        break;
 800bc5c:	e01a      	b.n	800bc94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d005      	beq.n	800bc7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	68db      	ldr	r3, [r3, #12]
 800bc72:	f043 0202 	orr.w	r2, r3, #2
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	330c      	adds	r3, #12
 800bc7e:	2202      	movs	r2, #2
 800bc80:	4619      	mov	r1, r3
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 f900 	bl	800be88 <USBD_CtlSendData>
      break;
 800bc88:	e004      	b.n	800bc94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc8a:	6839      	ldr	r1, [r7, #0]
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 f88a 	bl	800bda6 <USBD_CtlError>
      break;
 800bc92:	bf00      	nop
  }
}
 800bc94:	bf00      	nop
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	885b      	ldrh	r3, [r3, #2]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d107      	bne.n	800bcbe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 f940 	bl	800bf3c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bcbc:	e013      	b.n	800bce6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	885b      	ldrh	r3, [r3, #2]
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d10b      	bne.n	800bcde <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	889b      	ldrh	r3, [r3, #4]
 800bcca:	0a1b      	lsrs	r3, r3, #8
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	b2da      	uxtb	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f930 	bl	800bf3c <USBD_CtlSendStatus>
}
 800bcdc:	e003      	b.n	800bce6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 f860 	bl	800bda6 <USBD_CtlError>
}
 800bce6:	bf00      	nop
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b082      	sub	sp, #8
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	3b01      	subs	r3, #1
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d80b      	bhi.n	800bd1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	885b      	ldrh	r3, [r3, #2]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d10c      	bne.n	800bd28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 f910 	bl	800bf3c <USBD_CtlSendStatus>
      }
      break;
 800bd1c:	e004      	b.n	800bd28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 f840 	bl	800bda6 <USBD_CtlError>
      break;
 800bd26:	e000      	b.n	800bd2a <USBD_ClrFeature+0x3c>
      break;
 800bd28:	bf00      	nop
  }
}
 800bd2a:	bf00      	nop
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b084      	sub	sp, #16
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	781a      	ldrb	r2, [r3, #0]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	781a      	ldrb	r2, [r3, #0]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f7ff fa41 	bl	800b1e4 <SWAPBYTE>
 800bd62:	4603      	mov	r3, r0
 800bd64:	461a      	mov	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	3301      	adds	r3, #1
 800bd74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f7ff fa34 	bl	800b1e4 <SWAPBYTE>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	461a      	mov	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	3301      	adds	r3, #1
 800bd88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f7ff fa27 	bl	800b1e4 <SWAPBYTE>
 800bd96:	4603      	mov	r3, r0
 800bd98:	461a      	mov	r2, r3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	80da      	strh	r2, [r3, #6]
}
 800bd9e:	bf00      	nop
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b082      	sub	sp, #8
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
 800bdae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdb0:	2180      	movs	r1, #128	; 0x80
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 fcee 	bl	800c794 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bdb8:	2100      	movs	r1, #0
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fcea 	bl	800c794 <USBD_LL_StallEP>
}
 800bdc0:	bf00      	nop
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d036      	beq.n	800be4c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bde2:	6938      	ldr	r0, [r7, #16]
 800bde4:	f000 f836 	bl	800be54 <USBD_GetLen>
 800bde8:	4603      	mov	r3, r0
 800bdea:	3301      	adds	r3, #1
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	005b      	lsls	r3, r3, #1
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bdf6:	7dfb      	ldrb	r3, [r7, #23]
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	7812      	ldrb	r2, [r2, #0]
 800be00:	701a      	strb	r2, [r3, #0]
  idx++;
 800be02:	7dfb      	ldrb	r3, [r7, #23]
 800be04:	3301      	adds	r3, #1
 800be06:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800be08:	7dfb      	ldrb	r3, [r7, #23]
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	4413      	add	r3, r2
 800be0e:	2203      	movs	r2, #3
 800be10:	701a      	strb	r2, [r3, #0]
  idx++;
 800be12:	7dfb      	ldrb	r3, [r7, #23]
 800be14:	3301      	adds	r3, #1
 800be16:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800be18:	e013      	b.n	800be42 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
 800be1c:	68ba      	ldr	r2, [r7, #8]
 800be1e:	4413      	add	r3, r2
 800be20:	693a      	ldr	r2, [r7, #16]
 800be22:	7812      	ldrb	r2, [r2, #0]
 800be24:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	3301      	adds	r3, #1
 800be2a:	613b      	str	r3, [r7, #16]
    idx++;
 800be2c:	7dfb      	ldrb	r3, [r7, #23]
 800be2e:	3301      	adds	r3, #1
 800be30:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	68ba      	ldr	r2, [r7, #8]
 800be36:	4413      	add	r3, r2
 800be38:	2200      	movs	r2, #0
 800be3a:	701a      	strb	r2, [r3, #0]
    idx++;
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
 800be3e:	3301      	adds	r3, #1
 800be40:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1e7      	bne.n	800be1a <USBD_GetString+0x52>
 800be4a:	e000      	b.n	800be4e <USBD_GetString+0x86>
    return;
 800be4c:	bf00      	nop
  }
}
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be5c:	2300      	movs	r3, #0
 800be5e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800be64:	e005      	b.n	800be72 <USBD_GetLen+0x1e>
  {
    len++;
 800be66:	7bfb      	ldrb	r3, [r7, #15]
 800be68:	3301      	adds	r3, #1
 800be6a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	3301      	adds	r3, #1
 800be70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1f5      	bne.n	800be66 <USBD_GetLen+0x12>
  }

  return len;
 800be7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3714      	adds	r7, #20
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2202      	movs	r2, #2
 800be98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	2100      	movs	r1, #0
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f000 fcf9 	bl	800c8a6 <USBD_LL_Transmit>

  return USBD_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b084      	sub	sp, #16
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	60f8      	str	r0, [r7, #12]
 800bec6:	60b9      	str	r1, [r7, #8]
 800bec8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68ba      	ldr	r2, [r7, #8]
 800bece:	2100      	movs	r1, #0
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f000 fce8 	bl	800c8a6 <USBD_LL_Transmit>

  return USBD_OK;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3710      	adds	r7, #16
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2203      	movs	r2, #3
 800bef0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	68ba      	ldr	r2, [r7, #8]
 800bf08:	2100      	movs	r1, #0
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f000 fcec 	bl	800c8e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b084      	sub	sp, #16
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	60b9      	str	r1, [r7, #8]
 800bf24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	f000 fcdb 	bl	800c8e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2204      	movs	r2, #4
 800bf48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2100      	movs	r1, #0
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fca7 	bl	800c8a6 <USBD_LL_Transmit>

  return USBD_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b082      	sub	sp, #8
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2205      	movs	r2, #5
 800bf6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf72:	2300      	movs	r3, #0
 800bf74:	2200      	movs	r2, #0
 800bf76:	2100      	movs	r1, #0
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fcb5 	bl	800c8e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	4912      	ldr	r1, [pc, #72]	; (800bfd8 <MX_USB_DEVICE_Init+0x50>)
 800bf90:	4812      	ldr	r0, [pc, #72]	; (800bfdc <MX_USB_DEVICE_Init+0x54>)
 800bf92:	f7fe fd07 	bl	800a9a4 <USBD_Init>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d001      	beq.n	800bfa0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bf9c:	f7f6 fea6 	bl	8002cec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bfa0:	490f      	ldr	r1, [pc, #60]	; (800bfe0 <MX_USB_DEVICE_Init+0x58>)
 800bfa2:	480e      	ldr	r0, [pc, #56]	; (800bfdc <MX_USB_DEVICE_Init+0x54>)
 800bfa4:	f7fe fd2e 	bl	800aa04 <USBD_RegisterClass>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bfae:	f7f6 fe9d 	bl	8002cec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bfb2:	490c      	ldr	r1, [pc, #48]	; (800bfe4 <MX_USB_DEVICE_Init+0x5c>)
 800bfb4:	4809      	ldr	r0, [pc, #36]	; (800bfdc <MX_USB_DEVICE_Init+0x54>)
 800bfb6:	f7fe fc1f 	bl	800a7f8 <USBD_CDC_RegisterInterface>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d001      	beq.n	800bfc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bfc0:	f7f6 fe94 	bl	8002cec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bfc4:	4805      	ldr	r0, [pc, #20]	; (800bfdc <MX_USB_DEVICE_Init+0x54>)
 800bfc6:	f7fe fd53 	bl	800aa70 <USBD_Start>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d001      	beq.n	800bfd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bfd0:	f7f6 fe8c 	bl	8002cec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bfd4:	bf00      	nop
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	200000d0 	.word	0x200000d0
 800bfdc:	20000680 	.word	0x20000680
 800bfe0:	2000003c 	.word	0x2000003c
 800bfe4:	200000bc 	.word	0x200000bc

0800bfe8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bfec:	2200      	movs	r2, #0
 800bfee:	4905      	ldr	r1, [pc, #20]	; (800c004 <CDC_Init_FS+0x1c>)
 800bff0:	4805      	ldr	r0, [pc, #20]	; (800c008 <CDC_Init_FS+0x20>)
 800bff2:	f7fe fc1b 	bl	800a82c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bff6:	4905      	ldr	r1, [pc, #20]	; (800c00c <CDC_Init_FS+0x24>)
 800bff8:	4803      	ldr	r0, [pc, #12]	; (800c008 <CDC_Init_FS+0x20>)
 800bffa:	f7fe fc39 	bl	800a870 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bffe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c000:	4618      	mov	r0, r3
 800c002:	bd80      	pop	{r7, pc}
 800c004:	2000115c 	.word	0x2000115c
 800c008:	20000680 	.word	0x20000680
 800c00c:	2000095c 	.word	0x2000095c

0800c010 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c010:	b480      	push	{r7}
 800c012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c014:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c016:	4618      	mov	r0, r3
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	4603      	mov	r3, r0
 800c028:	6039      	str	r1, [r7, #0]
 800c02a:	71fb      	strb	r3, [r7, #7]
 800c02c:	4613      	mov	r3, r2
 800c02e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c030:	79fb      	ldrb	r3, [r7, #7]
 800c032:	2b23      	cmp	r3, #35	; 0x23
 800c034:	d84a      	bhi.n	800c0cc <CDC_Control_FS+0xac>
 800c036:	a201      	add	r2, pc, #4	; (adr r2, 800c03c <CDC_Control_FS+0x1c>)
 800c038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03c:	0800c0cd 	.word	0x0800c0cd
 800c040:	0800c0cd 	.word	0x0800c0cd
 800c044:	0800c0cd 	.word	0x0800c0cd
 800c048:	0800c0cd 	.word	0x0800c0cd
 800c04c:	0800c0cd 	.word	0x0800c0cd
 800c050:	0800c0cd 	.word	0x0800c0cd
 800c054:	0800c0cd 	.word	0x0800c0cd
 800c058:	0800c0cd 	.word	0x0800c0cd
 800c05c:	0800c0cd 	.word	0x0800c0cd
 800c060:	0800c0cd 	.word	0x0800c0cd
 800c064:	0800c0cd 	.word	0x0800c0cd
 800c068:	0800c0cd 	.word	0x0800c0cd
 800c06c:	0800c0cd 	.word	0x0800c0cd
 800c070:	0800c0cd 	.word	0x0800c0cd
 800c074:	0800c0cd 	.word	0x0800c0cd
 800c078:	0800c0cd 	.word	0x0800c0cd
 800c07c:	0800c0cd 	.word	0x0800c0cd
 800c080:	0800c0cd 	.word	0x0800c0cd
 800c084:	0800c0cd 	.word	0x0800c0cd
 800c088:	0800c0cd 	.word	0x0800c0cd
 800c08c:	0800c0cd 	.word	0x0800c0cd
 800c090:	0800c0cd 	.word	0x0800c0cd
 800c094:	0800c0cd 	.word	0x0800c0cd
 800c098:	0800c0cd 	.word	0x0800c0cd
 800c09c:	0800c0cd 	.word	0x0800c0cd
 800c0a0:	0800c0cd 	.word	0x0800c0cd
 800c0a4:	0800c0cd 	.word	0x0800c0cd
 800c0a8:	0800c0cd 	.word	0x0800c0cd
 800c0ac:	0800c0cd 	.word	0x0800c0cd
 800c0b0:	0800c0cd 	.word	0x0800c0cd
 800c0b4:	0800c0cd 	.word	0x0800c0cd
 800c0b8:	0800c0cd 	.word	0x0800c0cd
 800c0bc:	0800c0cd 	.word	0x0800c0cd
 800c0c0:	0800c0cd 	.word	0x0800c0cd
 800c0c4:	0800c0cd 	.word	0x0800c0cd
 800c0c8:	0800c0cd 	.word	0x0800c0cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c0cc:	bf00      	nop
  }

  return (USBD_OK);
 800c0ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c0e6:	6879      	ldr	r1, [r7, #4]
 800c0e8:	4805      	ldr	r0, [pc, #20]	; (800c100 <CDC_Receive_FS+0x24>)
 800c0ea:	f7fe fbc1 	bl	800a870 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c0ee:	4804      	ldr	r0, [pc, #16]	; (800c100 <CDC_Receive_FS+0x24>)
 800c0f0:	f7fe fc22 	bl	800a938 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c0f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	20000680 	.word	0x20000680

0800c104 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	460b      	mov	r3, r1
 800c10e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c110:	2300      	movs	r3, #0
 800c112:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c114:	4b0d      	ldr	r3, [pc, #52]	; (800c14c <CDC_Transmit_FS+0x48>)
 800c116:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c11a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c126:	2301      	movs	r3, #1
 800c128:	e00b      	b.n	800c142 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c12a:	887b      	ldrh	r3, [r7, #2]
 800c12c:	461a      	mov	r2, r3
 800c12e:	6879      	ldr	r1, [r7, #4]
 800c130:	4806      	ldr	r0, [pc, #24]	; (800c14c <CDC_Transmit_FS+0x48>)
 800c132:	f7fe fb7b 	bl	800a82c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c136:	4805      	ldr	r0, [pc, #20]	; (800c14c <CDC_Transmit_FS+0x48>)
 800c138:	f7fe fbb8 	bl	800a8ac <USBD_CDC_TransmitPacket>
 800c13c:	4603      	mov	r3, r0
 800c13e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c140:	7bfb      	ldrb	r3, [r7, #15]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	20000680 	.word	0x20000680

0800c150 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	4613      	mov	r3, r2
 800c15c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c15e:	2300      	movs	r3, #0
 800c160:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c162:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c166:	4618      	mov	r0, r3
 800c168:	371c      	adds	r7, #28
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
	...

0800c174 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	4603      	mov	r3, r0
 800c17c:	6039      	str	r1, [r7, #0]
 800c17e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	2212      	movs	r2, #18
 800c184:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c186:	4b03      	ldr	r3, [pc, #12]	; (800c194 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c188:	4618      	mov	r0, r3
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr
 800c194:	200000ec 	.word	0x200000ec

0800c198 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	4603      	mov	r3, r0
 800c1a0:	6039      	str	r1, [r7, #0]
 800c1a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	2204      	movs	r2, #4
 800c1a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c1aa:	4b03      	ldr	r3, [pc, #12]	; (800c1b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr
 800c1b8:	20000100 	.word	0x20000100

0800c1bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	6039      	str	r1, [r7, #0]
 800c1c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1c8:	79fb      	ldrb	r3, [r7, #7]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d105      	bne.n	800c1da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	4907      	ldr	r1, [pc, #28]	; (800c1f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1d2:	4808      	ldr	r0, [pc, #32]	; (800c1f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c1d4:	f7ff fdf8 	bl	800bdc8 <USBD_GetString>
 800c1d8:	e004      	b.n	800c1e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1da:	683a      	ldr	r2, [r7, #0]
 800c1dc:	4904      	ldr	r1, [pc, #16]	; (800c1f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1de:	4805      	ldr	r0, [pc, #20]	; (800c1f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c1e0:	f7ff fdf2 	bl	800bdc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1e4:	4b02      	ldr	r3, [pc, #8]	; (800c1f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	2000195c 	.word	0x2000195c
 800c1f4:	0800cc00 	.word	0x0800cc00

0800c1f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	4603      	mov	r3, r0
 800c200:	6039      	str	r1, [r7, #0]
 800c202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	4904      	ldr	r1, [pc, #16]	; (800c218 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c208:	4804      	ldr	r0, [pc, #16]	; (800c21c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c20a:	f7ff fddd 	bl	800bdc8 <USBD_GetString>
  return USBD_StrDesc;
 800c20e:	4b02      	ldr	r3, [pc, #8]	; (800c218 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c210:	4618      	mov	r0, r3
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	2000195c 	.word	0x2000195c
 800c21c:	0800cc18 	.word	0x0800cc18

0800c220 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	4603      	mov	r3, r0
 800c228:	6039      	str	r1, [r7, #0]
 800c22a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	221a      	movs	r2, #26
 800c230:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c232:	f000 f843 	bl	800c2bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c236:	4b02      	ldr	r3, [pc, #8]	; (800c240 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3708      	adds	r7, #8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	20000104 	.word	0x20000104

0800c244 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	4603      	mov	r3, r0
 800c24c:	6039      	str	r1, [r7, #0]
 800c24e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c250:	79fb      	ldrb	r3, [r7, #7]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d105      	bne.n	800c262 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	4907      	ldr	r1, [pc, #28]	; (800c278 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c25a:	4808      	ldr	r0, [pc, #32]	; (800c27c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c25c:	f7ff fdb4 	bl	800bdc8 <USBD_GetString>
 800c260:	e004      	b.n	800c26c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	4904      	ldr	r1, [pc, #16]	; (800c278 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c266:	4805      	ldr	r0, [pc, #20]	; (800c27c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c268:	f7ff fdae 	bl	800bdc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c26c:	4b02      	ldr	r3, [pc, #8]	; (800c278 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	2000195c 	.word	0x2000195c
 800c27c:	0800cc2c 	.word	0x0800cc2c

0800c280 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	6039      	str	r1, [r7, #0]
 800c28a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c28c:	79fb      	ldrb	r3, [r7, #7]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d105      	bne.n	800c29e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	4907      	ldr	r1, [pc, #28]	; (800c2b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c296:	4808      	ldr	r0, [pc, #32]	; (800c2b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c298:	f7ff fd96 	bl	800bdc8 <USBD_GetString>
 800c29c:	e004      	b.n	800c2a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c29e:	683a      	ldr	r2, [r7, #0]
 800c2a0:	4904      	ldr	r1, [pc, #16]	; (800c2b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2a2:	4805      	ldr	r0, [pc, #20]	; (800c2b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2a4:	f7ff fd90 	bl	800bdc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2a8:	4b02      	ldr	r3, [pc, #8]	; (800c2b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	2000195c 	.word	0x2000195c
 800c2b8:	0800cc38 	.word	0x0800cc38

0800c2bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c2c2:	4b0f      	ldr	r3, [pc, #60]	; (800c300 <Get_SerialNum+0x44>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c2c8:	4b0e      	ldr	r3, [pc, #56]	; (800c304 <Get_SerialNum+0x48>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c2ce:	4b0e      	ldr	r3, [pc, #56]	; (800c308 <Get_SerialNum+0x4c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4413      	add	r3, r2
 800c2da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d009      	beq.n	800c2f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c2e2:	2208      	movs	r2, #8
 800c2e4:	4909      	ldr	r1, [pc, #36]	; (800c30c <Get_SerialNum+0x50>)
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f000 f814 	bl	800c314 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c2ec:	2204      	movs	r2, #4
 800c2ee:	4908      	ldr	r1, [pc, #32]	; (800c310 <Get_SerialNum+0x54>)
 800c2f0:	68b8      	ldr	r0, [r7, #8]
 800c2f2:	f000 f80f 	bl	800c314 <IntToUnicode>
  }
}
 800c2f6:	bf00      	nop
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	1fff7a10 	.word	0x1fff7a10
 800c304:	1fff7a14 	.word	0x1fff7a14
 800c308:	1fff7a18 	.word	0x1fff7a18
 800c30c:	20000106 	.word	0x20000106
 800c310:	20000116 	.word	0x20000116

0800c314 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c314:	b480      	push	{r7}
 800c316:	b087      	sub	sp, #28
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	4613      	mov	r3, r2
 800c320:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c322:	2300      	movs	r3, #0
 800c324:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c326:	2300      	movs	r3, #0
 800c328:	75fb      	strb	r3, [r7, #23]
 800c32a:	e027      	b.n	800c37c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	0f1b      	lsrs	r3, r3, #28
 800c330:	2b09      	cmp	r3, #9
 800c332:	d80b      	bhi.n	800c34c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	0f1b      	lsrs	r3, r3, #28
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	7dfb      	ldrb	r3, [r7, #23]
 800c33c:	005b      	lsls	r3, r3, #1
 800c33e:	4619      	mov	r1, r3
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	440b      	add	r3, r1
 800c344:	3230      	adds	r2, #48	; 0x30
 800c346:	b2d2      	uxtb	r2, r2
 800c348:	701a      	strb	r2, [r3, #0]
 800c34a:	e00a      	b.n	800c362 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	0f1b      	lsrs	r3, r3, #28
 800c350:	b2da      	uxtb	r2, r3
 800c352:	7dfb      	ldrb	r3, [r7, #23]
 800c354:	005b      	lsls	r3, r3, #1
 800c356:	4619      	mov	r1, r3
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	440b      	add	r3, r1
 800c35c:	3237      	adds	r2, #55	; 0x37
 800c35e:	b2d2      	uxtb	r2, r2
 800c360:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	011b      	lsls	r3, r3, #4
 800c366:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c368:	7dfb      	ldrb	r3, [r7, #23]
 800c36a:	005b      	lsls	r3, r3, #1
 800c36c:	3301      	adds	r3, #1
 800c36e:	68ba      	ldr	r2, [r7, #8]
 800c370:	4413      	add	r3, r2
 800c372:	2200      	movs	r2, #0
 800c374:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c376:	7dfb      	ldrb	r3, [r7, #23]
 800c378:	3301      	adds	r3, #1
 800c37a:	75fb      	strb	r3, [r7, #23]
 800c37c:	7dfa      	ldrb	r2, [r7, #23]
 800c37e:	79fb      	ldrb	r3, [r7, #7]
 800c380:	429a      	cmp	r2, r3
 800c382:	d3d3      	bcc.n	800c32c <IntToUnicode+0x18>
  }
}
 800c384:	bf00      	nop
 800c386:	bf00      	nop
 800c388:	371c      	adds	r7, #28
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
	...

0800c394 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b08a      	sub	sp, #40	; 0x28
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c39c:	f107 0314 	add.w	r3, r7, #20
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	605a      	str	r2, [r3, #4]
 800c3a6:	609a      	str	r2, [r3, #8]
 800c3a8:	60da      	str	r2, [r3, #12]
 800c3aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3b4:	d147      	bne.n	800c446 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	613b      	str	r3, [r7, #16]
 800c3ba:	4b25      	ldr	r3, [pc, #148]	; (800c450 <HAL_PCD_MspInit+0xbc>)
 800c3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3be:	4a24      	ldr	r2, [pc, #144]	; (800c450 <HAL_PCD_MspInit+0xbc>)
 800c3c0:	f043 0301 	orr.w	r3, r3, #1
 800c3c4:	6313      	str	r3, [r2, #48]	; 0x30
 800c3c6:	4b22      	ldr	r3, [pc, #136]	; (800c450 <HAL_PCD_MspInit+0xbc>)
 800c3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ca:	f003 0301 	and.w	r3, r3, #1
 800c3ce:	613b      	str	r3, [r7, #16]
 800c3d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c3d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c3e0:	f107 0314 	add.w	r3, r7, #20
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	481b      	ldr	r0, [pc, #108]	; (800c454 <HAL_PCD_MspInit+0xc0>)
 800c3e8:	f7f7 fcf4 	bl	8003dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c3ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c3f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3f2:	2302      	movs	r3, #2
 800c3f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c3fe:	230a      	movs	r3, #10
 800c400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c402:	f107 0314 	add.w	r3, r7, #20
 800c406:	4619      	mov	r1, r3
 800c408:	4812      	ldr	r0, [pc, #72]	; (800c454 <HAL_PCD_MspInit+0xc0>)
 800c40a:	f7f7 fce3 	bl	8003dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c40e:	4b10      	ldr	r3, [pc, #64]	; (800c450 <HAL_PCD_MspInit+0xbc>)
 800c410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c412:	4a0f      	ldr	r2, [pc, #60]	; (800c450 <HAL_PCD_MspInit+0xbc>)
 800c414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c418:	6353      	str	r3, [r2, #52]	; 0x34
 800c41a:	2300      	movs	r3, #0
 800c41c:	60fb      	str	r3, [r7, #12]
 800c41e:	4b0c      	ldr	r3, [pc, #48]	; (800c450 <HAL_PCD_MspInit+0xbc>)
 800c420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c422:	4a0b      	ldr	r2, [pc, #44]	; (800c450 <HAL_PCD_MspInit+0xbc>)
 800c424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c428:	6453      	str	r3, [r2, #68]	; 0x44
 800c42a:	4b09      	ldr	r3, [pc, #36]	; (800c450 <HAL_PCD_MspInit+0xbc>)
 800c42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c42e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c436:	2200      	movs	r2, #0
 800c438:	2100      	movs	r1, #0
 800c43a:	2043      	movs	r0, #67	; 0x43
 800c43c:	f7f7 f917 	bl	800366e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c440:	2043      	movs	r0, #67	; 0x43
 800c442:	f7f7 f930 	bl	80036a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c446:	bf00      	nop
 800c448:	3728      	adds	r7, #40	; 0x28
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	40023800 	.word	0x40023800
 800c454:	40020000 	.word	0x40020000

0800c458 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c46c:	4619      	mov	r1, r3
 800c46e:	4610      	mov	r0, r2
 800c470:	f7fe fb4b 	bl	800ab0a <USBD_LL_SetupStage>
}
 800c474:	bf00      	nop
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	460b      	mov	r3, r1
 800c486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c48e:	78fa      	ldrb	r2, [r7, #3]
 800c490:	6879      	ldr	r1, [r7, #4]
 800c492:	4613      	mov	r3, r2
 800c494:	00db      	lsls	r3, r3, #3
 800c496:	4413      	add	r3, r2
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	440b      	add	r3, r1
 800c49c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	78fb      	ldrb	r3, [r7, #3]
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	f7fe fb85 	bl	800abb4 <USBD_LL_DataOutStage>
}
 800c4aa:	bf00      	nop
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b082      	sub	sp, #8
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c4c4:	78fa      	ldrb	r2, [r7, #3]
 800c4c6:	6879      	ldr	r1, [r7, #4]
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	00db      	lsls	r3, r3, #3
 800c4cc:	4413      	add	r3, r2
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	440b      	add	r3, r1
 800c4d2:	334c      	adds	r3, #76	; 0x4c
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	78fb      	ldrb	r3, [r7, #3]
 800c4d8:	4619      	mov	r1, r3
 800c4da:	f7fe fc1e 	bl	800ad1a <USBD_LL_DataInStage>
}
 800c4de:	bf00      	nop
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fe fd52 	bl	800af9e <USBD_LL_SOF>
}
 800c4fa:	bf00      	nop
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b084      	sub	sp, #16
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c50a:	2301      	movs	r3, #1
 800c50c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d102      	bne.n	800c51c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c516:	2300      	movs	r3, #0
 800c518:	73fb      	strb	r3, [r7, #15]
 800c51a:	e008      	b.n	800c52e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	2b02      	cmp	r3, #2
 800c522:	d102      	bne.n	800c52a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c524:	2301      	movs	r3, #1
 800c526:	73fb      	strb	r3, [r7, #15]
 800c528:	e001      	b.n	800c52e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c52a:	f7f6 fbdf 	bl	8002cec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c534:	7bfa      	ldrb	r2, [r7, #15]
 800c536:	4611      	mov	r1, r2
 800c538:	4618      	mov	r0, r3
 800c53a:	f7fe fcf2 	bl	800af22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c544:	4618      	mov	r0, r3
 800c546:	f7fe fc9a 	bl	800ae7e <USBD_LL_Reset>
}
 800c54a:	bf00      	nop
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
	...

0800c554 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c562:	4618      	mov	r0, r3
 800c564:	f7fe fced 	bl	800af42 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	6812      	ldr	r2, [r2, #0]
 800c576:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c57a:	f043 0301 	orr.w	r3, r3, #1
 800c57e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6a1b      	ldr	r3, [r3, #32]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d005      	beq.n	800c594 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c588:	4b04      	ldr	r3, [pc, #16]	; (800c59c <HAL_PCD_SuspendCallback+0x48>)
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	4a03      	ldr	r2, [pc, #12]	; (800c59c <HAL_PCD_SuspendCallback+0x48>)
 800c58e:	f043 0306 	orr.w	r3, r3, #6
 800c592:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c594:	bf00      	nop
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	e000ed00 	.word	0xe000ed00

0800c5a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fe fcdd 	bl	800af6e <USBD_LL_Resume>
}
 800c5b4:	bf00      	nop
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5ce:	78fa      	ldrb	r2, [r7, #3]
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fe fd35 	bl	800b042 <USBD_LL_IsoOUTIncomplete>
}
 800c5d8:	bf00      	nop
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5f2:	78fa      	ldrb	r2, [r7, #3]
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fe fcf1 	bl	800afde <USBD_LL_IsoINIncomplete>
}
 800c5fc:	bf00      	nop
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c612:	4618      	mov	r0, r3
 800c614:	f7fe fd47 	bl	800b0a6 <USBD_LL_DevConnected>
}
 800c618:	bf00      	nop
 800c61a:	3708      	adds	r7, #8
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fe fd44 	bl	800b0bc <USBD_LL_DevDisconnected>
}
 800c634:	bf00      	nop
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d13c      	bne.n	800c6c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c64c:	4a20      	ldr	r2, [pc, #128]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4a1e      	ldr	r2, [pc, #120]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c658:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c65c:	4b1c      	ldr	r3, [pc, #112]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c65e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c662:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c664:	4b1a      	ldr	r3, [pc, #104]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c666:	2204      	movs	r2, #4
 800c668:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c66a:	4b19      	ldr	r3, [pc, #100]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c66c:	2202      	movs	r2, #2
 800c66e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c670:	4b17      	ldr	r3, [pc, #92]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c672:	2200      	movs	r2, #0
 800c674:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c676:	4b16      	ldr	r3, [pc, #88]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c678:	2202      	movs	r2, #2
 800c67a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c67c:	4b14      	ldr	r3, [pc, #80]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c67e:	2200      	movs	r2, #0
 800c680:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c682:	4b13      	ldr	r3, [pc, #76]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c684:	2200      	movs	r2, #0
 800c686:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c688:	4b11      	ldr	r3, [pc, #68]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c68a:	2200      	movs	r2, #0
 800c68c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c68e:	4b10      	ldr	r3, [pc, #64]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c690:	2201      	movs	r2, #1
 800c692:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c694:	4b0e      	ldr	r3, [pc, #56]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c696:	2200      	movs	r2, #0
 800c698:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c69a:	480d      	ldr	r0, [pc, #52]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c69c:	f7f8 fb7e 	bl	8004d9c <HAL_PCD_Init>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d001      	beq.n	800c6aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c6a6:	f7f6 fb21 	bl	8002cec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c6aa:	2180      	movs	r1, #128	; 0x80
 800c6ac:	4808      	ldr	r0, [pc, #32]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c6ae:	f7f9 fdd6 	bl	800625e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c6b2:	2240      	movs	r2, #64	; 0x40
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	4806      	ldr	r0, [pc, #24]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c6b8:	f7f9 fd8a 	bl	80061d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c6bc:	2280      	movs	r2, #128	; 0x80
 800c6be:	2101      	movs	r1, #1
 800c6c0:	4803      	ldr	r0, [pc, #12]	; (800c6d0 <USBD_LL_Init+0x94>)
 800c6c2:	f7f9 fd85 	bl	80061d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c6c6:	2300      	movs	r3, #0
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	20001b5c 	.word	0x20001b5c

0800c6d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7f8 fc73 	bl	8004fd6 <HAL_PCD_Start>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 f942 	bl	800c980 <USBD_Get_USB_Status>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c700:	7bbb      	ldrb	r3, [r7, #14]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b084      	sub	sp, #16
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	4608      	mov	r0, r1
 800c714:	4611      	mov	r1, r2
 800c716:	461a      	mov	r2, r3
 800c718:	4603      	mov	r3, r0
 800c71a:	70fb      	strb	r3, [r7, #3]
 800c71c:	460b      	mov	r3, r1
 800c71e:	70bb      	strb	r3, [r7, #2]
 800c720:	4613      	mov	r3, r2
 800c722:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c724:	2300      	movs	r3, #0
 800c726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c728:	2300      	movs	r3, #0
 800c72a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c732:	78bb      	ldrb	r3, [r7, #2]
 800c734:	883a      	ldrh	r2, [r7, #0]
 800c736:	78f9      	ldrb	r1, [r7, #3]
 800c738:	f7f9 f944 	bl	80059c4 <HAL_PCD_EP_Open>
 800c73c:	4603      	mov	r3, r0
 800c73e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	4618      	mov	r0, r3
 800c744:	f000 f91c 	bl	800c980 <USBD_Get_USB_Status>
 800c748:	4603      	mov	r3, r0
 800c74a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c74c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b084      	sub	sp, #16
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	460b      	mov	r3, r1
 800c760:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c762:	2300      	movs	r3, #0
 800c764:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c766:	2300      	movs	r3, #0
 800c768:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c770:	78fa      	ldrb	r2, [r7, #3]
 800c772:	4611      	mov	r1, r2
 800c774:	4618      	mov	r0, r3
 800c776:	f7f9 f98d 	bl	8005a94 <HAL_PCD_EP_Close>
 800c77a:	4603      	mov	r3, r0
 800c77c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	4618      	mov	r0, r3
 800c782:	f000 f8fd 	bl	800c980 <USBD_Get_USB_Status>
 800c786:	4603      	mov	r3, r0
 800c788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c78a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	460b      	mov	r3, r1
 800c79e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7ae:	78fa      	ldrb	r2, [r7, #3]
 800c7b0:	4611      	mov	r1, r2
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7f9 fa65 	bl	8005c82 <HAL_PCD_EP_SetStall>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 f8de 	bl	800c980 <USBD_Get_USB_Status>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b084      	sub	sp, #16
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
 800c7da:	460b      	mov	r3, r1
 800c7dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7ec:	78fa      	ldrb	r2, [r7, #3]
 800c7ee:	4611      	mov	r1, r2
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7f9 faaa 	bl	8005d4a <HAL_PCD_EP_ClrStall>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7fa:	7bfb      	ldrb	r3, [r7, #15]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 f8bf 	bl	800c980 <USBD_Get_USB_Status>
 800c802:	4603      	mov	r3, r0
 800c804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c806:	7bbb      	ldrb	r3, [r7, #14]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3710      	adds	r7, #16
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c810:	b480      	push	{r7}
 800c812:	b085      	sub	sp, #20
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	460b      	mov	r3, r1
 800c81a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c822:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	da0b      	bge.n	800c844 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c82c:	78fb      	ldrb	r3, [r7, #3]
 800c82e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c832:	68f9      	ldr	r1, [r7, #12]
 800c834:	4613      	mov	r3, r2
 800c836:	00db      	lsls	r3, r3, #3
 800c838:	4413      	add	r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	440b      	add	r3, r1
 800c83e:	333e      	adds	r3, #62	; 0x3e
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	e00b      	b.n	800c85c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c844:	78fb      	ldrb	r3, [r7, #3]
 800c846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c84a:	68f9      	ldr	r1, [r7, #12]
 800c84c:	4613      	mov	r3, r2
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	4413      	add	r3, r2
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	440b      	add	r3, r1
 800c856:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c85a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3714      	adds	r7, #20
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	460b      	mov	r3, r1
 800c872:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c874:	2300      	movs	r3, #0
 800c876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c878:	2300      	movs	r3, #0
 800c87a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c882:	78fa      	ldrb	r2, [r7, #3]
 800c884:	4611      	mov	r1, r2
 800c886:	4618      	mov	r0, r3
 800c888:	f7f9 f877 	bl	800597a <HAL_PCD_SetAddress>
 800c88c:	4603      	mov	r3, r0
 800c88e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c890:	7bfb      	ldrb	r3, [r7, #15]
 800c892:	4618      	mov	r0, r3
 800c894:	f000 f874 	bl	800c980 <USBD_Get_USB_Status>
 800c898:	4603      	mov	r3, r0
 800c89a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c89c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b086      	sub	sp, #24
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	60f8      	str	r0, [r7, #12]
 800c8ae:	607a      	str	r2, [r7, #4]
 800c8b0:	603b      	str	r3, [r7, #0]
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c8c4:	7af9      	ldrb	r1, [r7, #11]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	f7f9 f990 	bl	8005bee <HAL_PCD_EP_Transmit>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8d2:	7dfb      	ldrb	r3, [r7, #23]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f000 f853 	bl	800c980 <USBD_Get_USB_Status>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8de:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3718      	adds	r7, #24
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b086      	sub	sp, #24
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	607a      	str	r2, [r7, #4]
 800c8f2:	603b      	str	r3, [r7, #0]
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c906:	7af9      	ldrb	r1, [r7, #11]
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	f7f9 f90c 	bl	8005b28 <HAL_PCD_EP_Receive>
 800c910:	4603      	mov	r3, r0
 800c912:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c914:	7dfb      	ldrb	r3, [r7, #23]
 800c916:	4618      	mov	r0, r3
 800c918:	f000 f832 	bl	800c980 <USBD_Get_USB_Status>
 800c91c:	4603      	mov	r3, r0
 800c91e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c920:	7dbb      	ldrb	r3, [r7, #22]
}
 800c922:	4618      	mov	r0, r3
 800c924:	3718      	adds	r7, #24
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b082      	sub	sp, #8
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	460b      	mov	r3, r1
 800c934:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c93c:	78fa      	ldrb	r2, [r7, #3]
 800c93e:	4611      	mov	r1, r2
 800c940:	4618      	mov	r0, r3
 800c942:	f7f9 f93c 	bl	8005bbe <HAL_PCD_EP_GetRxCount>
 800c946:	4603      	mov	r3, r0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c958:	4b03      	ldr	r3, [pc, #12]	; (800c968 <USBD_static_malloc+0x18>)
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	370c      	adds	r7, #12
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	20002068 	.word	0x20002068

0800c96c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]

}
 800c974:	bf00      	nop
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c980:	b480      	push	{r7}
 800c982:	b085      	sub	sp, #20
 800c984:	af00      	add	r7, sp, #0
 800c986:	4603      	mov	r3, r0
 800c988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c98a:	2300      	movs	r3, #0
 800c98c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	2b03      	cmp	r3, #3
 800c992:	d817      	bhi.n	800c9c4 <USBD_Get_USB_Status+0x44>
 800c994:	a201      	add	r2, pc, #4	; (adr r2, 800c99c <USBD_Get_USB_Status+0x1c>)
 800c996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c99a:	bf00      	nop
 800c99c:	0800c9ad 	.word	0x0800c9ad
 800c9a0:	0800c9b3 	.word	0x0800c9b3
 800c9a4:	0800c9b9 	.word	0x0800c9b9
 800c9a8:	0800c9bf 	.word	0x0800c9bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c9b0:	e00b      	b.n	800c9ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c9b2:	2303      	movs	r3, #3
 800c9b4:	73fb      	strb	r3, [r7, #15]
    break;
 800c9b6:	e008      	b.n	800c9ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c9bc:	e005      	b.n	800c9ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c9c2:	e002      	b.n	800c9ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c9c4:	2303      	movs	r3, #3
 800c9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c9c8:	bf00      	nop
  }
  return usb_status;
 800c9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <_ZdlPvj>:
 800c9d8:	f000 b803 	b.w	800c9e2 <_ZdlPv>

0800c9dc <__cxa_pure_virtual>:
 800c9dc:	b508      	push	{r3, lr}
 800c9de:	f000 f80f 	bl	800ca00 <_ZSt9terminatev>

0800c9e2 <_ZdlPv>:
 800c9e2:	f000 b843 	b.w	800ca6c <free>

0800c9e6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c9e6:	b508      	push	{r3, lr}
 800c9e8:	4780      	blx	r0
 800c9ea:	f000 f80e 	bl	800ca0a <abort>
	...

0800c9f0 <_ZSt13get_terminatev>:
 800c9f0:	4b02      	ldr	r3, [pc, #8]	; (800c9fc <_ZSt13get_terminatev+0xc>)
 800c9f2:	6818      	ldr	r0, [r3, #0]
 800c9f4:	f3bf 8f5b 	dmb	ish
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	20000120 	.word	0x20000120

0800ca00 <_ZSt9terminatev>:
 800ca00:	b508      	push	{r3, lr}
 800ca02:	f7ff fff5 	bl	800c9f0 <_ZSt13get_terminatev>
 800ca06:	f7ff ffee 	bl	800c9e6 <_ZN10__cxxabiv111__terminateEPFvvE>

0800ca0a <abort>:
 800ca0a:	b508      	push	{r3, lr}
 800ca0c:	2006      	movs	r0, #6
 800ca0e:	f000 f8bf 	bl	800cb90 <raise>
 800ca12:	2001      	movs	r0, #1
 800ca14:	f7f6 fc74 	bl	8003300 <_exit>

0800ca18 <__errno>:
 800ca18:	4b01      	ldr	r3, [pc, #4]	; (800ca20 <__errno+0x8>)
 800ca1a:	6818      	ldr	r0, [r3, #0]
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	20000124 	.word	0x20000124

0800ca24 <__libc_init_array>:
 800ca24:	b570      	push	{r4, r5, r6, lr}
 800ca26:	4d0d      	ldr	r5, [pc, #52]	; (800ca5c <__libc_init_array+0x38>)
 800ca28:	4c0d      	ldr	r4, [pc, #52]	; (800ca60 <__libc_init_array+0x3c>)
 800ca2a:	1b64      	subs	r4, r4, r5
 800ca2c:	10a4      	asrs	r4, r4, #2
 800ca2e:	2600      	movs	r6, #0
 800ca30:	42a6      	cmp	r6, r4
 800ca32:	d109      	bne.n	800ca48 <__libc_init_array+0x24>
 800ca34:	4d0b      	ldr	r5, [pc, #44]	; (800ca64 <__libc_init_array+0x40>)
 800ca36:	4c0c      	ldr	r4, [pc, #48]	; (800ca68 <__libc_init_array+0x44>)
 800ca38:	f000 f8d4 	bl	800cbe4 <_init>
 800ca3c:	1b64      	subs	r4, r4, r5
 800ca3e:	10a4      	asrs	r4, r4, #2
 800ca40:	2600      	movs	r6, #0
 800ca42:	42a6      	cmp	r6, r4
 800ca44:	d105      	bne.n	800ca52 <__libc_init_array+0x2e>
 800ca46:	bd70      	pop	{r4, r5, r6, pc}
 800ca48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca4c:	4798      	blx	r3
 800ca4e:	3601      	adds	r6, #1
 800ca50:	e7ee      	b.n	800ca30 <__libc_init_array+0xc>
 800ca52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca56:	4798      	blx	r3
 800ca58:	3601      	adds	r6, #1
 800ca5a:	e7f2      	b.n	800ca42 <__libc_init_array+0x1e>
 800ca5c:	0800cd3c 	.word	0x0800cd3c
 800ca60:	0800cd3c 	.word	0x0800cd3c
 800ca64:	0800cd3c 	.word	0x0800cd3c
 800ca68:	0800cd48 	.word	0x0800cd48

0800ca6c <free>:
 800ca6c:	4b02      	ldr	r3, [pc, #8]	; (800ca78 <free+0xc>)
 800ca6e:	4601      	mov	r1, r0
 800ca70:	6818      	ldr	r0, [r3, #0]
 800ca72:	f000 b819 	b.w	800caa8 <_free_r>
 800ca76:	bf00      	nop
 800ca78:	20000124 	.word	0x20000124

0800ca7c <memcpy>:
 800ca7c:	440a      	add	r2, r1
 800ca7e:	4291      	cmp	r1, r2
 800ca80:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca84:	d100      	bne.n	800ca88 <memcpy+0xc>
 800ca86:	4770      	bx	lr
 800ca88:	b510      	push	{r4, lr}
 800ca8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca92:	4291      	cmp	r1, r2
 800ca94:	d1f9      	bne.n	800ca8a <memcpy+0xe>
 800ca96:	bd10      	pop	{r4, pc}

0800ca98 <memset>:
 800ca98:	4402      	add	r2, r0
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d100      	bne.n	800caa2 <memset+0xa>
 800caa0:	4770      	bx	lr
 800caa2:	f803 1b01 	strb.w	r1, [r3], #1
 800caa6:	e7f9      	b.n	800ca9c <memset+0x4>

0800caa8 <_free_r>:
 800caa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800caaa:	2900      	cmp	r1, #0
 800caac:	d044      	beq.n	800cb38 <_free_r+0x90>
 800caae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cab2:	9001      	str	r0, [sp, #4]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f1a1 0404 	sub.w	r4, r1, #4
 800caba:	bfb8      	it	lt
 800cabc:	18e4      	addlt	r4, r4, r3
 800cabe:	f000 f883 	bl	800cbc8 <__malloc_lock>
 800cac2:	4a1e      	ldr	r2, [pc, #120]	; (800cb3c <_free_r+0x94>)
 800cac4:	9801      	ldr	r0, [sp, #4]
 800cac6:	6813      	ldr	r3, [r2, #0]
 800cac8:	b933      	cbnz	r3, 800cad8 <_free_r+0x30>
 800caca:	6063      	str	r3, [r4, #4]
 800cacc:	6014      	str	r4, [r2, #0]
 800cace:	b003      	add	sp, #12
 800cad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cad4:	f000 b87e 	b.w	800cbd4 <__malloc_unlock>
 800cad8:	42a3      	cmp	r3, r4
 800cada:	d908      	bls.n	800caee <_free_r+0x46>
 800cadc:	6825      	ldr	r5, [r4, #0]
 800cade:	1961      	adds	r1, r4, r5
 800cae0:	428b      	cmp	r3, r1
 800cae2:	bf01      	itttt	eq
 800cae4:	6819      	ldreq	r1, [r3, #0]
 800cae6:	685b      	ldreq	r3, [r3, #4]
 800cae8:	1949      	addeq	r1, r1, r5
 800caea:	6021      	streq	r1, [r4, #0]
 800caec:	e7ed      	b.n	800caca <_free_r+0x22>
 800caee:	461a      	mov	r2, r3
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	b10b      	cbz	r3, 800caf8 <_free_r+0x50>
 800caf4:	42a3      	cmp	r3, r4
 800caf6:	d9fa      	bls.n	800caee <_free_r+0x46>
 800caf8:	6811      	ldr	r1, [r2, #0]
 800cafa:	1855      	adds	r5, r2, r1
 800cafc:	42a5      	cmp	r5, r4
 800cafe:	d10b      	bne.n	800cb18 <_free_r+0x70>
 800cb00:	6824      	ldr	r4, [r4, #0]
 800cb02:	4421      	add	r1, r4
 800cb04:	1854      	adds	r4, r2, r1
 800cb06:	42a3      	cmp	r3, r4
 800cb08:	6011      	str	r1, [r2, #0]
 800cb0a:	d1e0      	bne.n	800cace <_free_r+0x26>
 800cb0c:	681c      	ldr	r4, [r3, #0]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	6053      	str	r3, [r2, #4]
 800cb12:	4421      	add	r1, r4
 800cb14:	6011      	str	r1, [r2, #0]
 800cb16:	e7da      	b.n	800cace <_free_r+0x26>
 800cb18:	d902      	bls.n	800cb20 <_free_r+0x78>
 800cb1a:	230c      	movs	r3, #12
 800cb1c:	6003      	str	r3, [r0, #0]
 800cb1e:	e7d6      	b.n	800cace <_free_r+0x26>
 800cb20:	6825      	ldr	r5, [r4, #0]
 800cb22:	1961      	adds	r1, r4, r5
 800cb24:	428b      	cmp	r3, r1
 800cb26:	bf04      	itt	eq
 800cb28:	6819      	ldreq	r1, [r3, #0]
 800cb2a:	685b      	ldreq	r3, [r3, #4]
 800cb2c:	6063      	str	r3, [r4, #4]
 800cb2e:	bf04      	itt	eq
 800cb30:	1949      	addeq	r1, r1, r5
 800cb32:	6021      	streq	r1, [r4, #0]
 800cb34:	6054      	str	r4, [r2, #4]
 800cb36:	e7ca      	b.n	800cace <_free_r+0x26>
 800cb38:	b003      	add	sp, #12
 800cb3a:	bd30      	pop	{r4, r5, pc}
 800cb3c:	20002288 	.word	0x20002288

0800cb40 <_raise_r>:
 800cb40:	291f      	cmp	r1, #31
 800cb42:	b538      	push	{r3, r4, r5, lr}
 800cb44:	4604      	mov	r4, r0
 800cb46:	460d      	mov	r5, r1
 800cb48:	d904      	bls.n	800cb54 <_raise_r+0x14>
 800cb4a:	2316      	movs	r3, #22
 800cb4c:	6003      	str	r3, [r0, #0]
 800cb4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb52:	bd38      	pop	{r3, r4, r5, pc}
 800cb54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb56:	b112      	cbz	r2, 800cb5e <_raise_r+0x1e>
 800cb58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb5c:	b94b      	cbnz	r3, 800cb72 <_raise_r+0x32>
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f000 f830 	bl	800cbc4 <_getpid_r>
 800cb64:	462a      	mov	r2, r5
 800cb66:	4601      	mov	r1, r0
 800cb68:	4620      	mov	r0, r4
 800cb6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb6e:	f000 b817 	b.w	800cba0 <_kill_r>
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	d00a      	beq.n	800cb8c <_raise_r+0x4c>
 800cb76:	1c59      	adds	r1, r3, #1
 800cb78:	d103      	bne.n	800cb82 <_raise_r+0x42>
 800cb7a:	2316      	movs	r3, #22
 800cb7c:	6003      	str	r3, [r0, #0]
 800cb7e:	2001      	movs	r0, #1
 800cb80:	e7e7      	b.n	800cb52 <_raise_r+0x12>
 800cb82:	2400      	movs	r4, #0
 800cb84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb88:	4628      	mov	r0, r5
 800cb8a:	4798      	blx	r3
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	e7e0      	b.n	800cb52 <_raise_r+0x12>

0800cb90 <raise>:
 800cb90:	4b02      	ldr	r3, [pc, #8]	; (800cb9c <raise+0xc>)
 800cb92:	4601      	mov	r1, r0
 800cb94:	6818      	ldr	r0, [r3, #0]
 800cb96:	f7ff bfd3 	b.w	800cb40 <_raise_r>
 800cb9a:	bf00      	nop
 800cb9c:	20000124 	.word	0x20000124

0800cba0 <_kill_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	4d07      	ldr	r5, [pc, #28]	; (800cbc0 <_kill_r+0x20>)
 800cba4:	2300      	movs	r3, #0
 800cba6:	4604      	mov	r4, r0
 800cba8:	4608      	mov	r0, r1
 800cbaa:	4611      	mov	r1, r2
 800cbac:	602b      	str	r3, [r5, #0]
 800cbae:	f7f6 fb97 	bl	80032e0 <_kill>
 800cbb2:	1c43      	adds	r3, r0, #1
 800cbb4:	d102      	bne.n	800cbbc <_kill_r+0x1c>
 800cbb6:	682b      	ldr	r3, [r5, #0]
 800cbb8:	b103      	cbz	r3, 800cbbc <_kill_r+0x1c>
 800cbba:	6023      	str	r3, [r4, #0]
 800cbbc:	bd38      	pop	{r3, r4, r5, pc}
 800cbbe:	bf00      	nop
 800cbc0:	2000228c 	.word	0x2000228c

0800cbc4 <_getpid_r>:
 800cbc4:	f7f6 bb84 	b.w	80032d0 <_getpid>

0800cbc8 <__malloc_lock>:
 800cbc8:	4801      	ldr	r0, [pc, #4]	; (800cbd0 <__malloc_lock+0x8>)
 800cbca:	f000 b809 	b.w	800cbe0 <__retarget_lock_acquire_recursive>
 800cbce:	bf00      	nop
 800cbd0:	20002290 	.word	0x20002290

0800cbd4 <__malloc_unlock>:
 800cbd4:	4801      	ldr	r0, [pc, #4]	; (800cbdc <__malloc_unlock+0x8>)
 800cbd6:	f000 b804 	b.w	800cbe2 <__retarget_lock_release_recursive>
 800cbda:	bf00      	nop
 800cbdc:	20002290 	.word	0x20002290

0800cbe0 <__retarget_lock_acquire_recursive>:
 800cbe0:	4770      	bx	lr

0800cbe2 <__retarget_lock_release_recursive>:
 800cbe2:	4770      	bx	lr

0800cbe4 <_init>:
 800cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe6:	bf00      	nop
 800cbe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbea:	bc08      	pop	{r3}
 800cbec:	469e      	mov	lr, r3
 800cbee:	4770      	bx	lr

0800cbf0 <_fini>:
 800cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf2:	bf00      	nop
 800cbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbf6:	bc08      	pop	{r3}
 800cbf8:	469e      	mov	lr, r3
 800cbfa:	4770      	bx	lr
