
F407-SX1280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca30  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800cbb8  0800cbb8  0001cbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccf4  0800ccf4  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccf4  0800ccf4  0001ccf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccfc  0800ccfc  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800ccfc  0800ccfc  0001ccfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800cd08  0800cd08  0001cd08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800cd10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00002088  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200021ec  200021ec  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002eb60  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000585d  00000000  00000000  0004ecf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e48  00000000  00000000  00054558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c78  00000000  00000000  000563a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a863  00000000  00000000  00058018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026fab  00000000  00000000  0008287b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddbee  00000000  00000000  000a9826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00187414  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008728  00000000  00000000  00187464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cba0 	.word	0x0800cba0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	0800cba0 	.word	0x0800cba0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <_ZN14RoboIME_SX128012GPIOCallbackEv>:

SX1280Hal radio0(&hspi2, SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, SX1280_RST_GPIO_Port, SX1280_RST_Pin, NULL);


//Public methods
void RoboIME_SX1280::GPIOCallback(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	radio0.HalInterruptCallback();
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <_ZN14RoboIME_SX128012GPIOCallbackEv+0x18>)
 8000cb2:	f000 fea4 	bl	80019fe <_ZN9SX1280Hal20HalInterruptCallbackEv>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000180 	.word	0x20000180

08000cc4 <_ZN14RoboIME_SX12805setupEv>:
int RoboIME_SX1280::setup(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	6078      	str	r0, [r7, #4]
	/* Modulation Params*/

	   ModulationParams.Params.Flrc.BitrateBandwidth  = ( RadioFlrcBitrates_t )       FLRC_BR_0_260_BW_0_3;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	22eb      	movs	r2, #235	; 0xeb
 8000cd0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	   ModulationParams.Params.Flrc.CodingRate        = ( RadioFlrcCodingRates_t )    FLRC_CR_1_2;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	   ModulationParams.Params.Flrc.ModulationShaping = ( RadioModShapings_t )        RADIO_MOD_SHAPING_BT_1_0;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2210      	movs	r2, #16
 8000ce0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	   PacketParams.Params.Flrc.PreambleLength        = ( RadioPreambleLengths_t )     PREAMBLE_LENGTH_32_BITS;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2270      	movs	r2, #112	; 0x70
 8000ce8:	741a      	strb	r2, [r3, #16]
	   PacketParams.Params.Flrc.SyncWordLength        = ( RadioFlrcSyncWordLengths_t )FLRC_SYNCWORD_LENGTH_4_BYTE;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2204      	movs	r2, #4
 8000cee:	745a      	strb	r2, [r3, #17]
	   PacketParams.Params.Flrc.SyncWordMatch         = ( RadioSyncWordRxMatchs_t )   RADIO_RX_MATCH_SYNCWORD_1;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2210      	movs	r2, #16
 8000cf4:	749a      	strb	r2, [r3, #18]
	   PacketParams.Params.Flrc.HeaderType            = ( RadioPacketLengthModes_t )  RADIO_PACKET_VARIABLE_LENGTH;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2220      	movs	r2, #32
 8000cfa:	74da      	strb	r2, [r3, #19]
	   PacketParams.Params.Flrc.PayloadLength         =                               15;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	220f      	movs	r2, #15
 8000d00:	751a      	strb	r2, [r3, #20]
	   PacketParams.Params.Flrc.CrcLength             = ( RadioCrcTypes_t )           RADIO_CRC_3_BYTES;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2230      	movs	r2, #48	; 0x30
 8000d06:	755a      	strb	r2, [r3, #21]
	   PacketParams.Params.Flrc.Whitening             = ( RadioWhiteningModes_t )	  RADIO_WHITENING_OFF;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	759a      	strb	r2, [r3, #22]

	   ModulationParams.PacketType = PACKET_TYPE_FLRC;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2203      	movs	r2, #3
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]
	   PacketParams.PacketType     = PACKET_TYPE_FLRC;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2203      	movs	r2, #3
 8000d1a:	70da      	strb	r2, [r3, #3]


   	HAL_Delay(500);
 8000d1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d20:	f002 fb84 	bl	800342c <HAL_Delay>
   	radio0.Init();
 8000d24:	4824      	ldr	r0, [pc, #144]	; (8000db8 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000d26:	f000 fe9b 	bl	8001a60 <_ZN6SX12804InitEv>
   	radio0.SetRegulatorMode(USE_LDO);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4822      	ldr	r0, [pc, #136]	; (8000db8 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000d2e:	f001 fa26 	bl	800217e <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>
   	radio0.SetStandby( STDBY_RC);
 8000d32:	2100      	movs	r1, #0
 8000d34:	4820      	ldr	r0, [pc, #128]	; (8000db8 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000d36:	f000 ff03 	bl	8001b40 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>
   	//radio0.SetLNAGainSetting(LNA_HIGH_SENSITIVITY_MODE);
   	radio0.SetPacketType( ModulationParams.PacketType );
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d40:	4619      	mov	r1, r3
 8000d42:	481d      	ldr	r0, [pc, #116]	; (8000db8 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000d44:	f000 ff87 	bl	8001c56 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
   	radio0.SetModulationParams( &ModulationParams );
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3320      	adds	r3, #32
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481a      	ldr	r0, [pc, #104]	; (8000db8 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000d50:	f001 f82c 	bl	8001dac <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>
   	radio0.SetPacketParams( &PacketParams );
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3303      	adds	r3, #3
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4817      	ldr	r0, [pc, #92]	; (8000db8 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000d5c:	f001 f8a2 	bl	8001ea4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t>
   	radio0.SetRfFrequency( 2350000000UL );
 8000d60:	4916      	ldr	r1, [pc, #88]	; (8000dbc <_ZN14RoboIME_SX12805setupEv+0xf8>)
 8000d62:	4815      	ldr	r0, [pc, #84]	; (8000db8 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000d64:	f000 ffb8 	bl	8001cd8 <_ZN6SX128014SetRfFrequencyEm>
   	radio0.SetBufferBaseAddresses( 0x00, 0x00 );
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4812      	ldr	r0, [pc, #72]	; (8000db8 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000d6e:	f001 f803 	bl	8001d78 <_ZN6SX128022SetBufferBaseAddressesEhh>
   	//radio0.SetSyncWord( 1, syncWord ); // NAO USEI
   	// only used in GFSK, FLRC
   	//uint8_t crcSeedLocal[2] = {0x45, 0x67}; // NAO USEI
   	//radio0.SetCrcSeed( crcSeedLocal ); // NAO USEI
   	//radio0.SetCrcPolynomial( 0x0123 ); // NAOP USEI
   	radio0.SetTxParams( 0, RADIO_RAMP_20_US );
 8000d72:	22e0      	movs	r2, #224	; 0xe0
 8000d74:	2100      	movs	r1, #0
 8000d76:	4810      	ldr	r0, [pc, #64]	; (8000db8 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000d78:	f000 ffe2 	bl	8001d40 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>
   	uint16_t RxIrqMask = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT;
 8000d7c:	f244 0302 	movw	r3, #16386	; 0x4002
 8000d80:	81fb      	strh	r3, [r7, #14]
   	radio0.SetDioIrqParams( RxIrqMask, RxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8000d82:	89fa      	ldrh	r2, [r7, #14]
 8000d84:	89f9      	ldrh	r1, [r7, #14]
 8000d86:	2300      	movs	r3, #0
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000d8e:	f001 f985 	bl	800209c <_ZN6SX128015SetDioIrqParamsEtttt>
   	radio0.SetRx( ( TickTime_t ) { RADIO_TICK_SIZE_1000_US, 0xFFFF } );
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <_ZN14RoboIME_SX12805setupEv+0xfc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	4807      	ldr	r0, [pc, #28]	; (8000db8 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000d9c:	f000 ff25 	bl	8001bea <_ZN6SX12805SetRxE10TickTime_s>

   	radio0.SetPollingMode( );
 8000da0:	4805      	ldr	r0, [pc, #20]	; (8000db8 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000da2:	f001 fa67 	bl	8002274 <_ZN6SX128014SetPollingModeEv>
   	radio0.ProcessIrqs( );
 8000da6:	4804      	ldr	r0, [pc, #16]	; (8000db8 <_ZN14RoboIME_SX12805setupEv+0xf4>)
 8000da8:	f001 fa88 	bl	80022bc <_ZN6SX128011ProcessIrqsEv>

   	return 0;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000180 	.word	0x20000180
 8000dbc:	8c122780 	.word	0x8c122780
 8000dc0:	0800cbb8 	.word	0x0800cbb8

08000dc4 <_ZN14RoboIME_SX128011sendPayloadEPhh>:

void RoboIME_SX1280::sendPayload(uint8_t* payload, uint8_t payloadSize){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	71fb      	strb	r3, [r7, #7]
	radio0.SetDioIrqParams( TxIrqMask, TxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <_ZN14RoboIME_SX128011sendPayloadEPhh+0x48>)
 8000de2:	f001 f95b 	bl	800209c <_ZN6SX128015SetDioIrqParamsEtttt>
	radio0.SendPayload( payload, payloadSize,( TickTime_t ){ RADIO_TICK_SIZE_1000_US, 100 } );
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <_ZN14RoboIME_SX128011sendPayloadEPhh+0x4c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	79fa      	ldrb	r2, [r7, #7]
 8000dee:	2300      	movs	r3, #0
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <_ZN14RoboIME_SX128011sendPayloadEPhh+0x48>)
 8000df8:	f001 fa10 	bl	800221c <_ZN6SX128011SendPayloadEPhh10TickTime_sh>
	radio0.GetIrqStatus();
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <_ZN14RoboIME_SX128011sendPayloadEPhh+0x48>)
 8000dfe:	f001 f988 	bl	8002112 <_ZN6SX128012GetIrqStatusEv>
}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000180 	.word	0x20000180
 8000e10:	0800cbbc 	.word	0x0800cbbc

08000e14 <_ZN14RoboIME_SX128014receivePayloadEPh>:
uint8_t RoboIME_SX1280::receivePayload(uint8_t* payload){
 8000e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e18:	b089      	sub	sp, #36	; 0x24
 8000e1a:	af02      	add	r7, sp, #8
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
	}
	else
	{
		 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		 return 0;
	}
 8000e20:	466b      	mov	r3, sp
 8000e22:	461e      	mov	r6, r3
	uint8_t payloadTemp[bufferSize];
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	1e59      	subs	r1, r3, #1
 8000e2a:	6179      	str	r1, [r7, #20]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	3301      	adds	r3, #1
 8000e30:	2200      	movs	r2, #0
 8000e32:	4698      	mov	r8, r3
 8000e34:	4691      	mov	r9, r2
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	461c      	mov	r4, r3
 8000e52:	4615      	mov	r5, r2
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	00eb      	lsls	r3, r5, #3
 8000e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e62:	00e2      	lsls	r2, r4, #3
 8000e64:	460b      	mov	r3, r1
 8000e66:	3301      	adds	r3, #1
 8000e68:	3307      	adds	r3, #7
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	ebad 0d03 	sub.w	sp, sp, r3
 8000e72:	ab02      	add	r3, sp, #8
 8000e74:	3300      	adds	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
	radio0.SetDioIrqParams( RxIrqMask, RxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8000e80:	2300      	movs	r3, #0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2300      	movs	r3, #0
 8000e86:	4818      	ldr	r0, [pc, #96]	; (8000ee8 <_ZN14RoboIME_SX128014receivePayloadEPh+0xd4>)
 8000e88:	f001 f908 	bl	800209c <_ZN6SX128015SetDioIrqParamsEtttt>
	radio0.GetPayload(payloadTemp, &actualBufferSize, bufferSize);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	f107 020f 	add.w	r2, r7, #15
 8000e94:	6939      	ldr	r1, [r7, #16]
 8000e96:	4814      	ldr	r0, [pc, #80]	; (8000ee8 <_ZN14RoboIME_SX128014receivePayloadEPh+0xd4>)
 8000e98:	f001 f99c 	bl	80021d4 <_ZN6SX128010GetPayloadEPhS0_h>
	if (payloadTemp[0] != oldCount && payloadTemp[1] == roboId)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	781a      	ldrb	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	789b      	ldrb	r3, [r3, #2]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d013      	beq.n	8000ed0 <_ZN14RoboIME_SX128014receivePayloadEPh+0xbc>
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	785a      	ldrb	r2, [r3, #1]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	785b      	ldrb	r3, [r3, #1]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d10d      	bne.n	8000ed0 <_ZN14RoboIME_SX128014receivePayloadEPh+0xbc>
		memcpy(payload, payloadTemp, bufferSize);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	6939      	ldr	r1, [r7, #16]
 8000ebc:	6838      	ldr	r0, [r7, #0]
 8000ebe:	f00b fdbb 	bl	800ca38 <memcpy>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000ec2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec6:	4809      	ldr	r0, [pc, #36]	; (8000eec <_ZN14RoboIME_SX128014receivePayloadEPh+0xd8>)
 8000ec8:	f003 f92f 	bl	800412a <HAL_GPIO_TogglePin>
		return actualBufferSize;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	e005      	b.n	8000edc <_ZN14RoboIME_SX128014receivePayloadEPh+0xc8>
		 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <_ZN14RoboIME_SX128014receivePayloadEPh+0xd8>)
 8000ed6:	f003 f928 	bl	800412a <HAL_GPIO_TogglePin>
		 return 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	46b5      	mov	sp, r6

}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	371c      	adds	r7, #28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ee8:	20000180 	.word	0x20000180
 8000eec:	40020c00 	.word	0x40020c00

08000ef0 <_ZN14RoboIME_SX128010setRobotIdEh>:
void RoboIME_SX1280::setPayload( uint8_t *buffer, uint8_t size, uint8_t offset ){

	radio0.SetPayload( buffer, size, offset );
}
int RoboIME_SX1280::setRobotId(uint8_t id){
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
	roboId = id;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	78fa      	ldrb	r2, [r7, #3]
 8000f00:	705a      	strb	r2, [r3, #1]
	return 0;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_Z41__static_initialization_and_destruction_0ii>:
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af06      	add	r7, sp, #24
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d117      	bne.n	8000f50 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d112      	bne.n	8000f50 <_Z41__static_initialization_and_destruction_0ii+0x40>
SX1280Hal radio0(&hspi2, SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, SX1280_RST_GPIO_Port, SX1280_RST_Pin, NULL);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	9304      	str	r3, [sp, #16]
 8000f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f32:	9303      	str	r3, [sp, #12]
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000f48:	490b      	ldr	r1, [pc, #44]	; (8000f78 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000f4a:	480c      	ldr	r0, [pc, #48]	; (8000f7c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000f4c:	f000 f9c2 	bl	80012d4 <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d107      	bne.n	8000f66 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d102      	bne.n	8000f66 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000f62:	f000 f9f3 	bl	800134c <_ZN9SX1280HalD1Ev>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	40020400 	.word	0x40020400
 8000f78:	200003cc 	.word	0x200003cc
 8000f7c:	20000180 	.word	0x20000180

08000f80 <_GLOBAL__sub_I_radio0>:
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f7ff ffc1 	bl	8000f10 <_Z41__static_initialization_and_destruction_0ii>
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_GLOBAL__sub_D_radio0>:
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff ffb9 	bl	8000f10 <_Z41__static_initialization_and_destruction_0ii>
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_ZN14RoboIME_SX1280C1Ev>:
#include "string.h"
#include <cstring>
#include "SerialDebug.hpp"
#include "sx1280/sx1280-hal.h"

class RoboIME_SX1280 {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f244 0201 	movw	r2, #16385	; 0x4001
 8000fb4:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f244 0202 	movw	r2, #16386	; 0x4002
 8000fbc:	861a      	strh	r2, [r3, #48]	; 0x30
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_UART_TxCpltCallback>:
	if(htim==&htim6){

	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
		//debug.serialTxCpltCallback();
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin){
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	d103      	bne.n	8000ff8 <HAL_GPIO_EXTI_Callback+0x18>
	case 8:
		radio.GPIOCallback();
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <HAL_GPIO_EXTI_Callback+0x24>)
 8000ff2:	f7ff fe59 	bl	8000ca8 <_ZN14RoboIME_SX128012GPIOCallbackEv>
		break;
 8000ff6:	e000      	b.n	8000ffa <HAL_GPIO_EXTI_Callback+0x1a>
	default:
		break;
 8000ff8:	bf00      	nop
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200001e4 	.word	0x200001e4

08001008 <start>:

void start(){
 8001008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0

	radio.setup();
 8001010:	484a      	ldr	r0, [pc, #296]	; (800113c <start+0x134>)
 8001012:	f7ff fe57 	bl	8000cc4 <_ZN14RoboIME_SX12805setupEv>
   /*Radio Type*/
    bool isMaster = false;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]

	uint8_t Buffer[radio.bufferSize];
 800101a:	4b48      	ldr	r3, [pc, #288]	; (800113c <start+0x134>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	1e59      	subs	r1, r3, #1
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	460b      	mov	r3, r1
 8001024:	3301      	adds	r3, #1
 8001026:	2200      	movs	r2, #0
 8001028:	4698      	mov	r8, r3
 800102a:	4691      	mov	r9, r2
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001038:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800103c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001040:	460b      	mov	r3, r1
 8001042:	3301      	adds	r3, #1
 8001044:	2200      	movs	r2, #0
 8001046:	461c      	mov	r4, r3
 8001048:	4615      	mov	r5, r2
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	00eb      	lsls	r3, r5, #3
 8001054:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001058:	00e2      	lsls	r2, r4, #3
 800105a:	460b      	mov	r3, r1
 800105c:	3301      	adds	r3, #1
 800105e:	3307      	adds	r3, #7
 8001060:	08db      	lsrs	r3, r3, #3
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	ebad 0d03 	sub.w	sp, sp, r3
 8001068:	466b      	mov	r3, sp
 800106a:	3300      	adds	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
	memset( BufferReceived, 0x00, radio.bufferSize );
 800106e:	4b33      	ldr	r3, [pc, #204]	; (800113c <start+0x134>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	2100      	movs	r1, #0
 8001076:	4832      	ldr	r0, [pc, #200]	; (8001140 <start+0x138>)
 8001078:	f00b fcec 	bl	800ca54 <memset>
	HAL_Delay(5);
 800107c:	2005      	movs	r0, #5
 800107e:	f002 f9d5 	bl	800342c <HAL_Delay>

//	char *data = "hello adfa \n";
int count = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
while(1)
{

	if(isMaster == true)
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d13b      	bne.n	8001104 <start+0xfc>
	{

		// Send the next PING frame
		Buffer[0] = count;
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	701a      	strb	r2, [r3, #0]
		Buffer[1] = 2;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2202      	movs	r2, #2
 8001098:	705a      	strb	r2, [r3, #1]
		Buffer[2] = 3;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2203      	movs	r2, #3
 800109e:	709a      	strb	r2, [r3, #2]
		Buffer[3] = 4;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2204      	movs	r2, #4
 80010a4:	70da      	strb	r2, [r3, #3]
		Buffer[4] = 5;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2205      	movs	r2, #5
 80010aa:	711a      	strb	r2, [r3, #4]
		Buffer[5] = 6;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2206      	movs	r2, #6
 80010b0:	715a      	strb	r2, [r3, #5]
		Buffer[6] = 7;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2207      	movs	r2, #7
 80010b6:	719a      	strb	r2, [r3, #6]
		Buffer[7] = 8;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2208      	movs	r2, #8
 80010bc:	71da      	strb	r2, [r3, #7]
		for(int i = 8; i < 16; i++ )
 80010be:	2308      	movs	r3, #8
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	dc0a      	bgt.n	80010de <start+0xd6>
		{
			Buffer[i] = i;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	b2d9      	uxtb	r1, r3
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	4413      	add	r3, r2
 80010d2:	460a      	mov	r2, r1
 80010d4:	701a      	strb	r2, [r3, #0]
		for(int i = 8; i < 16; i++ )
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	e7f1      	b.n	80010c2 <start+0xba>
		}

		radio.sendPayload(Buffer, radio.bufferSize);
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <start+0x134>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4815      	ldr	r0, [pc, #84]	; (800113c <start+0x134>)
 80010e8:	f7ff fe6c 	bl	8000dc4 <_ZN14RoboIME_SX128011sendPayloadEPhh>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80010ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f0:	4814      	ldr	r0, [pc, #80]	; (8001144 <start+0x13c>)
 80010f2:	f003 f81a 	bl	800412a <HAL_GPIO_TogglePin>
		count ++;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	3301      	adds	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
		HAL_Delay(100);
 80010fc:	2064      	movs	r0, #100	; 0x64
 80010fe:	f002 f995 	bl	800342c <HAL_Delay>
 8001102:	e7c0      	b.n	8001086 <start+0x7e>
	}
	else
	{
		radio.setRobotId(2);
 8001104:	2102      	movs	r1, #2
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <start+0x134>)
 8001108:	f7ff fef2 	bl	8000ef0 <_ZN14RoboIME_SX128010setRobotIdEh>
			if(radio.receivePayload(BufferReceived))
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <start+0x138>)
 800110e:	480b      	ldr	r0, [pc, #44]	; (800113c <start+0x134>)
 8001110:	f7ff fe80 	bl	8000e14 <_ZN14RoboIME_SX128014receivePayloadEPh>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf14      	ite	ne
 800111a:	2301      	movne	r3, #1
 800111c:	2300      	moveq	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <start+0x12a>
			{
				 CDC_Transmit_FS(BufferReceived, radio.bufferSize);
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <start+0x134>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	4619      	mov	r1, r3
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <start+0x138>)
 800112e:	f00a ffc7 	bl	800c0c0 <CDC_Transmit_FS>
			}

			 HAL_Delay(100);
 8001132:	2064      	movs	r0, #100	; 0x64
 8001134:	f002 f97a 	bl	800342c <HAL_Delay>
	}
	}
 8001138:	e7a5      	b.n	8001086 <start+0x7e>
 800113a:	bf00      	nop
 800113c:	200001e4 	.word	0x200001e4
 8001140:	20000258 	.word	0x20000258
 8001144:	40020c00 	.word	0x40020c00

08001148 <_Z41__static_initialization_and_destruction_0ii>:
}
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d107      	bne.n	8001168 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115e:	4293      	cmp	r3, r2
 8001160:	d102      	bne.n	8001168 <_Z41__static_initialization_and_destruction_0ii+0x20>
RoboIME_SX1280 radio;
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001164:	f7ff ff1c 	bl	8000fa0 <_ZN14RoboIME_SX1280C1Ev>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200001e4 	.word	0x200001e4

08001174 <_GLOBAL__sub_I_radio>:
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
 8001178:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff ffe3 	bl	8001148 <_Z41__static_initialization_and_destruction_0ii>
 8001182:	bd80      	pop	{r7, pc}

08001184 <_ZN5RadioC1EP16RadioCallbacks_t>:
     *
     * \param [in]  callbacks     The structure of callbacks function pointers
     *                            to be called on radio interrupts
     *
     */
    Radio( RadioCallbacks_t *callbacks )
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
    {
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <_ZN5RadioC1EP16RadioCallbacks_t+0x68>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	601a      	str	r2, [r3, #0]
        this->txDone = callbacks->txDone;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	605a      	str	r2, [r3, #4]
        this->rxDone = callbacks->rxDone;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	609a      	str	r2, [r3, #8]
        this->rxSyncWordDone = callbacks->rxSyncWordDone;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	60da      	str	r2, [r3, #12]
        this->rxHeaderDone = callbacks->rxHeaderDone;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	611a      	str	r2, [r3, #16]
        this->txTimeout = callbacks->txTimeout;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	615a      	str	r2, [r3, #20]
        this->rxTimeout = callbacks->rxTimeout;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	695a      	ldr	r2, [r3, #20]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
        this->rxError = callbacks->rxError;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	699a      	ldr	r2, [r3, #24]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	61da      	str	r2, [r3, #28]
        this->rangingDone = callbacks->rangingDone;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	69da      	ldr	r2, [r3, #28]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	621a      	str	r2, [r3, #32]
        this->cadDone = callbacks->cadDone;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	6a1a      	ldr	r2, [r3, #32]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
    }
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	0800cc58 	.word	0x0800cc58

080011f0 <_ZN5RadioD1Ev>:
    virtual ~Radio( void ){ };
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <_ZN5RadioD1Ev+0x1c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	0800cc58 	.word	0x0800cc58

08001210 <_ZN5RadioD0Ev>:
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ffe9 	bl	80011f0 <_ZN5RadioD1Ev>
 800121e:	2128      	movs	r1, #40	; 0x28
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f00b fbb7 	bl	800c994 <_ZdlPvj>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <_ZN6SX1280C1EP16RadioCallbacks_t>:
     * \brief Instantiates a SX1280 object and provides API functions to communicates with the radio
     *
     * \param [in]  callbacks      Pointer to the callbacks structure defining
     *                             all callbacks function pointers
     */
    SX1280( RadioCallbacks_t *callbacks ):
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
        // The class members are value-initialiazed in member-initilaizer list
        Radio( callbacks ), OperatingMode( MODE_STDBY_RC ), PacketType( PACKET_TYPE_NONE ),
        LoRaBandwidth( LORA_BW_1600 ), IrqState( false ), PollingMode( false )
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ffa0 	bl	8001184 <_ZN5RadioC1EP16RadioCallbacks_t>
 8001244:	4a10      	ldr	r2, [pc, #64]	; (8001288 <_ZN6SX1280C1EP16RadioCallbacks_t+0x58>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2202      	movs	r2, #2
 800124e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	220f      	movs	r2, #15
 8001256:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	220a      	movs	r2, #10
 800125e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    {
        this->dioIrq        = &SX1280::OnDioIrq;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a05      	ldr	r2, [pc, #20]	; (800128c <_ZN6SX1280C1EP16RadioCallbacks_t+0x5c>)
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	631a      	str	r2, [r3, #48]	; 0x30

        // Warning: this constructor set the LoRaBandwidth member to a valid
        // value, but it is not related to the actual radio configuration!
    }
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	0800cc94 	.word	0x0800cc94
 800128c:	08002291 	.word	0x08002291

08001290 <_ZN6SX1280D1Ev>:

    virtual ~SX1280( )
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    {
 8001298:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <_ZN6SX1280D1Ev+0x20>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ffa5 	bl	80011f0 <_ZN5RadioD1Ev>
    }
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	0800cc94 	.word	0x0800cc94

080012b4 <_ZN6SX1280D0Ev>:
    virtual ~SX1280( )
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    }
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ffe7 	bl	8001290 <_ZN6SX1280D1Ev>
 80012c2:	2138      	movs	r1, #56	; 0x38
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f00b fb65 	bl	800c994 <_ZdlPvj>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t>:
// This code handles cases where assert_param is undefined
#ifndef assert_param
#define assert_param( ... )
#endif

SX1280Hal::SX1280Hal( SPI_HandleTypeDef* hspi,
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	807b      	strh	r3, [r7, #2]
                      RadioCallbacks_t *callbacks )
        :   SX1280( callbacks ),
            RadioNssPort( nssPort ), RadioNssPin( nssPin ),
            RadioResetPort( rstPort ), RadioResetPin( rstPin ),
            RadioCtsnPort( nullptr ), RadioCtsnPin( 0 ),
            BUSYPort( busyPort ), BUSYPin( busyPin )
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ffa2 	bl	8001230 <_ZN6SX1280C1EP16RadioCallbacks_t>
 80012ec:	4a16      	ldr	r2, [pc, #88]	; (8001348 <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t+0x74>)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6a3a      	ldr	r2, [r7, #32]
 8001304:	645a      	str	r2, [r3, #68]	; 0x44
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800130a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	64da      	str	r2, [r3, #76]	; 0x4c
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	655a      	str	r2, [r3, #84]	; 0x54
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8bba      	ldrh	r2, [r7, #28]
 8001326:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2200      	movs	r2, #0
 8001334:	661a      	str	r2, [r3, #96]	; 0x60
{
    RadioSpi = hspi;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	639a      	str	r2, [r3, #56]	; 0x38

    //HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
    //HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_SET);
}
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	0800cc10 	.word	0x0800cc10

0800134c <_ZN9SX1280HalD1Ev>:

SX1280Hal::~SX1280Hal( void )
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	4a05      	ldr	r2, [pc, #20]	; (800136c <_ZN9SX1280HalD1Ev+0x20>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff97 	bl	8001290 <_ZN6SX1280D1Ev>
{
};
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	0800cc10 	.word	0x0800cc10

08001370 <_ZN9SX1280HalD0Ev>:
SX1280Hal::~SX1280Hal( void )
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
};
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffe7 	bl	800134c <_ZN9SX1280HalD1Ev>
 800137e:	2164      	movs	r1, #100	; 0x64
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f00b fb07 	bl	800c994 <_ZdlPvj>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_ZN9SX1280Hal9IoIrqInitEM6SX1280FvvE>:

void SX1280Hal::IoIrqInit( DioIrqHandler irqHandler )
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	e883 0006 	stmia.w	r3, {r1, r2}
    assert_param( RadioSpi != NULL);
    // BUSY.mode( PullNone );
    //Conexão entre interrupt do HAL e da biblioteca
    //irqHandler é o ponteiro para a função que deve ser chamada em caso de interrupt
    RadioIrqHandler = irqHandler;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	335c      	adds	r3, #92	; 0x5c
 80013a2:	1d3a      	adds	r2, r7, #4
 80013a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_ZN9SX1280Hal5ResetEv>:

void SX1280Hal::Reset( void )
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	//Por que desliga o IRQ?
	/* Habilitar o delay de outra forma*/
    //__disable_irq( );
    HAL_Delay( 20 );
 80013c0:	2014      	movs	r0, #20
 80013c2:	f002 f833 	bl	800342c <HAL_Delay>
    HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_RESET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80013d0:	2200      	movs	r2, #0
 80013d2:	4619      	mov	r1, r3
 80013d4:	f002 fe90 	bl	80040f8 <HAL_GPIO_WritePin>
    HAL_Delay( 50 );
 80013d8:	2032      	movs	r0, #50	; 0x32
 80013da:	f002 f827 	bl	800342c <HAL_Delay>
    HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_SET);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80013e8:	2201      	movs	r2, #1
 80013ea:	4619      	mov	r1, r3
 80013ec:	f002 fe84 	bl	80040f8 <HAL_GPIO_WritePin>
    HAL_Delay( 20 );
 80013f0:	2014      	movs	r0, #20
 80013f2:	f002 f81b 	bl	800342c <HAL_Delay>
   // __enable_irq( );
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_ZN9SX1280Hal6WakeupEv>:

void SX1280Hal::Wakeup( void )
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001406:	b672      	cpsid	i
}
 8001408:	bf00      	nop
    __disable_irq( );

    //Don't wait for BUSY here

    if( RadioSpi != NULL )
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140e:	2b00      	cmp	r3, #0
 8001410:	d019      	beq.n	8001446 <_ZN9SX1280Hal6WakeupEv+0x48>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	f002 fe6a 	bl	80040f8 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_GET_STATUS );
 8001424:	21c0      	movs	r1, #192	; 0xc0
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 fad4 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 800142c:	2100      	movs	r1, #0
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fad0 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800143e:	2201      	movs	r2, #1
 8001440:	4619      	mov	r1, r3
 8001442:	f002 fe59 	bl	80040f8 <HAL_GPIO_WritePin>
    }

    // Wait for chip to be ready.
    WaitOnBusy( );
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001450:	4619      	mov	r1, r3
 8001452:	4610      	mov	r0, r2
 8001454:	f002 fe38 	bl	80040c8 <HAL_GPIO_ReadPin>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	bf14      	ite	ne
 800145e:	2301      	movne	r3, #1
 8001460:	2300      	moveq	r3, #0
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d000      	beq.n	800146a <_ZN9SX1280Hal6WakeupEv+0x6c>
 8001468:	e7ed      	b.n	8001446 <_ZN9SX1280Hal6WakeupEv+0x48>
  __ASM volatile ("cpsie i" : : : "memory");
 800146a:	b662      	cpsie	i
}
 800146c:	bf00      	nop

    __enable_irq( );
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht>:

void SX1280Hal::WriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	461a      	mov	r2, r3
 8001482:	460b      	mov	r3, r1
 8001484:	72fb      	strb	r3, [r7, #11]
 8001486:	4613      	mov	r3, r2
 8001488:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001494:	4619      	mov	r1, r3
 8001496:	4610      	mov	r0, r2
 8001498:	f002 fe16 	bl	80040c8 <HAL_GPIO_ReadPin>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	bf14      	ite	ne
 80014a2:	2301      	movne	r3, #1
 80014a4:	2300      	moveq	r3, #0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d000      	beq.n	80014ae <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x38>
 80014ac:	e7ed      	b.n	800148a <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x14>

    if( RadioSpi != NULL )
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d028      	beq.n	8001508 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x92>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014c0:	2200      	movs	r2, #0
 80014c2:	4619      	mov	r1, r3
 80014c4:	f002 fe18 	bl	80040f8 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( ( uint8_t )command );
 80014c8:	7afb      	ldrb	r3, [r7, #11]
 80014ca:	4619      	mov	r1, r3
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 fa81 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80014d2:	2300      	movs	r3, #0
 80014d4:	82fb      	strh	r3, [r7, #22]
 80014d6:	8afa      	ldrh	r2, [r7, #22]
 80014d8:	893b      	ldrh	r3, [r7, #8]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d20b      	bcs.n	80014f6 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x80>
        {
            SpiTransmitReceiveByte( buffer[i] );
 80014de:	8afb      	ldrh	r3, [r7, #22]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 fa73 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80014ee:	8afb      	ldrh	r3, [r7, #22]
 80014f0:	3301      	adds	r3, #1
 80014f2:	82fb      	strh	r3, [r7, #22]
 80014f4:	e7ef      	b.n	80014d6 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x60>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001500:	2201      	movs	r2, #1
 8001502:	4619      	mov	r1, r3
 8001504:	f002 fdf8 	bl	80040f8 <HAL_GPIO_WritePin>
    }

    if( command != RADIO_SET_SLEEP )
 8001508:	7afb      	ldrb	r3, [r7, #11]
 800150a:	2b84      	cmp	r3, #132	; 0x84
 800150c:	d011      	beq.n	8001532 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0xbc>
    {
        WaitOnBusy( );
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001518:	4619      	mov	r1, r3
 800151a:	4610      	mov	r0, r2
 800151c:	f002 fdd4 	bl	80040c8 <HAL_GPIO_ReadPin>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf14      	ite	ne
 8001526:	2301      	movne	r3, #1
 8001528:	2300      	moveq	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d000      	beq.n	8001532 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0xbc>
 8001530:	e7ed      	b.n	800150e <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x98>
    }
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht>:

void SX1280Hal::ReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800153a:	b590      	push	{r4, r7, lr}
 800153c:	b087      	sub	sp, #28
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	461a      	mov	r2, r3
 8001546:	460b      	mov	r3, r1
 8001548:	72fb      	strb	r3, [r7, #11]
 800154a:	4613      	mov	r3, r2
 800154c:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f002 fdb4 	bl	80040c8 <HAL_GPIO_ReadPin>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	bf14      	ite	ne
 8001566:	2301      	movne	r3, #1
 8001568:	2300      	moveq	r3, #0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d000      	beq.n	8001572 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x38>
 8001570:	e7ed      	b.n	800154e <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x14>

    if( RadioSpi != NULL )
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	2b00      	cmp	r3, #0
 8001578:	d042      	beq.n	8001600 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xc6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001584:	2200      	movs	r2, #0
 8001586:	4619      	mov	r1, r3
 8001588:	f002 fdb6 	bl	80040f8 <HAL_GPIO_WritePin>
        if( command == RADIO_GET_STATUS )
 800158c:	7afb      	ldrb	r3, [r7, #11]
 800158e:	2bc0      	cmp	r3, #192	; 0xc0
 8001590:	d111      	bne.n	80015b6 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x7c>
        {
            buffer[0] = SpiTransmitReceiveByte( ( uint8_t )command );
 8001592:	7afb      	ldrb	r3, [r7, #11]
 8001594:	4619      	mov	r1, r3
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 fa1c 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	701a      	strb	r2, [r3, #0]
            SpiTransmitReceiveByte( 0 );
 80015a4:	2100      	movs	r1, #0
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f000 fa14 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            SpiTransmitReceiveByte( 0 );
 80015ac:	2100      	movs	r1, #0
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f000 fa10 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80015b4:	e01b      	b.n	80015ee <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xb4>
        }
        else
        {
            SpiTransmitReceiveByte( ( uint8_t )command );
 80015b6:	7afb      	ldrb	r3, [r7, #11]
 80015b8:	4619      	mov	r1, r3
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 fa0a 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            SpiTransmitReceiveByte( 0 );
 80015c0:	2100      	movs	r1, #0
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 fa06 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            for( uint16_t i = 0; i < size; i++ )
 80015c8:	2300      	movs	r3, #0
 80015ca:	82fb      	strh	r3, [r7, #22]
 80015cc:	8afa      	ldrh	r2, [r7, #22]
 80015ce:	893b      	ldrh	r3, [r7, #8]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d20c      	bcs.n	80015ee <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xb4>
            {
                 buffer[i] = SpiTransmitReceiveByte( 0 );
 80015d4:	8afb      	ldrh	r3, [r7, #22]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	18d4      	adds	r4, r2, r3
 80015da:	2100      	movs	r1, #0
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f9f9 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80015e2:	4603      	mov	r3, r0
 80015e4:	7023      	strb	r3, [r4, #0]
            for( uint16_t i = 0; i < size; i++ )
 80015e6:	8afb      	ldrh	r3, [r7, #22]
 80015e8:	3301      	adds	r3, #1
 80015ea:	82fb      	strh	r3, [r7, #22]
 80015ec:	e7ee      	b.n	80015cc <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x92>
            }
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015f8:	2201      	movs	r2, #1
 80015fa:	4619      	mov	r1, r3
 80015fc:	f002 fd7c 	bl	80040f8 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800160a:	4619      	mov	r1, r3
 800160c:	4610      	mov	r0, r2
 800160e:	f002 fd5b 	bl	80040c8 <HAL_GPIO_ReadPin>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf14      	ite	ne
 8001618:	2301      	movne	r3, #1
 800161a:	2300      	moveq	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d000      	beq.n	8001624 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xea>
 8001622:	e7ed      	b.n	8001600 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xc6>
}
 8001624:	bf00      	nop
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd90      	pop	{r4, r7, pc}

0800162c <_ZN9SX1280Hal13WriteRegisterEtPht>:

void SX1280Hal::WriteRegister( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	461a      	mov	r2, r3
 8001638:	460b      	mov	r3, r1
 800163a:	817b      	strh	r3, [r7, #10]
 800163c:	4613      	mov	r3, r2
 800163e:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800164a:	4619      	mov	r1, r3
 800164c:	4610      	mov	r0, r2
 800164e:	f002 fd3b 	bl	80040c8 <HAL_GPIO_ReadPin>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2300      	moveq	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d000      	beq.n	8001664 <_ZN9SX1280Hal13WriteRegisterEtPht+0x38>
 8001662:	e7ed      	b.n	8001640 <_ZN9SX1280Hal13WriteRegisterEtPht+0x14>

    if( RadioSpi != NULL )
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001668:	2b00      	cmp	r3, #0
 800166a:	d035      	beq.n	80016d8 <_ZN9SX1280Hal13WriteRegisterEtPht+0xac>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	f002 fd3d 	bl	80040f8 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_WRITE_REGISTER );
 800167e:	2118      	movs	r1, #24
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 f9a7 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( ( address & 0xFF00 ) >> 8 );
 8001686:	897b      	ldrh	r3, [r7, #10]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	b29b      	uxth	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4619      	mov	r1, r3
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 f99f 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( address & 0x00FF );
 8001696:	897b      	ldrh	r3, [r7, #10]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	4619      	mov	r1, r3
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 f999 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80016a2:	2300      	movs	r3, #0
 80016a4:	82fb      	strh	r3, [r7, #22]
 80016a6:	8afa      	ldrh	r2, [r7, #22]
 80016a8:	893b      	ldrh	r3, [r7, #8]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d20b      	bcs.n	80016c6 <_ZN9SX1280Hal13WriteRegisterEtPht+0x9a>
        {
            SpiTransmitReceiveByte( buffer[i] );
 80016ae:	8afb      	ldrh	r3, [r7, #22]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4619      	mov	r1, r3
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f000 f98b 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80016be:	8afb      	ldrh	r3, [r7, #22]
 80016c0:	3301      	adds	r3, #1
 80016c2:	82fb      	strh	r3, [r7, #22]
 80016c4:	e7ef      	b.n	80016a6 <_ZN9SX1280Hal13WriteRegisterEtPht+0x7a>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016d0:	2201      	movs	r2, #1
 80016d2:	4619      	mov	r1, r3
 80016d4:	f002 fd10 	bl	80040f8 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f002 fcef 	bl	80040c8 <HAL_GPIO_ReadPin>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d000      	beq.n	80016fc <_ZN9SX1280Hal13WriteRegisterEtPht+0xd0>
 80016fa:	e7ed      	b.n	80016d8 <_ZN9SX1280Hal13WriteRegisterEtPht+0xac>
}
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_ZN9SX1280Hal13WriteRegisterEth>:

void SX1280Hal::WriteRegister( uint16_t address, uint8_t value )
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
 8001710:	4613      	mov	r3, r2
 8001712:	707b      	strb	r3, [r7, #1]
    WriteRegister( address, &value, 1 );
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	3318      	adds	r3, #24
 800171a:	681c      	ldr	r4, [r3, #0]
 800171c:	1c7a      	adds	r2, r7, #1
 800171e:	8879      	ldrh	r1, [r7, #2]
 8001720:	2301      	movs	r3, #1
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	47a0      	blx	r4
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bd90      	pop	{r4, r7, pc}

0800172e <_ZN9SX1280Hal12ReadRegisterEtPht>:

void SX1280Hal::ReadRegister( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800172e:	b590      	push	{r4, r7, lr}
 8001730:	b087      	sub	sp, #28
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	461a      	mov	r2, r3
 800173a:	460b      	mov	r3, r1
 800173c:	817b      	strh	r3, [r7, #10]
 800173e:	4613      	mov	r3, r2
 8001740:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800174c:	4619      	mov	r1, r3
 800174e:	4610      	mov	r0, r2
 8001750:	f002 fcba 	bl	80040c8 <HAL_GPIO_ReadPin>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d000      	beq.n	8001766 <_ZN9SX1280Hal12ReadRegisterEtPht+0x38>
 8001764:	e7ed      	b.n	8001742 <_ZN9SX1280Hal12ReadRegisterEtPht+0x14>

    if( RadioSpi != NULL )
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176a:	2b00      	cmp	r3, #0
 800176c:	d03a      	beq.n	80017e4 <_ZN9SX1280Hal12ReadRegisterEtPht+0xb6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001778:	2200      	movs	r2, #0
 800177a:	4619      	mov	r1, r3
 800177c:	f002 fcbc 	bl	80040f8 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_READ_REGISTER );
 8001780:	2119      	movs	r1, #25
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f926 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( ( address & 0xFF00 ) >> 8 );
 8001788:	897b      	ldrh	r3, [r7, #10]
 800178a:	0a1b      	lsrs	r3, r3, #8
 800178c:	b29b      	uxth	r3, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4619      	mov	r1, r3
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 f91e 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( address & 0x00FF );
 8001798:	897b      	ldrh	r3, [r7, #10]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	4619      	mov	r1, r3
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 f918 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 80017a4:	2100      	movs	r1, #0
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f914 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80017ac:	2300      	movs	r3, #0
 80017ae:	82fb      	strh	r3, [r7, #22]
 80017b0:	8afa      	ldrh	r2, [r7, #22]
 80017b2:	893b      	ldrh	r3, [r7, #8]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d20c      	bcs.n	80017d2 <_ZN9SX1280Hal12ReadRegisterEtPht+0xa4>
        {
            buffer[i] = SpiTransmitReceiveByte( 0 );
 80017b8:	8afb      	ldrh	r3, [r7, #22]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	18d4      	adds	r4, r2, r3
 80017be:	2100      	movs	r1, #0
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f907 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80017c6:	4603      	mov	r3, r0
 80017c8:	7023      	strb	r3, [r4, #0]
        for( uint16_t i = 0; i < size; i++ )
 80017ca:	8afb      	ldrh	r3, [r7, #22]
 80017cc:	3301      	adds	r3, #1
 80017ce:	82fb      	strh	r3, [r7, #22]
 80017d0:	e7ee      	b.n	80017b0 <_ZN9SX1280Hal12ReadRegisterEtPht+0x82>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017dc:	2201      	movs	r2, #1
 80017de:	4619      	mov	r1, r3
 80017e0:	f002 fc8a 	bl	80040f8 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80017ee:	4619      	mov	r1, r3
 80017f0:	4610      	mov	r0, r2
 80017f2:	f002 fc69 	bl	80040c8 <HAL_GPIO_ReadPin>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d000      	beq.n	8001808 <_ZN9SX1280Hal12ReadRegisterEtPht+0xda>
 8001806:	e7ed      	b.n	80017e4 <_ZN9SX1280Hal12ReadRegisterEtPht+0xb6>
}
 8001808:	bf00      	nop
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd90      	pop	{r4, r7, pc}

08001810 <_ZN9SX1280Hal12ReadRegisterEt>:

uint8_t SX1280Hal::ReadRegister( uint16_t address )
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
    uint8_t data;

    ReadRegister( address, &data, 1 );
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3320      	adds	r3, #32
 8001822:	681c      	ldr	r4, [r3, #0]
 8001824:	f107 020f 	add.w	r2, r7, #15
 8001828:	8879      	ldrh	r1, [r7, #2]
 800182a:	2301      	movs	r3, #1
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	47a0      	blx	r4
    return data;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}

0800183a <_ZN9SX1280Hal11WriteBufferEhPhh>:

void SX1280Hal::WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	461a      	mov	r2, r3
 8001846:	460b      	mov	r3, r1
 8001848:	72fb      	strb	r3, [r7, #11]
 800184a:	4613      	mov	r3, r2
 800184c:	72bb      	strb	r3, [r7, #10]
    WaitOnBusy( );
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001858:	4619      	mov	r1, r3
 800185a:	4610      	mov	r0, r2
 800185c:	f002 fc34 	bl	80040c8 <HAL_GPIO_ReadPin>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf14      	ite	ne
 8001866:	2301      	movne	r3, #1
 8001868:	2300      	moveq	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d000      	beq.n	8001872 <_ZN9SX1280Hal11WriteBufferEhPhh+0x38>
 8001870:	e7ed      	b.n	800184e <_ZN9SX1280Hal11WriteBufferEhPhh+0x14>

    if( RadioSpi != NULL )
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001876:	2b00      	cmp	r3, #0
 8001878:	d02d      	beq.n	80018d6 <_ZN9SX1280Hal11WriteBufferEhPhh+0x9c>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	f002 fc36 	bl	80040f8 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_WRITE_BUFFER );
 800188c:	211a      	movs	r1, #26
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 f8a0 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( offset );
 8001894:	7afb      	ldrb	r3, [r7, #11]
 8001896:	4619      	mov	r1, r3
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f89b 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 800189e:	2300      	movs	r3, #0
 80018a0:	82fb      	strh	r3, [r7, #22]
 80018a2:	7abb      	ldrb	r3, [r7, #10]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	8afa      	ldrh	r2, [r7, #22]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d20b      	bcs.n	80018c4 <_ZN9SX1280Hal11WriteBufferEhPhh+0x8a>
        {
            SpiTransmitReceiveByte( buffer[i] );
 80018ac:	8afb      	ldrh	r3, [r7, #22]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f88c 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80018bc:	8afb      	ldrh	r3, [r7, #22]
 80018be:	3301      	adds	r3, #1
 80018c0:	82fb      	strh	r3, [r7, #22]
 80018c2:	e7ee      	b.n	80018a2 <_ZN9SX1280Hal11WriteBufferEhPhh+0x68>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018ce:	2201      	movs	r2, #1
 80018d0:	4619      	mov	r1, r3
 80018d2:	f002 fc11 	bl	80040f8 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80018e0:	4619      	mov	r1, r3
 80018e2:	4610      	mov	r0, r2
 80018e4:	f002 fbf0 	bl	80040c8 <HAL_GPIO_ReadPin>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bf14      	ite	ne
 80018ee:	2301      	movne	r3, #1
 80018f0:	2300      	moveq	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d000      	beq.n	80018fa <_ZN9SX1280Hal11WriteBufferEhPhh+0xc0>
 80018f8:	e7ed      	b.n	80018d6 <_ZN9SX1280Hal11WriteBufferEhPhh+0x9c>
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_ZN9SX1280Hal10ReadBufferEhPhh>:

void SX1280Hal::ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001902:	b590      	push	{r4, r7, lr}
 8001904:	b087      	sub	sp, #28
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	461a      	mov	r2, r3
 800190e:	460b      	mov	r3, r1
 8001910:	72fb      	strb	r3, [r7, #11]
 8001912:	4613      	mov	r3, r2
 8001914:	72bb      	strb	r3, [r7, #10]
    WaitOnBusy( );
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f002 fbd0 	bl	80040c8 <HAL_GPIO_ReadPin>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d000      	beq.n	800193a <_ZN9SX1280Hal10ReadBufferEhPhh+0x38>
 8001938:	e7ed      	b.n	8001916 <_ZN9SX1280Hal10ReadBufferEhPhh+0x14>

    if( RadioSpi != NULL )
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193e:	2b00      	cmp	r3, #0
 8001940:	d032      	beq.n	80019a8 <_ZN9SX1280Hal10ReadBufferEhPhh+0xa6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800194c:	2200      	movs	r2, #0
 800194e:	4619      	mov	r1, r3
 8001950:	f002 fbd2 	bl	80040f8 <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_READ_BUFFER );
 8001954:	211b      	movs	r1, #27
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f83c 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( offset );
 800195c:	7afb      	ldrb	r3, [r7, #11]
 800195e:	4619      	mov	r1, r3
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 f837 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 8001966:	2100      	movs	r1, #0
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 f833 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 800196e:	2300      	movs	r3, #0
 8001970:	82fb      	strh	r3, [r7, #22]
 8001972:	7abb      	ldrb	r3, [r7, #10]
 8001974:	b29b      	uxth	r3, r3
 8001976:	8afa      	ldrh	r2, [r7, #22]
 8001978:	429a      	cmp	r2, r3
 800197a:	d20c      	bcs.n	8001996 <_ZN9SX1280Hal10ReadBufferEhPhh+0x94>
        {
            buffer[i] = SpiTransmitReceiveByte( 0 );
 800197c:	8afb      	ldrh	r3, [r7, #22]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	18d4      	adds	r4, r2, r3
 8001982:	2100      	movs	r1, #0
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f825 	bl	80019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 800198a:	4603      	mov	r3, r0
 800198c:	7023      	strb	r3, [r4, #0]
        for( uint16_t i = 0; i < size; i++ )
 800198e:	8afb      	ldrh	r3, [r7, #22]
 8001990:	3301      	adds	r3, #1
 8001992:	82fb      	strh	r3, [r7, #22]
 8001994:	e7ed      	b.n	8001972 <_ZN9SX1280Hal10ReadBufferEhPhh+0x70>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019a0:	2201      	movs	r2, #1
 80019a2:	4619      	mov	r1, r3
 80019a4:	f002 fba8 	bl	80040f8 <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80019b2:	4619      	mov	r1, r3
 80019b4:	4610      	mov	r0, r2
 80019b6:	f002 fb87 	bl	80040c8 <HAL_GPIO_ReadPin>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf14      	ite	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	2300      	moveq	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d000      	beq.n	80019cc <_ZN9SX1280Hal10ReadBufferEhPhh+0xca>
 80019ca:	e7ed      	b.n	80019a8 <_ZN9SX1280Hal10ReadBufferEhPhh+0xa6>
}
 80019cc:	bf00      	nop
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd90      	pop	{r4, r7, pc}

080019d4 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>:

uint8_t SX1280Hal::SpiTransmitReceiveByte( uint8_t byte )
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	70fb      	strb	r3, [r7, #3]
	//Se for IT ou DMA a função acaba antes de terminar de transmitir
	uint8_t receivedByte;
	HAL_SPI_TransmitReceive(RadioSpi, &byte, &receivedByte, 1, 100);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019e4:	f107 020f 	add.w	r2, r7, #15
 80019e8:	1cf9      	adds	r1, r7, #3
 80019ea:	2364      	movs	r3, #100	; 0x64
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2301      	movs	r3, #1
 80019f0:	f005 fa91 	bl	8006f16 <HAL_SPI_TransmitReceive>
	return receivedByte;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <_ZN9SX1280Hal20HalInterruptCallbackEv>:

void SX1280Hal::HalInterruptCallback(void){
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
	if(RadioIrqHandler != NULL){
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d107      	bne.n	8001a1e <_ZN9SX1280Hal20HalInterruptCallbackEv+0x20>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <_ZN9SX1280Hal20HalInterruptCallbackEv+0x20>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x22>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d019      	beq.n	8001a58 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x5a>
		(this->*RadioIrqHandler)();
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001a2a:	1052      	asrs	r2, r2, #1
 8001a2c:	1899      	adds	r1, r3, r2
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x42>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3e:	e009      	b.n	8001a54 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x56>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001a46:	1052      	asrs	r2, r2, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a50:	4413      	add	r3, r2
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4608      	mov	r0, r1
 8001a56:	4798      	blx	r3
	}
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_ZN6SX12804InitEv>:
 * \brief Radio hardware registers initialization
 */
const RadioRegisters_t RadioRegsInit[] = RADIO_INIT_REGISTERS_VALUE;

void SX1280::Init( void )
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
    Reset( );
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3308      	adds	r3, #8
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4798      	blx	r3
    IoIrqInit( dioIrq );
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3334      	adds	r3, #52	; 0x34
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	322c      	adds	r2, #44	; 0x2c
 8001a80:	ca06      	ldmia	r2, {r1, r2}
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
    Wakeup( );
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	3338      	adds	r3, #56	; 0x38
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
    SetRegistersDefault( );
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f804 	bl	8001aa0 <_ZN6SX128019SetRegistersDefaultEv>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_ZN6SX128019SetRegistersDefaultEv>:

void SX1280::SetRegistersDefault( void )
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    for( int16_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	81fb      	strh	r3, [r7, #14]
    {
        WriteRegister( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    }
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_ZN6SX128018GetFirmwareVersionEv>:

uint16_t SX1280::GetFirmwareVersion( void )
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3324      	adds	r3, #36	; 0x24
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f240 1153 	movw	r1, #339	; 0x153
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	b21c      	sxth	r4, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3324      	adds	r3, #36	; 0x24
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4798      	blx	r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	4323      	orrs	r3, r4
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	b29b      	uxth	r3, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}

08001af8 <_ZN6SX12809GetStatusEv>:

RadioStatus_t SX1280::GetStatus( void )
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
    uint8_t stat = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
    RadioStatus_t status;

    ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3314      	adds	r3, #20
 8001b0a:	681c      	ldr	r4, [r3, #0]
 8001b0c:	f107 020f 	add.w	r2, r7, #15
 8001b10:	2301      	movs	r3, #1
 8001b12:	21c0      	movs	r1, #192	; 0xc0
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	47a0      	blx	r4
    status.Value = stat;
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	733b      	strb	r3, [r7, #12]
    return( status );
 8001b1c:	7b3b      	ldrb	r3, [r7, #12]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd90      	pop	{r4, r7, pc}

08001b26 <_ZN6SX12809GetOpModeEv>:

RadioOperatingModes_t SX1280::GetOpMode( void )
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
    return( OperatingMode );
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>:
    OperatingMode = MODE_SLEEP;
    WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
}

void SX1280::SetStandby( RadioStandbyModes_t standbyConfig )
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
    WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3310      	adds	r3, #16
 8001b52:	681c      	ldr	r4, [r3, #0]
 8001b54:	1cfa      	adds	r2, r7, #3
 8001b56:	2301      	movs	r3, #1
 8001b58:	2180      	movs	r1, #128	; 0x80
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	47a0      	blx	r4
    if( standbyConfig == STDBY_RC )
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d104      	bne.n	8001b6e <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x2e>
    {
        OperatingMode = MODE_STDBY_RC;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8001b6c:	e003      	b.n	8001b76 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x36>
        OperatingMode = MODE_STDBY_XOSC;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2203      	movs	r2, #3
 8001b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}

08001b7e <_ZN6SX12805SetTxE10TickTime_s>:
    WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SX1280::SetTx( TickTime_t timeout )
{
 8001b7e:	b590      	push	{r4, r7, lr}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    buf[0] = timeout.PeriodBase;
 8001b88:	783b      	ldrb	r3, [r7, #0]
 8001b8a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8001b96:	887b      	ldrh	r3, [r7, #2]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	73bb      	strb	r3, [r7, #14]

    ClearIrqStatus( IRQ_RADIO_ALL );
 8001b9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 fad0 	bl	8002146 <_ZN6SX128014ClearIrqStatusEt>

    // If the radio is doing ranging operations, then apply the specific calls
    // prior to SetTx
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f86b 	bl	8001c84 <_ZN6SX128013GetPacketTypeEb>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <_ZN6SX12805SetTxE10TickTime_s+0x48>
    {
        SetRangingRole( RADIO_RANGING_ROLE_MASTER );
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fb41 	bl	8002248 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    }
    WriteCommand( RADIO_SET_TX, buf, 3 );
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	3310      	adds	r3, #16
 8001bcc:	681c      	ldr	r4, [r3, #0]
 8001bce:	f107 020c 	add.w	r2, r7, #12
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	2183      	movs	r1, #131	; 0x83
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	47a0      	blx	r4
    OperatingMode = MODE_TX;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2206      	movs	r2, #6
 8001bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd90      	pop	{r4, r7, pc}

08001bea <_ZN6SX12805SetRxE10TickTime_s>:

void SX1280::SetRx( TickTime_t timeout )
{
 8001bea:	b590      	push	{r4, r7, lr}
 8001bec:	b085      	sub	sp, #20
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    buf[0] = timeout.PeriodBase;
 8001bf4:	783b      	ldrb	r3, [r7, #0]
 8001bf6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	73bb      	strb	r3, [r7, #14]

    ClearIrqStatus( IRQ_RADIO_ALL );
 8001c08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fa9a 	bl	8002146 <_ZN6SX128014ClearIrqStatusEt>

    // If the radio is doing ranging operations, then apply the specific calls
    // prior to SetRx
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
 8001c12:	2101      	movs	r1, #1
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f835 	bl	8001c84 <_ZN6SX128013GetPacketTypeEb>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <_ZN6SX12805SetRxE10TickTime_s+0x48>
    {
        SetRangingRole( RADIO_RANGING_ROLE_SLAVE );
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 fb0b 	bl	8002248 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    }
    WriteCommand( RADIO_SET_RX, buf, 3 );
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3310      	adds	r3, #16
 8001c38:	681c      	ldr	r4, [r3, #0]
 8001c3a:	f107 020c 	add.w	r2, r7, #12
 8001c3e:	2303      	movs	r3, #3
 8001c40:	2182      	movs	r1, #130	; 0x82
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	47a0      	blx	r4
    OperatingMode = MODE_RX;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2205      	movs	r2, #5
 8001c4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd90      	pop	{r4, r7, pc}

08001c56 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>:
{
    WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX1280::SetPacketType( RadioPacketTypes_t packetType )
{
 8001c56:	b590      	push	{r4, r7, lr}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	70fb      	strb	r3, [r7, #3]
    // Save packet type internally to avoid questioning the radio
    this->PacketType = packetType;
 8001c62:	78fa      	ldrb	r2, [r7, #3]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3310      	adds	r3, #16
 8001c70:	681c      	ldr	r4, [r3, #0]
 8001c72:	1cfa      	adds	r2, r7, #3
 8001c74:	2301      	movs	r3, #1
 8001c76:	218a      	movs	r1, #138	; 0x8a
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	47a0      	blx	r4
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}

08001c84 <_ZN6SX128013GetPacketTypeEb>:

RadioPacketTypes_t SX1280::GetPacketType( bool returnLocalCopy )
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
    RadioPacketTypes_t packetType = PACKET_TYPE_NONE;
 8001c90:	230f      	movs	r3, #15
 8001c92:	73fb      	strb	r3, [r7, #15]
    if( returnLocalCopy == false )
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d114      	bne.n	8001cc4 <_ZN6SX128013GetPacketTypeEb+0x40>
    {
        ReadCommand( RADIO_GET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3314      	adds	r3, #20
 8001ca0:	681c      	ldr	r4, [r3, #0]
 8001ca2:	f107 020f 	add.w	r2, r7, #15
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	2103      	movs	r1, #3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	47a0      	blx	r4
        if( this->PacketType != packetType )
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d008      	beq.n	8001ccc <_ZN6SX128013GetPacketTypeEb+0x48>
        {
            this->PacketType = packetType;
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001cc2:	e003      	b.n	8001ccc <_ZN6SX128013GetPacketTypeEb+0x48>
        }
    }
    else
    {
        packetType = this->PacketType;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001cca:	73fb      	strb	r3, [r7, #15]
    }
    return packetType;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd90      	pop	{r4, r7, pc}
	...

08001cd8 <_ZN6SX128014SetRfFrequencyEm>:

void SX1280::SetRfFrequency( uint32_t rfFrequency )
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    uint32_t freq = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]

    freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
 8001ce6:	6838      	ldr	r0, [r7, #0]
 8001ce8:	f7fe fbb0 	bl	800044c <__aeabi_ui2d>
 8001cec:	a312      	add	r3, pc, #72	; (adr r3, 8001d38 <_ZN6SX128014SetRfFrequencyEm+0x60>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fd4f 	bl	8000794 <__aeabi_ddiv>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7fe fe31 	bl	8000964 <__aeabi_d2uiz>
 8001d02:	4603      	mov	r3, r0
 8001d04:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq & 0xFF );
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	72bb      	strb	r3, [r7, #10]
    WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3310      	adds	r3, #16
 8001d22:	681c      	ldr	r4, [r3, #0]
 8001d24:	f107 0208 	add.w	r2, r7, #8
 8001d28:	2303      	movs	r3, #3
 8001d2a:	2186      	movs	r1, #134	; 0x86
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	47a0      	blx	r4
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd90      	pop	{r4, r7, pc}
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	4068cba8 	.word	0x4068cba8

08001d40 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>:

void SX1280::SetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[2];

    // The power value to send on SPI/UART is in the range [0..31] and the
    // physical output power is in the range [-18..13]dBm
    buf[0] = power + 18;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	3312      	adds	r3, #18
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8001d58:	78bb      	ldrb	r3, [r7, #2]
 8001d5a:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3310      	adds	r3, #16
 8001d62:	681c      	ldr	r4, [r3, #0]
 8001d64:	f107 020c 	add.w	r2, r7, #12
 8001d68:	2302      	movs	r3, #2
 8001d6a:	218e      	movs	r1, #142	; 0x8e
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	47a0      	blx	r4
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd90      	pop	{r4, r7, pc}

08001d78 <_ZN6SX128022SetBufferBaseAddressesEhh>:
    WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
    OperatingMode = MODE_CAD;
}

void SX1280::SetBufferBaseAddresses( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
 8001d84:	4613      	mov	r3, r2
 8001d86:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8001d8c:	78bb      	ldrb	r3, [r7, #2]
 8001d8e:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3310      	adds	r3, #16
 8001d96:	681c      	ldr	r4, [r3, #0]
 8001d98:	f107 020c 	add.w	r2, r7, #12
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	218f      	movs	r1, #143	; 0x8f
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	47a0      	blx	r4
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}

08001dac <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>:

void SX1280::SetModulationParams( ModulationParams_t *modParams )
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != modParams->PacketType )
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d005      	beq.n	8001dd0 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x24>
    {
        this->SetPacketType( modParams->PacketType );
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ff43 	bl	8001c56 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( modParams->PacketType )
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d857      	bhi.n	8001e88 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
 8001dd8:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x34>)
 8001dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dde:	bf00      	nop
 8001de0:	08001e21 	.word	0x08001e21
 8001de4:	08001e35 	.word	0x08001e35
 8001de8:	08001e35 	.word	0x08001e35
 8001dec:	08001e53 	.word	0x08001e53
 8001df0:	08001e67 	.word	0x08001e67
 8001df4:	08001e89 	.word	0x08001e89
 8001df8:	08001e89 	.word	0x08001e89
 8001dfc:	08001e89 	.word	0x08001e89
 8001e00:	08001e89 	.word	0x08001e89
 8001e04:	08001e89 	.word	0x08001e89
 8001e08:	08001e89 	.word	0x08001e89
 8001e0c:	08001e89 	.word	0x08001e89
 8001e10:	08001e89 	.word	0x08001e89
 8001e14:	08001e89 	.word	0x08001e89
 8001e18:	08001e89 	.word	0x08001e89
 8001e1c:	08001e7b 	.word	0x08001e7b
    {
        case PACKET_TYPE_GFSK:
            buf[0] = modParams->Params.Gfsk.BitrateBandwidth;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	785b      	ldrb	r3, [r3, #1]
 8001e24:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Gfsk.ModulationIndex;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	789b      	ldrb	r3, [r3, #2]
 8001e2a:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Gfsk.ModulationShaping;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	78db      	ldrb	r3, [r3, #3]
 8001e30:	73bb      	strb	r3, [r7, #14]
            break;
 8001e32:	e029      	b.n	8001e88 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_LORA:
        case PACKET_TYPE_RANGING:
            buf[0] = modParams->Params.LoRa.SpreadingFactor;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	791b      	ldrb	r3, [r3, #4]
 8001e38:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.LoRa.Bandwidth;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	795b      	ldrb	r3, [r3, #5]
 8001e3e:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.LoRa.CodingRate;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	799b      	ldrb	r3, [r3, #6]
 8001e44:	73bb      	strb	r3, [r7, #14]
            this->LoRaBandwidth = modParams->Params.LoRa.Bandwidth;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	795a      	ldrb	r2, [r3, #5]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            break;
 8001e50:	e01a      	b.n	8001e88 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_FLRC:
            buf[0] = modParams->Params.Flrc.BitrateBandwidth;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	79db      	ldrb	r3, [r3, #7]
 8001e56:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Flrc.CodingRate;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	7a1b      	ldrb	r3, [r3, #8]
 8001e5c:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Flrc.ModulationShaping;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	7a5b      	ldrb	r3, [r3, #9]
 8001e62:	73bb      	strb	r3, [r7, #14]
            break;
 8001e64:	e010      	b.n	8001e88 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_BLE:
            buf[0] = modParams->Params.Ble.BitrateBandwidth;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	7a9b      	ldrb	r3, [r3, #10]
 8001e6a:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Ble.ModulationIndex;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	7adb      	ldrb	r3, [r3, #11]
 8001e70:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Ble.ModulationShaping;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	7b1b      	ldrb	r3, [r3, #12]
 8001e76:	73bb      	strb	r3, [r7, #14]
            break;
 8001e78:	e006      	b.n	8001e88 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_NONE:
            buf[0] = NULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	733b      	strb	r3, [r7, #12]
            buf[1] = NULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	737b      	strb	r3, [r7, #13]
            buf[2] = NULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73bb      	strb	r3, [r7, #14]
            break;
 8001e86:	bf00      	nop
    }
    WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	681c      	ldr	r4, [r3, #0]
 8001e90:	f107 020c 	add.w	r2, r7, #12
 8001e94:	2303      	movs	r3, #3
 8001e96:	218b      	movs	r1, #139	; 0x8b
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	47a0      	blx	r4
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}

08001ea4 <_ZN6SX128015SetPacketParamsEP14PacketParams_t>:

void SX1280::SetPacketParams( PacketParams_t *packetParams )
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
    uint8_t buf[7];
    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != packetParams->PacketType )
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d005      	beq.n	8001ec8 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x24>
    {
        this->SetPacketType( packetParams->PacketType );
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fec7 	bl	8001c56 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( packetParams->PacketType )
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	f200 8085 	bhi.w	8001fdc <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
 8001ed2:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x34>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001f19 	.word	0x08001f19
 8001edc:	08001f45 	.word	0x08001f45
 8001ee0:	08001f45 	.word	0x08001f45
 8001ee4:	08001f6d 	.word	0x08001f6d
 8001ee8:	08001f99 	.word	0x08001f99
 8001eec:	08001fdd 	.word	0x08001fdd
 8001ef0:	08001fdd 	.word	0x08001fdd
 8001ef4:	08001fdd 	.word	0x08001fdd
 8001ef8:	08001fdd 	.word	0x08001fdd
 8001efc:	08001fdd 	.word	0x08001fdd
 8001f00:	08001fdd 	.word	0x08001fdd
 8001f04:	08001fdd 	.word	0x08001fdd
 8001f08:	08001fdd 	.word	0x08001fdd
 8001f0c:	08001fdd 	.word	0x08001fdd
 8001f10:	08001fdd 	.word	0x08001fdd
 8001f14:	08001fbf 	.word	0x08001fbf
    {
        case PACKET_TYPE_GFSK:
            buf[0] = packetParams->Params.Gfsk.PreambleLength;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	785b      	ldrb	r3, [r3, #1]
 8001f1c:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Gfsk.SyncWordLength;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	789b      	ldrb	r3, [r3, #2]
 8001f22:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Gfsk.SyncWordMatch;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	78db      	ldrb	r3, [r3, #3]
 8001f28:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Gfsk.HeaderType;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	791b      	ldrb	r3, [r3, #4]
 8001f2e:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.Gfsk.PayloadLength;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	795b      	ldrb	r3, [r3, #5]
 8001f34:	733b      	strb	r3, [r7, #12]
            buf[5] = packetParams->Params.Gfsk.CrcLength;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	799b      	ldrb	r3, [r3, #6]
 8001f3a:	737b      	strb	r3, [r7, #13]
            buf[6] = packetParams->Params.Gfsk.Whitening;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	79db      	ldrb	r3, [r3, #7]
 8001f40:	73bb      	strb	r3, [r7, #14]
            break;
 8001f42:	e04b      	b.n	8001fdc <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_LORA:
        case PACKET_TYPE_RANGING:
            buf[0] = packetParams->Params.LoRa.PreambleLength;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	7a1b      	ldrb	r3, [r3, #8]
 8001f48:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.LoRa.HeaderType;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	7a5b      	ldrb	r3, [r3, #9]
 8001f4e:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.LoRa.PayloadLength;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	7a9b      	ldrb	r3, [r3, #10]
 8001f54:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.LoRa.Crc;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	7adb      	ldrb	r3, [r3, #11]
 8001f5a:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.LoRa.InvertIQ;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	7b1b      	ldrb	r3, [r3, #12]
 8001f60:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73bb      	strb	r3, [r7, #14]
            break;
 8001f6a:	e037      	b.n	8001fdc <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_FLRC:
            buf[0] = packetParams->Params.Flrc.PreambleLength;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	7b5b      	ldrb	r3, [r3, #13]
 8001f70:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Flrc.SyncWordLength;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	7b9b      	ldrb	r3, [r3, #14]
 8001f76:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Flrc.SyncWordMatch;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	7bdb      	ldrb	r3, [r3, #15]
 8001f7c:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Flrc.HeaderType;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	7c1b      	ldrb	r3, [r3, #16]
 8001f82:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.Flrc.PayloadLength;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	7c5b      	ldrb	r3, [r3, #17]
 8001f88:	733b      	strb	r3, [r7, #12]
            buf[5] = packetParams->Params.Flrc.CrcLength;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	7c9b      	ldrb	r3, [r3, #18]
 8001f8e:	737b      	strb	r3, [r7, #13]
            buf[6] = packetParams->Params.Flrc.Whitening;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	7cdb      	ldrb	r3, [r3, #19]
 8001f94:	73bb      	strb	r3, [r7, #14]
            break;
 8001f96:	e021      	b.n	8001fdc <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_BLE:
            buf[0] = packetParams->Params.Ble.ConnectionState;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	7d1b      	ldrb	r3, [r3, #20]
 8001f9c:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Ble.CrcLength;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	7d5b      	ldrb	r3, [r3, #21]
 8001fa2:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Ble.BleTestPayload;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	7d9b      	ldrb	r3, [r3, #22]
 8001fa8:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Ble.Whitening;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	7ddb      	ldrb	r3, [r3, #23]
 8001fae:	72fb      	strb	r3, [r7, #11]
            buf[4] = NULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73bb      	strb	r3, [r7, #14]
            break;
 8001fbc:	e00e      	b.n	8001fdc <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_NONE:
            buf[0] = NULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	723b      	strb	r3, [r7, #8]
            buf[1] = NULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	727b      	strb	r3, [r7, #9]
            buf[2] = NULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	72bb      	strb	r3, [r7, #10]
            buf[3] = NULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	72fb      	strb	r3, [r7, #11]
            buf[4] = NULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	73bb      	strb	r3, [r7, #14]
            break;
 8001fda:	bf00      	nop
    }
    WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3310      	adds	r3, #16
 8001fe2:	681c      	ldr	r4, [r3, #0]
 8001fe4:	f107 0208 	add.w	r2, r7, #8
 8001fe8:	2307      	movs	r3, #7
 8001fea:	218c      	movs	r1, #140	; 0x8c
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	47a0      	blx	r4
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <_ZN6SX128017GetRxBufferStatusEPhS0_>:
{
    this->WriteRegister( REG_LR_PREAMBLELENGTH, ( this->ReadRegister( REG_LR_PREAMBLELENGTH ) & MASK_FORCE_PREAMBLELENGTH ) | preambleLength );
}

void SX1280::GetRxBufferStatus( uint8_t *rxPayloadLength, uint8_t *rxStartBufferPointer )
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
    uint8_t status[2];

    ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3314      	adds	r3, #20
 800200a:	681c      	ldr	r4, [r3, #0]
 800200c:	f107 0214 	add.w	r2, r7, #20
 8002010:	2302      	movs	r3, #2
 8002012:	2117      	movs	r1, #23
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	47a0      	blx	r4

    // In case of LORA fixed header, the rxPayloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( this -> GetPacketType( true ) == PACKET_TYPE_LORA ) && ( ReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 8002018:	2101      	movs	r1, #1
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f7ff fe32 	bl	8001c84 <_ZN6SX128013GetPacketTypeEb>
 8002020:	4603      	mov	r3, r0
 8002022:	2b01      	cmp	r3, #1
 8002024:	d10e      	bne.n	8002044 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4c>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3324      	adds	r3, #36	; 0x24
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f640 1103 	movw	r1, #2307	; 0x903
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	4798      	blx	r3
 8002036:	4603      	mov	r3, r0
 8002038:	09db      	lsrs	r3, r3, #7
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4c>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4e>
 8002044:	2300      	movs	r3, #0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00c      	beq.n	8002064 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x6c>
    {
        *rxPayloadLength = ReadRegister( REG_LR_PAYLOADLENGTH );
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3324      	adds	r3, #36	; 0x24
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f640 1101 	movw	r1, #2305	; 0x901
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	4798      	blx	r3
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	e014      	b.n	800208e <_ZN6SX128017GetRxBufferStatusEPhS0_+0x96>
    }
    else if( this -> GetPacketType( true ) == PACKET_TYPE_BLE )
 8002064:	2101      	movs	r1, #1
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7ff fe0c 	bl	8001c84 <_ZN6SX128013GetPacketTypeEb>
 800206c:	4603      	mov	r3, r0
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf0c      	ite	eq
 8002072:	2301      	moveq	r3, #1
 8002074:	2300      	movne	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x90>
    {
        // In the case of BLE, the size returned in status[0] do not include the 2-byte length PDU header
        // so it is added there
        *rxPayloadLength = status[0] + 2;
 800207c:	7d3b      	ldrb	r3, [r7, #20]
 800207e:	3302      	adds	r3, #2
 8002080:	b2da      	uxtb	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	e002      	b.n	800208e <_ZN6SX128017GetRxBufferStatusEPhS0_+0x96>
    }
    else
    {
        *rxPayloadLength = status[0];
 8002088:	7d3a      	ldrb	r2, [r7, #20]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	701a      	strb	r2, [r3, #0]
    }

    *rxStartBufferPointer = status[1];
 800208e:	7d7a      	ldrb	r2, [r7, #21]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	701a      	strb	r2, [r3, #0]
}
 8002094:	bf00      	nop
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd90      	pop	{r4, r7, pc}

0800209c <_ZN6SX128015SetDioIrqParamsEtttt>:

    return ( int8_t ) ( -raw / 2 );
}

void SX1280::SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	4608      	mov	r0, r1
 80020a6:	4611      	mov	r1, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	4603      	mov	r3, r0
 80020ac:	817b      	strh	r3, [r7, #10]
 80020ae:	460b      	mov	r3, r1
 80020b0:	813b      	strh	r3, [r7, #8]
 80020b2:	4613      	mov	r3, r2
 80020b4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80020b6:	897b      	ldrh	r3, [r7, #10]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	743b      	strb	r3, [r7, #16]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80020c0:	897b      	ldrh	r3, [r7, #10]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80020c6:	893b      	ldrh	r3, [r7, #8]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80020d0:	893b      	ldrh	r3, [r7, #8]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	b29b      	uxth	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80020e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	75bb      	strb	r3, [r7, #22]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80020f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	75fb      	strb	r3, [r7, #23]
    WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3310      	adds	r3, #16
 80020fc:	681c      	ldr	r4, [r3, #0]
 80020fe:	f107 0210 	add.w	r2, r7, #16
 8002102:	2308      	movs	r3, #8
 8002104:	218d      	movs	r1, #141	; 0x8d
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	47a0      	blx	r4
}
 800210a:	bf00      	nop
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}

08002112 <_ZN6SX128012GetIrqStatusEv>:

uint16_t SX1280::GetIrqStatus( void )
{
 8002112:	b590      	push	{r4, r7, lr}
 8002114:	b085      	sub	sp, #20
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
    uint8_t irqStatus[2];
    ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3314      	adds	r3, #20
 8002120:	681c      	ldr	r4, [r3, #0]
 8002122:	f107 020c 	add.w	r2, r7, #12
 8002126:	2302      	movs	r3, #2
 8002128:	2115      	movs	r1, #21
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	47a0      	blx	r4
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 800212e:	7b3b      	ldrb	r3, [r7, #12]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	b21a      	sxth	r2, r3
 8002134:	7b7b      	ldrb	r3, [r7, #13]
 8002136:	b21b      	sxth	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b21b      	sxth	r3, r3
 800213c:	b29b      	uxth	r3, r3
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bd90      	pop	{r4, r7, pc}

08002146 <_ZN6SX128014ClearIrqStatusEt>:

void SX1280::ClearIrqStatus( uint16_t irqMask )
{
 8002146:	b590      	push	{r4, r7, lr}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	b29b      	uxth	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3310      	adds	r3, #16
 8002168:	681c      	ldr	r4, [r3, #0]
 800216a:	f107 020c 	add.w	r2, r7, #12
 800216e:	2302      	movs	r3, #2
 8002170:	2197      	movs	r1, #151	; 0x97
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	47a0      	blx	r4
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bd90      	pop	{r4, r7, pc}

0800217e <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>:
                  ( calibParam.RC64KEnable );
    WriteCommand( RADIO_CALIBRATE, &cal, 1 );
}

void SX1280::SetRegulatorMode( RadioRegulatorModes_t mode )
{
 800217e:	b590      	push	{r4, r7, lr}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	70fb      	strb	r3, [r7, #3]
    WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3310      	adds	r3, #16
 8002190:	681c      	ldr	r4, [r3, #0]
 8002192:	1cfa      	adds	r2, r7, #3
 8002194:	2301      	movs	r3, #1
 8002196:	2196      	movs	r1, #150	; 0x96
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	47a0      	blx	r4
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd90      	pop	{r4, r7, pc}

080021a4 <_ZN6SX128010SetPayloadEPhhh>:
{
    WriteCommand( RADIO_SET_LONGPREAMBLE, ( uint8_t * )&enable, 1 );
}

void SX1280::SetPayload( uint8_t *buffer, uint8_t size, uint8_t offset )
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	4611      	mov	r1, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	460b      	mov	r3, r1
 80021b4:	71fb      	strb	r3, [r7, #7]
 80021b6:	4613      	mov	r3, r2
 80021b8:	71bb      	strb	r3, [r7, #6]
    WriteBuffer( offset, buffer, size );
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3328      	adds	r3, #40	; 0x28
 80021c0:	681c      	ldr	r4, [r3, #0]
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	79b9      	ldrb	r1, [r7, #6]
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	47a0      	blx	r4
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd90      	pop	{r4, r7, pc}

080021d4 <_ZN6SX128010GetPayloadEPhS0_h>:

uint8_t SX1280::GetPayload( uint8_t *buffer, uint8_t *size , uint8_t maxSize )
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	70fb      	strb	r3, [r7, #3]
    uint8_t offset;

    GetRxBufferStatus( size, &offset );
 80021e2:	f107 0317 	add.w	r3, r7, #23
 80021e6:	461a      	mov	r2, r3
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f7ff ff04 	bl	8001ff8 <_ZN6SX128017GetRxBufferStatusEPhS0_>
    if( *size > maxSize )
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d201      	bcs.n	80021fe <_ZN6SX128010GetPayloadEPhS0_h+0x2a>
    {
        return 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00a      	b.n	8002214 <_ZN6SX128010GetPayloadEPhS0_h+0x40>
    }
    ReadBuffer( offset, buffer, *size );
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	332c      	adds	r3, #44	; 0x2c
 8002204:	681c      	ldr	r4, [r3, #0]
 8002206:	7df9      	ldrb	r1, [r7, #23]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	47a0      	blx	r4
    return 0;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}

0800221c <_ZN6SX128011SendPayloadEPhh10TickTime_sh>:

void SX1280::SendPayload( uint8_t *payload, uint8_t size, TickTime_t timeout, uint8_t offset )
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	71fb      	strb	r3, [r7, #7]
    SetPayload( payload, size, offset );
 800222c:	7e3b      	ldrb	r3, [r7, #24]
 800222e:	79fa      	ldrb	r2, [r7, #7]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7ff ffb6 	bl	80021a4 <_ZN6SX128010SetPayloadEPhhh>
    SetTx( timeout );
 8002238:	6839      	ldr	r1, [r7, #0]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7ff fc9f 	bl	8001b7e <_ZN6SX12805SetTxE10TickTime_s>
}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>:
    // Silently set 8 as minimum value
    WriteRegister( REG_LR_RANGINGFILTERWINDOWSIZE, ( num < DEFAULT_RANGING_FILTER_SIZE ) ? DEFAULT_RANGING_FILTER_SIZE : num );
}

void SX1280::SetRangingRole( RadioRangingRoles_t role )
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[1];

    buf[0] = role;
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	733b      	strb	r3, [r7, #12]
    WriteCommand( RADIO_SET_RANGING_ROLE, &buf[0], 1 );
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3310      	adds	r3, #16
 800225e:	681c      	ldr	r4, [r3, #0]
 8002260:	f107 020c 	add.w	r2, r7, #12
 8002264:	2301      	movs	r3, #1
 8002266:	21a3      	movs	r1, #163	; 0xa3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	47a0      	blx	r4
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	bd90      	pop	{r4, r7, pc}

08002274 <_ZN6SX128014SetPollingModeEv>:

    return efeHz;
}

void SX1280::SetPollingMode( void )
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    this->PollingMode = true;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <_ZN6SX12808OnDioIrqEv>:
{
    this->PollingMode = false;
}

void SX1280::OnDioIrq( void )
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
    /*
     * When polling mode is activated, it is up to the application to call
     * ProcessIrqs( ). Otherwise, the driver automatically calls ProcessIrqs( )
     * on radio interrupt.
     */
    if( this->PollingMode == true )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d104      	bne.n	80022ac <_ZN6SX12808OnDioIrqEv+0x1c>
    {
        this->IrqState = true;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    }
    else
    {
        this->ProcessIrqs( );
    }
}
 80022aa:	e002      	b.n	80022b2 <_ZN6SX12808OnDioIrqEv+0x22>
        this->ProcessIrqs( );
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f805 	bl	80022bc <_ZN6SX128011ProcessIrqsEv>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <_ZN6SX128011ProcessIrqsEv>:

void SX1280::ProcessIrqs( void )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    RadioPacketTypes_t packetType = PACKET_TYPE_NONE;
 80022c4:	230f      	movs	r3, #15
 80022c6:	73fb      	strb	r3, [r7, #15]

    if( this->PollingMode == true )
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d10d      	bne.n	80022ee <_ZN6SX128011ProcessIrqsEv+0x32>
    {
        if( this->IrqState == true )
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80022d8:	2b01      	cmp	r3, #1
 80022da:	f040 81c1 	bne.w	8002660 <_ZN6SX128011ProcessIrqsEv+0x3a4>
  __ASM volatile ("cpsid i" : : : "memory");
 80022de:	b672      	cpsid	i
}
 80022e0:	bf00      	nop
        {
            __disable_irq( );
            this->IrqState = false;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  __ASM volatile ("cpsie i" : : : "memory");
 80022ea:	b662      	cpsie	i
}
 80022ec:	bf00      	nop
        {
            return;
        }
    }

    packetType = GetPacketType( true );
 80022ee:	2101      	movs	r1, #1
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fcc7 	bl	8001c84 <_ZN6SX128013GetPacketTypeEb>
 80022f6:	4603      	mov	r3, r0
 80022f8:	73fb      	strb	r3, [r7, #15]
    uint16_t irqRegs = GetIrqStatus( );
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ff09 	bl	8002112 <_ZN6SX128012GetIrqStatusEv>
 8002300:	4603      	mov	r3, r0
 8002302:	81bb      	strh	r3, [r7, #12]
    ClearIrqStatus( IRQ_RADIO_ALL );
 8002304:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff1c 	bl	8002146 <_ZN6SX128014ClearIrqStatusEt>
    }
    TEST_PIN_1 = 0;
    TEST_PIN_2 = 0;
#endif

    switch( packetType )
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b04      	cmp	r3, #4
 8002312:	f200 81a7 	bhi.w	8002664 <_ZN6SX128011ProcessIrqsEv+0x3a8>
 8002316:	a201      	add	r2, pc, #4	; (adr r2, 800231c <_ZN6SX128011ProcessIrqsEv+0x60>)
 8002318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231c:	08002331 	.word	0x08002331
 8002320:	0800242f 	.word	0x0800242f
 8002324:	08002577 	.word	0x08002577
 8002328:	08002331 	.word	0x08002331
 800232c:	08002331 	.word	0x08002331
    {
        case PACKET_TYPE_GFSK:
        case PACKET_TYPE_FLRC:
        case PACKET_TYPE_BLE:
            switch( OperatingMode )
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002336:	2b05      	cmp	r3, #5
 8002338:	d002      	beq.n	8002340 <_ZN6SX128011ProcessIrqsEv+0x84>
 800233a:	2b06      	cmp	r3, #6
 800233c:	d05a      	beq.n	80023f4 <_ZN6SX128011ProcessIrqsEv+0x138>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 800233e:	e075      	b.n	800242c <_ZN6SX128011ProcessIrqsEv+0x170>
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8002340:	89bb      	ldrh	r3, [r7, #12]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d022      	beq.n	8002390 <_ZN6SX128011ProcessIrqsEv+0xd4>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 800234a:	89bb      	ldrh	r3, [r7, #12]
 800234c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <_ZN6SX128011ProcessIrqsEv+0xaa>
                            if( rxError != NULL )
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d019      	beq.n	8002390 <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxError( IRQ_CRC_ERROR_CODE );
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2002      	movs	r0, #2
 8002362:	4798      	blx	r3
 8002364:	e014      	b.n	8002390 <_ZN6SX128011ProcessIrqsEv+0xd4>
                        else if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
 8002366:	89bb      	ldrh	r3, [r7, #12]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <_ZN6SX128011ProcessIrqsEv+0xc6>
                            if( rxError != NULL )
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00b      	beq.n	8002390 <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxError( IRQ_SYNCWORD_ERROR_CODE );
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2001      	movs	r0, #1
 800237e:	4798      	blx	r3
 8002380:	e006      	b.n	8002390 <_ZN6SX128011ProcessIrqsEv+0xd4>
                            if( rxDone != NULL )
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxDone( );
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4798      	blx	r3
                    if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
 8002390:	89bb      	ldrh	r3, [r7, #12]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d006      	beq.n	80023a8 <_ZN6SX128011ProcessIrqsEv+0xec>
                        if( rxSyncWordDone != NULL )
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <_ZN6SX128011ProcessIrqsEv+0xec>
                            rxSyncWordDone( );
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4798      	blx	r3
                    if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
 80023a8:	89bb      	ldrh	r3, [r7, #12]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <_ZN6SX128011ProcessIrqsEv+0x106>
                        if( rxError != NULL )
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <_ZN6SX128011ProcessIrqsEv+0x106>
                            rxError( IRQ_SYNCWORD_ERROR_CODE );
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	2001      	movs	r0, #1
 80023c0:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80023c2:	89bb      	ldrh	r3, [r7, #12]
 80023c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <_ZN6SX128011ProcessIrqsEv+0x11e>
                        if( rxTimeout != NULL )
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <_ZN6SX128011ProcessIrqsEv+0x11e>
                            rxTimeout( );
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4798      	blx	r3
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80023da:	89bb      	ldrh	r3, [r7, #12]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <_ZN6SX128011ProcessIrqsEv+0x16a>
                        if( txDone != NULL )
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01c      	beq.n	8002426 <_ZN6SX128011ProcessIrqsEv+0x16a>
                            txDone( );
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4798      	blx	r3
                    break;
 80023f2:	e018      	b.n	8002426 <_ZN6SX128011ProcessIrqsEv+0x16a>
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80023f4:	89bb      	ldrh	r3, [r7, #12]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d006      	beq.n	800240c <_ZN6SX128011ProcessIrqsEv+0x150>
                        if( txDone != NULL )
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <_ZN6SX128011ProcessIrqsEv+0x150>
                            txDone( );
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800240c:	89bb      	ldrh	r3, [r7, #12]
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <_ZN6SX128011ProcessIrqsEv+0x16e>
                        if( txTimeout != NULL )
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <_ZN6SX128011ProcessIrqsEv+0x16e>
                            txTimeout( );
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4798      	blx	r3
                    break;
 8002424:	e001      	b.n	800242a <_ZN6SX128011ProcessIrqsEv+0x16e>
                    break;
 8002426:	bf00      	nop
 8002428:	e11d      	b.n	8002666 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 800242a:	bf00      	nop
            }
            break;
 800242c:	e11b      	b.n	8002666 <_ZN6SX128011ProcessIrqsEv+0x3aa>
        case PACKET_TYPE_LORA:
            switch( OperatingMode )
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002434:	2b07      	cmp	r3, #7
 8002436:	d06d      	beq.n	8002514 <_ZN6SX128011ProcessIrqsEv+0x258>
 8002438:	2b07      	cmp	r3, #7
 800243a:	f300 8094 	bgt.w	8002566 <_ZN6SX128011ProcessIrqsEv+0x2aa>
 800243e:	2b05      	cmp	r3, #5
 8002440:	d002      	beq.n	8002448 <_ZN6SX128011ProcessIrqsEv+0x18c>
 8002442:	2b06      	cmp	r3, #6
 8002444:	d04d      	beq.n	80024e2 <_ZN6SX128011ProcessIrqsEv+0x226>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 8002446:	e08e      	b.n	8002566 <_ZN6SX128011ProcessIrqsEv+0x2aa>
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8002448:	89bb      	ldrh	r3, [r7, #12]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d014      	beq.n	800247c <_ZN6SX128011ProcessIrqsEv+0x1c0>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 8002452:	89bb      	ldrh	r3, [r7, #12]
 8002454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <_ZN6SX128011ProcessIrqsEv+0x1b2>
                            if( rxError != NULL )
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00b      	beq.n	800247c <_ZN6SX128011ProcessIrqsEv+0x1c0>
                                rxError( IRQ_CRC_ERROR_CODE );
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2002      	movs	r0, #2
 800246a:	4798      	blx	r3
 800246c:	e006      	b.n	800247c <_ZN6SX128011ProcessIrqsEv+0x1c0>
                            if( rxDone != NULL )
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <_ZN6SX128011ProcessIrqsEv+0x1c0>
                                rxDone( );
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 800247c:	89bb      	ldrh	r3, [r7, #12]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <_ZN6SX128011ProcessIrqsEv+0x1d8>
                        if( rxHeaderDone != NULL )
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <_ZN6SX128011ProcessIrqsEv+0x1d8>
                            rxHeaderDone( );
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 8002494:	89bb      	ldrh	r3, [r7, #12]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <_ZN6SX128011ProcessIrqsEv+0x1f2>
                        if( rxError != NULL )
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <_ZN6SX128011ProcessIrqsEv+0x1f2>
                            rxError( IRQ_HEADER_ERROR_CODE );
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	2000      	movs	r0, #0
 80024ac:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80024ae:	89bb      	ldrh	r3, [r7, #12]
 80024b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <_ZN6SX128011ProcessIrqsEv+0x20a>
                        if( rxTimeout != NULL )
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <_ZN6SX128011ProcessIrqsEv+0x20a>
                            rxTimeout( );
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
 80024c6:	89bb      	ldrh	r3, [r7, #12]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d04c      	beq.n	800256a <_ZN6SX128011ProcessIrqsEv+0x2ae>
                        if( rxError != NULL )
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d048      	beq.n	800256a <_ZN6SX128011ProcessIrqsEv+0x2ae>
                            rxError( IRQ_RANGING_ON_LORA_ERROR_CODE );
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	2003      	movs	r0, #3
 80024de:	4798      	blx	r3
                    break;
 80024e0:	e043      	b.n	800256a <_ZN6SX128011ProcessIrqsEv+0x2ae>
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 80024e2:	89bb      	ldrh	r3, [r7, #12]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <_ZN6SX128011ProcessIrqsEv+0x23e>
                        if( txDone != NULL )
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <_ZN6SX128011ProcessIrqsEv+0x23e>
                            txDone( );
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80024fa:	89bb      	ldrh	r3, [r7, #12]
 80024fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d034      	beq.n	800256e <_ZN6SX128011ProcessIrqsEv+0x2b2>
                        if( txTimeout != NULL )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d030      	beq.n	800256e <_ZN6SX128011ProcessIrqsEv+0x2b2>
                            txTimeout( );
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	4798      	blx	r3
                    break;
 8002512:	e02c      	b.n	800256e <_ZN6SX128011ProcessIrqsEv+0x2b2>
                    if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 8002514:	89bb      	ldrh	r3, [r7, #12]
 8002516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d016      	beq.n	800254c <_ZN6SX128011ProcessIrqsEv+0x290>
                        if( ( irqRegs & IRQ_CAD_DETECTED ) == IRQ_CAD_DETECTED )
 800251e:	89bb      	ldrh	r3, [r7, #12]
 8002520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <_ZN6SX128011ProcessIrqsEv+0x27e>
                            if( cadDone != NULL )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                                cadDone( true );
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	2001      	movs	r0, #1
 8002536:	4798      	blx	r3
                    break;
 8002538:	e01b      	b.n	8002572 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                            if( cadDone != NULL )
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	2b00      	cmp	r3, #0
 8002540:	d017      	beq.n	8002572 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                                cadDone( false );
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2000      	movs	r0, #0
 8002548:	4798      	blx	r3
                    break;
 800254a:	e012      	b.n	8002572 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                    else if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800254c:	89bb      	ldrh	r3, [r7, #12]
 800254e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00d      	beq.n	8002572 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                        if( rxTimeout != NULL )
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                            rxTimeout( );
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	4798      	blx	r3
                    break;
 8002564:	e005      	b.n	8002572 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                    break;
 8002566:	bf00      	nop
 8002568:	e07d      	b.n	8002666 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 800256a:	bf00      	nop
 800256c:	e07b      	b.n	8002666 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 800256e:	bf00      	nop
 8002570:	e079      	b.n	8002666 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 8002572:	bf00      	nop
            }
            break;
 8002574:	e077      	b.n	8002666 <_ZN6SX128011ProcessIrqsEv+0x3aa>
        case PACKET_TYPE_RANGING:
            switch( OperatingMode )
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800257c:	2b05      	cmp	r3, #5
 800257e:	d002      	beq.n	8002586 <_ZN6SX128011ProcessIrqsEv+0x2ca>
 8002580:	2b06      	cmp	r3, #6
 8002582:	d04e      	beq.n	8002622 <_ZN6SX128011ProcessIrqsEv+0x366>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 8002584:	e06b      	b.n	800265e <_ZN6SX128011ProcessIrqsEv+0x3a2>
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
 8002586:	89bb      	ldrh	r3, [r7, #12]
 8002588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <_ZN6SX128011ProcessIrqsEv+0x2e4>
                        if( rangingDone != NULL )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <_ZN6SX128011ProcessIrqsEv+0x2e4>
                            rangingDone( IRQ_RANGING_SLAVE_ERROR_CODE );
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	2000      	movs	r0, #0
 800259e:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_VALID ) == IRQ_RANGING_SLAVE_REQUEST_VALID )
 80025a0:	89bb      	ldrh	r3, [r7, #12]
 80025a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d007      	beq.n	80025ba <_ZN6SX128011ProcessIrqsEv+0x2fe>
                        if( rangingDone != NULL )
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <_ZN6SX128011ProcessIrqsEv+0x2fe>
                            rangingDone( IRQ_RANGING_SLAVE_VALID_CODE );
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	2001      	movs	r0, #1
 80025b8:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_RESPONSE_DONE ) == IRQ_RANGING_SLAVE_RESPONSE_DONE )
 80025ba:	89bb      	ldrh	r3, [r7, #12]
 80025bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <_ZN6SX128011ProcessIrqsEv+0x318>
                        if( rangingDone != NULL )
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <_ZN6SX128011ProcessIrqsEv+0x318>
                            rangingDone( IRQ_RANGING_SLAVE_VALID_CODE );
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	2001      	movs	r0, #1
 80025d2:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80025d4:	89bb      	ldrh	r3, [r7, #12]
 80025d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <_ZN6SX128011ProcessIrqsEv+0x332>
                        if( rangingDone != NULL )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <_ZN6SX128011ProcessIrqsEv+0x332>
                            rangingDone( IRQ_RANGING_SLAVE_ERROR_CODE );
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	2000      	movs	r0, #0
 80025ec:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 80025ee:	89bb      	ldrh	r3, [r7, #12]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d006      	beq.n	8002606 <_ZN6SX128011ProcessIrqsEv+0x34a>
                        if( rxHeaderDone != NULL )
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <_ZN6SX128011ProcessIrqsEv+0x34a>
                            rxHeaderDone( );
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 8002606:	89bb      	ldrh	r3, [r7, #12]
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	d023      	beq.n	8002658 <_ZN6SX128011ProcessIrqsEv+0x39c>
                        if( rxError != NULL )
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01f      	beq.n	8002658 <_ZN6SX128011ProcessIrqsEv+0x39c>
                            rxError( IRQ_HEADER_ERROR_CODE );
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	2000      	movs	r0, #0
 800261e:	4798      	blx	r3
                    break;
 8002620:	e01a      	b.n	8002658 <_ZN6SX128011ProcessIrqsEv+0x39c>
                    if( ( irqRegs & IRQ_RANGING_MASTER_TIMEOUT ) == IRQ_RANGING_MASTER_TIMEOUT )
 8002622:	89bb      	ldrh	r3, [r7, #12]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <_ZN6SX128011ProcessIrqsEv+0x380>
                        if( rangingDone != NULL )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <_ZN6SX128011ProcessIrqsEv+0x380>
                            rangingDone( IRQ_RANGING_MASTER_ERROR_CODE );
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	2002      	movs	r0, #2
 800263a:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_MASTER_RESULT_VALID ) == IRQ_RANGING_MASTER_RESULT_VALID )
 800263c:	89bb      	ldrh	r3, [r7, #12]
 800263e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <_ZN6SX128011ProcessIrqsEv+0x3a0>
                        if( rangingDone != NULL )
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d006      	beq.n	800265c <_ZN6SX128011ProcessIrqsEv+0x3a0>
                            rangingDone( IRQ_RANGING_MASTER_VALID_CODE );
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	2003      	movs	r0, #3
 8002654:	4798      	blx	r3
                    break;
 8002656:	e001      	b.n	800265c <_ZN6SX128011ProcessIrqsEv+0x3a0>
                    break;
 8002658:	bf00      	nop
 800265a:	e004      	b.n	8002666 <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 800265c:	bf00      	nop
            }
            break;
 800265e:	e002      	b.n	8002666 <_ZN6SX128011ProcessIrqsEv+0x3aa>
            return;
 8002660:	bf00      	nop
 8002662:	e000      	b.n	8002666 <_ZN6SX128011ProcessIrqsEv+0x3aa>
        default:
            // Unexpected IRQ: silently returns
            break;
 8002664:	bf00      	nop
    }
}
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002670:	f000 fe6a 	bl	8003348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002674:	f000 f816 	bl	80026a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002678:	f000 f9d8 	bl	8002a2c <MX_GPIO_Init>
  MX_DMA_Init();
 800267c:	f000 f9a6 	bl	80029cc <MX_DMA_Init>
  MX_I2C1_Init();
 8002680:	f000 f87a 	bl	8002778 <MX_I2C1_Init>
  MX_I2S3_Init();
 8002684:	f000 f8a6 	bl	80027d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8002688:	f000 f8d4 	bl	8002834 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800268c:	f009 fc5a 	bl	800bf44 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8002690:	f000 f972 	bl	8002978 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8002694:	f000 f93a 	bl	800290c <MX_TIM6_Init>
  MX_SPI2_Init();
 8002698:	f000 f902 	bl	80028a0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  start();
 800269c:	f7fe fcb4 	bl	8001008 <start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <main+0x34>
	...

080026a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b094      	sub	sp, #80	; 0x50
 80026a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026aa:	f107 0320 	add.w	r3, r7, #32
 80026ae:	2230      	movs	r2, #48	; 0x30
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f00a f9ce 	bl	800ca54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	4b28      	ldr	r3, [pc, #160]	; (8002770 <SystemClock_Config+0xcc>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	4a27      	ldr	r2, [pc, #156]	; (8002770 <SystemClock_Config+0xcc>)
 80026d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d6:	6413      	str	r3, [r2, #64]	; 0x40
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <SystemClock_Config+0xcc>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e4:	2300      	movs	r3, #0
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <SystemClock_Config+0xd0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a21      	ldr	r2, [pc, #132]	; (8002774 <SystemClock_Config+0xd0>)
 80026ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <SystemClock_Config+0xd0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002700:	2301      	movs	r3, #1
 8002702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800270a:	2302      	movs	r3, #2
 800270c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800270e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002714:	2308      	movs	r3, #8
 8002716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002718:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800271c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800271e:	2302      	movs	r3, #2
 8002720:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002722:	2307      	movs	r3, #7
 8002724:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002726:	f107 0320 	add.w	r3, r7, #32
 800272a:	4618      	mov	r0, r3
 800272c:	f003 fd92 	bl	8006254 <HAL_RCC_OscConfig>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002736:	f000 fab7 	bl	8002ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800273a:	230f      	movs	r3, #15
 800273c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800273e:	2302      	movs	r3, #2
 8002740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002746:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800274a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800274c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002750:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002752:	f107 030c 	add.w	r3, r7, #12
 8002756:	2105      	movs	r1, #5
 8002758:	4618      	mov	r0, r3
 800275a:	f003 fff3 	bl	8006744 <HAL_RCC_ClockConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002764:	f000 faa0 	bl	8002ca8 <Error_Handler>
  }
}
 8002768:	bf00      	nop
 800276a:	3750      	adds	r7, #80	; 0x50
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40023800 	.word	0x40023800
 8002774:	40007000 	.word	0x40007000

08002778 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <MX_I2C1_Init+0x50>)
 800277e:	4a13      	ldr	r2, [pc, #76]	; (80027cc <MX_I2C1_Init+0x54>)
 8002780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <MX_I2C1_Init+0x50>)
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <MX_I2C1_Init+0x58>)
 8002786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <MX_I2C1_Init+0x50>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <MX_I2C1_Init+0x50>)
 8002790:	2200      	movs	r2, #0
 8002792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <MX_I2C1_Init+0x50>)
 8002796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800279a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <MX_I2C1_Init+0x50>)
 800279e:	2200      	movs	r2, #0
 80027a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <MX_I2C1_Init+0x50>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <MX_I2C1_Init+0x50>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <MX_I2C1_Init+0x50>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027b4:	4804      	ldr	r0, [pc, #16]	; (80027c8 <MX_I2C1_Init+0x50>)
 80027b6:	f001 fceb 	bl	8004190 <HAL_I2C_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027c0:	f000 fa72 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200002d8 	.word	0x200002d8
 80027cc:	40005400 	.word	0x40005400
 80027d0:	000186a0 	.word	0x000186a0

080027d4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <MX_I2S3_Init+0x54>)
 80027da:	4a14      	ldr	r2, [pc, #80]	; (800282c <MX_I2S3_Init+0x58>)
 80027dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <MX_I2S3_Init+0x54>)
 80027e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <MX_I2S3_Init+0x54>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <MX_I2S3_Init+0x54>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <MX_I2S3_Init+0x54>)
 80027f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <MX_I2S3_Init+0x54>)
 80027fc:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <MX_I2S3_Init+0x5c>)
 80027fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <MX_I2S3_Init+0x54>)
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <MX_I2S3_Init+0x54>)
 8002808:	2200      	movs	r2, #0
 800280a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <MX_I2S3_Init+0x54>)
 800280e:	2200      	movs	r2, #0
 8002810:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <MX_I2S3_Init+0x54>)
 8002814:	f001 fe00 	bl	8004418 <HAL_I2S_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800281e:	f000 fa43 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	2000032c 	.word	0x2000032c
 800282c:	40003c00 	.word	0x40003c00
 8002830:	00017700 	.word	0x00017700

08002834 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <MX_SPI1_Init+0x64>)
 800283a:	4a18      	ldr	r2, [pc, #96]	; (800289c <MX_SPI1_Init+0x68>)
 800283c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800283e:	4b16      	ldr	r3, [pc, #88]	; (8002898 <MX_SPI1_Init+0x64>)
 8002840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <MX_SPI1_Init+0x64>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <MX_SPI1_Init+0x64>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <MX_SPI1_Init+0x64>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <MX_SPI1_Init+0x64>)
 800285a:	2200      	movs	r2, #0
 800285c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <MX_SPI1_Init+0x64>)
 8002860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002864:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <MX_SPI1_Init+0x64>)
 8002868:	2200      	movs	r2, #0
 800286a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800286c:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <MX_SPI1_Init+0x64>)
 800286e:	2200      	movs	r2, #0
 8002870:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <MX_SPI1_Init+0x64>)
 8002874:	2200      	movs	r2, #0
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <MX_SPI1_Init+0x64>)
 800287a:	2200      	movs	r2, #0
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <MX_SPI1_Init+0x64>)
 8002880:	220a      	movs	r2, #10
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002884:	4804      	ldr	r0, [pc, #16]	; (8002898 <MX_SPI1_Init+0x64>)
 8002886:	f004 fabd 	bl	8006e04 <HAL_SPI_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002890:	f000 fa0a 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000374 	.word	0x20000374
 800289c:	40013000 	.word	0x40013000

080028a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80028a4:	4b17      	ldr	r3, [pc, #92]	; (8002904 <MX_SPI2_Init+0x64>)
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <MX_SPI2_Init+0x68>)
 80028a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028aa:	4b16      	ldr	r3, [pc, #88]	; (8002904 <MX_SPI2_Init+0x64>)
 80028ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <MX_SPI2_Init+0x64>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <MX_SPI2_Init+0x64>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <MX_SPI2_Init+0x64>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <MX_SPI2_Init+0x64>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <MX_SPI2_Init+0x64>)
 80028cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <MX_SPI2_Init+0x64>)
 80028d4:	2228      	movs	r2, #40	; 0x28
 80028d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <MX_SPI2_Init+0x64>)
 80028da:	2200      	movs	r2, #0
 80028dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <MX_SPI2_Init+0x64>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <MX_SPI2_Init+0x64>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <MX_SPI2_Init+0x64>)
 80028ec:	220a      	movs	r2, #10
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028f0:	4804      	ldr	r0, [pc, #16]	; (8002904 <MX_SPI2_Init+0x64>)
 80028f2:	f004 fa87 	bl	8006e04 <HAL_SPI_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80028fc:	f000 f9d4 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200003cc 	.word	0x200003cc
 8002908:	40003800 	.word	0x40003800

0800290c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002912:	463b      	mov	r3, r7
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <MX_TIM6_Init+0x64>)
 800291c:	4a15      	ldr	r2, [pc, #84]	; (8002974 <MX_TIM6_Init+0x68>)
 800291e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 167;
 8002920:	4b13      	ldr	r3, [pc, #76]	; (8002970 <MX_TIM6_Init+0x64>)
 8002922:	22a7      	movs	r2, #167	; 0xa7
 8002924:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <MX_TIM6_Init+0x64>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800292c:	4b10      	ldr	r3, [pc, #64]	; (8002970 <MX_TIM6_Init+0x64>)
 800292e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002932:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <MX_TIM6_Init+0x64>)
 8002936:	2200      	movs	r2, #0
 8002938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800293a:	480d      	ldr	r0, [pc, #52]	; (8002970 <MX_TIM6_Init+0x64>)
 800293c:	f004 fe76 	bl	800762c <HAL_TIM_Base_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002946:	f000 f9af 	bl	8002ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002952:	463b      	mov	r3, r7
 8002954:	4619      	mov	r1, r3
 8002956:	4806      	ldr	r0, [pc, #24]	; (8002970 <MX_TIM6_Init+0x64>)
 8002958:	f004 ff58 	bl	800780c <HAL_TIMEx_MasterConfigSynchronization>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002962:	f000 f9a1 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200004e4 	.word	0x200004e4
 8002974:	40001000 	.word	0x40001000

08002978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <MX_USART2_UART_Init+0x50>)
 8002980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 8002984:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 8002992:	2200      	movs	r2, #0
 8002994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 800299e:	220c      	movs	r2, #12
 80029a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029ae:	4805      	ldr	r0, [pc, #20]	; (80029c4 <MX_USART2_UART_Init+0x4c>)
 80029b0:	f004 ffa8 	bl	8007904 <HAL_UART_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029ba:	f000 f975 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000052c 	.word	0x2000052c
 80029c8:	40004400 	.word	0x40004400

080029cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <MX_DMA_Init+0x5c>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <MX_DMA_Init+0x5c>)
 80029dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <MX_DMA_Init+0x5c>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2100      	movs	r1, #0
 80029f2:	200e      	movs	r0, #14
 80029f4:	f000 fe19 	bl	800362a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80029f8:	200e      	movs	r0, #14
 80029fa:	f000 fe32 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	200f      	movs	r0, #15
 8002a04:	f000 fe11 	bl	800362a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002a08:	200f      	movs	r0, #15
 8002a0a:	f000 fe2a 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	2011      	movs	r0, #17
 8002a14:	f000 fe09 	bl	800362a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002a18:	2011      	movs	r0, #17
 8002a1a:	f000 fe22 	bl	8003662 <HAL_NVIC_EnableIRQ>

}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800

08002a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08c      	sub	sp, #48	; 0x30
 8002a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a32:	f107 031c 	add.w	r3, r7, #28
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
 8002a40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	4b92      	ldr	r3, [pc, #584]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	4a91      	ldr	r2, [pc, #580]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002a4c:	f043 0310 	orr.w	r3, r3, #16
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4b8f      	ldr	r3, [pc, #572]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	4b8b      	ldr	r3, [pc, #556]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a8a      	ldr	r2, [pc, #552]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b88      	ldr	r3, [pc, #544]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	4b84      	ldr	r3, [pc, #528]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a83      	ldr	r2, [pc, #524]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002a84:	f043 0304 	orr.w	r3, r3, #4
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b81      	ldr	r3, [pc, #516]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b7d      	ldr	r3, [pc, #500]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a7c      	ldr	r2, [pc, #496]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b7a      	ldr	r3, [pc, #488]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a75      	ldr	r2, [pc, #468]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b73      	ldr	r3, [pc, #460]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	4b6f      	ldr	r3, [pc, #444]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a6e      	ldr	r2, [pc, #440]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002ad8:	f043 0308 	orr.w	r3, r3, #8
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b6c      	ldr	r3, [pc, #432]	; (8002c90 <MX_GPIO_Init+0x264>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	607b      	str	r3, [r7, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2108      	movs	r1, #8
 8002aee:	4869      	ldr	r0, [pc, #420]	; (8002c94 <MX_GPIO_Init+0x268>)
 8002af0:	f001 fb02 	bl	80040f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002af4:	2201      	movs	r2, #1
 8002af6:	2101      	movs	r1, #1
 8002af8:	4867      	ldr	r0, [pc, #412]	; (8002c98 <MX_GPIO_Init+0x26c>)
 8002afa:	f001 fafd 	bl	80040f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, GPIO_PIN_SET);
 8002afe:	2201      	movs	r2, #1
 8002b00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b04:	4865      	ldr	r0, [pc, #404]	; (8002c9c <MX_GPIO_Init+0x270>)
 8002b06:	f001 faf7 	bl	80040f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b10:	4863      	ldr	r0, [pc, #396]	; (8002ca0 <MX_GPIO_Init+0x274>)
 8002b12:	f001 faf1 	bl	80040f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002b16:	2200      	movs	r2, #0
 8002b18:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002b1c:	4860      	ldr	r0, [pc, #384]	; (8002ca0 <MX_GPIO_Init+0x274>)
 8002b1e:	f001 faeb 	bl	80040f8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002b22:	2308      	movs	r3, #8
 8002b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b26:	2301      	movs	r3, #1
 8002b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002b32:	f107 031c 	add.w	r3, r7, #28
 8002b36:	4619      	mov	r1, r3
 8002b38:	4856      	ldr	r0, [pc, #344]	; (8002c94 <MX_GPIO_Init+0x268>)
 8002b3a:	f001 f929 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b42:	2301      	movs	r3, #1
 8002b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 031c 	add.w	r3, r7, #28
 8002b52:	4619      	mov	r1, r3
 8002b54:	4850      	ldr	r0, [pc, #320]	; (8002c98 <MX_GPIO_Init+0x26c>)
 8002b56:	f001 f91b 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002b5a:	2308      	movs	r3, #8
 8002b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b6a:	2305      	movs	r3, #5
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002b6e:	f107 031c 	add.w	r3, r7, #28
 8002b72:	4619      	mov	r1, r3
 8002b74:	4848      	ldr	r0, [pc, #288]	; (8002c98 <MX_GPIO_Init+0x26c>)
 8002b76:	f001 f90b 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b7e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b88:	f107 031c 	add.w	r3, r7, #28
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4845      	ldr	r0, [pc, #276]	; (8002ca4 <MX_GPIO_Init+0x278>)
 8002b90:	f001 f8fe 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002b94:	2304      	movs	r3, #4
 8002b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002ba0:	f107 031c 	add.w	r3, r7, #28
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	483d      	ldr	r0, [pc, #244]	; (8002c9c <MX_GPIO_Init+0x270>)
 8002ba8:	f001 f8f2 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bbe:	2305      	movs	r3, #5
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f107 031c 	add.w	r3, r7, #28
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4834      	ldr	r0, [pc, #208]	; (8002c9c <MX_GPIO_Init+0x270>)
 8002bca:	f001 f8e1 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_NSS_Pin */
  GPIO_InitStruct.Pin = SX1280_NSS_Pin;
 8002bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX1280_NSS_GPIO_Port, &GPIO_InitStruct);
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	4619      	mov	r1, r3
 8002be6:	482d      	ldr	r0, [pc, #180]	; (8002c9c <MX_GPIO_Init+0x270>)
 8002be8:	f001 f8d2 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_INT_Pin */
  GPIO_InitStruct.Pin = SX1280_INT_Pin;
 8002bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bf2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX1280_INT_GPIO_Port, &GPIO_InitStruct);
 8002bfc:	f107 031c 	add.w	r3, r7, #28
 8002c00:	4619      	mov	r1, r3
 8002c02:	4827      	ldr	r0, [pc, #156]	; (8002ca0 <MX_GPIO_Init+0x274>)
 8002c04:	f001 f8c4 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX1280_BUSY_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SX1280_BUSY_Pin|OTG_FS_OverCurrent_Pin;
 8002c08:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c16:	f107 031c 	add.w	r3, r7, #28
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4820      	ldr	r0, [pc, #128]	; (8002ca0 <MX_GPIO_Init+0x274>)
 8002c1e:	f001 f8b7 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 8002c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002c28:	2311      	movs	r3, #17
 8002c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4819      	ldr	r0, [pc, #100]	; (8002ca0 <MX_GPIO_Init+0x274>)
 8002c3c:	f001 f8a8 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002c40:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002c44:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	2301      	movs	r3, #1
 8002c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c52:	f107 031c 	add.w	r3, r7, #28
 8002c56:	4619      	mov	r1, r3
 8002c58:	4811      	ldr	r0, [pc, #68]	; (8002ca0 <MX_GPIO_Init+0x274>)
 8002c5a:	f001 f899 	bl	8003d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c62:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002c6c:	f107 031c 	add.w	r3, r7, #28
 8002c70:	4619      	mov	r1, r3
 8002c72:	4808      	ldr	r0, [pc, #32]	; (8002c94 <MX_GPIO_Init+0x268>)
 8002c74:	f001 f88c 	bl	8003d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	2017      	movs	r0, #23
 8002c7e:	f000 fcd4 	bl	800362a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c82:	2017      	movs	r0, #23
 8002c84:	f000 fced 	bl	8003662 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c88:	bf00      	nop
 8002c8a:	3730      	adds	r7, #48	; 0x30
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40020800 	.word	0x40020800
 8002c9c:	40020400 	.word	0x40020400
 8002ca0:	40020c00 	.word	0x40020c00
 8002ca4:	40020000 	.word	0x40020000

08002ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002cac:	b672      	cpsid	i
}
 8002cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <Error_Handler+0x8>
	...

08002cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_MspInit+0x4c>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	4a0f      	ldr	r2, [pc, #60]	; (8002d00 <HAL_MspInit+0x4c>)
 8002cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <HAL_MspInit+0x4c>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_MspInit+0x4c>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a08      	ldr	r2, [pc, #32]	; (8002d00 <HAL_MspInit+0x4c>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_MspInit+0x4c>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002cf2:	2007      	movs	r0, #7
 8002cf4:	f000 fc8e 	bl	8003614 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40023800 	.word	0x40023800

08002d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <HAL_I2C_MspInit+0x84>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d12c      	bne.n	8002d80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_I2C_MspInit+0x88>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <HAL_I2C_MspInit+0x88>)
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_I2C_MspInit+0x88>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002d42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d48:	2312      	movs	r3, #18
 8002d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d54:	2304      	movs	r3, #4
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	480c      	ldr	r0, [pc, #48]	; (8002d90 <HAL_I2C_MspInit+0x8c>)
 8002d60:	f001 f816 	bl	8003d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_I2C_MspInit+0x88>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <HAL_I2C_MspInit+0x88>)
 8002d6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_I2C_MspInit+0x88>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d80:	bf00      	nop
 8002d82:	3728      	adds	r7, #40	; 0x28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40005400 	.word	0x40005400
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40020400 	.word	0x40020400

08002d94 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08e      	sub	sp, #56	; 0x38
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a31      	ldr	r2, [pc, #196]	; (8002e84 <HAL_I2S_MspInit+0xf0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d15a      	bne.n	8002e7a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002dc8:	23c0      	movs	r3, #192	; 0xc0
 8002dca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 fed5 	bl	8006b84 <HAL_RCCEx_PeriphCLKConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002de0:	f7ff ff62 	bl	8002ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	4b27      	ldr	r3, [pc, #156]	; (8002e88 <HAL_I2S_MspInit+0xf4>)
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	4a26      	ldr	r2, [pc, #152]	; (8002e88 <HAL_I2S_MspInit+0xf4>)
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df2:	6413      	str	r3, [r2, #64]	; 0x40
 8002df4:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_I2S_MspInit+0xf4>)
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <HAL_I2S_MspInit+0xf4>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a1f      	ldr	r2, [pc, #124]	; (8002e88 <HAL_I2S_MspInit+0xf4>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_I2S_MspInit+0xf4>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_I2S_MspInit+0xf4>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <HAL_I2S_MspInit+0xf4>)
 8002e26:	f043 0304 	orr.w	r3, r3, #4
 8002e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2c:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <HAL_I2S_MspInit+0xf4>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002e38:	2310      	movs	r3, #16
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e48:	2306      	movs	r3, #6
 8002e4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e50:	4619      	mov	r1, r3
 8002e52:	480e      	ldr	r0, [pc, #56]	; (8002e8c <HAL_I2S_MspInit+0xf8>)
 8002e54:	f000 ff9c 	bl	8003d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002e58:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e6a:	2306      	movs	r3, #6
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e72:	4619      	mov	r1, r3
 8002e74:	4806      	ldr	r0, [pc, #24]	; (8002e90 <HAL_I2S_MspInit+0xfc>)
 8002e76:	f000 ff8b 	bl	8003d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e7a:	bf00      	nop
 8002e7c:	3738      	adds	r7, #56	; 0x38
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40003c00 	.word	0x40003c00
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40020000 	.word	0x40020000
 8002e90:	40020800 	.word	0x40020800

08002e94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08c      	sub	sp, #48	; 0x30
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	f107 031c 	add.w	r3, r7, #28
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a64      	ldr	r2, [pc, #400]	; (8003044 <HAL_SPI_MspInit+0x1b0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d12c      	bne.n	8002f10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	4b63      	ldr	r3, [pc, #396]	; (8003048 <HAL_SPI_MspInit+0x1b4>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	4a62      	ldr	r2, [pc, #392]	; (8003048 <HAL_SPI_MspInit+0x1b4>)
 8002ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec6:	4b60      	ldr	r3, [pc, #384]	; (8003048 <HAL_SPI_MspInit+0x1b4>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	4b5c      	ldr	r3, [pc, #368]	; (8003048 <HAL_SPI_MspInit+0x1b4>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a5b      	ldr	r2, [pc, #364]	; (8003048 <HAL_SPI_MspInit+0x1b4>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b59      	ldr	r3, [pc, #356]	; (8003048 <HAL_SPI_MspInit+0x1b4>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002eee:	23e0      	movs	r3, #224	; 0xe0
 8002ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002efe:	2305      	movs	r3, #5
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	4619      	mov	r1, r3
 8002f08:	4850      	ldr	r0, [pc, #320]	; (800304c <HAL_SPI_MspInit+0x1b8>)
 8002f0a:	f000 ff41 	bl	8003d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f0e:	e094      	b.n	800303a <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a4e      	ldr	r2, [pc, #312]	; (8003050 <HAL_SPI_MspInit+0x1bc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	f040 808f 	bne.w	800303a <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	4b49      	ldr	r3, [pc, #292]	; (8003048 <HAL_SPI_MspInit+0x1b4>)
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	4a48      	ldr	r2, [pc, #288]	; (8003048 <HAL_SPI_MspInit+0x1b4>)
 8002f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2c:	4b46      	ldr	r3, [pc, #280]	; (8003048 <HAL_SPI_MspInit+0x1b4>)
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	4b42      	ldr	r3, [pc, #264]	; (8003048 <HAL_SPI_MspInit+0x1b4>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	4a41      	ldr	r2, [pc, #260]	; (8003048 <HAL_SPI_MspInit+0x1b4>)
 8002f42:	f043 0302 	orr.w	r3, r3, #2
 8002f46:	6313      	str	r3, [r2, #48]	; 0x30
 8002f48:	4b3f      	ldr	r3, [pc, #252]	; (8003048 <HAL_SPI_MspInit+0x1b4>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f54:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f62:	2303      	movs	r3, #3
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f66:	2305      	movs	r3, #5
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6a:	f107 031c 	add.w	r3, r7, #28
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4838      	ldr	r0, [pc, #224]	; (8003054 <HAL_SPI_MspInit+0x1c0>)
 8002f72:	f000 ff0d 	bl	8003d90 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002f76:	4b38      	ldr	r3, [pc, #224]	; (8003058 <HAL_SPI_MspInit+0x1c4>)
 8002f78:	4a38      	ldr	r2, [pc, #224]	; (800305c <HAL_SPI_MspInit+0x1c8>)
 8002f7a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002f7c:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_SPI_MspInit+0x1c4>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f82:	4b35      	ldr	r3, [pc, #212]	; (8003058 <HAL_SPI_MspInit+0x1c4>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f88:	4b33      	ldr	r3, [pc, #204]	; (8003058 <HAL_SPI_MspInit+0x1c4>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f8e:	4b32      	ldr	r3, [pc, #200]	; (8003058 <HAL_SPI_MspInit+0x1c4>)
 8002f90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f94:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f96:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_SPI_MspInit+0x1c4>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f9c:	4b2e      	ldr	r3, [pc, #184]	; (8003058 <HAL_SPI_MspInit+0x1c4>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002fa2:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_SPI_MspInit+0x1c4>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_SPI_MspInit+0x1c4>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fae:	4b2a      	ldr	r3, [pc, #168]	; (8003058 <HAL_SPI_MspInit+0x1c4>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002fb4:	4828      	ldr	r0, [pc, #160]	; (8003058 <HAL_SPI_MspInit+0x1c4>)
 8002fb6:	f000 fb6f 	bl	8003698 <HAL_DMA_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8002fc0:	f7ff fe72 	bl	8002ca8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a24      	ldr	r2, [pc, #144]	; (8003058 <HAL_SPI_MspInit+0x1c4>)
 8002fc8:	64da      	str	r2, [r3, #76]	; 0x4c
 8002fca:	4a23      	ldr	r2, [pc, #140]	; (8003058 <HAL_SPI_MspInit+0x1c4>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_SPI_MspInit+0x1cc>)
 8002fd2:	4a24      	ldr	r2, [pc, #144]	; (8003064 <HAL_SPI_MspInit+0x1d0>)
 8002fd4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002fd6:	4b22      	ldr	r3, [pc, #136]	; (8003060 <HAL_SPI_MspInit+0x1cc>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fdc:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_SPI_MspInit+0x1cc>)
 8002fde:	2240      	movs	r2, #64	; 0x40
 8002fe0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe2:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <HAL_SPI_MspInit+0x1cc>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_SPI_MspInit+0x1cc>)
 8002fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fee:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_SPI_MspInit+0x1cc>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <HAL_SPI_MspInit+0x1cc>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002ffc:	4b18      	ldr	r3, [pc, #96]	; (8003060 <HAL_SPI_MspInit+0x1cc>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_SPI_MspInit+0x1cc>)
 8003004:	2200      	movs	r2, #0
 8003006:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_SPI_MspInit+0x1cc>)
 800300a:	2200      	movs	r2, #0
 800300c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800300e:	4814      	ldr	r0, [pc, #80]	; (8003060 <HAL_SPI_MspInit+0x1cc>)
 8003010:	f000 fb42 	bl	8003698 <HAL_DMA_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 800301a:	f7ff fe45 	bl	8002ca8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a0f      	ldr	r2, [pc, #60]	; (8003060 <HAL_SPI_MspInit+0x1cc>)
 8003022:	649a      	str	r2, [r3, #72]	; 0x48
 8003024:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <HAL_SPI_MspInit+0x1cc>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800302a:	2200      	movs	r2, #0
 800302c:	2100      	movs	r1, #0
 800302e:	2024      	movs	r0, #36	; 0x24
 8003030:	f000 fafb 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003034:	2024      	movs	r0, #36	; 0x24
 8003036:	f000 fb14 	bl	8003662 <HAL_NVIC_EnableIRQ>
}
 800303a:	bf00      	nop
 800303c:	3730      	adds	r7, #48	; 0x30
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40013000 	.word	0x40013000
 8003048:	40023800 	.word	0x40023800
 800304c:	40020000 	.word	0x40020000
 8003050:	40003800 	.word	0x40003800
 8003054:	40020400 	.word	0x40020400
 8003058:	20000424 	.word	0x20000424
 800305c:	40026058 	.word	0x40026058
 8003060:	20000484 	.word	0x20000484
 8003064:	40026070 	.word	0x40026070

08003068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <HAL_TIM_Base_MspInit+0x3c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d10d      	bne.n	8003096 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_TIM_Base_MspInit+0x40>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <HAL_TIM_Base_MspInit+0x40>)
 8003084:	f043 0310 	orr.w	r3, r3, #16
 8003088:	6413      	str	r3, [r2, #64]	; 0x40
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <HAL_TIM_Base_MspInit+0x40>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40001000 	.word	0x40001000
 80030a8:	40023800 	.word	0x40023800

080030ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a34      	ldr	r2, [pc, #208]	; (800319c <HAL_UART_MspInit+0xf0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d161      	bne.n	8003192 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	4b33      	ldr	r3, [pc, #204]	; (80031a0 <HAL_UART_MspInit+0xf4>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	4a32      	ldr	r2, [pc, #200]	; (80031a0 <HAL_UART_MspInit+0xf4>)
 80030d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030dc:	6413      	str	r3, [r2, #64]	; 0x40
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <HAL_UART_MspInit+0xf4>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <HAL_UART_MspInit+0xf4>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <HAL_UART_MspInit+0xf4>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6313      	str	r3, [r2, #48]	; 0x30
 80030fa:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <HAL_UART_MspInit+0xf4>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003106:	230c      	movs	r3, #12
 8003108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003112:	2303      	movs	r3, #3
 8003114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003116:	2307      	movs	r3, #7
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	f107 0314 	add.w	r3, r7, #20
 800311e:	4619      	mov	r1, r3
 8003120:	4820      	ldr	r0, [pc, #128]	; (80031a4 <HAL_UART_MspInit+0xf8>)
 8003122:	f000 fe35 	bl	8003d90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <HAL_UART_MspInit+0xfc>)
 8003128:	4a20      	ldr	r2, [pc, #128]	; (80031ac <HAL_UART_MspInit+0x100>)
 800312a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800312c:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_UART_MspInit+0xfc>)
 800312e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003132:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003134:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <HAL_UART_MspInit+0xfc>)
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800313a:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_UART_MspInit+0xfc>)
 800313c:	2200      	movs	r2, #0
 800313e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <HAL_UART_MspInit+0xfc>)
 8003142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003146:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003148:	4b17      	ldr	r3, [pc, #92]	; (80031a8 <HAL_UART_MspInit+0xfc>)
 800314a:	2200      	movs	r2, #0
 800314c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800314e:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <HAL_UART_MspInit+0xfc>)
 8003150:	2200      	movs	r2, #0
 8003152:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003154:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <HAL_UART_MspInit+0xfc>)
 8003156:	2200      	movs	r2, #0
 8003158:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <HAL_UART_MspInit+0xfc>)
 800315c:	2200      	movs	r2, #0
 800315e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <HAL_UART_MspInit+0xfc>)
 8003162:	2200      	movs	r2, #0
 8003164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003166:	4810      	ldr	r0, [pc, #64]	; (80031a8 <HAL_UART_MspInit+0xfc>)
 8003168:	f000 fa96 	bl	8003698 <HAL_DMA_Init>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003172:	f7ff fd99 	bl	8002ca8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a0b      	ldr	r2, [pc, #44]	; (80031a8 <HAL_UART_MspInit+0xfc>)
 800317a:	635a      	str	r2, [r3, #52]	; 0x34
 800317c:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <HAL_UART_MspInit+0xfc>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	2100      	movs	r1, #0
 8003186:	2026      	movs	r0, #38	; 0x26
 8003188:	f000 fa4f 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800318c:	2026      	movs	r0, #38	; 0x26
 800318e:	f000 fa68 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003192:	bf00      	nop
 8003194:	3728      	adds	r7, #40	; 0x28
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40004400 	.word	0x40004400
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40020000 	.word	0x40020000
 80031a8:	20000570 	.word	0x20000570
 80031ac:	400260a0 	.word	0x400260a0

080031b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031b4:	e7fe      	b.n	80031b4 <NMI_Handler+0x4>

080031b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b6:	b480      	push	{r7}
 80031b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ba:	e7fe      	b.n	80031ba <HardFault_Handler+0x4>

080031bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c0:	e7fe      	b.n	80031c0 <MemManage_Handler+0x4>

080031c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c6:	e7fe      	b.n	80031c6 <BusFault_Handler+0x4>

080031c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031cc:	e7fe      	b.n	80031cc <UsageFault_Handler+0x4>

080031ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ce:	b480      	push	{r7}
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031fc:	f000 f8f6 	bl	80033ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}

08003204 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003208:	4802      	ldr	r0, [pc, #8]	; (8003214 <DMA1_Stream3_IRQHandler+0x10>)
 800320a:	f000 fb85 	bl	8003918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000424 	.word	0x20000424

08003218 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <DMA1_Stream4_IRQHandler+0x10>)
 800321e:	f000 fb7b 	bl	8003918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000484 	.word	0x20000484

0800322c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003230:	4802      	ldr	r0, [pc, #8]	; (800323c <DMA1_Stream6_IRQHandler+0x10>)
 8003232:	f000 fb71 	bl	8003918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000570 	.word	0x20000570

08003240 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX1280_INT_Pin);
 8003244:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003248:	f000 ff8a 	bl	8004160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}

08003250 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <SPI2_IRQHandler+0x10>)
 8003256:	f004 f801 	bl	800725c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	200003cc 	.word	0x200003cc

08003264 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003268:	4802      	ldr	r0, [pc, #8]	; (8003274 <USART2_IRQHandler+0x10>)
 800326a:	f004 fb99 	bl	80079a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	2000052c 	.word	0x2000052c

08003278 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800327c:	4802      	ldr	r0, [pc, #8]	; (8003288 <OTG_FS_IRQHandler+0x10>)
 800327e:	f001 febb 	bl	8004ff8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20001ab4 	.word	0x20001ab4

0800328c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return 1;
 8003290:	2301      	movs	r3, #1
}
 8003292:	4618      	mov	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <_kill>:

int _kill(int pid, int sig)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032a6:	f009 fb95 	bl	800c9d4 <__errno>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2216      	movs	r2, #22
 80032ae:	601a      	str	r2, [r3, #0]
  return -1;
 80032b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <_exit>:

void _exit (int status)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032c4:	f04f 31ff 	mov.w	r1, #4294967295
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ffe7 	bl	800329c <_kill>
  while (1) {}    /* Make sure we hang here */
 80032ce:	e7fe      	b.n	80032ce <_exit+0x12>

080032d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <SystemInit+0x20>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032da:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <SystemInit+0x20>)
 80032dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032e4:	bf00      	nop
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800332c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032f8:	480d      	ldr	r0, [pc, #52]	; (8003330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032fa:	490e      	ldr	r1, [pc, #56]	; (8003334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032fc:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003300:	e002      	b.n	8003308 <LoopCopyDataInit>

08003302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003306:	3304      	adds	r3, #4

08003308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800330c:	d3f9      	bcc.n	8003302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003310:	4c0b      	ldr	r4, [pc, #44]	; (8003340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003314:	e001      	b.n	800331a <LoopFillZerobss>

08003316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003318:	3204      	adds	r2, #4

0800331a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800331c:	d3fb      	bcc.n	8003316 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800331e:	f7ff ffd7 	bl	80032d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003322:	f009 fb5d 	bl	800c9e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003326:	f7ff f9a1 	bl	800266c <main>
  bx  lr    
 800332a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800332c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003334:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8003338:	0800cd10 	.word	0x0800cd10
  ldr r2, =_sbss
 800333c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8003340:	200021ec 	.word	0x200021ec

08003344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003344:	e7fe      	b.n	8003344 <ADC_IRQHandler>
	...

08003348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <HAL_Init+0x40>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <HAL_Init+0x40>)
 8003352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_Init+0x40>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_Init+0x40>)
 800335e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_Init+0x40>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <HAL_Init+0x40>)
 800336a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003370:	2003      	movs	r0, #3
 8003372:	f000 f94f 	bl	8003614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003376:	2000      	movs	r0, #0
 8003378:	f000 f808 	bl	800338c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800337c:	f7ff fc9a 	bl	8002cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023c00 	.word	0x40023c00

0800338c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003394:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_InitTick+0x54>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_InitTick+0x58>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f967 	bl	800367e <HAL_SYSTICK_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00e      	b.n	80033d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b0f      	cmp	r3, #15
 80033be:	d80a      	bhi.n	80033d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c0:	2200      	movs	r2, #0
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	f000 f92f 	bl	800362a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033cc:	4a06      	ldr	r2, [pc, #24]	; (80033e8 <HAL_InitTick+0x5c>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e000      	b.n	80033d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20000000 	.word	0x20000000
 80033e4:	20000008 	.word	0x20000008
 80033e8:	20000004 	.word	0x20000004

080033ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_IncTick+0x20>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_IncTick+0x24>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_IncTick+0x24>)
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000008 	.word	0x20000008
 8003410:	200005d0 	.word	0x200005d0

08003414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return uwTick;
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <HAL_GetTick+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	200005d0 	.word	0x200005d0

0800342c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff ffee 	bl	8003414 <HAL_GetTick>
 8003438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d005      	beq.n	8003452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_Delay+0x44>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003452:	bf00      	nop
 8003454:	f7ff ffde 	bl	8003414 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d8f7      	bhi.n	8003454 <HAL_Delay+0x28>
  {
  }
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000008 	.word	0x20000008

08003474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003490:	4013      	ands	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800349c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a6:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	60d3      	str	r3, [r2, #12]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <__NVIC_GetPriorityGrouping+0x18>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	f003 0307 	and.w	r3, r3, #7
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	db0b      	blt.n	8003502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	4907      	ldr	r1, [pc, #28]	; (8003510 <__NVIC_EnableIRQ+0x38>)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2001      	movs	r0, #1
 80034fa:	fa00 f202 	lsl.w	r2, r0, r2
 80034fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	e000e100 	.word	0xe000e100

08003514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	6039      	str	r1, [r7, #0]
 800351e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	db0a      	blt.n	800353e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b2da      	uxtb	r2, r3
 800352c:	490c      	ldr	r1, [pc, #48]	; (8003560 <__NVIC_SetPriority+0x4c>)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	440b      	add	r3, r1
 8003538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800353c:	e00a      	b.n	8003554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4908      	ldr	r1, [pc, #32]	; (8003564 <__NVIC_SetPriority+0x50>)
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	3b04      	subs	r3, #4
 800354c:	0112      	lsls	r2, r2, #4
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	440b      	add	r3, r1
 8003552:	761a      	strb	r2, [r3, #24]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	e000e100 	.word	0xe000e100
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	; 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f1c3 0307 	rsb	r3, r3, #7
 8003582:	2b04      	cmp	r3, #4
 8003584:	bf28      	it	cs
 8003586:	2304      	movcs	r3, #4
 8003588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3304      	adds	r3, #4
 800358e:	2b06      	cmp	r3, #6
 8003590:	d902      	bls.n	8003598 <NVIC_EncodePriority+0x30>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3b03      	subs	r3, #3
 8003596:	e000      	b.n	800359a <NVIC_EncodePriority+0x32>
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	401a      	ands	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	43d9      	mvns	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	4313      	orrs	r3, r2
         );
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3724      	adds	r7, #36	; 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3b01      	subs	r3, #1
 80035dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035e0:	d301      	bcc.n	80035e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035e2:	2301      	movs	r3, #1
 80035e4:	e00f      	b.n	8003606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <SysTick_Config+0x40>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ee:	210f      	movs	r1, #15
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295
 80035f4:	f7ff ff8e 	bl	8003514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <SysTick_Config+0x40>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035fe:	4b04      	ldr	r3, [pc, #16]	; (8003610 <SysTick_Config+0x40>)
 8003600:	2207      	movs	r2, #7
 8003602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	e000e010 	.word	0xe000e010

08003614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ff29 	bl	8003474 <__NVIC_SetPriorityGrouping>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800363c:	f7ff ff3e 	bl	80034bc <__NVIC_GetPriorityGrouping>
 8003640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	6978      	ldr	r0, [r7, #20]
 8003648:	f7ff ff8e 	bl	8003568 <NVIC_EncodePriority>
 800364c:	4602      	mov	r2, r0
 800364e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff5d 	bl	8003514 <__NVIC_SetPriority>
}
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	4603      	mov	r3, r0
 800366a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800366c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff31 	bl	80034d8 <__NVIC_EnableIRQ>
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ffa2 	bl	80035d0 <SysTick_Config>
 800368c:	4603      	mov	r3, r0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036a4:	f7ff feb6 	bl	8003414 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e099      	b.n	80037e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d4:	e00f      	b.n	80036f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036d6:	f7ff fe9d 	bl	8003414 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b05      	cmp	r3, #5
 80036e2:	d908      	bls.n	80036f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2203      	movs	r2, #3
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e078      	b.n	80037e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e8      	bne.n	80036d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <HAL_DMA_Init+0x158>)
 8003710:	4013      	ands	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003722:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	2b04      	cmp	r3, #4
 800374e:	d107      	bne.n	8003760 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	4313      	orrs	r3, r2
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f023 0307 	bic.w	r3, r3, #7
 8003776:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	2b04      	cmp	r3, #4
 8003788:	d117      	bne.n	80037ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00e      	beq.n	80037ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fa7b 	bl	8003c98 <DMA_CheckFifoParam>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2240      	movs	r2, #64	; 0x40
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037b6:	2301      	movs	r3, #1
 80037b8:	e016      	b.n	80037e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa32 	bl	8003c2c <DMA_CalcBaseAndBitshift>
 80037c8:	4603      	mov	r3, r0
 80037ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	223f      	movs	r2, #63	; 0x3f
 80037d2:	409a      	lsls	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	f010803f 	.word	0xf010803f

080037f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003800:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003802:	f7ff fe07 	bl	8003414 <HAL_GetTick>
 8003806:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d008      	beq.n	8003826 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2280      	movs	r2, #128	; 0x80
 8003818:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e052      	b.n	80038cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0216 	bic.w	r2, r2, #22
 8003834:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003844:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d103      	bne.n	8003856 <HAL_DMA_Abort+0x62>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003852:	2b00      	cmp	r3, #0
 8003854:	d007      	beq.n	8003866 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0208 	bic.w	r2, r2, #8
 8003864:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003876:	e013      	b.n	80038a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003878:	f7ff fdcc 	bl	8003414 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b05      	cmp	r3, #5
 8003884:	d90c      	bls.n	80038a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2203      	movs	r2, #3
 8003890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e015      	b.n	80038cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e4      	bne.n	8003878 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	223f      	movs	r2, #63	; 0x3f
 80038b4:	409a      	lsls	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d004      	beq.n	80038f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00c      	b.n	800390c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2205      	movs	r2, #5
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003924:	4b8e      	ldr	r3, [pc, #568]	; (8003b60 <HAL_DMA_IRQHandler+0x248>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a8e      	ldr	r2, [pc, #568]	; (8003b64 <HAL_DMA_IRQHandler+0x24c>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	0a9b      	lsrs	r3, r3, #10
 8003930:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	2208      	movs	r2, #8
 8003944:	409a      	lsls	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d01a      	beq.n	8003984 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0204 	bic.w	r2, r2, #4
 800396a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	2208      	movs	r2, #8
 8003972:	409a      	lsls	r2, r3
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397c:	f043 0201 	orr.w	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	2201      	movs	r2, #1
 800398a:	409a      	lsls	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d012      	beq.n	80039ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a6:	2201      	movs	r2, #1
 80039a8:	409a      	lsls	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	f043 0202 	orr.w	r2, r3, #2
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039be:	2204      	movs	r2, #4
 80039c0:	409a      	lsls	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d012      	beq.n	80039f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00b      	beq.n	80039f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	2204      	movs	r2, #4
 80039de:	409a      	lsls	r2, r3
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e8:	f043 0204 	orr.w	r2, r3, #4
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f4:	2210      	movs	r2, #16
 80039f6:	409a      	lsls	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d043      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d03c      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	2210      	movs	r2, #16
 8003a14:	409a      	lsls	r2, r3
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d018      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d108      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d024      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	4798      	blx	r3
 8003a46:	e01f      	b.n	8003a88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01b      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
 8003a58:	e016      	b.n	8003a88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0208 	bic.w	r2, r2, #8
 8003a76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 808f 	beq.w	8003bb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8087 	beq.w	8003bb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aae:	2220      	movs	r2, #32
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b05      	cmp	r3, #5
 8003ac0:	d136      	bne.n	8003b30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0216 	bic.w	r2, r2, #22
 8003ad0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ae0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d103      	bne.n	8003af2 <HAL_DMA_IRQHandler+0x1da>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0208 	bic.w	r2, r2, #8
 8003b00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	223f      	movs	r2, #63	; 0x3f
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d07e      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4798      	blx	r3
        }
        return;
 8003b2e:	e079      	b.n	8003c24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01d      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10d      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d031      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	4798      	blx	r3
 8003b5c:	e02c      	b.n	8003bb8 <HAL_DMA_IRQHandler+0x2a0>
 8003b5e:	bf00      	nop
 8003b60:	20000000 	.word	0x20000000
 8003b64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d023      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
 8003b78:	e01e      	b.n	8003bb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10f      	bne.n	8003ba8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0210 	bic.w	r2, r2, #16
 8003b96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d032      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d022      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2205      	movs	r2, #5
 8003bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	3301      	adds	r3, #1
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d307      	bcc.n	8003c00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f2      	bne.n	8003be4 <HAL_DMA_IRQHandler+0x2cc>
 8003bfe:	e000      	b.n	8003c02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
 8003c22:	e000      	b.n	8003c26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c24:	bf00      	nop
    }
  }
}
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	3b10      	subs	r3, #16
 8003c3c:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <DMA_CalcBaseAndBitshift+0x64>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c46:	4a13      	ldr	r2, [pc, #76]	; (8003c94 <DMA_CalcBaseAndBitshift+0x68>)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d909      	bls.n	8003c6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c62:	f023 0303 	bic.w	r3, r3, #3
 8003c66:	1d1a      	adds	r2, r3, #4
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c6c:	e007      	b.n	8003c7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	aaaaaaab 	.word	0xaaaaaaab
 8003c94:	0800ccec 	.word	0x0800ccec

08003c98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d11f      	bne.n	8003cf2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d856      	bhi.n	8003d66 <DMA_CheckFifoParam+0xce>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <DMA_CheckFifoParam+0x28>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003cd1 	.word	0x08003cd1
 8003cc4:	08003ce3 	.word	0x08003ce3
 8003cc8:	08003cd1 	.word	0x08003cd1
 8003ccc:	08003d67 	.word	0x08003d67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d046      	beq.n	8003d6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce0:	e043      	b.n	8003d6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cea:	d140      	bne.n	8003d6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf0:	e03d      	b.n	8003d6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfa:	d121      	bne.n	8003d40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d837      	bhi.n	8003d72 <DMA_CheckFifoParam+0xda>
 8003d02:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <DMA_CheckFifoParam+0x70>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d19 	.word	0x08003d19
 8003d0c:	08003d1f 	.word	0x08003d1f
 8003d10:	08003d19 	.word	0x08003d19
 8003d14:	08003d31 	.word	0x08003d31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d1c:	e030      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d025      	beq.n	8003d76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d2e:	e022      	b.n	8003d76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d38:	d11f      	bne.n	8003d7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d3e:	e01c      	b.n	8003d7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d903      	bls.n	8003d4e <DMA_CheckFifoParam+0xb6>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d003      	beq.n	8003d54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d4c:	e018      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
      break;
 8003d52:	e015      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00e      	beq.n	8003d7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
      break;
 8003d64:	e00b      	b.n	8003d7e <DMA_CheckFifoParam+0xe6>
      break;
 8003d66:	bf00      	nop
 8003d68:	e00a      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e008      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e006      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      break;
 8003d72:	bf00      	nop
 8003d74:	e004      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      break;
 8003d76:	bf00      	nop
 8003d78:	e002      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d7a:	bf00      	nop
 8003d7c:	e000      	b.n	8003d80 <DMA_CheckFifoParam+0xe8>
      break;
 8003d7e:	bf00      	nop
    }
  } 
  
  return status; 
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop

08003d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b089      	sub	sp, #36	; 0x24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	e16b      	b.n	8004084 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dac:	2201      	movs	r2, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	f040 815a 	bne.w	800407e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d005      	beq.n	8003de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d130      	bne.n	8003e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	2203      	movs	r2, #3
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4013      	ands	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e18:	2201      	movs	r2, #1
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 0201 	and.w	r2, r3, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d017      	beq.n	8003e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d123      	bne.n	8003ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	08da      	lsrs	r2, r3, #3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3208      	adds	r2, #8
 8003e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	220f      	movs	r2, #15
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	08da      	lsrs	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3208      	adds	r2, #8
 8003ece:	69b9      	ldr	r1, [r7, #24]
 8003ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0203 	and.w	r2, r3, #3
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80b4 	beq.w	800407e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	4b60      	ldr	r3, [pc, #384]	; (800409c <HAL_GPIO_Init+0x30c>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	4a5f      	ldr	r2, [pc, #380]	; (800409c <HAL_GPIO_Init+0x30c>)
 8003f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f24:	6453      	str	r3, [r2, #68]	; 0x44
 8003f26:	4b5d      	ldr	r3, [pc, #372]	; (800409c <HAL_GPIO_Init+0x30c>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f32:	4a5b      	ldr	r2, [pc, #364]	; (80040a0 <HAL_GPIO_Init+0x310>)
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	3302      	adds	r3, #2
 8003f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	220f      	movs	r2, #15
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a52      	ldr	r2, [pc, #328]	; (80040a4 <HAL_GPIO_Init+0x314>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d02b      	beq.n	8003fb6 <HAL_GPIO_Init+0x226>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a51      	ldr	r2, [pc, #324]	; (80040a8 <HAL_GPIO_Init+0x318>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d025      	beq.n	8003fb2 <HAL_GPIO_Init+0x222>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a50      	ldr	r2, [pc, #320]	; (80040ac <HAL_GPIO_Init+0x31c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01f      	beq.n	8003fae <HAL_GPIO_Init+0x21e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a4f      	ldr	r2, [pc, #316]	; (80040b0 <HAL_GPIO_Init+0x320>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d019      	beq.n	8003faa <HAL_GPIO_Init+0x21a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a4e      	ldr	r2, [pc, #312]	; (80040b4 <HAL_GPIO_Init+0x324>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <HAL_GPIO_Init+0x216>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a4d      	ldr	r2, [pc, #308]	; (80040b8 <HAL_GPIO_Init+0x328>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00d      	beq.n	8003fa2 <HAL_GPIO_Init+0x212>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a4c      	ldr	r2, [pc, #304]	; (80040bc <HAL_GPIO_Init+0x32c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d007      	beq.n	8003f9e <HAL_GPIO_Init+0x20e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a4b      	ldr	r2, [pc, #300]	; (80040c0 <HAL_GPIO_Init+0x330>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d101      	bne.n	8003f9a <HAL_GPIO_Init+0x20a>
 8003f96:	2307      	movs	r3, #7
 8003f98:	e00e      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	e00c      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003f9e:	2306      	movs	r3, #6
 8003fa0:	e00a      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fa2:	2305      	movs	r3, #5
 8003fa4:	e008      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	e006      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003faa:	2303      	movs	r3, #3
 8003fac:	e004      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e002      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_GPIO_Init+0x228>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	f002 0203 	and.w	r2, r2, #3
 8003fbe:	0092      	lsls	r2, r2, #2
 8003fc0:	4093      	lsls	r3, r2
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fc8:	4935      	ldr	r1, [pc, #212]	; (80040a0 <HAL_GPIO_Init+0x310>)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	3302      	adds	r3, #2
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fd6:	4b3b      	ldr	r3, [pc, #236]	; (80040c4 <HAL_GPIO_Init+0x334>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ffa:	4a32      	ldr	r2, [pc, #200]	; (80040c4 <HAL_GPIO_Init+0x334>)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004000:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <HAL_GPIO_Init+0x334>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004024:	4a27      	ldr	r2, [pc, #156]	; (80040c4 <HAL_GPIO_Init+0x334>)
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800402a:	4b26      	ldr	r3, [pc, #152]	; (80040c4 <HAL_GPIO_Init+0x334>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800404e:	4a1d      	ldr	r2, [pc, #116]	; (80040c4 <HAL_GPIO_Init+0x334>)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004054:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <HAL_GPIO_Init+0x334>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	43db      	mvns	r3, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4013      	ands	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004078:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <HAL_GPIO_Init+0x334>)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3301      	adds	r3, #1
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2b0f      	cmp	r3, #15
 8004088:	f67f ae90 	bls.w	8003dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	3724      	adds	r7, #36	; 0x24
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800
 80040a0:	40013800 	.word	0x40013800
 80040a4:	40020000 	.word	0x40020000
 80040a8:	40020400 	.word	0x40020400
 80040ac:	40020800 	.word	0x40020800
 80040b0:	40020c00 	.word	0x40020c00
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40021400 	.word	0x40021400
 80040bc:	40021800 	.word	0x40021800
 80040c0:	40021c00 	.word	0x40021c00
 80040c4:	40013c00 	.word	0x40013c00

080040c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	887b      	ldrh	r3, [r7, #2]
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
 80040e4:	e001      	b.n	80040ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040e6:	2300      	movs	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	807b      	strh	r3, [r7, #2]
 8004104:	4613      	mov	r3, r2
 8004106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004108:	787b      	ldrb	r3, [r7, #1]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800410e:	887a      	ldrh	r2, [r7, #2]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004114:	e003      	b.n	800411e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004116:	887b      	ldrh	r3, [r7, #2]
 8004118:	041a      	lsls	r2, r3, #16
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	619a      	str	r2, [r3, #24]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800413c:	887a      	ldrh	r2, [r7, #2]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4013      	ands	r3, r2
 8004142:	041a      	lsls	r2, r3, #16
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	43d9      	mvns	r1, r3
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	400b      	ands	r3, r1
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	619a      	str	r2, [r3, #24]
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800416a:	4b08      	ldr	r3, [pc, #32]	; (800418c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d006      	beq.n	8004184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004176:	4a05      	ldr	r2, [pc, #20]	; (800418c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc ff2e 	bl	8000fe0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40013c00 	.word	0x40013c00

08004190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e12b      	b.n	80043fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fe fda4 	bl	8002d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2224      	movs	r2, #36	; 0x24
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041f4:	f002 fc9e 	bl	8006b34 <HAL_RCC_GetPCLK1Freq>
 80041f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4a81      	ldr	r2, [pc, #516]	; (8004404 <HAL_I2C_Init+0x274>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d807      	bhi.n	8004214 <HAL_I2C_Init+0x84>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4a80      	ldr	r2, [pc, #512]	; (8004408 <HAL_I2C_Init+0x278>)
 8004208:	4293      	cmp	r3, r2
 800420a:	bf94      	ite	ls
 800420c:	2301      	movls	r3, #1
 800420e:	2300      	movhi	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	e006      	b.n	8004222 <HAL_I2C_Init+0x92>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a7d      	ldr	r2, [pc, #500]	; (800440c <HAL_I2C_Init+0x27c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	bf94      	ite	ls
 800421c:	2301      	movls	r3, #1
 800421e:	2300      	movhi	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0e7      	b.n	80043fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4a78      	ldr	r2, [pc, #480]	; (8004410 <HAL_I2C_Init+0x280>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	0c9b      	lsrs	r3, r3, #18
 8004234:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4a6a      	ldr	r2, [pc, #424]	; (8004404 <HAL_I2C_Init+0x274>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d802      	bhi.n	8004264 <HAL_I2C_Init+0xd4>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	3301      	adds	r3, #1
 8004262:	e009      	b.n	8004278 <HAL_I2C_Init+0xe8>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800426a:	fb02 f303 	mul.w	r3, r2, r3
 800426e:	4a69      	ldr	r2, [pc, #420]	; (8004414 <HAL_I2C_Init+0x284>)
 8004270:	fba2 2303 	umull	r2, r3, r2, r3
 8004274:	099b      	lsrs	r3, r3, #6
 8004276:	3301      	adds	r3, #1
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	430b      	orrs	r3, r1
 800427e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800428a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	495c      	ldr	r1, [pc, #368]	; (8004404 <HAL_I2C_Init+0x274>)
 8004294:	428b      	cmp	r3, r1
 8004296:	d819      	bhi.n	80042cc <HAL_I2C_Init+0x13c>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1e59      	subs	r1, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a6:	1c59      	adds	r1, r3, #1
 80042a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042ac:	400b      	ands	r3, r1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <HAL_I2C_Init+0x138>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1e59      	subs	r1, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80042c0:	3301      	adds	r3, #1
 80042c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c6:	e051      	b.n	800436c <HAL_I2C_Init+0x1dc>
 80042c8:	2304      	movs	r3, #4
 80042ca:	e04f      	b.n	800436c <HAL_I2C_Init+0x1dc>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d111      	bne.n	80042f8 <HAL_I2C_Init+0x168>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1e58      	subs	r0, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	440b      	add	r3, r1
 80042e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e6:	3301      	adds	r3, #1
 80042e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bf0c      	ite	eq
 80042f0:	2301      	moveq	r3, #1
 80042f2:	2300      	movne	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	e012      	b.n	800431e <HAL_I2C_Init+0x18e>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1e58      	subs	r0, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	0099      	lsls	r1, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	fbb0 f3f3 	udiv	r3, r0, r3
 800430e:	3301      	adds	r3, #1
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_I2C_Init+0x196>
 8004322:	2301      	movs	r3, #1
 8004324:	e022      	b.n	800436c <HAL_I2C_Init+0x1dc>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10e      	bne.n	800434c <HAL_I2C_Init+0x1bc>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1e58      	subs	r0, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6859      	ldr	r1, [r3, #4]
 8004336:	460b      	mov	r3, r1
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	440b      	add	r3, r1
 800433c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004340:	3301      	adds	r3, #1
 8004342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434a:	e00f      	b.n	800436c <HAL_I2C_Init+0x1dc>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1e58      	subs	r0, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6859      	ldr	r1, [r3, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	0099      	lsls	r1, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004362:	3301      	adds	r3, #1
 8004364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004368:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	6809      	ldr	r1, [r1, #0]
 8004370:	4313      	orrs	r3, r2
 8004372:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800439a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6911      	ldr	r1, [r2, #16]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68d2      	ldr	r2, [r2, #12]
 80043a6:	4311      	orrs	r1, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	000186a0 	.word	0x000186a0
 8004408:	001e847f 	.word	0x001e847f
 800440c:	003d08ff 	.word	0x003d08ff
 8004410:	431bde83 	.word	0x431bde83
 8004414:	10624dd3 	.word	0x10624dd3

08004418 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e128      	b.n	800467c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a90      	ldr	r2, [pc, #576]	; (8004684 <HAL_I2S_Init+0x26c>)
 8004442:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7fe fca5 	bl	8002d94 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004460:	f023 030f 	bic.w	r3, r3, #15
 8004464:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2202      	movs	r2, #2
 800446c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d060      	beq.n	8004538 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800447e:	2310      	movs	r3, #16
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	e001      	b.n	8004488 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004484:	2320      	movs	r3, #32
 8004486:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b20      	cmp	r3, #32
 800448e:	d802      	bhi.n	8004496 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004496:	2001      	movs	r0, #1
 8004498:	f002 fc56 	bl	8006d48 <HAL_RCCEx_GetPeriphCLKFreq>
 800449c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a6:	d125      	bne.n	80044f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d010      	beq.n	80044d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	461a      	mov	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	3305      	adds	r3, #5
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	e01f      	b.n	8004512 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	461a      	mov	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ee:	3305      	adds	r3, #5
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	e00e      	b.n	8004512 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	461a      	mov	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	fbb2 f3f3 	udiv	r3, r2, r3
 800450e:	3305      	adds	r3, #5
 8004510:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4a5c      	ldr	r2, [pc, #368]	; (8004688 <HAL_I2S_Init+0x270>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	08db      	lsrs	r3, r3, #3
 800451c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	e003      	b.n	8004540 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004538:	2302      	movs	r3, #2
 800453a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d902      	bls.n	800454c <HAL_I2S_Init+0x134>
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	2bff      	cmp	r3, #255	; 0xff
 800454a:	d907      	bls.n	800455c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004550:	f043 0210 	orr.w	r2, r3, #16
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e08f      	b.n	800467c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	ea42 0103 	orr.w	r1, r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	430a      	orrs	r2, r1
 800456e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800457a:	f023 030f 	bic.w	r3, r3, #15
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6851      	ldr	r1, [r2, #4]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6892      	ldr	r2, [r2, #8]
 8004586:	4311      	orrs	r1, r2
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	68d2      	ldr	r2, [r2, #12]
 800458c:	4311      	orrs	r1, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6992      	ldr	r2, [r2, #24]
 8004592:	430a      	orrs	r2, r1
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800459e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d161      	bne.n	800466c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a38      	ldr	r2, [pc, #224]	; (800468c <HAL_I2S_Init+0x274>)
 80045ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a37      	ldr	r2, [pc, #220]	; (8004690 <HAL_I2S_Init+0x278>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d101      	bne.n	80045bc <HAL_I2S_Init+0x1a4>
 80045b8:	4b36      	ldr	r3, [pc, #216]	; (8004694 <HAL_I2S_Init+0x27c>)
 80045ba:	e001      	b.n	80045c0 <HAL_I2S_Init+0x1a8>
 80045bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	4932      	ldr	r1, [pc, #200]	; (8004690 <HAL_I2S_Init+0x278>)
 80045c8:	428a      	cmp	r2, r1
 80045ca:	d101      	bne.n	80045d0 <HAL_I2S_Init+0x1b8>
 80045cc:	4a31      	ldr	r2, [pc, #196]	; (8004694 <HAL_I2S_Init+0x27c>)
 80045ce:	e001      	b.n	80045d4 <HAL_I2S_Init+0x1bc>
 80045d0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80045d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80045d8:	f023 030f 	bic.w	r3, r3, #15
 80045dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <HAL_I2S_Init+0x278>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d101      	bne.n	80045ec <HAL_I2S_Init+0x1d4>
 80045e8:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <HAL_I2S_Init+0x27c>)
 80045ea:	e001      	b.n	80045f0 <HAL_I2S_Init+0x1d8>
 80045ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045f0:	2202      	movs	r2, #2
 80045f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a25      	ldr	r2, [pc, #148]	; (8004690 <HAL_I2S_Init+0x278>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d101      	bne.n	8004602 <HAL_I2S_Init+0x1ea>
 80045fe:	4b25      	ldr	r3, [pc, #148]	; (8004694 <HAL_I2S_Init+0x27c>)
 8004600:	e001      	b.n	8004606 <HAL_I2S_Init+0x1ee>
 8004602:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004612:	d003      	beq.n	800461c <HAL_I2S_Init+0x204>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d103      	bne.n	8004624 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800461c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	e001      	b.n	8004628 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004624:	2300      	movs	r3, #0
 8004626:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004632:	4313      	orrs	r3, r2
 8004634:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800463c:	4313      	orrs	r3, r2
 800463e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004646:	4313      	orrs	r3, r2
 8004648:	b29a      	uxth	r2, r3
 800464a:	897b      	ldrh	r3, [r7, #10]
 800464c:	4313      	orrs	r3, r2
 800464e:	b29b      	uxth	r3, r3
 8004650:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004654:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a0d      	ldr	r2, [pc, #52]	; (8004690 <HAL_I2S_Init+0x278>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d101      	bne.n	8004664 <HAL_I2S_Init+0x24c>
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <HAL_I2S_Init+0x27c>)
 8004662:	e001      	b.n	8004668 <HAL_I2S_Init+0x250>
 8004664:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004668:	897a      	ldrh	r2, [r7, #10]
 800466a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	0800478f 	.word	0x0800478f
 8004688:	cccccccd 	.word	0xcccccccd
 800468c:	080048a5 	.word	0x080048a5
 8004690:	40003800 	.word	0x40003800
 8004694:	40003400 	.word	0x40003400

08004698 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	881a      	ldrh	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	1c9a      	adds	r2, r3, #2
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10e      	bne.n	8004728 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004718:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff ffb8 	bl	8004698 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	b292      	uxth	r2, r2
 8004744:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	1c9a      	adds	r2, r3, #2
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10e      	bne.n	8004786 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004776:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff ff93 	bl	80046ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b086      	sub	sp, #24
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d13a      	bne.n	8004820 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d109      	bne.n	80047c8 <I2S_IRQHandler+0x3a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d102      	bne.n	80047c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff ffb4 	bl	8004730 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ce:	2b40      	cmp	r3, #64	; 0x40
 80047d0:	d126      	bne.n	8004820 <I2S_IRQHandler+0x92>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d11f      	bne.n	8004820 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	f043 0202 	orr.w	r2, r3, #2
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff ff50 	bl	80046c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b03      	cmp	r3, #3
 800482a:	d136      	bne.n	800489a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b02      	cmp	r3, #2
 8004834:	d109      	bne.n	800484a <I2S_IRQHandler+0xbc>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d102      	bne.n	800484a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ff45 	bl	80046d4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b08      	cmp	r3, #8
 8004852:	d122      	bne.n	800489a <I2S_IRQHandler+0x10c>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b20      	cmp	r3, #32
 8004860:	d11b      	bne.n	800489a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004870:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488c:	f043 0204 	orr.w	r2, r3, #4
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff ff13 	bl	80046c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800489a:	bf00      	nop
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a92      	ldr	r2, [pc, #584]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d101      	bne.n	80048c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80048be:	4b92      	ldr	r3, [pc, #584]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048c0:	e001      	b.n	80048c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80048c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a8b      	ldr	r2, [pc, #556]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d101      	bne.n	80048e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80048dc:	4b8a      	ldr	r3, [pc, #552]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048de:	e001      	b.n	80048e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80048e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f0:	d004      	beq.n	80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f040 8099 	bne.w	8004a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d107      	bne.n	8004916 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f925 	bl	8004b60 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d107      	bne.n	8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f9c8 	bl	8004cc0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d13a      	bne.n	80049b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d035      	beq.n	80049b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a6e      	ldr	r2, [pc, #440]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800494e:	4b6e      	ldr	r3, [pc, #440]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004950:	e001      	b.n	8004956 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004952:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4969      	ldr	r1, [pc, #420]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800495e:	428b      	cmp	r3, r1
 8004960:	d101      	bne.n	8004966 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004962:	4b69      	ldr	r3, [pc, #420]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004964:	e001      	b.n	800496a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004966:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800496a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800496e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800497e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f043 0202 	orr.w	r2, r3, #2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff fe88 	bl	80046c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	f040 80c3 	bne.w	8004b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80bd 	beq.w	8004b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a49      	ldr	r2, [pc, #292]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d101      	bne.n	80049e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80049e2:	4b49      	ldr	r3, [pc, #292]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049e4:	e001      	b.n	80049ea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80049e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4944      	ldr	r1, [pc, #272]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049f2:	428b      	cmp	r3, r1
 80049f4:	d101      	bne.n	80049fa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80049f6:	4b44      	ldr	r3, [pc, #272]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049f8:	e001      	b.n	80049fe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80049fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a02:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a04:	2300      	movs	r3, #0
 8004a06:	60bb      	str	r3, [r7, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	f043 0204 	orr.w	r2, r3, #4
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff fe4a 	bl	80046c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a2c:	e089      	b.n	8004b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d107      	bne.n	8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f8be 	bl	8004bc4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d107      	bne.n	8004a62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f8fd 	bl	8004c5c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d12f      	bne.n	8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d02a      	beq.n	8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a84:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1e      	ldr	r2, [pc, #120]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d101      	bne.n	8004a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004a90:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a92:	e001      	b.n	8004a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4919      	ldr	r1, [pc, #100]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004aa4:	4b18      	ldr	r3, [pc, #96]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aa6:	e001      	b.n	8004aac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004aa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ab0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	f043 0202 	orr.w	r2, r3, #2
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fdfa 	bl	80046c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d136      	bne.n	8004b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d031      	beq.n	8004b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a07      	ldr	r2, [pc, #28]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d101      	bne.n	8004aee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aec:	e001      	b.n	8004af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004aee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4902      	ldr	r1, [pc, #8]	; (8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004afa:	428b      	cmp	r3, r1
 8004afc:	d106      	bne.n	8004b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004afe:	4b02      	ldr	r3, [pc, #8]	; (8004b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b00:	e006      	b.n	8004b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004b02:	bf00      	nop
 8004b04:	40003800 	.word	0x40003800
 8004b08:	40003400 	.word	0x40003400
 8004b0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b14:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	f043 0204 	orr.w	r2, r3, #4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff fdc0 	bl	80046c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b40:	e000      	b.n	8004b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b42:	bf00      	nop
}
 8004b44:	bf00      	nop
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	1c99      	adds	r1, r3, #2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6251      	str	r1, [r2, #36]	; 0x24
 8004b72:	881a      	ldrh	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d113      	bne.n	8004bba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ba0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff ffc9 	bl	8004b4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	1c99      	adds	r1, r3, #2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6251      	str	r1, [r2, #36]	; 0x24
 8004bd6:	8819      	ldrh	r1, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <I2SEx_TxISR_I2SExt+0x90>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d101      	bne.n	8004be6 <I2SEx_TxISR_I2SExt+0x22>
 8004be2:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <I2SEx_TxISR_I2SExt+0x94>)
 8004be4:	e001      	b.n	8004bea <I2SEx_TxISR_I2SExt+0x26>
 8004be6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bea:	460a      	mov	r2, r1
 8004bec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d121      	bne.n	8004c4a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a12      	ldr	r2, [pc, #72]	; (8004c54 <I2SEx_TxISR_I2SExt+0x90>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d101      	bne.n	8004c14 <I2SEx_TxISR_I2SExt+0x50>
 8004c10:	4b11      	ldr	r3, [pc, #68]	; (8004c58 <I2SEx_TxISR_I2SExt+0x94>)
 8004c12:	e001      	b.n	8004c18 <I2SEx_TxISR_I2SExt+0x54>
 8004c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	490d      	ldr	r1, [pc, #52]	; (8004c54 <I2SEx_TxISR_I2SExt+0x90>)
 8004c20:	428b      	cmp	r3, r1
 8004c22:	d101      	bne.n	8004c28 <I2SEx_TxISR_I2SExt+0x64>
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <I2SEx_TxISR_I2SExt+0x94>)
 8004c26:	e001      	b.n	8004c2c <I2SEx_TxISR_I2SExt+0x68>
 8004c28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d106      	bne.n	8004c4a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff81 	bl	8004b4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40003800 	.word	0x40003800
 8004c58:	40003400 	.word	0x40003400

08004c5c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68d8      	ldr	r0, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	1c99      	adds	r1, r3, #2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004c74:	b282      	uxth	r2, r0
 8004c76:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d113      	bne.n	8004cb8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c9e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff ff4a 	bl	8004b4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a20      	ldr	r2, [pc, #128]	; (8004d50 <I2SEx_RxISR_I2SExt+0x90>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <I2SEx_RxISR_I2SExt+0x16>
 8004cd2:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <I2SEx_RxISR_I2SExt+0x94>)
 8004cd4:	e001      	b.n	8004cda <I2SEx_RxISR_I2SExt+0x1a>
 8004cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cda:	68d8      	ldr	r0, [r3, #12]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	1c99      	adds	r1, r3, #2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ce6:	b282      	uxth	r2, r0
 8004ce8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d121      	bne.n	8004d46 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a12      	ldr	r2, [pc, #72]	; (8004d50 <I2SEx_RxISR_I2SExt+0x90>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <I2SEx_RxISR_I2SExt+0x50>
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <I2SEx_RxISR_I2SExt+0x94>)
 8004d0e:	e001      	b.n	8004d14 <I2SEx_RxISR_I2SExt+0x54>
 8004d10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	490d      	ldr	r1, [pc, #52]	; (8004d50 <I2SEx_RxISR_I2SExt+0x90>)
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	d101      	bne.n	8004d24 <I2SEx_RxISR_I2SExt+0x64>
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <I2SEx_RxISR_I2SExt+0x94>)
 8004d22:	e001      	b.n	8004d28 <I2SEx_RxISR_I2SExt+0x68>
 8004d24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d2c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff ff03 	bl	8004b4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40003800 	.word	0x40003800
 8004d54:	40003400 	.word	0x40003400

08004d58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d5a:	b08f      	sub	sp, #60	; 0x3c
 8004d5c:	af0a      	add	r7, sp, #40	; 0x28
 8004d5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e10f      	b.n	8004f8a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f007 fae3 	bl	800c350 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f003 fdca 	bl	8008942 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	687e      	ldr	r6, [r7, #4]
 8004db6:	466d      	mov	r5, sp
 8004db8:	f106 0410 	add.w	r4, r6, #16
 8004dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004dc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004dcc:	1d33      	adds	r3, r6, #4
 8004dce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dd0:	6838      	ldr	r0, [r7, #0]
 8004dd2:	f003 fca1 	bl	8008718 <USB_CoreInit>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0d0      	b.n	8004f8a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2100      	movs	r1, #0
 8004dee:	4618      	mov	r0, r3
 8004df0:	f003 fdb8 	bl	8008964 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004df4:	2300      	movs	r3, #0
 8004df6:	73fb      	strb	r3, [r7, #15]
 8004df8:	e04a      	b.n	8004e90 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	333d      	adds	r3, #61	; 0x3d
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e0e:	7bfa      	ldrb	r2, [r7, #15]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	333c      	adds	r3, #60	; 0x3c
 8004e1e:	7bfa      	ldrb	r2, [r7, #15]
 8004e20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	b298      	uxth	r0, r3
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	3344      	adds	r3, #68	; 0x44
 8004e36:	4602      	mov	r2, r0
 8004e38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e3a:	7bfa      	ldrb	r2, [r7, #15]
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	3340      	adds	r3, #64	; 0x40
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e4e:	7bfa      	ldrb	r2, [r7, #15]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3348      	adds	r3, #72	; 0x48
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e62:	7bfa      	ldrb	r2, [r7, #15]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	334c      	adds	r3, #76	; 0x4c
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e76:	7bfa      	ldrb	r2, [r7, #15]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	3354      	adds	r3, #84	; 0x54
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
 8004e90:	7bfa      	ldrb	r2, [r7, #15]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d3af      	bcc.n	8004dfa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]
 8004e9e:	e044      	b.n	8004f2a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ea0:	7bfa      	ldrb	r2, [r7, #15]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004eb6:	7bfa      	ldrb	r2, [r7, #15]
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004ec8:	7bfa      	ldrb	r2, [r7, #15]
 8004eca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ecc:	7bfa      	ldrb	r2, [r7, #15]
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ee2:	7bfa      	ldrb	r2, [r7, #15]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ef8:	7bfa      	ldrb	r2, [r7, #15]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f0e:	7bfa      	ldrb	r2, [r7, #15]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	3301      	adds	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
 8004f2a:	7bfa      	ldrb	r2, [r7, #15]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d3b5      	bcc.n	8004ea0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	687e      	ldr	r6, [r7, #4]
 8004f3c:	466d      	mov	r5, sp
 8004f3e:	f106 0410 	add.w	r4, r6, #16
 8004f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f52:	1d33      	adds	r3, r6, #4
 8004f54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f56:	6838      	ldr	r0, [r7, #0]
 8004f58:	f003 fd50 	bl	80089fc <USB_DevInit>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e00d      	b.n	8004f8a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f004 fe9f 	bl	8009cc6 <USB_DevDisconnect>

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f92 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_PCD_Start+0x1c>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e020      	b.n	8004ff0 <HAL_PCD_Start+0x5e>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d109      	bne.n	8004fd2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d005      	beq.n	8004fd2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f003 fca2 	bl	8008920 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f004 fe4f 	bl	8009c84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b08d      	sub	sp, #52	; 0x34
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f004 ff0d 	bl	8009e2e <USB_GetMode>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	f040 848a 	bne.w	8005930 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f004 fe71 	bl	8009d08 <USB_ReadInterrupts>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8480 	beq.w	800592e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	0a1b      	lsrs	r3, r3, #8
 8005038:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f004 fe5e 	bl	8009d08 <USB_ReadInterrupts>
 800504c:	4603      	mov	r3, r0
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b02      	cmp	r3, #2
 8005054:	d107      	bne.n	8005066 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695a      	ldr	r2, [r3, #20]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f002 0202 	and.w	r2, r2, #2
 8005064:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f004 fe4c 	bl	8009d08 <USB_ReadInterrupts>
 8005070:	4603      	mov	r3, r0
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	2b10      	cmp	r3, #16
 8005078:	d161      	bne.n	800513e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699a      	ldr	r2, [r3, #24]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0210 	bic.w	r2, r2, #16
 8005088:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f003 020f 	and.w	r2, r3, #15
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4413      	add	r3, r2
 80050a6:	3304      	adds	r3, #4
 80050a8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	0c5b      	lsrs	r3, r3, #17
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d124      	bne.n	8005100 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d035      	beq.n	800512e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	6a38      	ldr	r0, [r7, #32]
 80050d6:	f004 fc83 	bl	80099e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050e6:	441a      	add	r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	6a1a      	ldr	r2, [r3, #32]
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050f8:	441a      	add	r2, r3
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	621a      	str	r2, [r3, #32]
 80050fe:	e016      	b.n	800512e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	0c5b      	lsrs	r3, r3, #17
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	2b06      	cmp	r3, #6
 800510a:	d110      	bne.n	800512e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005112:	2208      	movs	r2, #8
 8005114:	4619      	mov	r1, r3
 8005116:	6a38      	ldr	r0, [r7, #32]
 8005118:	f004 fc62 	bl	80099e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	6a1a      	ldr	r2, [r3, #32]
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	091b      	lsrs	r3, r3, #4
 8005124:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005128:	441a      	add	r2, r3
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699a      	ldr	r2, [r3, #24]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0210 	orr.w	r2, r2, #16
 800513c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f004 fde0 	bl	8009d08 <USB_ReadInterrupts>
 8005148:	4603      	mov	r3, r0
 800514a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800514e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005152:	f040 80a7 	bne.w	80052a4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f004 fde5 	bl	8009d2e <USB_ReadDevAllOutEpInterrupt>
 8005164:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005166:	e099      	b.n	800529c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 808e 	beq.w	8005290 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	4611      	mov	r1, r2
 800517e:	4618      	mov	r0, r3
 8005180:	f004 fe09 	bl	8009d96 <USB_ReadDevOutEPInterrupt>
 8005184:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00c      	beq.n	80051aa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519c:	461a      	mov	r2, r3
 800519e:	2301      	movs	r3, #1
 80051a0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80051a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fec3 	bl	8005f30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00c      	beq.n	80051ce <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c0:	461a      	mov	r2, r3
 80051c2:	2308      	movs	r3, #8
 80051c4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80051c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 ff99 	bl	8006100 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	461a      	mov	r2, r3
 80051e6:	2310      	movs	r3, #16
 80051e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d030      	beq.n	8005256 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fc:	2b80      	cmp	r3, #128	; 0x80
 80051fe:	d109      	bne.n	8005214 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800520e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005212:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005216:	4613      	mov	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4413      	add	r3, r2
 8005226:	3304      	adds	r3, #4
 8005228:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	78db      	ldrb	r3, [r3, #3]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d108      	bne.n	8005244 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2200      	movs	r2, #0
 8005236:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	b2db      	uxtb	r3, r3
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f007 f99a 	bl	800c578 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	461a      	mov	r2, r3
 8005252:	2302      	movs	r3, #2
 8005254:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f003 0320 	and.w	r3, r3, #32
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526c:	461a      	mov	r2, r3
 800526e:	2320      	movs	r3, #32
 8005270:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d009      	beq.n	8005290 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	461a      	mov	r2, r3
 800528a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800528e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	3301      	adds	r3, #1
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f47f af62 	bne.w	8005168 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f004 fd2d 	bl	8009d08 <USB_ReadInterrupts>
 80052ae:	4603      	mov	r3, r0
 80052b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052b8:	f040 80db 	bne.w	8005472 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f004 fd4e 	bl	8009d62 <USB_ReadDevAllInEpInterrupt>
 80052c6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80052cc:	e0cd      	b.n	800546a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80c2 	beq.w	800545e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	4611      	mov	r1, r2
 80052e4:	4618      	mov	r0, r3
 80052e6:	f004 fd74 	bl	8009dd2 <USB_ReadDevInEPInterrupt>
 80052ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d057      	beq.n	80053a6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	2201      	movs	r2, #1
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	43db      	mvns	r3, r3
 8005310:	69f9      	ldr	r1, [r7, #28]
 8005312:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005316:	4013      	ands	r3, r2
 8005318:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005326:	461a      	mov	r2, r3
 8005328:	2301      	movs	r3, #1
 800532a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d132      	bne.n	800539a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	334c      	adds	r3, #76	; 0x4c
 8005344:	6819      	ldr	r1, [r3, #0]
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534a:	4613      	mov	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4403      	add	r3, r0
 8005354:	3348      	adds	r3, #72	; 0x48
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4419      	add	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535e:	4613      	mov	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4403      	add	r3, r0
 8005368:	334c      	adds	r3, #76	; 0x4c
 800536a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	d113      	bne.n	800539a <HAL_PCD_IRQHandler+0x3a2>
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005376:	4613      	mov	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	3354      	adds	r3, #84	; 0x54
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d108      	bne.n	800539a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005392:	461a      	mov	r2, r3
 8005394:	2101      	movs	r1, #1
 8005396:	f004 fd7b 	bl	8009e90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	b2db      	uxtb	r3, r3
 800539e:	4619      	mov	r1, r3
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f007 f864 	bl	800c46e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d008      	beq.n	80053c2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	461a      	mov	r2, r3
 80053be:	2308      	movs	r3, #8
 80053c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d8:	461a      	mov	r2, r3
 80053da:	2310      	movs	r3, #16
 80053dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	461a      	mov	r2, r3
 80053f6:	2340      	movs	r3, #64	; 0x40
 80053f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d023      	beq.n	800544c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005406:	6a38      	ldr	r0, [r7, #32]
 8005408:	f003 fc5c 	bl	8008cc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800540c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540e:	4613      	mov	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	3338      	adds	r3, #56	; 0x38
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	4413      	add	r3, r2
 800541c:	3304      	adds	r3, #4
 800541e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	78db      	ldrb	r3, [r3, #3]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d108      	bne.n	800543a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2200      	movs	r2, #0
 800542c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	b2db      	uxtb	r3, r3
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f007 f8b1 	bl	800c59c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005446:	461a      	mov	r2, r3
 8005448:	2302      	movs	r3, #2
 800544a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fcdb 	bl	8005e14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	3301      	adds	r3, #1
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	085b      	lsrs	r3, r3, #1
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	2b00      	cmp	r3, #0
 800546e:	f47f af2e 	bne.w	80052ce <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4618      	mov	r0, r3
 8005478:	f004 fc46 	bl	8009d08 <USB_ReadInterrupts>
 800547c:	4603      	mov	r3, r0
 800547e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005486:	d122      	bne.n	80054ce <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d108      	bne.n	80054b8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054ae:	2100      	movs	r1, #0
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fec3 	bl	800623c <HAL_PCDEx_LPM_Callback>
 80054b6:	e002      	b.n	80054be <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f007 f84f 	bl	800c55c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80054cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f004 fc18 	bl	8009d08 <USB_ReadInterrupts>
 80054d8:	4603      	mov	r3, r0
 80054da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e2:	d112      	bne.n	800550a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d102      	bne.n	80054fa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f007 f80b 	bl	800c510 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695a      	ldr	r2, [r3, #20]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005508:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f004 fbfa 	bl	8009d08 <USB_ReadInterrupts>
 8005514:	4603      	mov	r3, r0
 8005516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800551a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551e:	f040 80b7 	bne.w	8005690 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2110      	movs	r1, #16
 800553c:	4618      	mov	r0, r3
 800553e:	f003 fbc1 	bl	8008cc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005542:	2300      	movs	r3, #0
 8005544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005546:	e046      	b.n	80055d6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	461a      	mov	r2, r3
 8005556:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800555a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005576:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800557a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005588:	461a      	mov	r2, r3
 800558a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800558e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055ce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	3301      	adds	r3, #1
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055dc:	429a      	cmp	r2, r3
 80055de:	d3b3      	bcc.n	8005548 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80055f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d016      	beq.n	800562a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800560c:	f043 030b 	orr.w	r3, r3, #11
 8005610:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005622:	f043 030b 	orr.w	r3, r3, #11
 8005626:	6453      	str	r3, [r2, #68]	; 0x44
 8005628:	e015      	b.n	8005656 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005638:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800563c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005640:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005650:	f043 030b 	orr.w	r3, r3, #11
 8005654:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005664:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005668:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800567a:	461a      	mov	r2, r3
 800567c:	f004 fc08 	bl	8009e90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800568e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f004 fb37 	bl	8009d08 <USB_ReadInterrupts>
 800569a:	4603      	mov	r3, r0
 800569c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a4:	d124      	bne.n	80056f0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f004 fbcd 	bl	8009e4a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f003 fb82 	bl	8008dbe <USB_GetDevSpeed>
 80056ba:	4603      	mov	r3, r0
 80056bc:	461a      	mov	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681c      	ldr	r4, [r3, #0]
 80056c6:	f001 fa29 	bl	8006b1c <HAL_RCC_GetHCLKFreq>
 80056ca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	461a      	mov	r2, r3
 80056d4:	4620      	mov	r0, r4
 80056d6:	f003 f881 	bl	80087dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f006 feef 	bl	800c4be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80056ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f004 fb07 	bl	8009d08 <USB_ReadInterrupts>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b08      	cmp	r3, #8
 8005702:	d10a      	bne.n	800571a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f006 fecc 	bl	800c4a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695a      	ldr	r2, [r3, #20]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f002 0208 	and.w	r2, r2, #8
 8005718:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f004 faf2 	bl	8009d08 <USB_ReadInterrupts>
 8005724:	4603      	mov	r3, r0
 8005726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572a:	2b80      	cmp	r3, #128	; 0x80
 800572c:	d122      	bne.n	8005774 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800573a:	2301      	movs	r3, #1
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
 800573e:	e014      	b.n	800576a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005744:	4613      	mov	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d105      	bne.n	8005764 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	b2db      	uxtb	r3, r3
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fb27 	bl	8005db2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	3301      	adds	r3, #1
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005770:	429a      	cmp	r2, r3
 8005772:	d3e5      	bcc.n	8005740 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4618      	mov	r0, r3
 800577a:	f004 fac5 	bl	8009d08 <USB_ReadInterrupts>
 800577e:	4603      	mov	r3, r0
 8005780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005788:	d13b      	bne.n	8005802 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800578a:	2301      	movs	r3, #1
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
 800578e:	e02b      	b.n	80057e8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	3340      	adds	r3, #64	; 0x40
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d115      	bne.n	80057e2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80057b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da12      	bge.n	80057e2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c0:	4613      	mov	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	333f      	adds	r3, #63	; 0x3f
 80057cc:	2201      	movs	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fae8 	bl	8005db2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	3301      	adds	r3, #1
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d3ce      	bcc.n	8005790 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695a      	ldr	r2, [r3, #20]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f004 fa7e 	bl	8009d08 <USB_ReadInterrupts>
 800580c:	4603      	mov	r3, r0
 800580e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005816:	d155      	bne.n	80058c4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005818:	2301      	movs	r3, #1
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
 800581c:	e045      	b.n	80058aa <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005832:	4613      	mov	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d12e      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005846:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005848:	2b00      	cmp	r3, #0
 800584a:	da2b      	bge.n	80058a4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005858:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800585c:	429a      	cmp	r2, r3
 800585e:	d121      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005864:	4613      	mov	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005872:	2201      	movs	r2, #1
 8005874:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800589c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058a0:	6053      	str	r3, [r2, #4]
            break;
 80058a2:	e007      	b.n	80058b4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	3301      	adds	r3, #1
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d3b4      	bcc.n	800581e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695a      	ldr	r2, [r3, #20]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80058c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f004 fa1d 	bl	8009d08 <USB_ReadInterrupts>
 80058ce:	4603      	mov	r3, r0
 80058d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d8:	d10a      	bne.n	80058f0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f006 fe70 	bl	800c5c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80058ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f004 fa07 	bl	8009d08 <USB_ReadInterrupts>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b04      	cmp	r3, #4
 8005902:	d115      	bne.n	8005930 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f006 fe60 	bl	800c5dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6859      	ldr	r1, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
 800592c:	e000      	b.n	8005930 <HAL_PCD_IRQHandler+0x938>
      return;
 800592e:	bf00      	nop
    }
  }
}
 8005930:	3734      	adds	r7, #52	; 0x34
 8005932:	46bd      	mov	sp, r7
 8005934:	bd90      	pop	{r4, r7, pc}

08005936 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	460b      	mov	r3, r1
 8005940:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_PCD_SetAddress+0x1a>
 800594c:	2302      	movs	r3, #2
 800594e:	e013      	b.n	8005978 <HAL_PCD_SetAddress+0x42>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	78fa      	ldrb	r2, [r7, #3]
 800595c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	78fa      	ldrb	r2, [r7, #3]
 8005966:	4611      	mov	r1, r2
 8005968:	4618      	mov	r0, r3
 800596a:	f004 f965 	bl	8009c38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	4608      	mov	r0, r1
 800598a:	4611      	mov	r1, r2
 800598c:	461a      	mov	r2, r3
 800598e:	4603      	mov	r3, r0
 8005990:	70fb      	strb	r3, [r7, #3]
 8005992:	460b      	mov	r3, r1
 8005994:	803b      	strh	r3, [r7, #0]
 8005996:	4613      	mov	r3, r2
 8005998:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800599e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	da0f      	bge.n	80059c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059a6:	78fb      	ldrb	r3, [r7, #3]
 80059a8:	f003 020f 	and.w	r2, r3, #15
 80059ac:	4613      	mov	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	3338      	adds	r3, #56	; 0x38
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	3304      	adds	r3, #4
 80059bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	705a      	strb	r2, [r3, #1]
 80059c4:	e00f      	b.n	80059e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059c6:	78fb      	ldrb	r3, [r7, #3]
 80059c8:	f003 020f 	and.w	r2, r3, #15
 80059cc:	4613      	mov	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	4413      	add	r3, r2
 80059dc:	3304      	adds	r3, #4
 80059de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80059e6:	78fb      	ldrb	r3, [r7, #3]
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80059f2:	883a      	ldrh	r2, [r7, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	78ba      	ldrb	r2, [r7, #2]
 80059fc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	785b      	ldrb	r3, [r3, #1]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d004      	beq.n	8005a10 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a10:	78bb      	ldrb	r3, [r7, #2]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d102      	bne.n	8005a1c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_PCD_EP_Open+0xaa>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e00e      	b.n	8005a48 <HAL_PCD_EP_Open+0xc8>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f003 f9e5 	bl	8008e08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005a46:	7afb      	ldrb	r3, [r7, #11]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	da0f      	bge.n	8005a84 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	f003 020f 	and.w	r2, r3, #15
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	3338      	adds	r3, #56	; 0x38
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4413      	add	r3, r2
 8005a78:	3304      	adds	r3, #4
 8005a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	705a      	strb	r2, [r3, #1]
 8005a82:	e00f      	b.n	8005aa4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	f003 020f 	and.w	r2, r3, #15
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	4413      	add	r3, r2
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005aa4:	78fb      	ldrb	r3, [r7, #3]
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d101      	bne.n	8005abe <HAL_PCD_EP_Close+0x6e>
 8005aba:	2302      	movs	r3, #2
 8005abc:	e00e      	b.n	8005adc <HAL_PCD_EP_Close+0x8c>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68f9      	ldr	r1, [r7, #12]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f003 fa23 	bl	8008f18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	460b      	mov	r3, r1
 8005af2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005af4:	7afb      	ldrb	r3, [r7, #11]
 8005af6:	f003 020f 	and.w	r2, r3, #15
 8005afa:	4613      	mov	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2200      	movs	r2, #0
 8005b24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b26:	7afb      	ldrb	r3, [r7, #11]
 8005b28:	f003 030f 	and.w	r3, r3, #15
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d102      	bne.n	8005b40 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b40:	7afb      	ldrb	r3, [r7, #11]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	6979      	ldr	r1, [r7, #20]
 8005b58:	f003 fd02 	bl	8009560 <USB_EP0StartXfer>
 8005b5c:	e008      	b.n	8005b70 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6979      	ldr	r1, [r7, #20]
 8005b6c:	f003 fab0 	bl	80090d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	460b      	mov	r3, r1
 8005b84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	f003 020f 	and.w	r2, r3, #15
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005b9c:	681b      	ldr	r3, [r3, #0]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bba:	7afb      	ldrb	r3, [r7, #11]
 8005bbc:	f003 020f 	and.w	r2, r3, #15
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	3338      	adds	r3, #56	; 0x38
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4413      	add	r3, r2
 8005bce:	3304      	adds	r3, #4
 8005bd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2200      	movs	r2, #0
 8005be2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2201      	movs	r2, #1
 8005be8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bea:	7afb      	ldrb	r3, [r7, #11]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d102      	bne.n	8005c04 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c04:	7afb      	ldrb	r3, [r7, #11]
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6979      	ldr	r1, [r7, #20]
 8005c1c:	f003 fca0 	bl	8009560 <USB_EP0StartXfer>
 8005c20:	e008      	b.n	8005c34 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6979      	ldr	r1, [r7, #20]
 8005c30:	f003 fa4e 	bl	80090d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	460b      	mov	r3, r1
 8005c48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	f003 020f 	and.w	r2, r3, #15
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d901      	bls.n	8005c5c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e050      	b.n	8005cfe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	da0f      	bge.n	8005c84 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	f003 020f 	and.w	r2, r3, #15
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	3338      	adds	r3, #56	; 0x38
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	4413      	add	r3, r2
 8005c78:	3304      	adds	r3, #4
 8005c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	705a      	strb	r2, [r3, #1]
 8005c82:	e00d      	b.n	8005ca0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c84:	78fa      	ldrb	r2, [r7, #3]
 8005c86:	4613      	mov	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4413      	add	r3, r2
 8005c96:	3304      	adds	r3, #4
 8005c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ca6:	78fb      	ldrb	r3, [r7, #3]
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_PCD_EP_SetStall+0x82>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e01e      	b.n	8005cfe <HAL_PCD_EP_SetStall+0xc0>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68f9      	ldr	r1, [r7, #12]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f003 fede 	bl	8009a90 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cd4:	78fb      	ldrb	r3, [r7, #3]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6818      	ldr	r0, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	b2d9      	uxtb	r1, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f004 f8ce 	bl	8009e90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b084      	sub	sp, #16
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	f003 020f 	and.w	r2, r3, #15
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d901      	bls.n	8005d24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e042      	b.n	8005daa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	da0f      	bge.n	8005d4c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	f003 020f 	and.w	r2, r3, #15
 8005d32:	4613      	mov	r3, r2
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	3338      	adds	r3, #56	; 0x38
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	4413      	add	r3, r2
 8005d40:	3304      	adds	r3, #4
 8005d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2201      	movs	r2, #1
 8005d48:	705a      	strb	r2, [r3, #1]
 8005d4a:	e00f      	b.n	8005d6c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	f003 020f 	and.w	r2, r3, #15
 8005d52:	4613      	mov	r3, r2
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	4413      	add	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	4413      	add	r3, r2
 8005d62:	3304      	adds	r3, #4
 8005d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_PCD_EP_ClrStall+0x86>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e00e      	b.n	8005daa <HAL_PCD_EP_ClrStall+0xa4>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68f9      	ldr	r1, [r7, #12]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f003 fee6 	bl	8009b6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	460b      	mov	r3, r1
 8005dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	da0c      	bge.n	8005de0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	f003 020f 	and.w	r2, r3, #15
 8005dcc:	4613      	mov	r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	3338      	adds	r3, #56	; 0x38
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	4413      	add	r3, r2
 8005dda:	3304      	adds	r3, #4
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e00c      	b.n	8005dfa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005de0:	78fb      	ldrb	r3, [r7, #3]
 8005de2:	f003 020f 	and.w	r2, r3, #15
 8005de6:	4613      	mov	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	4413      	add	r3, r2
 8005df6:	3304      	adds	r3, #4
 8005df8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68f9      	ldr	r1, [r7, #12]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f003 fd05 	bl	8009810 <USB_EPStopXfer>
 8005e06:	4603      	mov	r3, r0
 8005e08:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08a      	sub	sp, #40	; 0x28
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	3338      	adds	r3, #56	; 0x38
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	4413      	add	r3, r2
 8005e38:	3304      	adds	r3, #4
 8005e3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a1a      	ldr	r2, [r3, #32]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d901      	bls.n	8005e4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e06c      	b.n	8005f26 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	699a      	ldr	r2, [r3, #24]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	69fa      	ldr	r2, [r7, #28]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d902      	bls.n	8005e68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	3303      	adds	r3, #3
 8005e6c:	089b      	lsrs	r3, r3, #2
 8005e6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e70:	e02b      	b.n	8005eca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d902      	bls.n	8005e8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	3303      	adds	r3, #3
 8005e92:	089b      	lsrs	r3, r3, #2
 8005e94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6919      	ldr	r1, [r3, #16]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	4603      	mov	r3, r0
 8005eac:	6978      	ldr	r0, [r7, #20]
 8005eae:	f003 fd59 	bl	8009964 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	441a      	add	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a1a      	ldr	r2, [r3, #32]
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	441a      	add	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d809      	bhi.n	8005ef4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1a      	ldr	r2, [r3, #32]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d203      	bcs.n	8005ef4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1be      	bne.n	8005e72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	699a      	ldr	r2, [r3, #24]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d811      	bhi.n	8005f24 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	2201      	movs	r2, #1
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	6939      	ldr	r1, [r7, #16]
 8005f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f20:	4013      	ands	r3, r2
 8005f22:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
	...

08005f30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	333c      	adds	r3, #60	; 0x3c
 8005f48:	3304      	adds	r3, #4
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d17b      	bne.n	800605e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f003 0308 	and.w	r3, r3, #8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d015      	beq.n	8005f9c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	4a61      	ldr	r2, [pc, #388]	; (80060f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	f240 80b9 	bls.w	80060ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 80b3 	beq.w	80060ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f92:	461a      	mov	r2, r3
 8005f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f98:	6093      	str	r3, [r2, #8]
 8005f9a:	e0a7      	b.n	80060ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d009      	beq.n	8005fba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	2320      	movs	r3, #32
 8005fb6:	6093      	str	r3, [r2, #8]
 8005fb8:	e098      	b.n	80060ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f040 8093 	bne.w	80060ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	4a4b      	ldr	r2, [pc, #300]	; (80060f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d90f      	bls.n	8005fee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fea:	6093      	str	r3, [r2, #8]
 8005fec:	e07e      	b.n	80060ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	4413      	add	r3, r2
 8006000:	3304      	adds	r3, #4
 8006002:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	0159      	lsls	r1, r3, #5
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	440b      	add	r3, r1
 8006010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800601a:	1ad2      	subs	r2, r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d114      	bne.n	8006050 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006038:	461a      	mov	r2, r3
 800603a:	2101      	movs	r1, #1
 800603c:	f003 ff28 	bl	8009e90 <USB_EP0_OutStart>
 8006040:	e006      	b.n	8006050 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	441a      	add	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f006 f9ee 	bl	800c438 <HAL_PCD_DataOutStageCallback>
 800605c:	e046      	b.n	80060ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4a26      	ldr	r2, [pc, #152]	; (80060fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d124      	bne.n	80060b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	461a      	mov	r2, r3
 800607e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006082:	6093      	str	r3, [r2, #8]
 8006084:	e032      	b.n	80060ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d008      	beq.n	80060a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609c:	461a      	mov	r2, r3
 800609e:	2320      	movs	r3, #32
 80060a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f006 f9c5 	bl	800c438 <HAL_PCD_DataOutStageCallback>
 80060ae:	e01d      	b.n	80060ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d114      	bne.n	80060e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	4613      	mov	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d108      	bne.n	80060e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060d8:	461a      	mov	r2, r3
 80060da:	2100      	movs	r1, #0
 80060dc:	f003 fed8 	bl	8009e90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f006 f9a6 	bl	800c438 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	4f54300a 	.word	0x4f54300a
 80060fc:	4f54310a 	.word	0x4f54310a

08006100 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	333c      	adds	r3, #60	; 0x3c
 8006118:	3304      	adds	r3, #4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4a15      	ldr	r2, [pc, #84]	; (8006188 <PCD_EP_OutSetupPacket_int+0x88>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d90e      	bls.n	8006154 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800613c:	2b00      	cmp	r3, #0
 800613e:	d009      	beq.n	8006154 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614c:	461a      	mov	r2, r3
 800614e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006152:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f006 f95d 	bl	800c414 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4a0a      	ldr	r2, [pc, #40]	; (8006188 <PCD_EP_OutSetupPacket_int+0x88>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d90c      	bls.n	800617c <PCD_EP_OutSetupPacket_int+0x7c>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d108      	bne.n	800617c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006174:	461a      	mov	r2, r3
 8006176:	2101      	movs	r1, #1
 8006178:	f003 fe8a 	bl	8009e90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	4f54300a 	.word	0x4f54300a

0800618c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
 8006198:	4613      	mov	r3, r2
 800619a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d107      	bne.n	80061ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80061aa:	883b      	ldrh	r3, [r7, #0]
 80061ac:	0419      	lsls	r1, r3, #16
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	629a      	str	r2, [r3, #40]	; 0x28
 80061b8:	e028      	b.n	800620c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c0:	0c1b      	lsrs	r3, r3, #16
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	4413      	add	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061c8:	2300      	movs	r3, #0
 80061ca:	73fb      	strb	r3, [r7, #15]
 80061cc:	e00d      	b.n	80061ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
 80061d4:	3340      	adds	r3, #64	; 0x40
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	0c1b      	lsrs	r3, r3, #16
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	4413      	add	r3, r2
 80061e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	3301      	adds	r3, #1
 80061e8:	73fb      	strb	r3, [r7, #15]
 80061ea:	7bfa      	ldrb	r2, [r7, #15]
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d3ec      	bcc.n	80061ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80061f4:	883b      	ldrh	r3, [r7, #0]
 80061f6:	0418      	lsls	r0, r3, #16
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6819      	ldr	r1, [r3, #0]
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	3b01      	subs	r3, #1
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	4302      	orrs	r2, r0
 8006204:	3340      	adds	r3, #64	; 0x40
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	460b      	mov	r3, r1
 8006224:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	887a      	ldrh	r2, [r7, #2]
 800622c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e267      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d075      	beq.n	800635e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006272:	4b88      	ldr	r3, [pc, #544]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 030c 	and.w	r3, r3, #12
 800627a:	2b04      	cmp	r3, #4
 800627c:	d00c      	beq.n	8006298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800627e:	4b85      	ldr	r3, [pc, #532]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006286:	2b08      	cmp	r3, #8
 8006288:	d112      	bne.n	80062b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800628a:	4b82      	ldr	r3, [pc, #520]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006296:	d10b      	bne.n	80062b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006298:	4b7e      	ldr	r3, [pc, #504]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d05b      	beq.n	800635c <HAL_RCC_OscConfig+0x108>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d157      	bne.n	800635c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e242      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b8:	d106      	bne.n	80062c8 <HAL_RCC_OscConfig+0x74>
 80062ba:	4b76      	ldr	r3, [pc, #472]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a75      	ldr	r2, [pc, #468]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80062c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	e01d      	b.n	8006304 <HAL_RCC_OscConfig+0xb0>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062d0:	d10c      	bne.n	80062ec <HAL_RCC_OscConfig+0x98>
 80062d2:	4b70      	ldr	r3, [pc, #448]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a6f      	ldr	r2, [pc, #444]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80062d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	4b6d      	ldr	r3, [pc, #436]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a6c      	ldr	r2, [pc, #432]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80062e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	e00b      	b.n	8006304 <HAL_RCC_OscConfig+0xb0>
 80062ec:	4b69      	ldr	r3, [pc, #420]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a68      	ldr	r2, [pc, #416]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80062f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	4b66      	ldr	r3, [pc, #408]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a65      	ldr	r2, [pc, #404]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80062fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d013      	beq.n	8006334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800630c:	f7fd f882 	bl	8003414 <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006314:	f7fd f87e 	bl	8003414 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b64      	cmp	r3, #100	; 0x64
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e207      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006326:	4b5b      	ldr	r3, [pc, #364]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0f0      	beq.n	8006314 <HAL_RCC_OscConfig+0xc0>
 8006332:	e014      	b.n	800635e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006334:	f7fd f86e 	bl	8003414 <HAL_GetTick>
 8006338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800633c:	f7fd f86a 	bl	8003414 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b64      	cmp	r3, #100	; 0x64
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e1f3      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634e:	4b51      	ldr	r3, [pc, #324]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f0      	bne.n	800633c <HAL_RCC_OscConfig+0xe8>
 800635a:	e000      	b.n	800635e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800635c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d063      	beq.n	8006432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800636a:	4b4a      	ldr	r3, [pc, #296]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 030c 	and.w	r3, r3, #12
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00b      	beq.n	800638e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006376:	4b47      	ldr	r3, [pc, #284]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800637e:	2b08      	cmp	r3, #8
 8006380:	d11c      	bne.n	80063bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006382:	4b44      	ldr	r3, [pc, #272]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d116      	bne.n	80063bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800638e:	4b41      	ldr	r3, [pc, #260]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <HAL_RCC_OscConfig+0x152>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d001      	beq.n	80063a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e1c7      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a6:	4b3b      	ldr	r3, [pc, #236]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	4937      	ldr	r1, [pc, #220]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ba:	e03a      	b.n	8006432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d020      	beq.n	8006406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063c4:	4b34      	ldr	r3, [pc, #208]	; (8006498 <HAL_RCC_OscConfig+0x244>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ca:	f7fd f823 	bl	8003414 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063d2:	f7fd f81f 	bl	8003414 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e1a8      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e4:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f0:	4b28      	ldr	r3, [pc, #160]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4925      	ldr	r1, [pc, #148]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 8006400:	4313      	orrs	r3, r2
 8006402:	600b      	str	r3, [r1, #0]
 8006404:	e015      	b.n	8006432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006406:	4b24      	ldr	r3, [pc, #144]	; (8006498 <HAL_RCC_OscConfig+0x244>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640c:	f7fd f802 	bl	8003414 <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006414:	f7fc fffe 	bl	8003414 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e187      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006426:	4b1b      	ldr	r3, [pc, #108]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f0      	bne.n	8006414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d036      	beq.n	80064ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d016      	beq.n	8006474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006446:	4b15      	ldr	r3, [pc, #84]	; (800649c <HAL_RCC_OscConfig+0x248>)
 8006448:	2201      	movs	r2, #1
 800644a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800644c:	f7fc ffe2 	bl	8003414 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006454:	f7fc ffde 	bl	8003414 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e167      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006466:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <HAL_RCC_OscConfig+0x240>)
 8006468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0f0      	beq.n	8006454 <HAL_RCC_OscConfig+0x200>
 8006472:	e01b      	b.n	80064ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006474:	4b09      	ldr	r3, [pc, #36]	; (800649c <HAL_RCC_OscConfig+0x248>)
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800647a:	f7fc ffcb 	bl	8003414 <HAL_GetTick>
 800647e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006480:	e00e      	b.n	80064a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006482:	f7fc ffc7 	bl	8003414 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d907      	bls.n	80064a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e150      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
 8006494:	40023800 	.word	0x40023800
 8006498:	42470000 	.word	0x42470000
 800649c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a0:	4b88      	ldr	r3, [pc, #544]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 80064a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1ea      	bne.n	8006482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8097 	beq.w	80065e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064ba:	2300      	movs	r3, #0
 80064bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064be:	4b81      	ldr	r3, [pc, #516]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10f      	bne.n	80064ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ca:	2300      	movs	r3, #0
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	4b7d      	ldr	r3, [pc, #500]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	4a7c      	ldr	r2, [pc, #496]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 80064d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d8:	6413      	str	r3, [r2, #64]	; 0x40
 80064da:	4b7a      	ldr	r3, [pc, #488]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064e6:	2301      	movs	r3, #1
 80064e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ea:	4b77      	ldr	r3, [pc, #476]	; (80066c8 <HAL_RCC_OscConfig+0x474>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d118      	bne.n	8006528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064f6:	4b74      	ldr	r3, [pc, #464]	; (80066c8 <HAL_RCC_OscConfig+0x474>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a73      	ldr	r2, [pc, #460]	; (80066c8 <HAL_RCC_OscConfig+0x474>)
 80064fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006502:	f7fc ff87 	bl	8003414 <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800650a:	f7fc ff83 	bl	8003414 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e10c      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651c:	4b6a      	ldr	r3, [pc, #424]	; (80066c8 <HAL_RCC_OscConfig+0x474>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f0      	beq.n	800650a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d106      	bne.n	800653e <HAL_RCC_OscConfig+0x2ea>
 8006530:	4b64      	ldr	r3, [pc, #400]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 8006532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006534:	4a63      	ldr	r2, [pc, #396]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	6713      	str	r3, [r2, #112]	; 0x70
 800653c:	e01c      	b.n	8006578 <HAL_RCC_OscConfig+0x324>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2b05      	cmp	r3, #5
 8006544:	d10c      	bne.n	8006560 <HAL_RCC_OscConfig+0x30c>
 8006546:	4b5f      	ldr	r3, [pc, #380]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 8006548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654a:	4a5e      	ldr	r2, [pc, #376]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 800654c:	f043 0304 	orr.w	r3, r3, #4
 8006550:	6713      	str	r3, [r2, #112]	; 0x70
 8006552:	4b5c      	ldr	r3, [pc, #368]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006556:	4a5b      	ldr	r2, [pc, #364]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 8006558:	f043 0301 	orr.w	r3, r3, #1
 800655c:	6713      	str	r3, [r2, #112]	; 0x70
 800655e:	e00b      	b.n	8006578 <HAL_RCC_OscConfig+0x324>
 8006560:	4b58      	ldr	r3, [pc, #352]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 8006562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006564:	4a57      	ldr	r2, [pc, #348]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	6713      	str	r3, [r2, #112]	; 0x70
 800656c:	4b55      	ldr	r3, [pc, #340]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 800656e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006570:	4a54      	ldr	r2, [pc, #336]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 8006572:	f023 0304 	bic.w	r3, r3, #4
 8006576:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d015      	beq.n	80065ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006580:	f7fc ff48 	bl	8003414 <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006586:	e00a      	b.n	800659e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006588:	f7fc ff44 	bl	8003414 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	f241 3288 	movw	r2, #5000	; 0x1388
 8006596:	4293      	cmp	r3, r2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e0cb      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800659e:	4b49      	ldr	r3, [pc, #292]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0ee      	beq.n	8006588 <HAL_RCC_OscConfig+0x334>
 80065aa:	e014      	b.n	80065d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ac:	f7fc ff32 	bl	8003414 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065b2:	e00a      	b.n	80065ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065b4:	f7fc ff2e 	bl	8003414 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e0b5      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ca:	4b3e      	ldr	r3, [pc, #248]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1ee      	bne.n	80065b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d105      	bne.n	80065e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065dc:	4b39      	ldr	r3, [pc, #228]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	4a38      	ldr	r2, [pc, #224]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 80065e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 80a1 	beq.w	8006734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065f2:	4b34      	ldr	r3, [pc, #208]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 030c 	and.w	r3, r3, #12
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d05c      	beq.n	80066b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d141      	bne.n	800668a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006606:	4b31      	ldr	r3, [pc, #196]	; (80066cc <HAL_RCC_OscConfig+0x478>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660c:	f7fc ff02 	bl	8003414 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006614:	f7fc fefe 	bl	8003414 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e087      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006626:	4b27      	ldr	r3, [pc, #156]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f0      	bne.n	8006614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69da      	ldr	r2, [r3, #28]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	019b      	lsls	r3, r3, #6
 8006642:	431a      	orrs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	085b      	lsrs	r3, r3, #1
 800664a:	3b01      	subs	r3, #1
 800664c:	041b      	lsls	r3, r3, #16
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	061b      	lsls	r3, r3, #24
 8006656:	491b      	ldr	r1, [pc, #108]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 8006658:	4313      	orrs	r3, r2
 800665a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800665c:	4b1b      	ldr	r3, [pc, #108]	; (80066cc <HAL_RCC_OscConfig+0x478>)
 800665e:	2201      	movs	r2, #1
 8006660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006662:	f7fc fed7 	bl	8003414 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800666a:	f7fc fed3 	bl	8003414 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e05c      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800667c:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0f0      	beq.n	800666a <HAL_RCC_OscConfig+0x416>
 8006688:	e054      	b.n	8006734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800668a:	4b10      	ldr	r3, [pc, #64]	; (80066cc <HAL_RCC_OscConfig+0x478>)
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006690:	f7fc fec0 	bl	8003414 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006698:	f7fc febc 	bl	8003414 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e045      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066aa:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <HAL_RCC_OscConfig+0x470>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f0      	bne.n	8006698 <HAL_RCC_OscConfig+0x444>
 80066b6:	e03d      	b.n	8006734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d107      	bne.n	80066d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e038      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
 80066c4:	40023800 	.word	0x40023800
 80066c8:	40007000 	.word	0x40007000
 80066cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066d0:	4b1b      	ldr	r3, [pc, #108]	; (8006740 <HAL_RCC_OscConfig+0x4ec>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d028      	beq.n	8006730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d121      	bne.n	8006730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d11a      	bne.n	8006730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006700:	4013      	ands	r3, r2
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006708:	4293      	cmp	r3, r2
 800670a:	d111      	bne.n	8006730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006716:	085b      	lsrs	r3, r3, #1
 8006718:	3b01      	subs	r3, #1
 800671a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800671c:	429a      	cmp	r2, r3
 800671e:	d107      	bne.n	8006730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800672c:	429a      	cmp	r2, r3
 800672e:	d001      	beq.n	8006734 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	40023800 	.word	0x40023800

08006744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e0cc      	b.n	80068f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006758:	4b68      	ldr	r3, [pc, #416]	; (80068fc <HAL_RCC_ClockConfig+0x1b8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d90c      	bls.n	8006780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006766:	4b65      	ldr	r3, [pc, #404]	; (80068fc <HAL_RCC_ClockConfig+0x1b8>)
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800676e:	4b63      	ldr	r3, [pc, #396]	; (80068fc <HAL_RCC_ClockConfig+0x1b8>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d001      	beq.n	8006780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e0b8      	b.n	80068f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d020      	beq.n	80067ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006798:	4b59      	ldr	r3, [pc, #356]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	4a58      	ldr	r2, [pc, #352]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 800679e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0308 	and.w	r3, r3, #8
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067b0:	4b53      	ldr	r3, [pc, #332]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	4a52      	ldr	r2, [pc, #328]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 80067b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067bc:	4b50      	ldr	r3, [pc, #320]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	494d      	ldr	r1, [pc, #308]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d044      	beq.n	8006864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d107      	bne.n	80067f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e2:	4b47      	ldr	r3, [pc, #284]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d119      	bne.n	8006822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e07f      	b.n	80068f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d003      	beq.n	8006802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d107      	bne.n	8006812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006802:	4b3f      	ldr	r3, [pc, #252]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d109      	bne.n	8006822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e06f      	b.n	80068f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006812:	4b3b      	ldr	r3, [pc, #236]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e067      	b.n	80068f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006822:	4b37      	ldr	r3, [pc, #220]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f023 0203 	bic.w	r2, r3, #3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	4934      	ldr	r1, [pc, #208]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 8006830:	4313      	orrs	r3, r2
 8006832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006834:	f7fc fdee 	bl	8003414 <HAL_GetTick>
 8006838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800683a:	e00a      	b.n	8006852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800683c:	f7fc fdea 	bl	8003414 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	f241 3288 	movw	r2, #5000	; 0x1388
 800684a:	4293      	cmp	r3, r2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e04f      	b.n	80068f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006852:	4b2b      	ldr	r3, [pc, #172]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f003 020c 	and.w	r2, r3, #12
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	429a      	cmp	r2, r3
 8006862:	d1eb      	bne.n	800683c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006864:	4b25      	ldr	r3, [pc, #148]	; (80068fc <HAL_RCC_ClockConfig+0x1b8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	429a      	cmp	r2, r3
 8006870:	d20c      	bcs.n	800688c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006872:	4b22      	ldr	r3, [pc, #136]	; (80068fc <HAL_RCC_ClockConfig+0x1b8>)
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800687a:	4b20      	ldr	r3, [pc, #128]	; (80068fc <HAL_RCC_ClockConfig+0x1b8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d001      	beq.n	800688c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e032      	b.n	80068f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d008      	beq.n	80068aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006898:	4b19      	ldr	r3, [pc, #100]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	4916      	ldr	r1, [pc, #88]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0308 	and.w	r3, r3, #8
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d009      	beq.n	80068ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068b6:	4b12      	ldr	r3, [pc, #72]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	490e      	ldr	r1, [pc, #56]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068ca:	f000 f821 	bl	8006910 <HAL_RCC_GetSysClockFreq>
 80068ce:	4602      	mov	r2, r0
 80068d0:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	091b      	lsrs	r3, r3, #4
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	490a      	ldr	r1, [pc, #40]	; (8006904 <HAL_RCC_ClockConfig+0x1c0>)
 80068dc:	5ccb      	ldrb	r3, [r1, r3]
 80068de:	fa22 f303 	lsr.w	r3, r2, r3
 80068e2:	4a09      	ldr	r2, [pc, #36]	; (8006908 <HAL_RCC_ClockConfig+0x1c4>)
 80068e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068e6:	4b09      	ldr	r3, [pc, #36]	; (800690c <HAL_RCC_ClockConfig+0x1c8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fc fd4e 	bl	800338c <HAL_InitTick>

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	40023c00 	.word	0x40023c00
 8006900:	40023800 	.word	0x40023800
 8006904:	0800ccd4 	.word	0x0800ccd4
 8006908:	20000000 	.word	0x20000000
 800690c:	20000004 	.word	0x20000004

08006910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006914:	b094      	sub	sp, #80	; 0x50
 8006916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	647b      	str	r3, [r7, #68]	; 0x44
 800691c:	2300      	movs	r3, #0
 800691e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006920:	2300      	movs	r3, #0
 8006922:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006928:	4b79      	ldr	r3, [pc, #484]	; (8006b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 030c 	and.w	r3, r3, #12
 8006930:	2b08      	cmp	r3, #8
 8006932:	d00d      	beq.n	8006950 <HAL_RCC_GetSysClockFreq+0x40>
 8006934:	2b08      	cmp	r3, #8
 8006936:	f200 80e1 	bhi.w	8006afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0x34>
 800693e:	2b04      	cmp	r3, #4
 8006940:	d003      	beq.n	800694a <HAL_RCC_GetSysClockFreq+0x3a>
 8006942:	e0db      	b.n	8006afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006944:	4b73      	ldr	r3, [pc, #460]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8006946:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006948:	e0db      	b.n	8006b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800694a:	4b73      	ldr	r3, [pc, #460]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800694c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800694e:	e0d8      	b.n	8006b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006950:	4b6f      	ldr	r3, [pc, #444]	; (8006b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006958:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800695a:	4b6d      	ldr	r3, [pc, #436]	; (8006b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d063      	beq.n	8006a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006966:	4b6a      	ldr	r3, [pc, #424]	; (8006b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	099b      	lsrs	r3, r3, #6
 800696c:	2200      	movs	r2, #0
 800696e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006970:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006978:	633b      	str	r3, [r7, #48]	; 0x30
 800697a:	2300      	movs	r3, #0
 800697c:	637b      	str	r3, [r7, #52]	; 0x34
 800697e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006982:	4622      	mov	r2, r4
 8006984:	462b      	mov	r3, r5
 8006986:	f04f 0000 	mov.w	r0, #0
 800698a:	f04f 0100 	mov.w	r1, #0
 800698e:	0159      	lsls	r1, r3, #5
 8006990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006994:	0150      	lsls	r0, r2, #5
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4621      	mov	r1, r4
 800699c:	1a51      	subs	r1, r2, r1
 800699e:	6139      	str	r1, [r7, #16]
 80069a0:	4629      	mov	r1, r5
 80069a2:	eb63 0301 	sbc.w	r3, r3, r1
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069b4:	4659      	mov	r1, fp
 80069b6:	018b      	lsls	r3, r1, #6
 80069b8:	4651      	mov	r1, sl
 80069ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069be:	4651      	mov	r1, sl
 80069c0:	018a      	lsls	r2, r1, #6
 80069c2:	4651      	mov	r1, sl
 80069c4:	ebb2 0801 	subs.w	r8, r2, r1
 80069c8:	4659      	mov	r1, fp
 80069ca:	eb63 0901 	sbc.w	r9, r3, r1
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	f04f 0300 	mov.w	r3, #0
 80069d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069e2:	4690      	mov	r8, r2
 80069e4:	4699      	mov	r9, r3
 80069e6:	4623      	mov	r3, r4
 80069e8:	eb18 0303 	adds.w	r3, r8, r3
 80069ec:	60bb      	str	r3, [r7, #8]
 80069ee:	462b      	mov	r3, r5
 80069f0:	eb49 0303 	adc.w	r3, r9, r3
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	f04f 0200 	mov.w	r2, #0
 80069fa:	f04f 0300 	mov.w	r3, #0
 80069fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a02:	4629      	mov	r1, r5
 8006a04:	024b      	lsls	r3, r1, #9
 8006a06:	4621      	mov	r1, r4
 8006a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	024a      	lsls	r2, r1, #9
 8006a10:	4610      	mov	r0, r2
 8006a12:	4619      	mov	r1, r3
 8006a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a16:	2200      	movs	r2, #0
 8006a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a20:	f7f9 ffc0 	bl	80009a4 <__aeabi_uldivmod>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	4613      	mov	r3, r2
 8006a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a2c:	e058      	b.n	8006ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a2e:	4b38      	ldr	r3, [pc, #224]	; (8006b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	099b      	lsrs	r3, r3, #6
 8006a34:	2200      	movs	r2, #0
 8006a36:	4618      	mov	r0, r3
 8006a38:	4611      	mov	r1, r2
 8006a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a3e:	623b      	str	r3, [r7, #32]
 8006a40:	2300      	movs	r3, #0
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
 8006a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a48:	4642      	mov	r2, r8
 8006a4a:	464b      	mov	r3, r9
 8006a4c:	f04f 0000 	mov.w	r0, #0
 8006a50:	f04f 0100 	mov.w	r1, #0
 8006a54:	0159      	lsls	r1, r3, #5
 8006a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a5a:	0150      	lsls	r0, r2, #5
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4641      	mov	r1, r8
 8006a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a66:	4649      	mov	r1, r9
 8006a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	f04f 0300 	mov.w	r3, #0
 8006a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a80:	ebb2 040a 	subs.w	r4, r2, sl
 8006a84:	eb63 050b 	sbc.w	r5, r3, fp
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	00eb      	lsls	r3, r5, #3
 8006a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a96:	00e2      	lsls	r2, r4, #3
 8006a98:	4614      	mov	r4, r2
 8006a9a:	461d      	mov	r5, r3
 8006a9c:	4643      	mov	r3, r8
 8006a9e:	18e3      	adds	r3, r4, r3
 8006aa0:	603b      	str	r3, [r7, #0]
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	eb45 0303 	adc.w	r3, r5, r3
 8006aa8:	607b      	str	r3, [r7, #4]
 8006aaa:	f04f 0200 	mov.w	r2, #0
 8006aae:	f04f 0300 	mov.w	r3, #0
 8006ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ab6:	4629      	mov	r1, r5
 8006ab8:	028b      	lsls	r3, r1, #10
 8006aba:	4621      	mov	r1, r4
 8006abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	028a      	lsls	r2, r1, #10
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aca:	2200      	movs	r2, #0
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	61fa      	str	r2, [r7, #28]
 8006ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ad4:	f7f9 ff66 	bl	80009a4 <__aeabi_uldivmod>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4613      	mov	r3, r2
 8006ade:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	0c1b      	lsrs	r3, r3, #16
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	3301      	adds	r3, #1
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006afa:	e002      	b.n	8006b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006afc:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8006afe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3750      	adds	r7, #80	; 0x50
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b0e:	bf00      	nop
 8006b10:	40023800 	.word	0x40023800
 8006b14:	00f42400 	.word	0x00f42400
 8006b18:	007a1200 	.word	0x007a1200

08006b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b20:	4b03      	ldr	r3, [pc, #12]	; (8006b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b22:	681b      	ldr	r3, [r3, #0]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	20000000 	.word	0x20000000

08006b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b38:	f7ff fff0 	bl	8006b1c <HAL_RCC_GetHCLKFreq>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	0a9b      	lsrs	r3, r3, #10
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	4903      	ldr	r1, [pc, #12]	; (8006b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b4a:	5ccb      	ldrb	r3, [r1, r3]
 8006b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	40023800 	.word	0x40023800
 8006b58:	0800cce4 	.word	0x0800cce4

08006b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b60:	f7ff ffdc 	bl	8006b1c <HAL_RCC_GetHCLKFreq>
 8006b64:	4602      	mov	r2, r0
 8006b66:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	0b5b      	lsrs	r3, r3, #13
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	4903      	ldr	r1, [pc, #12]	; (8006b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b72:	5ccb      	ldrb	r3, [r1, r3]
 8006b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	0800cce4 	.word	0x0800cce4

08006b84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d105      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d035      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006bac:	4b62      	ldr	r3, [pc, #392]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bb2:	f7fc fc2f 	bl	8003414 <HAL_GetTick>
 8006bb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bb8:	e008      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bba:	f7fc fc2b 	bl	8003414 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e0b0      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bcc:	4b5b      	ldr	r3, [pc, #364]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1f0      	bne.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	019a      	lsls	r2, r3, #6
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	071b      	lsls	r3, r3, #28
 8006be4:	4955      	ldr	r1, [pc, #340]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bec:	4b52      	ldr	r3, [pc, #328]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bf2:	f7fc fc0f 	bl	8003414 <HAL_GetTick>
 8006bf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bf8:	e008      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bfa:	f7fc fc0b 	bl	8003414 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e090      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c0c:	4b4b      	ldr	r3, [pc, #300]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0f0      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 8083 	beq.w	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c26:	2300      	movs	r3, #0
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	4b44      	ldr	r3, [pc, #272]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	4a43      	ldr	r2, [pc, #268]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c34:	6413      	str	r3, [r2, #64]	; 0x40
 8006c36:	4b41      	ldr	r3, [pc, #260]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	60fb      	str	r3, [r7, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c42:	4b3f      	ldr	r3, [pc, #252]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a3e      	ldr	r2, [pc, #248]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c4e:	f7fc fbe1 	bl	8003414 <HAL_GetTick>
 8006c52:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c54:	e008      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c56:	f7fc fbdd 	bl	8003414 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e062      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c68:	4b35      	ldr	r3, [pc, #212]	; (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d0f0      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c74:	4b31      	ldr	r3, [pc, #196]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c7c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d02f      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d028      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c92:	4b2a      	ldr	r3, [pc, #168]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c9a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c9c:	4b29      	ldr	r3, [pc, #164]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ca2:	4b28      	ldr	r3, [pc, #160]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ca8:	4a24      	ldr	r2, [pc, #144]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cae:	4b23      	ldr	r3, [pc, #140]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d114      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006cba:	f7fc fbab 	bl	8003414 <HAL_GetTick>
 8006cbe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cc0:	e00a      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cc2:	f7fc fba7 	bl	8003414 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e02a      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd8:	4b18      	ldr	r3, [pc, #96]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0ee      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cf0:	d10d      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006cf2:	4b12      	ldr	r3, [pc, #72]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d06:	490d      	ldr	r1, [pc, #52]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	608b      	str	r3, [r1, #8]
 8006d0c:	e005      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d0e:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d14:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d18:	6093      	str	r3, [r2, #8]
 8006d1a:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d26:	4905      	ldr	r1, [pc, #20]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	42470068 	.word	0x42470068
 8006d3c:	40023800 	.word	0x40023800
 8006d40:	40007000 	.word	0x40007000
 8006d44:	42470e40 	.word	0x42470e40

08006d48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d13e      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006d66:	4b23      	ldr	r3, [pc, #140]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d12f      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d7c:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d7e:	617b      	str	r3, [r7, #20]
          break;
 8006d80:	e02f      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d82:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d8e:	d108      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d90:	4b18      	ldr	r3, [pc, #96]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d98:	4a18      	ldr	r2, [pc, #96]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9e:	613b      	str	r3, [r7, #16]
 8006da0:	e007      	b.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006da2:	4b14      	ldr	r3, [pc, #80]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006daa:	4a15      	ldr	r2, [pc, #84]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006db2:	4b10      	ldr	r3, [pc, #64]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db8:	099b      	lsrs	r3, r3, #6
 8006dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	fb02 f303 	mul.w	r3, r2, r3
 8006dc4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	; (8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dcc:	0f1b      	lsrs	r3, r3, #28
 8006dce:	f003 0307 	and.w	r3, r3, #7
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd8:	617b      	str	r3, [r7, #20]
          break;
 8006dda:	e002      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	617b      	str	r3, [r7, #20]
          break;
 8006de0:	bf00      	nop
        }
      }
      break;
 8006de2:	bf00      	nop
    }
  }
  return frequency;
 8006de4:	697b      	ldr	r3, [r7, #20]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	371c      	adds	r7, #28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	40023800 	.word	0x40023800
 8006df8:	00bb8000 	.word	0x00bb8000
 8006dfc:	007a1200 	.word	0x007a1200
 8006e00:	00f42400 	.word	0x00f42400

08006e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e07b      	b.n	8006f0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d108      	bne.n	8006e30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e26:	d009      	beq.n	8006e3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	61da      	str	r2, [r3, #28]
 8006e2e:	e005      	b.n	8006e3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d106      	bne.n	8006e5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fc f81c 	bl	8002e94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec0:	ea42 0103 	orr.w	r1, r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	0c1b      	lsrs	r3, r3, #16
 8006eda:	f003 0104 	and.w	r1, r3, #4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	f003 0210 	and.w	r2, r3, #16
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006efc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b08c      	sub	sp, #48	; 0x30
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
 8006f22:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f24:	2301      	movs	r3, #1
 8006f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_SPI_TransmitReceive+0x26>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e18a      	b.n	8007252 <HAL_SPI_TransmitReceive+0x33c>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f44:	f7fc fa66 	bl	8003414 <HAL_GetTick>
 8006f48:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006f5a:	887b      	ldrh	r3, [r7, #2]
 8006f5c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d00f      	beq.n	8006f86 <HAL_SPI_TransmitReceive+0x70>
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f6c:	d107      	bne.n	8006f7e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d103      	bne.n	8006f7e <HAL_SPI_TransmitReceive+0x68>
 8006f76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d003      	beq.n	8006f86 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f84:	e15b      	b.n	800723e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <HAL_SPI_TransmitReceive+0x82>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_SPI_TransmitReceive+0x82>
 8006f92:	887b      	ldrh	r3, [r7, #2]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d103      	bne.n	8006fa0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f9e:	e14e      	b.n	800723e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	d003      	beq.n	8006fb4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2205      	movs	r2, #5
 8006fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	887a      	ldrh	r2, [r7, #2]
 8006fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	887a      	ldrh	r2, [r7, #2]
 8006fca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	887a      	ldrh	r2, [r7, #2]
 8006fd6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	887a      	ldrh	r2, [r7, #2]
 8006fdc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff4:	2b40      	cmp	r3, #64	; 0x40
 8006ff6:	d007      	beq.n	8007008 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007006:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007010:	d178      	bne.n	8007104 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <HAL_SPI_TransmitReceive+0x10a>
 800701a:	8b7b      	ldrh	r3, [r7, #26]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d166      	bne.n	80070ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007024:	881a      	ldrh	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007030:	1c9a      	adds	r2, r3, #2
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007044:	e053      	b.n	80070ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b02      	cmp	r3, #2
 8007052:	d11b      	bne.n	800708c <HAL_SPI_TransmitReceive+0x176>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007058:	b29b      	uxth	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d016      	beq.n	800708c <HAL_SPI_TransmitReceive+0x176>
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	2b01      	cmp	r3, #1
 8007062:	d113      	bne.n	800708c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007068:	881a      	ldrh	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007074:	1c9a      	adds	r2, r3, #2
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b01      	cmp	r3, #1
 8007098:	d119      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x1b8>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800709e:	b29b      	uxth	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d014      	beq.n	80070ce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	b292      	uxth	r2, r2
 80070b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	1c9a      	adds	r2, r3, #2
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070ca:	2301      	movs	r3, #1
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80070ce:	f7fc f9a1 	bl	8003414 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070da:	429a      	cmp	r2, r3
 80070dc:	d807      	bhi.n	80070ee <HAL_SPI_TransmitReceive+0x1d8>
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e4:	d003      	beq.n	80070ee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80070ec:	e0a7      	b.n	800723e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1a6      	bne.n	8007046 <HAL_SPI_TransmitReceive+0x130>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1a1      	bne.n	8007046 <HAL_SPI_TransmitReceive+0x130>
 8007102:	e07c      	b.n	80071fe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <HAL_SPI_TransmitReceive+0x1fc>
 800710c:	8b7b      	ldrh	r3, [r7, #26]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d16b      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	330c      	adds	r3, #12
 800711c:	7812      	ldrb	r2, [r2, #0]
 800711e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007138:	e057      	b.n	80071ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b02      	cmp	r3, #2
 8007146:	d11c      	bne.n	8007182 <HAL_SPI_TransmitReceive+0x26c>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d017      	beq.n	8007182 <HAL_SPI_TransmitReceive+0x26c>
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	2b01      	cmp	r3, #1
 8007156:	d114      	bne.n	8007182 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	330c      	adds	r3, #12
 8007162:	7812      	ldrb	r2, [r2, #0]
 8007164:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007174:	b29b      	uxth	r3, r3
 8007176:	3b01      	subs	r3, #1
 8007178:	b29a      	uxth	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b01      	cmp	r3, #1
 800718e:	d119      	bne.n	80071c4 <HAL_SPI_TransmitReceive+0x2ae>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d014      	beq.n	80071c4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071c0:	2301      	movs	r3, #1
 80071c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071c4:	f7fc f926 	bl	8003414 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d803      	bhi.n	80071dc <HAL_SPI_TransmitReceive+0x2c6>
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071da:	d102      	bne.n	80071e2 <HAL_SPI_TransmitReceive+0x2cc>
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d103      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80071e8:	e029      	b.n	800723e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1a2      	bne.n	800713a <HAL_SPI_TransmitReceive+0x224>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d19d      	bne.n	800713a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007200:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f9d0 	bl	80075a8 <SPI_EndRxTxTransaction>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d006      	beq.n	800721c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2220      	movs	r2, #32
 8007218:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800721a:	e010      	b.n	800723e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10b      	bne.n	800723c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	e000      	b.n	800723e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800723c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800724e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007252:	4618      	mov	r0, r3
 8007254:	3730      	adds	r7, #48	; 0x30
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	099b      	lsrs	r3, r3, #6
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10f      	bne.n	80072a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	099b      	lsrs	r3, r3, #6
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	4798      	blx	r3
    return;
 800729e:	e0d7      	b.n	8007450 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <HAL_SPI_IRQHandler+0x66>
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	09db      	lsrs	r3, r3, #7
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	4798      	blx	r3
    return;
 80072c0:	e0c6      	b.n	8007450 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	095b      	lsrs	r3, r3, #5
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10c      	bne.n	80072e8 <HAL_SPI_IRQHandler+0x8c>
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	099b      	lsrs	r3, r3, #6
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	0a1b      	lsrs	r3, r3, #8
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 80b4 	beq.w	8007450 <HAL_SPI_IRQHandler+0x1f4>
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	095b      	lsrs	r3, r3, #5
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 80ad 	beq.w	8007450 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	099b      	lsrs	r3, r3, #6
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d023      	beq.n	800734a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b03      	cmp	r3, #3
 800730c:	d011      	beq.n	8007332 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007312:	f043 0204 	orr.w	r2, r3, #4
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800731a:	2300      	movs	r3, #0
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	617b      	str	r3, [r7, #20]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	e00b      	b.n	800734a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007332:	2300      	movs	r3, #0
 8007334:	613b      	str	r3, [r7, #16]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	693b      	ldr	r3, [r7, #16]
        return;
 8007348:	e082      	b.n	8007450 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d014      	beq.n	8007380 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735a:	f043 0201 	orr.w	r2, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	0a1b      	lsrs	r3, r3, #8
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00c      	beq.n	80073a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007390:	f043 0208 	orr.w	r2, r3, #8
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007398:	2300      	movs	r3, #0
 800739a:	60bb      	str	r3, [r7, #8]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	60bb      	str	r3, [r7, #8]
 80073a4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d04f      	beq.n	800744e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d104      	bne.n	80073da <HAL_SPI_IRQHandler+0x17e>
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d034      	beq.n	8007444 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0203 	bic.w	r2, r2, #3
 80073e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d011      	beq.n	8007416 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f6:	4a18      	ldr	r2, [pc, #96]	; (8007458 <HAL_SPI_IRQHandler+0x1fc>)
 80073f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fc fa68 	bl	80038d4 <HAL_DMA_Abort_IT>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d005      	beq.n	8007416 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800741a:	2b00      	cmp	r3, #0
 800741c:	d016      	beq.n	800744c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007422:	4a0d      	ldr	r2, [pc, #52]	; (8007458 <HAL_SPI_IRQHandler+0x1fc>)
 8007424:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800742a:	4618      	mov	r0, r3
 800742c:	f7fc fa52 	bl	80038d4 <HAL_DMA_Abort_IT>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007442:	e003      	b.n	800744c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f809 	bl	800745c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800744a:	e000      	b.n	800744e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800744c:	bf00      	nop
    return;
 800744e:	bf00      	nop
  }
}
 8007450:	3720      	adds	r7, #32
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	08007471 	.word	0x08007471

0800745c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f7ff ffe6 	bl	800745c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b088      	sub	sp, #32
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074a8:	f7fb ffb4 	bl	8003414 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	4413      	add	r3, r2
 80074b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074b8:	f7fb ffac 	bl	8003414 <HAL_GetTick>
 80074bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074be:	4b39      	ldr	r3, [pc, #228]	; (80075a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	015b      	lsls	r3, r3, #5
 80074c4:	0d1b      	lsrs	r3, r3, #20
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	fb02 f303 	mul.w	r3, r2, r3
 80074cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074ce:	e054      	b.n	800757a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d6:	d050      	beq.n	800757a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074d8:	f7fb ff9c 	bl	8003414 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d902      	bls.n	80074ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d13d      	bne.n	800756a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007506:	d111      	bne.n	800752c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007510:	d004      	beq.n	800751c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800751a:	d107      	bne.n	800752c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800752a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007534:	d10f      	bne.n	8007556 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007554:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e017      	b.n	800759a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	3b01      	subs	r3, #1
 8007578:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	4013      	ands	r3, r2
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	429a      	cmp	r2, r3
 8007588:	bf0c      	ite	eq
 800758a:	2301      	moveq	r3, #1
 800758c:	2300      	movne	r3, #0
 800758e:	b2db      	uxtb	r3, r3
 8007590:	461a      	mov	r2, r3
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	429a      	cmp	r2, r3
 8007596:	d19b      	bne.n	80074d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3720      	adds	r7, #32
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000000 	.word	0x20000000

080075a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075b4:	4b1b      	ldr	r3, [pc, #108]	; (8007624 <SPI_EndRxTxTransaction+0x7c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a1b      	ldr	r2, [pc, #108]	; (8007628 <SPI_EndRxTxTransaction+0x80>)
 80075ba:	fba2 2303 	umull	r2, r3, r2, r3
 80075be:	0d5b      	lsrs	r3, r3, #21
 80075c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075c4:	fb02 f303 	mul.w	r3, r2, r3
 80075c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075d2:	d112      	bne.n	80075fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2200      	movs	r2, #0
 80075dc:	2180      	movs	r1, #128	; 0x80
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7ff ff5a 	bl	8007498 <SPI_WaitFlagStateUntilTimeout>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d016      	beq.n	8007618 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	f043 0220 	orr.w	r2, r3, #32
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e00f      	b.n	800761a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	3b01      	subs	r3, #1
 8007604:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007610:	2b80      	cmp	r3, #128	; 0x80
 8007612:	d0f2      	beq.n	80075fa <SPI_EndRxTxTransaction+0x52>
 8007614:	e000      	b.n	8007618 <SPI_EndRxTxTransaction+0x70>
        break;
 8007616:	bf00      	nop
  }

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000000 	.word	0x20000000
 8007628:	165e9f81 	.word	0x165e9f81

0800762c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e041      	b.n	80076c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d106      	bne.n	8007658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fb fd08 	bl	8003068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	3304      	adds	r3, #4
 8007668:	4619      	mov	r1, r3
 800766a:	4610      	mov	r0, r2
 800766c:	f000 f82e 	bl	80076cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a40      	ldr	r2, [pc, #256]	; (80077e0 <TIM_Base_SetConfig+0x114>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d013      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ea:	d00f      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a3d      	ldr	r2, [pc, #244]	; (80077e4 <TIM_Base_SetConfig+0x118>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00b      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a3c      	ldr	r2, [pc, #240]	; (80077e8 <TIM_Base_SetConfig+0x11c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d007      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a3b      	ldr	r2, [pc, #236]	; (80077ec <TIM_Base_SetConfig+0x120>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d003      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a3a      	ldr	r2, [pc, #232]	; (80077f0 <TIM_Base_SetConfig+0x124>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d108      	bne.n	800771e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a2f      	ldr	r2, [pc, #188]	; (80077e0 <TIM_Base_SetConfig+0x114>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d02b      	beq.n	800777e <TIM_Base_SetConfig+0xb2>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800772c:	d027      	beq.n	800777e <TIM_Base_SetConfig+0xb2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a2c      	ldr	r2, [pc, #176]	; (80077e4 <TIM_Base_SetConfig+0x118>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d023      	beq.n	800777e <TIM_Base_SetConfig+0xb2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a2b      	ldr	r2, [pc, #172]	; (80077e8 <TIM_Base_SetConfig+0x11c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d01f      	beq.n	800777e <TIM_Base_SetConfig+0xb2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a2a      	ldr	r2, [pc, #168]	; (80077ec <TIM_Base_SetConfig+0x120>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d01b      	beq.n	800777e <TIM_Base_SetConfig+0xb2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a29      	ldr	r2, [pc, #164]	; (80077f0 <TIM_Base_SetConfig+0x124>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d017      	beq.n	800777e <TIM_Base_SetConfig+0xb2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a28      	ldr	r2, [pc, #160]	; (80077f4 <TIM_Base_SetConfig+0x128>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d013      	beq.n	800777e <TIM_Base_SetConfig+0xb2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a27      	ldr	r2, [pc, #156]	; (80077f8 <TIM_Base_SetConfig+0x12c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d00f      	beq.n	800777e <TIM_Base_SetConfig+0xb2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a26      	ldr	r2, [pc, #152]	; (80077fc <TIM_Base_SetConfig+0x130>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00b      	beq.n	800777e <TIM_Base_SetConfig+0xb2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a25      	ldr	r2, [pc, #148]	; (8007800 <TIM_Base_SetConfig+0x134>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d007      	beq.n	800777e <TIM_Base_SetConfig+0xb2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a24      	ldr	r2, [pc, #144]	; (8007804 <TIM_Base_SetConfig+0x138>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d003      	beq.n	800777e <TIM_Base_SetConfig+0xb2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a23      	ldr	r2, [pc, #140]	; (8007808 <TIM_Base_SetConfig+0x13c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d108      	bne.n	8007790 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4313      	orrs	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a0a      	ldr	r2, [pc, #40]	; (80077e0 <TIM_Base_SetConfig+0x114>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d003      	beq.n	80077c4 <TIM_Base_SetConfig+0xf8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a0c      	ldr	r2, [pc, #48]	; (80077f0 <TIM_Base_SetConfig+0x124>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d103      	bne.n	80077cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	691a      	ldr	r2, [r3, #16]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	615a      	str	r2, [r3, #20]
}
 80077d2:	bf00      	nop
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	40010000 	.word	0x40010000
 80077e4:	40000400 	.word	0x40000400
 80077e8:	40000800 	.word	0x40000800
 80077ec:	40000c00 	.word	0x40000c00
 80077f0:	40010400 	.word	0x40010400
 80077f4:	40014000 	.word	0x40014000
 80077f8:	40014400 	.word	0x40014400
 80077fc:	40014800 	.word	0x40014800
 8007800:	40001800 	.word	0x40001800
 8007804:	40001c00 	.word	0x40001c00
 8007808:	40002000 	.word	0x40002000

0800780c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007820:	2302      	movs	r3, #2
 8007822:	e05a      	b.n	80078da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a21      	ldr	r2, [pc, #132]	; (80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d022      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007870:	d01d      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a1d      	ldr	r2, [pc, #116]	; (80078ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d018      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a1b      	ldr	r2, [pc, #108]	; (80078f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d013      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a1a      	ldr	r2, [pc, #104]	; (80078f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00e      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a18      	ldr	r2, [pc, #96]	; (80078f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d009      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a17      	ldr	r2, [pc, #92]	; (80078fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d004      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a15      	ldr	r2, [pc, #84]	; (8007900 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d10c      	bne.n	80078c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	40010000 	.word	0x40010000
 80078ec:	40000400 	.word	0x40000400
 80078f0:	40000800 	.word	0x40000800
 80078f4:	40000c00 	.word	0x40000c00
 80078f8:	40010400 	.word	0x40010400
 80078fc:	40014000 	.word	0x40014000
 8007900:	40001800 	.word	0x40001800

08007904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e03f      	b.n	8007996 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fb fbbe 	bl	80030ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2224      	movs	r2, #36	; 0x24
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fc71 	bl	8008230 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800795c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695a      	ldr	r2, [r3, #20]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800796c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800797c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2220      	movs	r2, #32
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
	...

080079a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b0ba      	sub	sp, #232	; 0xe8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80079de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10f      	bne.n	8007a06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ea:	f003 0320 	and.w	r3, r3, #32
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d009      	beq.n	8007a06 <HAL_UART_IRQHandler+0x66>
 80079f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fb5b 	bl	80080ba <UART_Receive_IT>
      return;
 8007a04:	e256      	b.n	8007eb4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 80de 	beq.w	8007bcc <HAL_UART_IRQHandler+0x22c>
 8007a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d106      	bne.n	8007a2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 80d1 	beq.w	8007bcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00b      	beq.n	8007a4e <HAL_UART_IRQHandler+0xae>
 8007a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d005      	beq.n	8007a4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	f043 0201 	orr.w	r2, r3, #1
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <HAL_UART_IRQHandler+0xd2>
 8007a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6a:	f043 0202 	orr.w	r2, r3, #2
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00b      	beq.n	8007a96 <HAL_UART_IRQHandler+0xf6>
 8007a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d005      	beq.n	8007a96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	f043 0204 	orr.w	r2, r3, #4
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a9a:	f003 0308 	and.w	r3, r3, #8
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d011      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x126>
 8007aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d105      	bne.n	8007aba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d005      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	f043 0208 	orr.w	r2, r3, #8
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 81ed 	beq.w	8007eaa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d008      	beq.n	8007aee <HAL_UART_IRQHandler+0x14e>
 8007adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fae6 	bl	80080ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af8:	2b40      	cmp	r3, #64	; 0x40
 8007afa:	bf0c      	ite	eq
 8007afc:	2301      	moveq	r3, #1
 8007afe:	2300      	movne	r3, #0
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	f003 0308 	and.w	r3, r3, #8
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d103      	bne.n	8007b1a <HAL_UART_IRQHandler+0x17a>
 8007b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d04f      	beq.n	8007bba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f9ee 	bl	8007efc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2a:	2b40      	cmp	r3, #64	; 0x40
 8007b2c:	d141      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3314      	adds	r3, #20
 8007b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3314      	adds	r3, #20
 8007b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1d9      	bne.n	8007b2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d013      	beq.n	8007baa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b86:	4a7d      	ldr	r2, [pc, #500]	; (8007d7c <HAL_UART_IRQHandler+0x3dc>)
 8007b88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fb fea0 	bl	80038d4 <HAL_DMA_Abort_IT>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d016      	beq.n	8007bc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba8:	e00e      	b.n	8007bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f990 	bl	8007ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb0:	e00a      	b.n	8007bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f98c 	bl	8007ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb8:	e006      	b.n	8007bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f988 	bl	8007ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007bc6:	e170      	b.n	8007eaa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc8:	bf00      	nop
    return;
 8007bca:	e16e      	b.n	8007eaa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	f040 814a 	bne.w	8007e6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bda:	f003 0310 	and.w	r3, r3, #16
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 8143 	beq.w	8007e6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be8:	f003 0310 	and.w	r3, r3, #16
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 813c 	beq.w	8007e6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60bb      	str	r3, [r7, #8]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60bb      	str	r3, [r7, #8]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	60bb      	str	r3, [r7, #8]
 8007c06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c12:	2b40      	cmp	r3, #64	; 0x40
 8007c14:	f040 80b4 	bne.w	8007d80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 8140 	beq.w	8007eae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c36:	429a      	cmp	r2, r3
 8007c38:	f080 8139 	bcs.w	8007eae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4e:	f000 8088 	beq.w	8007d62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	330c      	adds	r3, #12
 8007c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	330c      	adds	r3, #12
 8007c7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1d9      	bne.n	8007c52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3314      	adds	r3, #20
 8007ca4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cb0:	f023 0301 	bic.w	r3, r3, #1
 8007cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3314      	adds	r3, #20
 8007cbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e1      	bne.n	8007c9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3314      	adds	r3, #20
 8007ce0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3314      	adds	r3, #20
 8007cfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e3      	bne.n	8007cda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	330c      	adds	r3, #12
 8007d26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d32:	f023 0310 	bic.w	r3, r3, #16
 8007d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	330c      	adds	r3, #12
 8007d40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d44:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e3      	bne.n	8007d20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fb fd49 	bl	80037f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f8b6 	bl	8007ee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d78:	e099      	b.n	8007eae <HAL_UART_IRQHandler+0x50e>
 8007d7a:	bf00      	nop
 8007d7c:	08007fc3 	.word	0x08007fc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 808b 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007d9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 8086 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	330c      	adds	r3, #12
 8007dac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	330c      	adds	r3, #12
 8007dc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007dca:	647a      	str	r2, [r7, #68]	; 0x44
 8007dcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e3      	bne.n	8007da6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3314      	adds	r3, #20
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	623b      	str	r3, [r7, #32]
   return(result);
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	f023 0301 	bic.w	r3, r3, #1
 8007df4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3314      	adds	r3, #20
 8007dfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e02:	633a      	str	r2, [r7, #48]	; 0x30
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e3      	bne.n	8007dde <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	330c      	adds	r3, #12
 8007e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	e853 3f00 	ldrex	r3, [r3]
 8007e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0310 	bic.w	r3, r3, #16
 8007e3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	330c      	adds	r3, #12
 8007e44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e48:	61fa      	str	r2, [r7, #28]
 8007e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	69b9      	ldr	r1, [r7, #24]
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	617b      	str	r3, [r7, #20]
   return(result);
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e3      	bne.n	8007e24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f83e 	bl	8007ee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e68:	e023      	b.n	8007eb2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d009      	beq.n	8007e8a <HAL_UART_IRQHandler+0x4ea>
 8007e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f8b1 	bl	8007fea <UART_Transmit_IT>
    return;
 8007e88:	e014      	b.n	8007eb4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00e      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x514>
 8007e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d008      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f8f1 	bl	800808a <UART_EndTransmit_IT>
    return;
 8007ea8:	e004      	b.n	8007eb4 <HAL_UART_IRQHandler+0x514>
    return;
 8007eaa:	bf00      	nop
 8007eac:	e002      	b.n	8007eb4 <HAL_UART_IRQHandler+0x514>
      return;
 8007eae:	bf00      	nop
 8007eb0:	e000      	b.n	8007eb4 <HAL_UART_IRQHandler+0x514>
      return;
 8007eb2:	bf00      	nop
  }
}
 8007eb4:	37e8      	adds	r7, #232	; 0xe8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop

08007ebc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b095      	sub	sp, #84	; 0x54
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	330c      	adds	r3, #12
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0e:	e853 3f00 	ldrex	r3, [r3]
 8007f12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	330c      	adds	r3, #12
 8007f22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f24:	643a      	str	r2, [r7, #64]	; 0x40
 8007f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f2c:	e841 2300 	strex	r3, r2, [r1]
 8007f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e5      	bne.n	8007f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3314      	adds	r3, #20
 8007f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	f023 0301 	bic.w	r3, r3, #1
 8007f4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3314      	adds	r3, #20
 8007f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f60:	e841 2300 	strex	r3, r2, [r1]
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1e5      	bne.n	8007f38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d119      	bne.n	8007fa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	330c      	adds	r3, #12
 8007f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	e853 3f00 	ldrex	r3, [r3]
 8007f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f023 0310 	bic.w	r3, r3, #16
 8007f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	330c      	adds	r3, #12
 8007f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f94:	61ba      	str	r2, [r7, #24]
 8007f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f98:	6979      	ldr	r1, [r7, #20]
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	e841 2300 	strex	r3, r2, [r1]
 8007fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e5      	bne.n	8007f74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007fb6:	bf00      	nop
 8007fb8:	3754      	adds	r7, #84	; 0x54
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff ff77 	bl	8007ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b21      	cmp	r3, #33	; 0x21
 8007ffc:	d13e      	bne.n	800807c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008006:	d114      	bne.n	8008032 <UART_Transmit_IT+0x48>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d110      	bne.n	8008032 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008024:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	1c9a      	adds	r2, r3, #2
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	621a      	str	r2, [r3, #32]
 8008030:	e008      	b.n	8008044 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	1c59      	adds	r1, r3, #1
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	6211      	str	r1, [r2, #32]
 800803c:	781a      	ldrb	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008048:	b29b      	uxth	r3, r3
 800804a:	3b01      	subs	r3, #1
 800804c:	b29b      	uxth	r3, r3
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	4619      	mov	r1, r3
 8008052:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10f      	bne.n	8008078 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008066:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008076:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	e000      	b.n	800807e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800807c:	2302      	movs	r3, #2
  }
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7f8 ff8e 	bl	8000fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b08c      	sub	sp, #48	; 0x30
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b22      	cmp	r3, #34	; 0x22
 80080cc:	f040 80ab 	bne.w	8008226 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d8:	d117      	bne.n	800810a <UART_Receive_IT+0x50>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d113      	bne.n	800810a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080e2:	2300      	movs	r3, #0
 80080e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008102:	1c9a      	adds	r2, r3, #2
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	629a      	str	r2, [r3, #40]	; 0x28
 8008108:	e026      	b.n	8008158 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008110:	2300      	movs	r3, #0
 8008112:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800811c:	d007      	beq.n	800812e <UART_Receive_IT+0x74>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10a      	bne.n	800813c <UART_Receive_IT+0x82>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d106      	bne.n	800813c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	b2da      	uxtb	r2, r3
 8008136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008138:	701a      	strb	r2, [r3, #0]
 800813a:	e008      	b.n	800814e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008148:	b2da      	uxtb	r2, r3
 800814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800815c:	b29b      	uxth	r3, r3
 800815e:	3b01      	subs	r3, #1
 8008160:	b29b      	uxth	r3, r3
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	4619      	mov	r1, r3
 8008166:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008168:	2b00      	cmp	r3, #0
 800816a:	d15a      	bne.n	8008222 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0220 	bic.w	r2, r2, #32
 800817a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800818a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	695a      	ldr	r2, [r3, #20]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d135      	bne.n	8008218 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	330c      	adds	r3, #12
 80081b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	613b      	str	r3, [r7, #16]
   return(result);
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f023 0310 	bic.w	r3, r3, #16
 80081c8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	330c      	adds	r3, #12
 80081d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d2:	623a      	str	r2, [r7, #32]
 80081d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	69f9      	ldr	r1, [r7, #28]
 80081d8:	6a3a      	ldr	r2, [r7, #32]
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	61bb      	str	r3, [r7, #24]
   return(result);
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e5      	bne.n	80081b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0310 	and.w	r3, r3, #16
 80081f0:	2b10      	cmp	r3, #16
 80081f2:	d10a      	bne.n	800820a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff fe67 	bl	8007ee4 <HAL_UARTEx_RxEventCallback>
 8008216:	e002      	b.n	800821e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7ff fe4f 	bl	8007ebc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	e002      	b.n	8008228 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	e000      	b.n	8008228 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008226:	2302      	movs	r3, #2
  }
}
 8008228:	4618      	mov	r0, r3
 800822a:	3730      	adds	r7, #48	; 0x30
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008234:	b0c0      	sub	sp, #256	; 0x100
 8008236:	af00      	add	r7, sp, #0
 8008238:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824c:	68d9      	ldr	r1, [r3, #12]
 800824e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	ea40 0301 	orr.w	r3, r0, r1
 8008258:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800825a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	431a      	orrs	r2, r3
 8008268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	431a      	orrs	r2, r3
 8008270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	4313      	orrs	r3, r2
 8008278:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800827c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008288:	f021 010c 	bic.w	r1, r1, #12
 800828c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008296:	430b      	orrs	r3, r1
 8008298:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800829a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80082a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082aa:	6999      	ldr	r1, [r3, #24]
 80082ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	ea40 0301 	orr.w	r3, r0, r1
 80082b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	4b8f      	ldr	r3, [pc, #572]	; (80084fc <UART_SetConfig+0x2cc>)
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d005      	beq.n	80082d0 <UART_SetConfig+0xa0>
 80082c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	4b8d      	ldr	r3, [pc, #564]	; (8008500 <UART_SetConfig+0x2d0>)
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d104      	bne.n	80082da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082d0:	f7fe fc44 	bl	8006b5c <HAL_RCC_GetPCLK2Freq>
 80082d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80082d8:	e003      	b.n	80082e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082da:	f7fe fc2b 	bl	8006b34 <HAL_RCC_GetPCLK1Freq>
 80082de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082ec:	f040 810c 	bne.w	8008508 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008302:	4622      	mov	r2, r4
 8008304:	462b      	mov	r3, r5
 8008306:	1891      	adds	r1, r2, r2
 8008308:	65b9      	str	r1, [r7, #88]	; 0x58
 800830a:	415b      	adcs	r3, r3
 800830c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800830e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008312:	4621      	mov	r1, r4
 8008314:	eb12 0801 	adds.w	r8, r2, r1
 8008318:	4629      	mov	r1, r5
 800831a:	eb43 0901 	adc.w	r9, r3, r1
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	f04f 0300 	mov.w	r3, #0
 8008326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800832a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800832e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008332:	4690      	mov	r8, r2
 8008334:	4699      	mov	r9, r3
 8008336:	4623      	mov	r3, r4
 8008338:	eb18 0303 	adds.w	r3, r8, r3
 800833c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008340:	462b      	mov	r3, r5
 8008342:	eb49 0303 	adc.w	r3, r9, r3
 8008346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800834a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008356:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800835a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800835e:	460b      	mov	r3, r1
 8008360:	18db      	adds	r3, r3, r3
 8008362:	653b      	str	r3, [r7, #80]	; 0x50
 8008364:	4613      	mov	r3, r2
 8008366:	eb42 0303 	adc.w	r3, r2, r3
 800836a:	657b      	str	r3, [r7, #84]	; 0x54
 800836c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008370:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008374:	f7f8 fb16 	bl	80009a4 <__aeabi_uldivmod>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	4b61      	ldr	r3, [pc, #388]	; (8008504 <UART_SetConfig+0x2d4>)
 800837e:	fba3 2302 	umull	r2, r3, r3, r2
 8008382:	095b      	lsrs	r3, r3, #5
 8008384:	011c      	lsls	r4, r3, #4
 8008386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800838a:	2200      	movs	r2, #0
 800838c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008390:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008394:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008398:	4642      	mov	r2, r8
 800839a:	464b      	mov	r3, r9
 800839c:	1891      	adds	r1, r2, r2
 800839e:	64b9      	str	r1, [r7, #72]	; 0x48
 80083a0:	415b      	adcs	r3, r3
 80083a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80083a8:	4641      	mov	r1, r8
 80083aa:	eb12 0a01 	adds.w	sl, r2, r1
 80083ae:	4649      	mov	r1, r9
 80083b0:	eb43 0b01 	adc.w	fp, r3, r1
 80083b4:	f04f 0200 	mov.w	r2, #0
 80083b8:	f04f 0300 	mov.w	r3, #0
 80083bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083c8:	4692      	mov	sl, r2
 80083ca:	469b      	mov	fp, r3
 80083cc:	4643      	mov	r3, r8
 80083ce:	eb1a 0303 	adds.w	r3, sl, r3
 80083d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083d6:	464b      	mov	r3, r9
 80083d8:	eb4b 0303 	adc.w	r3, fp, r3
 80083dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80083f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083f4:	460b      	mov	r3, r1
 80083f6:	18db      	adds	r3, r3, r3
 80083f8:	643b      	str	r3, [r7, #64]	; 0x40
 80083fa:	4613      	mov	r3, r2
 80083fc:	eb42 0303 	adc.w	r3, r2, r3
 8008400:	647b      	str	r3, [r7, #68]	; 0x44
 8008402:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008406:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800840a:	f7f8 facb 	bl	80009a4 <__aeabi_uldivmod>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4611      	mov	r1, r2
 8008414:	4b3b      	ldr	r3, [pc, #236]	; (8008504 <UART_SetConfig+0x2d4>)
 8008416:	fba3 2301 	umull	r2, r3, r3, r1
 800841a:	095b      	lsrs	r3, r3, #5
 800841c:	2264      	movs	r2, #100	; 0x64
 800841e:	fb02 f303 	mul.w	r3, r2, r3
 8008422:	1acb      	subs	r3, r1, r3
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800842a:	4b36      	ldr	r3, [pc, #216]	; (8008504 <UART_SetConfig+0x2d4>)
 800842c:	fba3 2302 	umull	r2, r3, r3, r2
 8008430:	095b      	lsrs	r3, r3, #5
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008438:	441c      	add	r4, r3
 800843a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800843e:	2200      	movs	r2, #0
 8008440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008444:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008448:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800844c:	4642      	mov	r2, r8
 800844e:	464b      	mov	r3, r9
 8008450:	1891      	adds	r1, r2, r2
 8008452:	63b9      	str	r1, [r7, #56]	; 0x38
 8008454:	415b      	adcs	r3, r3
 8008456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008458:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800845c:	4641      	mov	r1, r8
 800845e:	1851      	adds	r1, r2, r1
 8008460:	6339      	str	r1, [r7, #48]	; 0x30
 8008462:	4649      	mov	r1, r9
 8008464:	414b      	adcs	r3, r1
 8008466:	637b      	str	r3, [r7, #52]	; 0x34
 8008468:	f04f 0200 	mov.w	r2, #0
 800846c:	f04f 0300 	mov.w	r3, #0
 8008470:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008474:	4659      	mov	r1, fp
 8008476:	00cb      	lsls	r3, r1, #3
 8008478:	4651      	mov	r1, sl
 800847a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800847e:	4651      	mov	r1, sl
 8008480:	00ca      	lsls	r2, r1, #3
 8008482:	4610      	mov	r0, r2
 8008484:	4619      	mov	r1, r3
 8008486:	4603      	mov	r3, r0
 8008488:	4642      	mov	r2, r8
 800848a:	189b      	adds	r3, r3, r2
 800848c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008490:	464b      	mov	r3, r9
 8008492:	460a      	mov	r2, r1
 8008494:	eb42 0303 	adc.w	r3, r2, r3
 8008498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800849c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80084a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80084ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80084b0:	460b      	mov	r3, r1
 80084b2:	18db      	adds	r3, r3, r3
 80084b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80084b6:	4613      	mov	r3, r2
 80084b8:	eb42 0303 	adc.w	r3, r2, r3
 80084bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80084c6:	f7f8 fa6d 	bl	80009a4 <__aeabi_uldivmod>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4b0d      	ldr	r3, [pc, #52]	; (8008504 <UART_SetConfig+0x2d4>)
 80084d0:	fba3 1302 	umull	r1, r3, r3, r2
 80084d4:	095b      	lsrs	r3, r3, #5
 80084d6:	2164      	movs	r1, #100	; 0x64
 80084d8:	fb01 f303 	mul.w	r3, r1, r3
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	3332      	adds	r3, #50	; 0x32
 80084e2:	4a08      	ldr	r2, [pc, #32]	; (8008504 <UART_SetConfig+0x2d4>)
 80084e4:	fba2 2303 	umull	r2, r3, r2, r3
 80084e8:	095b      	lsrs	r3, r3, #5
 80084ea:	f003 0207 	and.w	r2, r3, #7
 80084ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4422      	add	r2, r4
 80084f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084f8:	e105      	b.n	8008706 <UART_SetConfig+0x4d6>
 80084fa:	bf00      	nop
 80084fc:	40011000 	.word	0x40011000
 8008500:	40011400 	.word	0x40011400
 8008504:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800850c:	2200      	movs	r2, #0
 800850e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008512:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008516:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800851a:	4642      	mov	r2, r8
 800851c:	464b      	mov	r3, r9
 800851e:	1891      	adds	r1, r2, r2
 8008520:	6239      	str	r1, [r7, #32]
 8008522:	415b      	adcs	r3, r3
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
 8008526:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800852a:	4641      	mov	r1, r8
 800852c:	1854      	adds	r4, r2, r1
 800852e:	4649      	mov	r1, r9
 8008530:	eb43 0501 	adc.w	r5, r3, r1
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	f04f 0300 	mov.w	r3, #0
 800853c:	00eb      	lsls	r3, r5, #3
 800853e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008542:	00e2      	lsls	r2, r4, #3
 8008544:	4614      	mov	r4, r2
 8008546:	461d      	mov	r5, r3
 8008548:	4643      	mov	r3, r8
 800854a:	18e3      	adds	r3, r4, r3
 800854c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008550:	464b      	mov	r3, r9
 8008552:	eb45 0303 	adc.w	r3, r5, r3
 8008556:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800855a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008566:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800856a:	f04f 0200 	mov.w	r2, #0
 800856e:	f04f 0300 	mov.w	r3, #0
 8008572:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008576:	4629      	mov	r1, r5
 8008578:	008b      	lsls	r3, r1, #2
 800857a:	4621      	mov	r1, r4
 800857c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008580:	4621      	mov	r1, r4
 8008582:	008a      	lsls	r2, r1, #2
 8008584:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008588:	f7f8 fa0c 	bl	80009a4 <__aeabi_uldivmod>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4b60      	ldr	r3, [pc, #384]	; (8008714 <UART_SetConfig+0x4e4>)
 8008592:	fba3 2302 	umull	r2, r3, r3, r2
 8008596:	095b      	lsrs	r3, r3, #5
 8008598:	011c      	lsls	r4, r3, #4
 800859a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80085a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80085a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80085ac:	4642      	mov	r2, r8
 80085ae:	464b      	mov	r3, r9
 80085b0:	1891      	adds	r1, r2, r2
 80085b2:	61b9      	str	r1, [r7, #24]
 80085b4:	415b      	adcs	r3, r3
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085bc:	4641      	mov	r1, r8
 80085be:	1851      	adds	r1, r2, r1
 80085c0:	6139      	str	r1, [r7, #16]
 80085c2:	4649      	mov	r1, r9
 80085c4:	414b      	adcs	r3, r1
 80085c6:	617b      	str	r3, [r7, #20]
 80085c8:	f04f 0200 	mov.w	r2, #0
 80085cc:	f04f 0300 	mov.w	r3, #0
 80085d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085d4:	4659      	mov	r1, fp
 80085d6:	00cb      	lsls	r3, r1, #3
 80085d8:	4651      	mov	r1, sl
 80085da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085de:	4651      	mov	r1, sl
 80085e0:	00ca      	lsls	r2, r1, #3
 80085e2:	4610      	mov	r0, r2
 80085e4:	4619      	mov	r1, r3
 80085e6:	4603      	mov	r3, r0
 80085e8:	4642      	mov	r2, r8
 80085ea:	189b      	adds	r3, r3, r2
 80085ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085f0:	464b      	mov	r3, r9
 80085f2:	460a      	mov	r2, r1
 80085f4:	eb42 0303 	adc.w	r3, r2, r3
 80085f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	67bb      	str	r3, [r7, #120]	; 0x78
 8008606:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008608:	f04f 0200 	mov.w	r2, #0
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008614:	4649      	mov	r1, r9
 8008616:	008b      	lsls	r3, r1, #2
 8008618:	4641      	mov	r1, r8
 800861a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800861e:	4641      	mov	r1, r8
 8008620:	008a      	lsls	r2, r1, #2
 8008622:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008626:	f7f8 f9bd 	bl	80009a4 <__aeabi_uldivmod>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4b39      	ldr	r3, [pc, #228]	; (8008714 <UART_SetConfig+0x4e4>)
 8008630:	fba3 1302 	umull	r1, r3, r3, r2
 8008634:	095b      	lsrs	r3, r3, #5
 8008636:	2164      	movs	r1, #100	; 0x64
 8008638:	fb01 f303 	mul.w	r3, r1, r3
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	011b      	lsls	r3, r3, #4
 8008640:	3332      	adds	r3, #50	; 0x32
 8008642:	4a34      	ldr	r2, [pc, #208]	; (8008714 <UART_SetConfig+0x4e4>)
 8008644:	fba2 2303 	umull	r2, r3, r2, r3
 8008648:	095b      	lsrs	r3, r3, #5
 800864a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800864e:	441c      	add	r4, r3
 8008650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008654:	2200      	movs	r2, #0
 8008656:	673b      	str	r3, [r7, #112]	; 0x70
 8008658:	677a      	str	r2, [r7, #116]	; 0x74
 800865a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800865e:	4642      	mov	r2, r8
 8008660:	464b      	mov	r3, r9
 8008662:	1891      	adds	r1, r2, r2
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	415b      	adcs	r3, r3
 8008668:	60fb      	str	r3, [r7, #12]
 800866a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800866e:	4641      	mov	r1, r8
 8008670:	1851      	adds	r1, r2, r1
 8008672:	6039      	str	r1, [r7, #0]
 8008674:	4649      	mov	r1, r9
 8008676:	414b      	adcs	r3, r1
 8008678:	607b      	str	r3, [r7, #4]
 800867a:	f04f 0200 	mov.w	r2, #0
 800867e:	f04f 0300 	mov.w	r3, #0
 8008682:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008686:	4659      	mov	r1, fp
 8008688:	00cb      	lsls	r3, r1, #3
 800868a:	4651      	mov	r1, sl
 800868c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008690:	4651      	mov	r1, sl
 8008692:	00ca      	lsls	r2, r1, #3
 8008694:	4610      	mov	r0, r2
 8008696:	4619      	mov	r1, r3
 8008698:	4603      	mov	r3, r0
 800869a:	4642      	mov	r2, r8
 800869c:	189b      	adds	r3, r3, r2
 800869e:	66bb      	str	r3, [r7, #104]	; 0x68
 80086a0:	464b      	mov	r3, r9
 80086a2:	460a      	mov	r2, r1
 80086a4:	eb42 0303 	adc.w	r3, r2, r3
 80086a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	663b      	str	r3, [r7, #96]	; 0x60
 80086b4:	667a      	str	r2, [r7, #100]	; 0x64
 80086b6:	f04f 0200 	mov.w	r2, #0
 80086ba:	f04f 0300 	mov.w	r3, #0
 80086be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80086c2:	4649      	mov	r1, r9
 80086c4:	008b      	lsls	r3, r1, #2
 80086c6:	4641      	mov	r1, r8
 80086c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086cc:	4641      	mov	r1, r8
 80086ce:	008a      	lsls	r2, r1, #2
 80086d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80086d4:	f7f8 f966 	bl	80009a4 <__aeabi_uldivmod>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <UART_SetConfig+0x4e4>)
 80086de:	fba3 1302 	umull	r1, r3, r3, r2
 80086e2:	095b      	lsrs	r3, r3, #5
 80086e4:	2164      	movs	r1, #100	; 0x64
 80086e6:	fb01 f303 	mul.w	r3, r1, r3
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	3332      	adds	r3, #50	; 0x32
 80086f0:	4a08      	ldr	r2, [pc, #32]	; (8008714 <UART_SetConfig+0x4e4>)
 80086f2:	fba2 2303 	umull	r2, r3, r2, r3
 80086f6:	095b      	lsrs	r3, r3, #5
 80086f8:	f003 020f 	and.w	r2, r3, #15
 80086fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4422      	add	r2, r4
 8008704:	609a      	str	r2, [r3, #8]
}
 8008706:	bf00      	nop
 8008708:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800870c:	46bd      	mov	sp, r7
 800870e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008712:	bf00      	nop
 8008714:	51eb851f 	.word	0x51eb851f

08008718 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008718:	b084      	sub	sp, #16
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	f107 001c 	add.w	r0, r7, #28
 8008726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	2b01      	cmp	r3, #1
 800872e:	d122      	bne.n	8008776 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800875a:	2b01      	cmp	r3, #1
 800875c:	d105      	bne.n	800876a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f001 fbee 	bl	8009f4c <USB_CoreReset>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]
 8008774:	e01a      	b.n	80087ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 fbe2 	bl	8009f4c <USB_CoreReset>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800878c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800878e:	2b00      	cmp	r3, #0
 8008790:	d106      	bne.n	80087a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008796:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	639a      	str	r2, [r3, #56]	; 0x38
 800879e:	e005      	b.n	80087ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d10b      	bne.n	80087ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f043 0206 	orr.w	r2, r3, #6
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f043 0220 	orr.w	r2, r3, #32
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087d6:	b004      	add	sp, #16
 80087d8:	4770      	bx	lr
	...

080087dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d165      	bne.n	80088bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	4a41      	ldr	r2, [pc, #260]	; (80088f8 <USB_SetTurnaroundTime+0x11c>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d906      	bls.n	8008806 <USB_SetTurnaroundTime+0x2a>
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	4a40      	ldr	r2, [pc, #256]	; (80088fc <USB_SetTurnaroundTime+0x120>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d202      	bcs.n	8008806 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008800:	230f      	movs	r3, #15
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	e062      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	4a3c      	ldr	r2, [pc, #240]	; (80088fc <USB_SetTurnaroundTime+0x120>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d306      	bcc.n	800881c <USB_SetTurnaroundTime+0x40>
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	4a3b      	ldr	r2, [pc, #236]	; (8008900 <USB_SetTurnaroundTime+0x124>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d202      	bcs.n	800881c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008816:	230e      	movs	r3, #14
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	e057      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	4a38      	ldr	r2, [pc, #224]	; (8008900 <USB_SetTurnaroundTime+0x124>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d306      	bcc.n	8008832 <USB_SetTurnaroundTime+0x56>
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	4a37      	ldr	r2, [pc, #220]	; (8008904 <USB_SetTurnaroundTime+0x128>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d202      	bcs.n	8008832 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800882c:	230d      	movs	r3, #13
 800882e:	617b      	str	r3, [r7, #20]
 8008830:	e04c      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	4a33      	ldr	r2, [pc, #204]	; (8008904 <USB_SetTurnaroundTime+0x128>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d306      	bcc.n	8008848 <USB_SetTurnaroundTime+0x6c>
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	4a32      	ldr	r2, [pc, #200]	; (8008908 <USB_SetTurnaroundTime+0x12c>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d802      	bhi.n	8008848 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008842:	230c      	movs	r3, #12
 8008844:	617b      	str	r3, [r7, #20]
 8008846:	e041      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	4a2f      	ldr	r2, [pc, #188]	; (8008908 <USB_SetTurnaroundTime+0x12c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d906      	bls.n	800885e <USB_SetTurnaroundTime+0x82>
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	4a2e      	ldr	r2, [pc, #184]	; (800890c <USB_SetTurnaroundTime+0x130>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d802      	bhi.n	800885e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008858:	230b      	movs	r3, #11
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	e036      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	4a2a      	ldr	r2, [pc, #168]	; (800890c <USB_SetTurnaroundTime+0x130>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d906      	bls.n	8008874 <USB_SetTurnaroundTime+0x98>
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	4a29      	ldr	r2, [pc, #164]	; (8008910 <USB_SetTurnaroundTime+0x134>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d802      	bhi.n	8008874 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800886e:	230a      	movs	r3, #10
 8008870:	617b      	str	r3, [r7, #20]
 8008872:	e02b      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	4a26      	ldr	r2, [pc, #152]	; (8008910 <USB_SetTurnaroundTime+0x134>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d906      	bls.n	800888a <USB_SetTurnaroundTime+0xae>
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4a25      	ldr	r2, [pc, #148]	; (8008914 <USB_SetTurnaroundTime+0x138>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d202      	bcs.n	800888a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008884:	2309      	movs	r3, #9
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e020      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	4a21      	ldr	r2, [pc, #132]	; (8008914 <USB_SetTurnaroundTime+0x138>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d306      	bcc.n	80088a0 <USB_SetTurnaroundTime+0xc4>
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	4a20      	ldr	r2, [pc, #128]	; (8008918 <USB_SetTurnaroundTime+0x13c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d802      	bhi.n	80088a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800889a:	2308      	movs	r3, #8
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	e015      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	4a1d      	ldr	r2, [pc, #116]	; (8008918 <USB_SetTurnaroundTime+0x13c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d906      	bls.n	80088b6 <USB_SetTurnaroundTime+0xda>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4a1c      	ldr	r2, [pc, #112]	; (800891c <USB_SetTurnaroundTime+0x140>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d202      	bcs.n	80088b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80088b0:	2307      	movs	r3, #7
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	e00a      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80088b6:	2306      	movs	r3, #6
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	e007      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d102      	bne.n	80088c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80088c2:	2309      	movs	r3, #9
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	e001      	b.n	80088cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80088c8:	2309      	movs	r3, #9
 80088ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	68da      	ldr	r2, [r3, #12]
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	029b      	lsls	r3, r3, #10
 80088e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80088e4:	431a      	orrs	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	371c      	adds	r7, #28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	00d8acbf 	.word	0x00d8acbf
 80088fc:	00e4e1c0 	.word	0x00e4e1c0
 8008900:	00f42400 	.word	0x00f42400
 8008904:	01067380 	.word	0x01067380
 8008908:	011a499f 	.word	0x011a499f
 800890c:	01312cff 	.word	0x01312cff
 8008910:	014ca43f 	.word	0x014ca43f
 8008914:	016e3600 	.word	0x016e3600
 8008918:	01a6ab1f 	.word	0x01a6ab1f
 800891c:	01e84800 	.word	0x01e84800

08008920 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f043 0201 	orr.w	r2, r3, #1
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008942:	b480      	push	{r7}
 8008944:	b083      	sub	sp, #12
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f023 0201 	bic.w	r2, r3, #1
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008980:	78fb      	ldrb	r3, [r7, #3]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d115      	bne.n	80089b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008992:	2001      	movs	r0, #1
 8008994:	f7fa fd4a 	bl	800342c <HAL_Delay>
      ms++;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3301      	adds	r3, #1
 800899c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 fa45 	bl	8009e2e <USB_GetMode>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d01e      	beq.n	80089e8 <USB_SetCurrentMode+0x84>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b31      	cmp	r3, #49	; 0x31
 80089ae:	d9f0      	bls.n	8008992 <USB_SetCurrentMode+0x2e>
 80089b0:	e01a      	b.n	80089e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d115      	bne.n	80089e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80089c4:	2001      	movs	r0, #1
 80089c6:	f7fa fd31 	bl	800342c <HAL_Delay>
      ms++;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	3301      	adds	r3, #1
 80089ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 fa2c 	bl	8009e2e <USB_GetMode>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d005      	beq.n	80089e8 <USB_SetCurrentMode+0x84>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2b31      	cmp	r3, #49	; 0x31
 80089e0:	d9f0      	bls.n	80089c4 <USB_SetCurrentMode+0x60>
 80089e2:	e001      	b.n	80089e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e005      	b.n	80089f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b32      	cmp	r3, #50	; 0x32
 80089ec:	d101      	bne.n	80089f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e000      	b.n	80089f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089fc:	b084      	sub	sp, #16
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b086      	sub	sp, #24
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a16:	2300      	movs	r3, #0
 8008a18:	613b      	str	r3, [r7, #16]
 8008a1a:	e009      	b.n	8008a30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	3340      	adds	r3, #64	; 0x40
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	2200      	movs	r2, #0
 8008a28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	2b0e      	cmp	r3, #14
 8008a34:	d9f2      	bls.n	8008a1c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d11c      	bne.n	8008a76 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a4a:	f043 0302 	orr.w	r3, r3, #2
 8008a4e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a60:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	639a      	str	r2, [r3, #56]	; 0x38
 8008a74:	e00b      	b.n	8008a8e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a94:	461a      	mov	r2, r3
 8008a96:	2300      	movs	r3, #0
 8008a98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	680b      	ldr	r3, [r1, #0]
 8008aac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d10c      	bne.n	8008ace <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d104      	bne.n	8008ac4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008aba:	2100      	movs	r1, #0
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f965 	bl	8008d8c <USB_SetDevSpeed>
 8008ac2:	e008      	b.n	8008ad6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f960 	bl	8008d8c <USB_SetDevSpeed>
 8008acc:	e003      	b.n	8008ad6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ace:	2103      	movs	r1, #3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f95b 	bl	8008d8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ad6:	2110      	movs	r1, #16
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f8f3 	bl	8008cc4 <USB_FlushTxFifo>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f91f 	bl	8008d2c <USB_FlushRxFifo>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afe:	461a      	mov	r2, r3
 8008b00:	2300      	movs	r3, #0
 8008b02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b16:	461a      	mov	r2, r3
 8008b18:	2300      	movs	r3, #0
 8008b1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	613b      	str	r3, [r7, #16]
 8008b20:	e043      	b.n	8008baa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	015a      	lsls	r2, r3, #5
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	4413      	add	r3, r2
 8008b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b38:	d118      	bne.n	8008b6c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10a      	bne.n	8008b56 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	e013      	b.n	8008b7e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	015a      	lsls	r2, r3, #5
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b62:	461a      	mov	r2, r3
 8008b64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	e008      	b.n	8008b7e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b78:	461a      	mov	r2, r3
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ba2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	613b      	str	r3, [r7, #16]
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d3b7      	bcc.n	8008b22 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	613b      	str	r3, [r7, #16]
 8008bb6:	e043      	b.n	8008c40 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bce:	d118      	bne.n	8008c02 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10a      	bne.n	8008bec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be2:	461a      	mov	r2, r3
 8008be4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	e013      	b.n	8008c14 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008bfe:	6013      	str	r3, [r2, #0]
 8008c00:	e008      	b.n	8008c14 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0e:	461a      	mov	r2, r3
 8008c10:	2300      	movs	r3, #0
 8008c12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	015a      	lsls	r2, r3, #5
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c20:	461a      	mov	r2, r3
 8008c22:	2300      	movs	r3, #0
 8008c24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c32:	461a      	mov	r2, r3
 8008c34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	613b      	str	r3, [r7, #16]
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d3b7      	bcc.n	8008bb8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008c68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d105      	bne.n	8008c7c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	f043 0210 	orr.w	r2, r3, #16
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	699a      	ldr	r2, [r3, #24]
 8008c80:	4b0f      	ldr	r3, [pc, #60]	; (8008cc0 <USB_DevInit+0x2c4>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d005      	beq.n	8008c9a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	f043 0208 	orr.w	r2, r3, #8
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d107      	bne.n	8008cb0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ca8:	f043 0304 	orr.w	r3, r3, #4
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cbc:	b004      	add	sp, #16
 8008cbe:	4770      	bx	lr
 8008cc0:	803c3800 	.word	0x803c3800

08008cc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4a13      	ldr	r2, [pc, #76]	; (8008d28 <USB_FlushTxFifo+0x64>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d901      	bls.n	8008ce4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e01b      	b.n	8008d1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	daf2      	bge.n	8008cd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	019b      	lsls	r3, r3, #6
 8008cf4:	f043 0220 	orr.w	r2, r3, #32
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4a08      	ldr	r2, [pc, #32]	; (8008d28 <USB_FlushTxFifo+0x64>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d901      	bls.n	8008d0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e006      	b.n	8008d1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	f003 0320 	and.w	r3, r3, #32
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	d0f0      	beq.n	8008cfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	00030d40 	.word	0x00030d40

08008d2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	4a11      	ldr	r2, [pc, #68]	; (8008d88 <USB_FlushRxFifo+0x5c>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d901      	bls.n	8008d4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e018      	b.n	8008d7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	daf2      	bge.n	8008d38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d52:	2300      	movs	r3, #0
 8008d54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2210      	movs	r2, #16
 8008d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	4a08      	ldr	r2, [pc, #32]	; (8008d88 <USB_FlushRxFifo+0x5c>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d901      	bls.n	8008d6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e006      	b.n	8008d7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	f003 0310 	and.w	r3, r3, #16
 8008d76:	2b10      	cmp	r3, #16
 8008d78:	d0f0      	beq.n	8008d5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	00030d40 	.word	0x00030d40

08008d8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	68f9      	ldr	r1, [r7, #12]
 8008da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dac:	4313      	orrs	r3, r2
 8008dae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b087      	sub	sp, #28
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	f003 0306 	and.w	r3, r3, #6
 8008dd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d102      	bne.n	8008de4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008dde:	2300      	movs	r3, #0
 8008de0:	75fb      	strb	r3, [r7, #23]
 8008de2:	e00a      	b.n	8008dfa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d002      	beq.n	8008df0 <USB_GetDevSpeed+0x32>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b06      	cmp	r3, #6
 8008dee:	d102      	bne.n	8008df6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008df0:	2302      	movs	r3, #2
 8008df2:	75fb      	strb	r3, [r7, #23]
 8008df4:	e001      	b.n	8008dfa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008df6:	230f      	movs	r3, #15
 8008df8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	371c      	adds	r7, #28
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	785b      	ldrb	r3, [r3, #1]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d13a      	bne.n	8008e9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2a:	69da      	ldr	r2, [r3, #28]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	f003 030f 	and.w	r3, r3, #15
 8008e34:	2101      	movs	r1, #1
 8008e36:	fa01 f303 	lsl.w	r3, r1, r3
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	68f9      	ldr	r1, [r7, #12]
 8008e3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e42:	4313      	orrs	r3, r2
 8008e44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d155      	bne.n	8008f08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	791b      	ldrb	r3, [r3, #4]
 8008e76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	059b      	lsls	r3, r3, #22
 8008e7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e80:	4313      	orrs	r3, r2
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	0151      	lsls	r1, r2, #5
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	440a      	add	r2, r1
 8008e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e96:	6013      	str	r3, [r2, #0]
 8008e98:	e036      	b.n	8008f08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea0:	69da      	ldr	r2, [r3, #28]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	f003 030f 	and.w	r3, r3, #15
 8008eaa:	2101      	movs	r1, #1
 8008eac:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb0:	041b      	lsls	r3, r3, #16
 8008eb2:	68f9      	ldr	r1, [r7, #12]
 8008eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d11a      	bne.n	8008f08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	015a      	lsls	r2, r3, #5
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	4413      	add	r3, r2
 8008eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	791b      	ldrb	r3, [r3, #4]
 8008eec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008eee:	430b      	orrs	r3, r1
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	0151      	lsls	r1, r2, #5
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	440a      	add	r2, r1
 8008efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
	...

08008f18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	785b      	ldrb	r3, [r3, #1]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d161      	bne.n	8008ff8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f4a:	d11f      	bne.n	8008f8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	0151      	lsls	r1, r2, #5
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	440a      	add	r2, r1
 8008f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	0151      	lsls	r1, r2, #5
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	f003 030f 	and.w	r3, r3, #15
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	43db      	mvns	r3, r3
 8008fa6:	68f9      	ldr	r1, [r7, #12]
 8008fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fac:	4013      	ands	r3, r2
 8008fae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb6:	69da      	ldr	r2, [r3, #28]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	f003 030f 	and.w	r3, r3, #15
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	43db      	mvns	r3, r3
 8008fca:	68f9      	ldr	r1, [r7, #12]
 8008fcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	0159      	lsls	r1, r3, #5
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	440b      	add	r3, r1
 8008fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fee:	4619      	mov	r1, r3
 8008ff0:	4b35      	ldr	r3, [pc, #212]	; (80090c8 <USB_DeactivateEndpoint+0x1b0>)
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	600b      	str	r3, [r1, #0]
 8008ff6:	e060      	b.n	80090ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800900a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800900e:	d11f      	bne.n	8009050 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	015a      	lsls	r2, r3, #5
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4413      	add	r3, r2
 8009018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	0151      	lsls	r1, r2, #5
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	440a      	add	r2, r1
 8009026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800902a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800902e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	015a      	lsls	r2, r3, #5
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4413      	add	r3, r2
 8009038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	0151      	lsls	r1, r2, #5
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	440a      	add	r2, r1
 8009046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800904a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800904e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	f003 030f 	and.w	r3, r3, #15
 8009060:	2101      	movs	r1, #1
 8009062:	fa01 f303 	lsl.w	r3, r1, r3
 8009066:	041b      	lsls	r3, r3, #16
 8009068:	43db      	mvns	r3, r3
 800906a:	68f9      	ldr	r1, [r7, #12]
 800906c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009070:	4013      	ands	r3, r2
 8009072:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907a:	69da      	ldr	r2, [r3, #28]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	f003 030f 	and.w	r3, r3, #15
 8009084:	2101      	movs	r1, #1
 8009086:	fa01 f303 	lsl.w	r3, r1, r3
 800908a:	041b      	lsls	r3, r3, #16
 800908c:	43db      	mvns	r3, r3
 800908e:	68f9      	ldr	r1, [r7, #12]
 8009090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009094:	4013      	ands	r3, r2
 8009096:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	0159      	lsls	r1, r3, #5
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	440b      	add	r3, r1
 80090ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b2:	4619      	mov	r1, r3
 80090b4:	4b05      	ldr	r3, [pc, #20]	; (80090cc <USB_DeactivateEndpoint+0x1b4>)
 80090b6:	4013      	ands	r3, r2
 80090b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	ec337800 	.word	0xec337800
 80090cc:	eff37800 	.word	0xeff37800

080090d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08a      	sub	sp, #40	; 0x28
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	4613      	mov	r3, r2
 80090dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	785b      	ldrb	r3, [r3, #1]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	f040 815c 	bne.w	80093aa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d132      	bne.n	8009160 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	015a      	lsls	r2, r3, #5
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	4413      	add	r3, r2
 8009102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	0151      	lsls	r1, r2, #5
 800910c:	69fa      	ldr	r2, [r7, #28]
 800910e:	440a      	add	r2, r1
 8009110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009114:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009118:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800911c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	4413      	add	r3, r2
 8009126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	0151      	lsls	r1, r2, #5
 8009130:	69fa      	ldr	r2, [r7, #28]
 8009132:	440a      	add	r2, r1
 8009134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009138:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800913c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	4413      	add	r3, r2
 8009146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	69ba      	ldr	r2, [r7, #24]
 800914e:	0151      	lsls	r1, r2, #5
 8009150:	69fa      	ldr	r2, [r7, #28]
 8009152:	440a      	add	r2, r1
 8009154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009158:	0cdb      	lsrs	r3, r3, #19
 800915a:	04db      	lsls	r3, r3, #19
 800915c:	6113      	str	r3, [r2, #16]
 800915e:	e074      	b.n	800924a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	0151      	lsls	r1, r2, #5
 8009172:	69fa      	ldr	r2, [r7, #28]
 8009174:	440a      	add	r2, r1
 8009176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800917a:	0cdb      	lsrs	r3, r3, #19
 800917c:	04db      	lsls	r3, r3, #19
 800917e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	4413      	add	r3, r2
 8009188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	0151      	lsls	r1, r2, #5
 8009192:	69fa      	ldr	r2, [r7, #28]
 8009194:	440a      	add	r2, r1
 8009196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800919a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800919e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	6999      	ldr	r1, [r3, #24]
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	440b      	add	r3, r1
 80091bc:	1e59      	subs	r1, r3, #1
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80091c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80091c8:	4b9d      	ldr	r3, [pc, #628]	; (8009440 <USB_EPStartXfer+0x370>)
 80091ca:	400b      	ands	r3, r1
 80091cc:	69b9      	ldr	r1, [r7, #24]
 80091ce:	0148      	lsls	r0, r1, #5
 80091d0:	69f9      	ldr	r1, [r7, #28]
 80091d2:	4401      	add	r1, r0
 80091d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091d8:	4313      	orrs	r3, r2
 80091da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e8:	691a      	ldr	r2, [r3, #16]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091f2:	69b9      	ldr	r1, [r7, #24]
 80091f4:	0148      	lsls	r0, r1, #5
 80091f6:	69f9      	ldr	r1, [r7, #28]
 80091f8:	4401      	add	r1, r0
 80091fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091fe:	4313      	orrs	r3, r2
 8009200:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	791b      	ldrb	r3, [r3, #4]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d11f      	bne.n	800924a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	69ba      	ldr	r2, [r7, #24]
 800921a:	0151      	lsls	r1, r2, #5
 800921c:	69fa      	ldr	r2, [r7, #28]
 800921e:	440a      	add	r2, r1
 8009220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009224:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009228:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	0151      	lsls	r1, r2, #5
 800923c:	69fa      	ldr	r2, [r7, #28]
 800923e:	440a      	add	r2, r1
 8009240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009244:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009248:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800924a:	79fb      	ldrb	r3, [r7, #7]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d14b      	bne.n	80092e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d009      	beq.n	800926c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009264:	461a      	mov	r2, r3
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	791b      	ldrb	r3, [r3, #4]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d128      	bne.n	80092c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009280:	2b00      	cmp	r3, #0
 8009282:	d110      	bne.n	80092a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	0151      	lsls	r1, r2, #5
 8009296:	69fa      	ldr	r2, [r7, #28]
 8009298:	440a      	add	r2, r1
 800929a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800929e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	e00f      	b.n	80092c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	015a      	lsls	r2, r3, #5
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	0151      	lsls	r1, r2, #5
 80092b8:	69fa      	ldr	r2, [r7, #28]
 80092ba:	440a      	add	r2, r1
 80092bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	0151      	lsls	r1, r2, #5
 80092d8:	69fa      	ldr	r2, [r7, #28]
 80092da:	440a      	add	r2, r1
 80092dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	e133      	b.n	8009550 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	0151      	lsls	r1, r2, #5
 80092fa:	69fa      	ldr	r2, [r7, #28]
 80092fc:	440a      	add	r2, r1
 80092fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009302:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009306:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	791b      	ldrb	r3, [r3, #4]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d015      	beq.n	800933c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 811b 	beq.w	8009550 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	f003 030f 	and.w	r3, r3, #15
 800932a:	2101      	movs	r1, #1
 800932c:	fa01 f303 	lsl.w	r3, r1, r3
 8009330:	69f9      	ldr	r1, [r7, #28]
 8009332:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009336:	4313      	orrs	r3, r2
 8009338:	634b      	str	r3, [r1, #52]	; 0x34
 800933a:	e109      	b.n	8009550 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009348:	2b00      	cmp	r3, #0
 800934a:	d110      	bne.n	800936e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	4413      	add	r3, r2
 8009354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	69ba      	ldr	r2, [r7, #24]
 800935c:	0151      	lsls	r1, r2, #5
 800935e:	69fa      	ldr	r2, [r7, #28]
 8009360:	440a      	add	r2, r1
 8009362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009366:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	e00f      	b.n	800938e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	015a      	lsls	r2, r3, #5
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	4413      	add	r3, r2
 8009376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	69ba      	ldr	r2, [r7, #24]
 800937e:	0151      	lsls	r1, r2, #5
 8009380:	69fa      	ldr	r2, [r7, #28]
 8009382:	440a      	add	r2, r1
 8009384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800938c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	6919      	ldr	r1, [r3, #16]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	781a      	ldrb	r2, [r3, #0]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	b298      	uxth	r0, r3
 800939c:	79fb      	ldrb	r3, [r7, #7]
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	4603      	mov	r3, r0
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f000 fade 	bl	8009964 <USB_WritePacket>
 80093a8:	e0d2      	b.n	8009550 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	69ba      	ldr	r2, [r7, #24]
 80093ba:	0151      	lsls	r1, r2, #5
 80093bc:	69fa      	ldr	r2, [r7, #28]
 80093be:	440a      	add	r2, r1
 80093c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093c4:	0cdb      	lsrs	r3, r3, #19
 80093c6:	04db      	lsls	r3, r3, #19
 80093c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	0151      	lsls	r1, r2, #5
 80093dc:	69fa      	ldr	r2, [r7, #28]
 80093de:	440a      	add	r2, r1
 80093e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d126      	bne.n	8009444 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009402:	691a      	ldr	r2, [r3, #16]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800940c:	69b9      	ldr	r1, [r7, #24]
 800940e:	0148      	lsls	r0, r1, #5
 8009410:	69f9      	ldr	r1, [r7, #28]
 8009412:	4401      	add	r1, r0
 8009414:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009418:	4313      	orrs	r3, r2
 800941a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	0151      	lsls	r1, r2, #5
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	440a      	add	r2, r1
 8009432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009436:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800943a:	6113      	str	r3, [r2, #16]
 800943c:	e03a      	b.n	80094b4 <USB_EPStartXfer+0x3e4>
 800943e:	bf00      	nop
 8009440:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	699a      	ldr	r2, [r3, #24]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	4413      	add	r3, r2
 800944e:	1e5a      	subs	r2, r3, #1
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	fbb2 f3f3 	udiv	r3, r2, r3
 8009458:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	8afa      	ldrh	r2, [r7, #22]
 8009460:	fb03 f202 	mul.w	r2, r3, r2
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009474:	691a      	ldr	r2, [r3, #16]
 8009476:	8afb      	ldrh	r3, [r7, #22]
 8009478:	04d9      	lsls	r1, r3, #19
 800947a:	4b38      	ldr	r3, [pc, #224]	; (800955c <USB_EPStartXfer+0x48c>)
 800947c:	400b      	ands	r3, r1
 800947e:	69b9      	ldr	r1, [r7, #24]
 8009480:	0148      	lsls	r0, r1, #5
 8009482:	69f9      	ldr	r1, [r7, #28]
 8009484:	4401      	add	r1, r0
 8009486:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800948a:	4313      	orrs	r3, r2
 800948c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	015a      	lsls	r2, r3, #5
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	4413      	add	r3, r2
 8009496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949a:	691a      	ldr	r2, [r3, #16]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094a4:	69b9      	ldr	r1, [r7, #24]
 80094a6:	0148      	lsls	r0, r1, #5
 80094a8:	69f9      	ldr	r1, [r7, #28]
 80094aa:	4401      	add	r1, r0
 80094ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094b0:	4313      	orrs	r3, r2
 80094b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d10d      	bne.n	80094d6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d009      	beq.n	80094d6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	6919      	ldr	r1, [r3, #16]
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d2:	460a      	mov	r2, r1
 80094d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	791b      	ldrb	r3, [r3, #4]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d128      	bne.n	8009530 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d110      	bne.n	8009510 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	015a      	lsls	r2, r3, #5
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	4413      	add	r3, r2
 80094f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	0151      	lsls	r1, r2, #5
 8009500:	69fa      	ldr	r2, [r7, #28]
 8009502:	440a      	add	r2, r1
 8009504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009508:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	e00f      	b.n	8009530 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	4413      	add	r3, r2
 8009518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	69ba      	ldr	r2, [r7, #24]
 8009520:	0151      	lsls	r1, r2, #5
 8009522:	69fa      	ldr	r2, [r7, #28]
 8009524:	440a      	add	r2, r1
 8009526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800952a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800952e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	4413      	add	r3, r2
 8009538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	69ba      	ldr	r2, [r7, #24]
 8009540:	0151      	lsls	r1, r2, #5
 8009542:	69fa      	ldr	r2, [r7, #28]
 8009544:	440a      	add	r2, r1
 8009546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800954a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800954e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3720      	adds	r7, #32
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	1ff80000 	.word	0x1ff80000

08009560 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009560:	b480      	push	{r7}
 8009562:	b087      	sub	sp, #28
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	4613      	mov	r3, r2
 800956c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	785b      	ldrb	r3, [r3, #1]
 800957c:	2b01      	cmp	r3, #1
 800957e:	f040 80ce 	bne.w	800971e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d132      	bne.n	80095f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	015a      	lsls	r2, r3, #5
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	4413      	add	r3, r2
 8009592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	0151      	lsls	r1, r2, #5
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	440a      	add	r2, r1
 80095a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	0151      	lsls	r1, r2, #5
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	440a      	add	r2, r1
 80095c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e8:	0cdb      	lsrs	r3, r3, #19
 80095ea:	04db      	lsls	r3, r3, #19
 80095ec:	6113      	str	r3, [r2, #16]
 80095ee:	e04e      	b.n	800968e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	0151      	lsls	r1, r2, #5
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	440a      	add	r2, r1
 8009606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800960a:	0cdb      	lsrs	r3, r3, #19
 800960c:	04db      	lsls	r3, r3, #19
 800960e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	0151      	lsls	r1, r2, #5
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	440a      	add	r2, r1
 8009626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800962a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800962e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009632:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	699a      	ldr	r2, [r3, #24]
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	429a      	cmp	r2, r3
 800963e:	d903      	bls.n	8009648 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	68da      	ldr	r2, [r3, #12]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	0151      	lsls	r1, r2, #5
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	440a      	add	r2, r1
 800965e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009666:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	015a      	lsls	r2, r3, #5
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	4413      	add	r3, r2
 8009670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009674:	691a      	ldr	r2, [r3, #16]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800967e:	6939      	ldr	r1, [r7, #16]
 8009680:	0148      	lsls	r0, r1, #5
 8009682:	6979      	ldr	r1, [r7, #20]
 8009684:	4401      	add	r1, r0
 8009686:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800968a:	4313      	orrs	r3, r2
 800968c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d11e      	bne.n	80096d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d009      	beq.n	80096b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a8:	461a      	mov	r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	0151      	lsls	r1, r2, #5
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	440a      	add	r2, r1
 80096c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	e097      	b.n	8009802 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	0151      	lsls	r1, r2, #5
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	440a      	add	r2, r1
 80096e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 8083 	beq.w	8009802 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	f003 030f 	and.w	r3, r3, #15
 800970c:	2101      	movs	r1, #1
 800970e:	fa01 f303 	lsl.w	r3, r1, r3
 8009712:	6979      	ldr	r1, [r7, #20]
 8009714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009718:	4313      	orrs	r3, r2
 800971a:	634b      	str	r3, [r1, #52]	; 0x34
 800971c:	e071      	b.n	8009802 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	0151      	lsls	r1, r2, #5
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	440a      	add	r2, r1
 8009734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009738:	0cdb      	lsrs	r3, r3, #19
 800973a:	04db      	lsls	r3, r3, #19
 800973c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	0151      	lsls	r1, r2, #5
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	440a      	add	r2, r1
 8009754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009758:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800975c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009760:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	68da      	ldr	r2, [r3, #12]
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	68da      	ldr	r2, [r3, #12]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	0151      	lsls	r1, r2, #5
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	440a      	add	r2, r1
 8009790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009798:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	015a      	lsls	r2, r3, #5
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	4413      	add	r3, r2
 80097a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a6:	691a      	ldr	r2, [r3, #16]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	69db      	ldr	r3, [r3, #28]
 80097ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097b0:	6939      	ldr	r1, [r7, #16]
 80097b2:	0148      	lsls	r0, r1, #5
 80097b4:	6979      	ldr	r1, [r7, #20]
 80097b6:	4401      	add	r1, r0
 80097b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097bc:	4313      	orrs	r3, r2
 80097be:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80097c0:	79fb      	ldrb	r3, [r7, #7]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d10d      	bne.n	80097e2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d009      	beq.n	80097e2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	6919      	ldr	r1, [r3, #16]
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097de:	460a      	mov	r2, r1
 80097e0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	015a      	lsls	r2, r3, #5
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	0151      	lsls	r1, r2, #5
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	440a      	add	r2, r1
 80097f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009800:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	371c      	adds	r7, #28
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009810:	b480      	push	{r7}
 8009812:	b087      	sub	sp, #28
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	785b      	ldrb	r3, [r3, #1]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d14a      	bne.n	80098c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	015a      	lsls	r2, r3, #5
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	4413      	add	r3, r2
 8009838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009846:	f040 8086 	bne.w	8009956 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	7812      	ldrb	r2, [r2, #0]
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	440a      	add	r2, r1
 8009864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009868:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800986c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	7812      	ldrb	r2, [r2, #0]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	440a      	add	r2, r1
 8009888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800988c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009890:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3301      	adds	r3, #1
 8009896:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f242 7210 	movw	r2, #10000	; 0x2710
 800989e:	4293      	cmp	r3, r2
 80098a0:	d902      	bls.n	80098a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	75fb      	strb	r3, [r7, #23]
          break;
 80098a6:	e056      	b.n	8009956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	015a      	lsls	r2, r3, #5
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	4413      	add	r3, r2
 80098b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098c0:	d0e7      	beq.n	8009892 <USB_EPStopXfer+0x82>
 80098c2:	e048      	b.n	8009956 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098dc:	d13b      	bne.n	8009956 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	7812      	ldrb	r2, [r2, #0]
 80098f2:	0151      	lsls	r1, r2, #5
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	440a      	add	r2, r1
 80098f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009900:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	4413      	add	r3, r2
 800990c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	7812      	ldrb	r2, [r2, #0]
 8009916:	0151      	lsls	r1, r2, #5
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	440a      	add	r2, r1
 800991c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009924:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3301      	adds	r3, #1
 800992a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009932:	4293      	cmp	r3, r2
 8009934:	d902      	bls.n	800993c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	75fb      	strb	r3, [r7, #23]
          break;
 800993a:	e00c      	b.n	8009956 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009954:	d0e7      	beq.n	8009926 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009956:	7dfb      	ldrb	r3, [r7, #23]
}
 8009958:	4618      	mov	r0, r3
 800995a:	371c      	adds	r7, #28
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009964:	b480      	push	{r7}
 8009966:	b089      	sub	sp, #36	; 0x24
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	4611      	mov	r1, r2
 8009970:	461a      	mov	r2, r3
 8009972:	460b      	mov	r3, r1
 8009974:	71fb      	strb	r3, [r7, #7]
 8009976:	4613      	mov	r3, r2
 8009978:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009982:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009986:	2b00      	cmp	r3, #0
 8009988:	d123      	bne.n	80099d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800998a:	88bb      	ldrh	r3, [r7, #4]
 800998c:	3303      	adds	r3, #3
 800998e:	089b      	lsrs	r3, r3, #2
 8009990:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009992:	2300      	movs	r3, #0
 8009994:	61bb      	str	r3, [r7, #24]
 8009996:	e018      	b.n	80099ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	031a      	lsls	r2, r3, #12
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a4:	461a      	mov	r2, r3
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	3301      	adds	r3, #1
 80099b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	3301      	adds	r3, #1
 80099b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	3301      	adds	r3, #1
 80099bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	3301      	adds	r3, #1
 80099c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	3301      	adds	r3, #1
 80099c8:	61bb      	str	r3, [r7, #24]
 80099ca:	69ba      	ldr	r2, [r7, #24]
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d3e2      	bcc.n	8009998 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3724      	adds	r7, #36	; 0x24
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b08b      	sub	sp, #44	; 0x2c
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	4613      	mov	r3, r2
 80099ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80099f6:	88fb      	ldrh	r3, [r7, #6]
 80099f8:	089b      	lsrs	r3, r3, #2
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80099fe:	88fb      	ldrh	r3, [r7, #6]
 8009a00:	f003 0303 	and.w	r3, r3, #3
 8009a04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009a06:	2300      	movs	r3, #0
 8009a08:	623b      	str	r3, [r7, #32]
 8009a0a:	e014      	b.n	8009a36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	3301      	adds	r3, #1
 8009a22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	3301      	adds	r3, #1
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009a30:	6a3b      	ldr	r3, [r7, #32]
 8009a32:	3301      	adds	r3, #1
 8009a34:	623b      	str	r3, [r7, #32]
 8009a36:	6a3a      	ldr	r2, [r7, #32]
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d3e6      	bcc.n	8009a0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009a3e:	8bfb      	ldrh	r3, [r7, #30]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d01e      	beq.n	8009a82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f107 0310 	add.w	r3, r7, #16
 8009a54:	6812      	ldr	r2, [r2, #0]
 8009a56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a58:	693a      	ldr	r2, [r7, #16]
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	00db      	lsls	r3, r3, #3
 8009a60:	fa22 f303 	lsr.w	r3, r2, r3
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	701a      	strb	r2, [r3, #0]
      i++;
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	3301      	adds	r3, #1
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009a76:	8bfb      	ldrh	r3, [r7, #30]
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a7c:	8bfb      	ldrh	r3, [r7, #30]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1ea      	bne.n	8009a58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	372c      	adds	r7, #44	; 0x2c
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	785b      	ldrb	r3, [r3, #1]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d12c      	bne.n	8009b06 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	db12      	blt.n	8009ae4 <USB_EPSetStall+0x54>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00f      	beq.n	8009ae4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	015a      	lsls	r2, r3, #5
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4413      	add	r3, r2
 8009acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	0151      	lsls	r1, r2, #5
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	440a      	add	r2, r1
 8009ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ae2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	015a      	lsls	r2, r3, #5
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	0151      	lsls	r1, r2, #5
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	440a      	add	r2, r1
 8009afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009afe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b02:	6013      	str	r3, [r2, #0]
 8009b04:	e02b      	b.n	8009b5e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	db12      	blt.n	8009b3e <USB_EPSetStall+0xae>
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00f      	beq.n	8009b3e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	0151      	lsls	r1, r2, #5
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	440a      	add	r2, r1
 8009b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b3c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	0151      	lsls	r1, r2, #5
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	440a      	add	r2, r1
 8009b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	785b      	ldrb	r3, [r3, #1]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d128      	bne.n	8009bda <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	0151      	lsls	r1, r2, #5
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	440a      	add	r2, r1
 8009b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ba6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	791b      	ldrb	r3, [r3, #4]
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d003      	beq.n	8009bb8 <USB_EPClearStall+0x4c>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	791b      	ldrb	r3, [r3, #4]
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d138      	bne.n	8009c2a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	015a      	lsls	r2, r3, #5
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	0151      	lsls	r1, r2, #5
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	440a      	add	r2, r1
 8009bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	e027      	b.n	8009c2a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	0151      	lsls	r1, r2, #5
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	440a      	add	r2, r1
 8009bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bf8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	791b      	ldrb	r3, [r3, #4]
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d003      	beq.n	8009c0a <USB_EPClearStall+0x9e>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	791b      	ldrb	r3, [r3, #4]
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d10f      	bne.n	8009c2a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	0151      	lsls	r1, r2, #5
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	440a      	add	r2, r1
 8009c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c28:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	460b      	mov	r3, r1
 8009c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	011b      	lsls	r3, r3, #4
 8009c68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009c6c:	68f9      	ldr	r1, [r7, #12]
 8009c6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c72:	4313      	orrs	r3, r2
 8009c74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c9e:	f023 0303 	bic.w	r3, r3, #3
 8009ca2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cb2:	f023 0302 	bic.w	r3, r3, #2
 8009cb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b085      	sub	sp, #20
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ce0:	f023 0303 	bic.w	r3, r3, #3
 8009ce4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf4:	f043 0302 	orr.w	r3, r3, #2
 8009cf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3714      	adds	r7, #20
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d20:	68fb      	ldr	r3, [r7, #12]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b085      	sub	sp, #20
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4a:	69db      	ldr	r3, [r3, #28]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	4013      	ands	r3, r2
 8009d50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	0c1b      	lsrs	r3, r3, #16
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b085      	sub	sp, #20
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d74:	699b      	ldr	r3, [r3, #24]
 8009d76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	4013      	ands	r3, r2
 8009d84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	b29b      	uxth	r3, r3
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b085      	sub	sp, #20
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009da6:	78fb      	ldrb	r3, [r7, #3]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b087      	sub	sp, #28
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009df6:	78fb      	ldrb	r3, [r7, #3]
 8009df8:	f003 030f 	and.w	r3, r3, #15
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8009e02:	01db      	lsls	r3, r3, #7
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e20:	68bb      	ldr	r3, [r7, #8]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	371c      	adds	r7, #28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	f003 0301 	and.w	r3, r3, #1
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b085      	sub	sp, #20
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009e68:	f023 0307 	bic.w	r3, r3, #7
 8009e6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	333c      	adds	r3, #60	; 0x3c
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	4a26      	ldr	r2, [pc, #152]	; (8009f48 <USB_EP0_OutStart+0xb8>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d90a      	bls.n	8009eca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ec4:	d101      	bne.n	8009eca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	e037      	b.n	8009f3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ee4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ef8:	f043 0318 	orr.w	r3, r3, #24
 8009efc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009f10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009f12:	7afb      	ldrb	r3, [r7, #11]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d10f      	bne.n	8009f38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f1e:	461a      	mov	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009f36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	4f54300a 	.word	0x4f54300a

08009f4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f54:	2300      	movs	r3, #0
 8009f56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	4a13      	ldr	r2, [pc, #76]	; (8009fb0 <USB_CoreReset+0x64>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d901      	bls.n	8009f6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e01b      	b.n	8009fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	daf2      	bge.n	8009f58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	f043 0201 	orr.w	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3301      	adds	r3, #1
 8009f86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	4a09      	ldr	r2, [pc, #36]	; (8009fb0 <USB_CoreReset+0x64>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d901      	bls.n	8009f94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f90:	2303      	movs	r3, #3
 8009f92:	e006      	b.n	8009fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	f003 0301 	and.w	r3, r3, #1
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d0f0      	beq.n	8009f82 <USB_CoreReset+0x36>

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	00030d40 	.word	0x00030d40

08009fb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009fc0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009fc4:	f002 fca2 	bl	800c90c <USBD_static_malloc>
 8009fc8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d109      	bne.n	8009fe4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	32b0      	adds	r2, #176	; 0xb0
 8009fda:	2100      	movs	r1, #0
 8009fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	e0d4      	b.n	800a18e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009fe4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009fe8:	2100      	movs	r1, #0
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f002 fd32 	bl	800ca54 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	32b0      	adds	r2, #176	; 0xb0
 8009ffa:	68f9      	ldr	r1, [r7, #12]
 8009ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	32b0      	adds	r2, #176	; 0xb0
 800a00a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7c1b      	ldrb	r3, [r3, #16]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d138      	bne.n	800a08e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a01c:	4b5e      	ldr	r3, [pc, #376]	; (800a198 <USBD_CDC_Init+0x1e4>)
 800a01e:	7819      	ldrb	r1, [r3, #0]
 800a020:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a024:	2202      	movs	r2, #2
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f002 fb4d 	bl	800c6c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a02c:	4b5a      	ldr	r3, [pc, #360]	; (800a198 <USBD_CDC_Init+0x1e4>)
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	f003 020f 	and.w	r2, r3, #15
 800a034:	6879      	ldr	r1, [r7, #4]
 800a036:	4613      	mov	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4413      	add	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	440b      	add	r3, r1
 800a040:	3324      	adds	r3, #36	; 0x24
 800a042:	2201      	movs	r2, #1
 800a044:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a046:	4b55      	ldr	r3, [pc, #340]	; (800a19c <USBD_CDC_Init+0x1e8>)
 800a048:	7819      	ldrb	r1, [r3, #0]
 800a04a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a04e:	2202      	movs	r2, #2
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f002 fb38 	bl	800c6c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a056:	4b51      	ldr	r3, [pc, #324]	; (800a19c <USBD_CDC_Init+0x1e8>)
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	f003 020f 	and.w	r2, r3, #15
 800a05e:	6879      	ldr	r1, [r7, #4]
 800a060:	4613      	mov	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	440b      	add	r3, r1
 800a06a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a06e:	2201      	movs	r2, #1
 800a070:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a072:	4b4b      	ldr	r3, [pc, #300]	; (800a1a0 <USBD_CDC_Init+0x1ec>)
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	f003 020f 	and.w	r2, r3, #15
 800a07a:	6879      	ldr	r1, [r7, #4]
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	440b      	add	r3, r1
 800a086:	3326      	adds	r3, #38	; 0x26
 800a088:	2210      	movs	r2, #16
 800a08a:	801a      	strh	r2, [r3, #0]
 800a08c:	e035      	b.n	800a0fa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a08e:	4b42      	ldr	r3, [pc, #264]	; (800a198 <USBD_CDC_Init+0x1e4>)
 800a090:	7819      	ldrb	r1, [r3, #0]
 800a092:	2340      	movs	r3, #64	; 0x40
 800a094:	2202      	movs	r2, #2
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f002 fb15 	bl	800c6c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a09c:	4b3e      	ldr	r3, [pc, #248]	; (800a198 <USBD_CDC_Init+0x1e4>)
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	f003 020f 	and.w	r2, r3, #15
 800a0a4:	6879      	ldr	r1, [r7, #4]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	440b      	add	r3, r1
 800a0b0:	3324      	adds	r3, #36	; 0x24
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a0b6:	4b39      	ldr	r3, [pc, #228]	; (800a19c <USBD_CDC_Init+0x1e8>)
 800a0b8:	7819      	ldrb	r1, [r3, #0]
 800a0ba:	2340      	movs	r3, #64	; 0x40
 800a0bc:	2202      	movs	r2, #2
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f002 fb01 	bl	800c6c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a0c4:	4b35      	ldr	r3, [pc, #212]	; (800a19c <USBD_CDC_Init+0x1e8>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	f003 020f 	and.w	r2, r3, #15
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	440b      	add	r3, r1
 800a0d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a0dc:	2201      	movs	r2, #1
 800a0de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a0e0:	4b2f      	ldr	r3, [pc, #188]	; (800a1a0 <USBD_CDC_Init+0x1ec>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	f003 020f 	and.w	r2, r3, #15
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	440b      	add	r3, r1
 800a0f4:	3326      	adds	r3, #38	; 0x26
 800a0f6:	2210      	movs	r2, #16
 800a0f8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a0fa:	4b29      	ldr	r3, [pc, #164]	; (800a1a0 <USBD_CDC_Init+0x1ec>)
 800a0fc:	7819      	ldrb	r1, [r3, #0]
 800a0fe:	2308      	movs	r3, #8
 800a100:	2203      	movs	r2, #3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f002 fadf 	bl	800c6c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a108:	4b25      	ldr	r3, [pc, #148]	; (800a1a0 <USBD_CDC_Init+0x1ec>)
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	f003 020f 	and.w	r2, r3, #15
 800a110:	6879      	ldr	r1, [r7, #4]
 800a112:	4613      	mov	r3, r2
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	440b      	add	r3, r1
 800a11c:	3324      	adds	r3, #36	; 0x24
 800a11e:	2201      	movs	r2, #1
 800a120:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	33b0      	adds	r3, #176	; 0xb0
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a158:	2302      	movs	r3, #2
 800a15a:	e018      	b.n	800a18e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	7c1b      	ldrb	r3, [r3, #16]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10a      	bne.n	800a17a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a164:	4b0d      	ldr	r3, [pc, #52]	; (800a19c <USBD_CDC_Init+0x1e8>)
 800a166:	7819      	ldrb	r1, [r3, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a16e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f002 fb96 	bl	800c8a4 <USBD_LL_PrepareReceive>
 800a178:	e008      	b.n	800a18c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a17a:	4b08      	ldr	r3, [pc, #32]	; (800a19c <USBD_CDC_Init+0x1e8>)
 800a17c:	7819      	ldrb	r1, [r3, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a184:	2340      	movs	r3, #64	; 0x40
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f002 fb8c 	bl	800c8a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	20000093 	.word	0x20000093
 800a19c:	20000094 	.word	0x20000094
 800a1a0:	20000095 	.word	0x20000095

0800a1a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a1b0:	4b3a      	ldr	r3, [pc, #232]	; (800a29c <USBD_CDC_DeInit+0xf8>)
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f002 faab 	bl	800c712 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a1bc:	4b37      	ldr	r3, [pc, #220]	; (800a29c <USBD_CDC_DeInit+0xf8>)
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	f003 020f 	and.w	r2, r3, #15
 800a1c4:	6879      	ldr	r1, [r7, #4]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	440b      	add	r3, r1
 800a1d0:	3324      	adds	r3, #36	; 0x24
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a1d6:	4b32      	ldr	r3, [pc, #200]	; (800a2a0 <USBD_CDC_DeInit+0xfc>)
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f002 fa98 	bl	800c712 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a1e2:	4b2f      	ldr	r3, [pc, #188]	; (800a2a0 <USBD_CDC_DeInit+0xfc>)
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	f003 020f 	and.w	r2, r3, #15
 800a1ea:	6879      	ldr	r1, [r7, #4]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	440b      	add	r3, r1
 800a1f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a1fe:	4b29      	ldr	r3, [pc, #164]	; (800a2a4 <USBD_CDC_DeInit+0x100>)
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	4619      	mov	r1, r3
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f002 fa84 	bl	800c712 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a20a:	4b26      	ldr	r3, [pc, #152]	; (800a2a4 <USBD_CDC_DeInit+0x100>)
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	f003 020f 	and.w	r2, r3, #15
 800a212:	6879      	ldr	r1, [r7, #4]
 800a214:	4613      	mov	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4413      	add	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	440b      	add	r3, r1
 800a21e:	3324      	adds	r3, #36	; 0x24
 800a220:	2200      	movs	r2, #0
 800a222:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a224:	4b1f      	ldr	r3, [pc, #124]	; (800a2a4 <USBD_CDC_DeInit+0x100>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	f003 020f 	and.w	r2, r3, #15
 800a22c:	6879      	ldr	r1, [r7, #4]
 800a22e:	4613      	mov	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4413      	add	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	440b      	add	r3, r1
 800a238:	3326      	adds	r3, #38	; 0x26
 800a23a:	2200      	movs	r2, #0
 800a23c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	32b0      	adds	r2, #176	; 0xb0
 800a248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d01f      	beq.n	800a290 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	33b0      	adds	r3, #176	; 0xb0
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	32b0      	adds	r2, #176	; 0xb0
 800a26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a272:	4618      	mov	r0, r3
 800a274:	f002 fb58 	bl	800c928 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	32b0      	adds	r2, #176	; 0xb0
 800a282:	2100      	movs	r1, #0
 800a284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20000093 	.word	0x20000093
 800a2a0:	20000094 	.word	0x20000094
 800a2a4:	20000095 	.word	0x20000095

0800a2a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	32b0      	adds	r2, #176	; 0xb0
 800a2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	e0bf      	b.n	800a458 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d050      	beq.n	800a386 <USBD_CDC_Setup+0xde>
 800a2e4:	2b20      	cmp	r3, #32
 800a2e6:	f040 80af 	bne.w	800a448 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	88db      	ldrh	r3, [r3, #6]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d03a      	beq.n	800a368 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	b25b      	sxtb	r3, r3
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	da1b      	bge.n	800a334 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	33b0      	adds	r3, #176	; 0xb0
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a312:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	88d2      	ldrh	r2, [r2, #6]
 800a318:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	88db      	ldrh	r3, [r3, #6]
 800a31e:	2b07      	cmp	r3, #7
 800a320:	bf28      	it	cs
 800a322:	2307      	movcs	r3, #7
 800a324:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	89fa      	ldrh	r2, [r7, #14]
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f001 fd89 	bl	800be44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a332:	e090      	b.n	800a456 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	785a      	ldrb	r2, [r3, #1]
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	88db      	ldrh	r3, [r3, #6]
 800a342:	2b3f      	cmp	r3, #63	; 0x3f
 800a344:	d803      	bhi.n	800a34e <USBD_CDC_Setup+0xa6>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	88db      	ldrh	r3, [r3, #6]
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	e000      	b.n	800a350 <USBD_CDC_Setup+0xa8>
 800a34e:	2240      	movs	r2, #64	; 0x40
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a356:	6939      	ldr	r1, [r7, #16]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a35e:	461a      	mov	r2, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f001 fd9b 	bl	800be9c <USBD_CtlPrepareRx>
      break;
 800a366:	e076      	b.n	800a456 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	33b0      	adds	r3, #176	; 0xb0
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	7850      	ldrb	r0, [r2, #1]
 800a37e:	2200      	movs	r2, #0
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	4798      	blx	r3
      break;
 800a384:	e067      	b.n	800a456 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	785b      	ldrb	r3, [r3, #1]
 800a38a:	2b0b      	cmp	r3, #11
 800a38c:	d851      	bhi.n	800a432 <USBD_CDC_Setup+0x18a>
 800a38e:	a201      	add	r2, pc, #4	; (adr r2, 800a394 <USBD_CDC_Setup+0xec>)
 800a390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a394:	0800a3c5 	.word	0x0800a3c5
 800a398:	0800a441 	.word	0x0800a441
 800a39c:	0800a433 	.word	0x0800a433
 800a3a0:	0800a433 	.word	0x0800a433
 800a3a4:	0800a433 	.word	0x0800a433
 800a3a8:	0800a433 	.word	0x0800a433
 800a3ac:	0800a433 	.word	0x0800a433
 800a3b0:	0800a433 	.word	0x0800a433
 800a3b4:	0800a433 	.word	0x0800a433
 800a3b8:	0800a433 	.word	0x0800a433
 800a3bc:	0800a3ef 	.word	0x0800a3ef
 800a3c0:	0800a419 	.word	0x0800a419
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d107      	bne.n	800a3e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a3d0:	f107 030a 	add.w	r3, r7, #10
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f001 fd33 	bl	800be44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3de:	e032      	b.n	800a446 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a3e0:	6839      	ldr	r1, [r7, #0]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f001 fcbd 	bl	800bd62 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	75fb      	strb	r3, [r7, #23]
          break;
 800a3ec:	e02b      	b.n	800a446 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b03      	cmp	r3, #3
 800a3f8:	d107      	bne.n	800a40a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a3fa:	f107 030d 	add.w	r3, r7, #13
 800a3fe:	2201      	movs	r2, #1
 800a400:	4619      	mov	r1, r3
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f001 fd1e 	bl	800be44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a408:	e01d      	b.n	800a446 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f001 fca8 	bl	800bd62 <USBD_CtlError>
            ret = USBD_FAIL;
 800a412:	2303      	movs	r3, #3
 800a414:	75fb      	strb	r3, [r7, #23]
          break;
 800a416:	e016      	b.n	800a446 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b03      	cmp	r3, #3
 800a422:	d00f      	beq.n	800a444 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f001 fc9b 	bl	800bd62 <USBD_CtlError>
            ret = USBD_FAIL;
 800a42c:	2303      	movs	r3, #3
 800a42e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a430:	e008      	b.n	800a444 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f001 fc94 	bl	800bd62 <USBD_CtlError>
          ret = USBD_FAIL;
 800a43a:	2303      	movs	r3, #3
 800a43c:	75fb      	strb	r3, [r7, #23]
          break;
 800a43e:	e002      	b.n	800a446 <USBD_CDC_Setup+0x19e>
          break;
 800a440:	bf00      	nop
 800a442:	e008      	b.n	800a456 <USBD_CDC_Setup+0x1ae>
          break;
 800a444:	bf00      	nop
      }
      break;
 800a446:	e006      	b.n	800a456 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f001 fc89 	bl	800bd62 <USBD_CtlError>
      ret = USBD_FAIL;
 800a450:	2303      	movs	r3, #3
 800a452:	75fb      	strb	r3, [r7, #23]
      break;
 800a454:	bf00      	nop
  }

  return (uint8_t)ret;
 800a456:	7dfb      	ldrb	r3, [r7, #23]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3718      	adds	r7, #24
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a472:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	32b0      	adds	r2, #176	; 0xb0
 800a47e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a486:	2303      	movs	r3, #3
 800a488:	e065      	b.n	800a556 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	32b0      	adds	r2, #176	; 0xb0
 800a494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a498:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a49a:	78fb      	ldrb	r3, [r7, #3]
 800a49c:	f003 020f 	and.w	r2, r3, #15
 800a4a0:	6879      	ldr	r1, [r7, #4]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	440b      	add	r3, r1
 800a4ac:	3318      	adds	r3, #24
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d02f      	beq.n	800a514 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a4b4:	78fb      	ldrb	r3, [r7, #3]
 800a4b6:	f003 020f 	and.w	r2, r3, #15
 800a4ba:	6879      	ldr	r1, [r7, #4]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4413      	add	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	440b      	add	r3, r1
 800a4c6:	3318      	adds	r3, #24
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	78fb      	ldrb	r3, [r7, #3]
 800a4cc:	f003 010f 	and.w	r1, r3, #15
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	440b      	add	r3, r1
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4403      	add	r3, r0
 800a4dc:	3348      	adds	r3, #72	; 0x48
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a4e4:	fb01 f303 	mul.w	r3, r1, r3
 800a4e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d112      	bne.n	800a514 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a4ee:	78fb      	ldrb	r3, [r7, #3]
 800a4f0:	f003 020f 	and.w	r2, r3, #15
 800a4f4:	6879      	ldr	r1, [r7, #4]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	440b      	add	r3, r1
 800a500:	3318      	adds	r3, #24
 800a502:	2200      	movs	r2, #0
 800a504:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a506:	78f9      	ldrb	r1, [r7, #3]
 800a508:	2300      	movs	r3, #0
 800a50a:	2200      	movs	r2, #0
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f002 f9a8 	bl	800c862 <USBD_LL_Transmit>
 800a512:	e01f      	b.n	800a554 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2200      	movs	r2, #0
 800a518:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	33b0      	adds	r3, #176	; 0xb0
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4413      	add	r3, r2
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d010      	beq.n	800a554 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	33b0      	adds	r3, #176	; 0xb0
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	68ba      	ldr	r2, [r7, #8]
 800a546:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a550:	78fa      	ldrb	r2, [r7, #3]
 800a552:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	460b      	mov	r3, r1
 800a568:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	32b0      	adds	r2, #176	; 0xb0
 800a574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a578:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	32b0      	adds	r2, #176	; 0xb0
 800a584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e01a      	b.n	800a5c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a590:	78fb      	ldrb	r3, [r7, #3]
 800a592:	4619      	mov	r1, r3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f002 f9a6 	bl	800c8e6 <USBD_LL_GetRxDataSize>
 800a59a:	4602      	mov	r2, r0
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	33b0      	adds	r3, #176	; 0xb0
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a5c0:	4611      	mov	r1, r2
 800a5c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	32b0      	adds	r2, #176	; 0xb0
 800a5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e025      	b.n	800a63c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	33b0      	adds	r3, #176	; 0xb0
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4413      	add	r3, r2
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d01a      	beq.n	800a63a <USBD_CDC_EP0_RxReady+0x6c>
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a60a:	2bff      	cmp	r3, #255	; 0xff
 800a60c:	d015      	beq.n	800a63a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	33b0      	adds	r3, #176	; 0xb0
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a626:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a62e:	b292      	uxth	r2, r2
 800a630:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	22ff      	movs	r2, #255	; 0xff
 800a636:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a64c:	2182      	movs	r1, #130	; 0x82
 800a64e:	4818      	ldr	r0, [pc, #96]	; (800a6b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a650:	f000 fd4f 	bl	800b0f2 <USBD_GetEpDesc>
 800a654:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a656:	2101      	movs	r1, #1
 800a658:	4815      	ldr	r0, [pc, #84]	; (800a6b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a65a:	f000 fd4a 	bl	800b0f2 <USBD_GetEpDesc>
 800a65e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a660:	2181      	movs	r1, #129	; 0x81
 800a662:	4813      	ldr	r0, [pc, #76]	; (800a6b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a664:	f000 fd45 	bl	800b0f2 <USBD_GetEpDesc>
 800a668:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	2210      	movs	r2, #16
 800a674:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d006      	beq.n	800a68a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	2200      	movs	r2, #0
 800a680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a684:	711a      	strb	r2, [r3, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d006      	beq.n	800a69e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a698:	711a      	strb	r2, [r3, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2243      	movs	r2, #67	; 0x43
 800a6a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a6a4:	4b02      	ldr	r3, [pc, #8]	; (800a6b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20000050 	.word	0x20000050

0800a6b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a6bc:	2182      	movs	r1, #130	; 0x82
 800a6be:	4818      	ldr	r0, [pc, #96]	; (800a720 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6c0:	f000 fd17 	bl	800b0f2 <USBD_GetEpDesc>
 800a6c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	4815      	ldr	r0, [pc, #84]	; (800a720 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6ca:	f000 fd12 	bl	800b0f2 <USBD_GetEpDesc>
 800a6ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a6d0:	2181      	movs	r1, #129	; 0x81
 800a6d2:	4813      	ldr	r0, [pc, #76]	; (800a720 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6d4:	f000 fd0d 	bl	800b0f2 <USBD_GetEpDesc>
 800a6d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	2210      	movs	r2, #16
 800a6e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d006      	beq.n	800a6fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	711a      	strb	r2, [r3, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f042 0202 	orr.w	r2, r2, #2
 800a6f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d006      	beq.n	800a70e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	711a      	strb	r2, [r3, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	f042 0202 	orr.w	r2, r2, #2
 800a70c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2243      	movs	r2, #67	; 0x43
 800a712:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a714:	4b02      	ldr	r3, [pc, #8]	; (800a720 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a716:	4618      	mov	r0, r3
 800a718:	3718      	adds	r7, #24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	20000050 	.word	0x20000050

0800a724 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a72c:	2182      	movs	r1, #130	; 0x82
 800a72e:	4818      	ldr	r0, [pc, #96]	; (800a790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a730:	f000 fcdf 	bl	800b0f2 <USBD_GetEpDesc>
 800a734:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a736:	2101      	movs	r1, #1
 800a738:	4815      	ldr	r0, [pc, #84]	; (800a790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a73a:	f000 fcda 	bl	800b0f2 <USBD_GetEpDesc>
 800a73e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a740:	2181      	movs	r1, #129	; 0x81
 800a742:	4813      	ldr	r0, [pc, #76]	; (800a790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a744:	f000 fcd5 	bl	800b0f2 <USBD_GetEpDesc>
 800a748:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d002      	beq.n	800a756 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	2210      	movs	r2, #16
 800a754:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d006      	beq.n	800a76a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	2200      	movs	r2, #0
 800a760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a764:	711a      	strb	r2, [r3, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d006      	beq.n	800a77e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a778:	711a      	strb	r2, [r3, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2243      	movs	r2, #67	; 0x43
 800a782:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a784:	4b02      	ldr	r3, [pc, #8]	; (800a790 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a786:	4618      	mov	r0, r3
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	20000050 	.word	0x20000050

0800a794 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	220a      	movs	r2, #10
 800a7a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a7a2:	4b03      	ldr	r3, [pc, #12]	; (800a7b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	2000000c 	.word	0x2000000c

0800a7b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e009      	b.n	800a7dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	33b0      	adds	r3, #176	; 0xb0
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b087      	sub	sp, #28
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	32b0      	adds	r2, #176	; 0xb0
 800a7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a802:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e008      	b.n	800a820 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	371c      	adds	r7, #28
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	32b0      	adds	r2, #176	; 0xb0
 800a840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a844:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e004      	b.n	800a85a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
	...

0800a868 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	32b0      	adds	r2, #176	; 0xb0
 800a87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a880:	2301      	movs	r3, #1
 800a882:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	32b0      	adds	r2, #176	; 0xb0
 800a88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d101      	bne.n	800a89a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a896:	2303      	movs	r3, #3
 800a898:	e025      	b.n	800a8e6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d11f      	bne.n	800a8e4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a8ac:	4b10      	ldr	r3, [pc, #64]	; (800a8f0 <USBD_CDC_TransmitPacket+0x88>)
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	f003 020f 	and.w	r2, r3, #15
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4403      	add	r3, r0
 800a8c6:	3318      	adds	r3, #24
 800a8c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a8ca:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <USBD_CDC_TransmitPacket+0x88>)
 800a8cc:	7819      	ldrb	r1, [r3, #0]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f001 ffc1 	bl	800c862 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000093 	.word	0x20000093

0800a8f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	32b0      	adds	r2, #176	; 0xb0
 800a906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	32b0      	adds	r2, #176	; 0xb0
 800a916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a91e:	2303      	movs	r3, #3
 800a920:	e018      	b.n	800a954 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	7c1b      	ldrb	r3, [r3, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10a      	bne.n	800a940 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a92a:	4b0c      	ldr	r3, [pc, #48]	; (800a95c <USBD_CDC_ReceivePacket+0x68>)
 800a92c:	7819      	ldrb	r1, [r3, #0]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a934:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f001 ffb3 	bl	800c8a4 <USBD_LL_PrepareReceive>
 800a93e:	e008      	b.n	800a952 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a940:	4b06      	ldr	r3, [pc, #24]	; (800a95c <USBD_CDC_ReceivePacket+0x68>)
 800a942:	7819      	ldrb	r1, [r3, #0]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a94a:	2340      	movs	r3, #64	; 0x40
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f001 ffa9 	bl	800c8a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	20000094 	.word	0x20000094

0800a960 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	4613      	mov	r3, r2
 800a96c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a974:	2303      	movs	r3, #3
 800a976:	e01f      	b.n	800a9b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d003      	beq.n	800a99e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	79fa      	ldrb	r2, [r7, #7]
 800a9aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f001 fe23 	bl	800c5f8 <USBD_LL_Init>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a9b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3718      	adds	r7, #24
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e025      	b.n	800aa24 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	32ae      	adds	r2, #174	; 0xae
 800a9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00f      	beq.n	800aa14 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	32ae      	adds	r2, #174	; 0xae
 800a9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa04:	f107 020e 	add.w	r2, r7, #14
 800aa08:	4610      	mov	r0, r2
 800aa0a:	4798      	blx	r3
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800aa1a:	1c5a      	adds	r2, r3, #1
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f001 fe2b 	bl	800c690 <USBD_LL_Start>
 800aa3a:	4603      	mov	r3, r0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa4c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b084      	sub	sp, #16
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	460b      	mov	r3, r1
 800aa64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d009      	beq.n	800aa88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	78fa      	ldrb	r2, [r7, #3]
 800aa7e:	4611      	mov	r1, r2
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	4798      	blx	r3
 800aa84:	4603      	mov	r3, r0
 800aa86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa88:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	78fa      	ldrb	r2, [r7, #3]
 800aaac:	4611      	mov	r1, r2
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	4798      	blx	r3
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d001      	beq.n	800aabc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aab8:	2303      	movs	r3, #3
 800aaba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b084      	sub	sp, #16
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	4618      	mov	r0, r3
 800aada:	f001 f908 	bl	800bcee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2201      	movs	r2, #1
 800aae2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aaec:	461a      	mov	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aafa:	f003 031f 	and.w	r3, r3, #31
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d01a      	beq.n	800ab38 <USBD_LL_SetupStage+0x72>
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d822      	bhi.n	800ab4c <USBD_LL_SetupStage+0x86>
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d002      	beq.n	800ab10 <USBD_LL_SetupStage+0x4a>
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d00a      	beq.n	800ab24 <USBD_LL_SetupStage+0x5e>
 800ab0e:	e01d      	b.n	800ab4c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab16:	4619      	mov	r1, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fb5f 	bl	800b1dc <USBD_StdDevReq>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	73fb      	strb	r3, [r7, #15]
      break;
 800ab22:	e020      	b.n	800ab66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fbc7 	bl	800b2c0 <USBD_StdItfReq>
 800ab32:	4603      	mov	r3, r0
 800ab34:	73fb      	strb	r3, [r7, #15]
      break;
 800ab36:	e016      	b.n	800ab66 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fc29 	bl	800b398 <USBD_StdEPReq>
 800ab46:	4603      	mov	r3, r0
 800ab48:	73fb      	strb	r3, [r7, #15]
      break;
 800ab4a:	e00c      	b.n	800ab66 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	4619      	mov	r1, r3
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f001 fdf8 	bl	800c750 <USBD_LL_StallEP>
 800ab60:	4603      	mov	r3, r0
 800ab62:	73fb      	strb	r3, [r7, #15]
      break;
 800ab64:	bf00      	nop
  }

  return ret;
 800ab66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3710      	adds	r7, #16
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	607a      	str	r2, [r7, #4]
 800ab7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ab82:	7afb      	ldrb	r3, [r7, #11]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d16e      	bne.n	800ac66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ab8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab96:	2b03      	cmp	r3, #3
 800ab98:	f040 8098 	bne.w	800accc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	689a      	ldr	r2, [r3, #8]
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d913      	bls.n	800abd0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	689a      	ldr	r2, [r3, #8]
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	1ad2      	subs	r2, r2, r3
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	68da      	ldr	r2, [r3, #12]
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	4293      	cmp	r3, r2
 800abc0:	bf28      	it	cs
 800abc2:	4613      	movcs	r3, r2
 800abc4:	461a      	mov	r2, r3
 800abc6:	6879      	ldr	r1, [r7, #4]
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f001 f984 	bl	800bed6 <USBD_CtlContinueRx>
 800abce:	e07d      	b.n	800accc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800abd6:	f003 031f 	and.w	r3, r3, #31
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d014      	beq.n	800ac08 <USBD_LL_DataOutStage+0x98>
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d81d      	bhi.n	800ac1e <USBD_LL_DataOutStage+0xae>
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d002      	beq.n	800abec <USBD_LL_DataOutStage+0x7c>
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d003      	beq.n	800abf2 <USBD_LL_DataOutStage+0x82>
 800abea:	e018      	b.n	800ac1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800abec:	2300      	movs	r3, #0
 800abee:	75bb      	strb	r3, [r7, #22]
            break;
 800abf0:	e018      	b.n	800ac24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	4619      	mov	r1, r3
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f000 fa5e 	bl	800b0be <USBD_CoreFindIF>
 800ac02:	4603      	mov	r3, r0
 800ac04:	75bb      	strb	r3, [r7, #22]
            break;
 800ac06:	e00d      	b.n	800ac24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	4619      	mov	r1, r3
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f000 fa60 	bl	800b0d8 <USBD_CoreFindEP>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	75bb      	strb	r3, [r7, #22]
            break;
 800ac1c:	e002      	b.n	800ac24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	75bb      	strb	r3, [r7, #22]
            break;
 800ac22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ac24:	7dbb      	ldrb	r3, [r7, #22]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d119      	bne.n	800ac5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	2b03      	cmp	r3, #3
 800ac34:	d113      	bne.n	800ac5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ac36:	7dba      	ldrb	r2, [r7, #22]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	32ae      	adds	r2, #174	; 0xae
 800ac3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00b      	beq.n	800ac5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ac46:	7dba      	ldrb	r2, [r7, #22]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ac4e:	7dba      	ldrb	r2, [r7, #22]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	32ae      	adds	r2, #174	; 0xae
 800ac54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f001 f94a 	bl	800bef8 <USBD_CtlSendStatus>
 800ac64:	e032      	b.n	800accc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ac66:	7afb      	ldrb	r3, [r7, #11]
 800ac68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	4619      	mov	r1, r3
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f000 fa31 	bl	800b0d8 <USBD_CoreFindEP>
 800ac76:	4603      	mov	r3, r0
 800ac78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac7a:	7dbb      	ldrb	r3, [r7, #22]
 800ac7c:	2bff      	cmp	r3, #255	; 0xff
 800ac7e:	d025      	beq.n	800accc <USBD_LL_DataOutStage+0x15c>
 800ac80:	7dbb      	ldrb	r3, [r7, #22]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d122      	bne.n	800accc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d117      	bne.n	800acc2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ac92:	7dba      	ldrb	r2, [r7, #22]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	32ae      	adds	r2, #174	; 0xae
 800ac98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac9c:	699b      	ldr	r3, [r3, #24]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00f      	beq.n	800acc2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800aca2:	7dba      	ldrb	r2, [r7, #22]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800acaa:	7dba      	ldrb	r2, [r7, #22]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	32ae      	adds	r2, #174	; 0xae
 800acb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb4:	699b      	ldr	r3, [r3, #24]
 800acb6:	7afa      	ldrb	r2, [r7, #11]
 800acb8:	4611      	mov	r1, r2
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	4798      	blx	r3
 800acbe:	4603      	mov	r3, r0
 800acc0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d001      	beq.n	800accc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800acc8:	7dfb      	ldrb	r3, [r7, #23]
 800acca:	e000      	b.n	800acce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b086      	sub	sp, #24
 800acda:	af00      	add	r7, sp, #0
 800acdc:	60f8      	str	r0, [r7, #12]
 800acde:	460b      	mov	r3, r1
 800ace0:	607a      	str	r2, [r7, #4]
 800ace2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ace4:	7afb      	ldrb	r3, [r7, #11]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d16f      	bne.n	800adca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3314      	adds	r3, #20
 800acee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d15a      	bne.n	800adb0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	689a      	ldr	r2, [r3, #8]
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d914      	bls.n	800ad30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	689a      	ldr	r2, [r3, #8]
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	1ad2      	subs	r2, r2, r3
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f001 f8ac 	bl	800be7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad22:	2300      	movs	r3, #0
 800ad24:	2200      	movs	r2, #0
 800ad26:	2100      	movs	r1, #0
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f001 fdbb 	bl	800c8a4 <USBD_LL_PrepareReceive>
 800ad2e:	e03f      	b.n	800adb0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	68da      	ldr	r2, [r3, #12]
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d11c      	bne.n	800ad76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	685a      	ldr	r2, [r3, #4]
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d316      	bcc.n	800ad76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d20f      	bcs.n	800ad76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad56:	2200      	movs	r2, #0
 800ad58:	2100      	movs	r1, #0
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f001 f88d 	bl	800be7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad68:	2300      	movs	r3, #0
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f001 fd98 	bl	800c8a4 <USBD_LL_PrepareReceive>
 800ad74:	e01c      	b.n	800adb0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d10f      	bne.n	800ada2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d009      	beq.n	800ada2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ada2:	2180      	movs	r1, #128	; 0x80
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f001 fcd3 	bl	800c750 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f001 f8b7 	bl	800bf1e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d03a      	beq.n	800ae30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f7ff fe42 	bl	800aa44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800adc8:	e032      	b.n	800ae30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800adca:	7afb      	ldrb	r3, [r7, #11]
 800adcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800add0:	b2db      	uxtb	r3, r3
 800add2:	4619      	mov	r1, r3
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 f97f 	bl	800b0d8 <USBD_CoreFindEP>
 800adda:	4603      	mov	r3, r0
 800addc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adde:	7dfb      	ldrb	r3, [r7, #23]
 800ade0:	2bff      	cmp	r3, #255	; 0xff
 800ade2:	d025      	beq.n	800ae30 <USBD_LL_DataInStage+0x15a>
 800ade4:	7dfb      	ldrb	r3, [r7, #23]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d122      	bne.n	800ae30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d11c      	bne.n	800ae30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800adf6:	7dfa      	ldrb	r2, [r7, #23]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	32ae      	adds	r2, #174	; 0xae
 800adfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae00:	695b      	ldr	r3, [r3, #20]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d014      	beq.n	800ae30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ae06:	7dfa      	ldrb	r2, [r7, #23]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ae0e:	7dfa      	ldrb	r2, [r7, #23]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	32ae      	adds	r2, #174	; 0xae
 800ae14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	7afa      	ldrb	r2, [r7, #11]
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	4798      	blx	r3
 800ae22:	4603      	mov	r3, r0
 800ae24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ae26:	7dbb      	ldrb	r3, [r7, #22]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d001      	beq.n	800ae30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ae2c:	7dbb      	ldrb	r3, [r7, #22]
 800ae2e:	e000      	b.n	800ae32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3718      	adds	r7, #24
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b084      	sub	sp, #16
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d014      	beq.n	800aea0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00e      	beq.n	800aea0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	6852      	ldr	r2, [r2, #4]
 800ae8e:	b2d2      	uxtb	r2, r2
 800ae90:	4611      	mov	r1, r2
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	4798      	blx	r3
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d001      	beq.n	800aea0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aea0:	2340      	movs	r3, #64	; 0x40
 800aea2:	2200      	movs	r2, #0
 800aea4:	2100      	movs	r1, #0
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f001 fc0d 	bl	800c6c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2240      	movs	r2, #64	; 0x40
 800aeb8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aebc:	2340      	movs	r3, #64	; 0x40
 800aebe:	2200      	movs	r2, #0
 800aec0:	2180      	movs	r1, #128	; 0x80
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f001 fbff 	bl	800c6c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2240      	movs	r2, #64	; 0x40
 800aed2:	621a      	str	r2, [r3, #32]

  return ret;
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aede:	b480      	push	{r7}
 800aee0:	b083      	sub	sp, #12
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	460b      	mov	r3, r1
 800aee8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	78fa      	ldrb	r2, [r7, #3]
 800aeee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aefe:	b480      	push	{r7}
 800af00:	b083      	sub	sp, #12
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af0c:	b2da      	uxtb	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2204      	movs	r2, #4
 800af18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af2a:	b480      	push	{r7}
 800af2c:	b083      	sub	sp, #12
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b04      	cmp	r3, #4
 800af3c:	d106      	bne.n	800af4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800af44:	b2da      	uxtb	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	2b03      	cmp	r3, #3
 800af6c:	d110      	bne.n	800af90 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af74:	2b00      	cmp	r3, #0
 800af76:	d00b      	beq.n	800af90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af7e:	69db      	ldr	r3, [r3, #28]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d005      	beq.n	800af90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af8a:	69db      	ldr	r3, [r3, #28]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	460b      	mov	r3, r1
 800afa4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	32ae      	adds	r2, #174	; 0xae
 800afb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d101      	bne.n	800afbc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800afb8:	2303      	movs	r3, #3
 800afba:	e01c      	b.n	800aff6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b03      	cmp	r3, #3
 800afc6:	d115      	bne.n	800aff4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	32ae      	adds	r2, #174	; 0xae
 800afd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00b      	beq.n	800aff4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	32ae      	adds	r2, #174	; 0xae
 800afe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afea:	6a1b      	ldr	r3, [r3, #32]
 800afec:	78fa      	ldrb	r2, [r7, #3]
 800afee:	4611      	mov	r1, r2
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	460b      	mov	r3, r1
 800b008:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	32ae      	adds	r2, #174	; 0xae
 800b014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b01c:	2303      	movs	r3, #3
 800b01e:	e01c      	b.n	800b05a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b03      	cmp	r3, #3
 800b02a:	d115      	bne.n	800b058 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	32ae      	adds	r2, #174	; 0xae
 800b036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00b      	beq.n	800b058 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	32ae      	adds	r2, #174	; 0xae
 800b04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b050:	78fa      	ldrb	r2, [r7, #3]
 800b052:	4611      	mov	r1, r2
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b062:	b480      	push	{r7}
 800b064:	b083      	sub	sp, #12
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00e      	beq.n	800b0b4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	6852      	ldr	r2, [r2, #4]
 800b0a2:	b2d2      	uxtb	r2, r2
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	4798      	blx	r3
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d001      	beq.n	800b0b4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b0be:	b480      	push	{r7}
 800b0c0:	b083      	sub	sp, #12
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b0ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b0e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b086      	sub	sp, #24
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b106:	2300      	movs	r3, #0
 800b108:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	885b      	ldrh	r3, [r3, #2]
 800b10e:	b29a      	uxth	r2, r3
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	b29b      	uxth	r3, r3
 800b116:	429a      	cmp	r2, r3
 800b118:	d920      	bls.n	800b15c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	b29b      	uxth	r3, r3
 800b120:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b122:	e013      	b.n	800b14c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b124:	f107 030a 	add.w	r3, r7, #10
 800b128:	4619      	mov	r1, r3
 800b12a:	6978      	ldr	r0, [r7, #20]
 800b12c:	f000 f81b 	bl	800b166 <USBD_GetNextDesc>
 800b130:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	785b      	ldrb	r3, [r3, #1]
 800b136:	2b05      	cmp	r3, #5
 800b138:	d108      	bne.n	800b14c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	789b      	ldrb	r3, [r3, #2]
 800b142:	78fa      	ldrb	r2, [r7, #3]
 800b144:	429a      	cmp	r2, r3
 800b146:	d008      	beq.n	800b15a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b148:	2300      	movs	r3, #0
 800b14a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	885b      	ldrh	r3, [r3, #2]
 800b150:	b29a      	uxth	r2, r3
 800b152:	897b      	ldrh	r3, [r7, #10]
 800b154:	429a      	cmp	r2, r3
 800b156:	d8e5      	bhi.n	800b124 <USBD_GetEpDesc+0x32>
 800b158:	e000      	b.n	800b15c <USBD_GetEpDesc+0x6a>
          break;
 800b15a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b15c:	693b      	ldr	r3, [r7, #16]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b166:	b480      	push	{r7}
 800b168:	b085      	sub	sp, #20
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	881a      	ldrh	r2, [r3, #0]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	4413      	add	r3, r2
 800b180:	b29a      	uxth	r2, r3
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	461a      	mov	r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4413      	add	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b192:	68fb      	ldr	r3, [r7, #12]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b087      	sub	sp, #28
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b1be:	8a3b      	ldrh	r3, [r7, #16]
 800b1c0:	021b      	lsls	r3, r3, #8
 800b1c2:	b21a      	sxth	r2, r3
 800b1c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	b21b      	sxth	r3, r3
 800b1cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b1ce:	89fb      	ldrh	r3, [r7, #14]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	371c      	adds	r7, #28
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1f2:	2b40      	cmp	r3, #64	; 0x40
 800b1f4:	d005      	beq.n	800b202 <USBD_StdDevReq+0x26>
 800b1f6:	2b40      	cmp	r3, #64	; 0x40
 800b1f8:	d857      	bhi.n	800b2aa <USBD_StdDevReq+0xce>
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00f      	beq.n	800b21e <USBD_StdDevReq+0x42>
 800b1fe:	2b20      	cmp	r3, #32
 800b200:	d153      	bne.n	800b2aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	32ae      	adds	r2, #174	; 0xae
 800b20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	4798      	blx	r3
 800b218:	4603      	mov	r3, r0
 800b21a:	73fb      	strb	r3, [r7, #15]
      break;
 800b21c:	e04a      	b.n	800b2b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	785b      	ldrb	r3, [r3, #1]
 800b222:	2b09      	cmp	r3, #9
 800b224:	d83b      	bhi.n	800b29e <USBD_StdDevReq+0xc2>
 800b226:	a201      	add	r2, pc, #4	; (adr r2, 800b22c <USBD_StdDevReq+0x50>)
 800b228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22c:	0800b281 	.word	0x0800b281
 800b230:	0800b295 	.word	0x0800b295
 800b234:	0800b29f 	.word	0x0800b29f
 800b238:	0800b28b 	.word	0x0800b28b
 800b23c:	0800b29f 	.word	0x0800b29f
 800b240:	0800b25f 	.word	0x0800b25f
 800b244:	0800b255 	.word	0x0800b255
 800b248:	0800b29f 	.word	0x0800b29f
 800b24c:	0800b277 	.word	0x0800b277
 800b250:	0800b269 	.word	0x0800b269
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b254:	6839      	ldr	r1, [r7, #0]
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fa3c 	bl	800b6d4 <USBD_GetDescriptor>
          break;
 800b25c:	e024      	b.n	800b2a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fba1 	bl	800b9a8 <USBD_SetAddress>
          break;
 800b266:	e01f      	b.n	800b2a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b268:	6839      	ldr	r1, [r7, #0]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 fbe0 	bl	800ba30 <USBD_SetConfig>
 800b270:	4603      	mov	r3, r0
 800b272:	73fb      	strb	r3, [r7, #15]
          break;
 800b274:	e018      	b.n	800b2a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fc83 	bl	800bb84 <USBD_GetConfig>
          break;
 800b27e:	e013      	b.n	800b2a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fcb4 	bl	800bbf0 <USBD_GetStatus>
          break;
 800b288:	e00e      	b.n	800b2a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b28a:	6839      	ldr	r1, [r7, #0]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fce3 	bl	800bc58 <USBD_SetFeature>
          break;
 800b292:	e009      	b.n	800b2a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fd07 	bl	800bcaa <USBD_ClrFeature>
          break;
 800b29c:	e004      	b.n	800b2a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 fd5e 	bl	800bd62 <USBD_CtlError>
          break;
 800b2a6:	bf00      	nop
      }
      break;
 800b2a8:	e004      	b.n	800b2b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b2aa:	6839      	ldr	r1, [r7, #0]
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 fd58 	bl	800bd62 <USBD_CtlError>
      break;
 800b2b2:	bf00      	nop
  }

  return ret;
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop

0800b2c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2d6:	2b40      	cmp	r3, #64	; 0x40
 800b2d8:	d005      	beq.n	800b2e6 <USBD_StdItfReq+0x26>
 800b2da:	2b40      	cmp	r3, #64	; 0x40
 800b2dc:	d852      	bhi.n	800b384 <USBD_StdItfReq+0xc4>
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <USBD_StdItfReq+0x26>
 800b2e2:	2b20      	cmp	r3, #32
 800b2e4:	d14e      	bne.n	800b384 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d840      	bhi.n	800b376 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	889b      	ldrh	r3, [r3, #4]
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d836      	bhi.n	800b36c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	889b      	ldrh	r3, [r3, #4]
 800b302:	b2db      	uxtb	r3, r3
 800b304:	4619      	mov	r1, r3
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7ff fed9 	bl	800b0be <USBD_CoreFindIF>
 800b30c:	4603      	mov	r3, r0
 800b30e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b310:	7bbb      	ldrb	r3, [r7, #14]
 800b312:	2bff      	cmp	r3, #255	; 0xff
 800b314:	d01d      	beq.n	800b352 <USBD_StdItfReq+0x92>
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d11a      	bne.n	800b352 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b31c:	7bba      	ldrb	r2, [r7, #14]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	32ae      	adds	r2, #174	; 0xae
 800b322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00f      	beq.n	800b34c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b32c:	7bba      	ldrb	r2, [r7, #14]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b334:	7bba      	ldrb	r2, [r7, #14]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	32ae      	adds	r2, #174	; 0xae
 800b33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	4798      	blx	r3
 800b346:	4603      	mov	r3, r0
 800b348:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b34a:	e004      	b.n	800b356 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b34c:	2303      	movs	r3, #3
 800b34e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b350:	e001      	b.n	800b356 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b352:	2303      	movs	r3, #3
 800b354:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	88db      	ldrh	r3, [r3, #6]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d110      	bne.n	800b380 <USBD_StdItfReq+0xc0>
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10d      	bne.n	800b380 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fdc7 	bl	800bef8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b36a:	e009      	b.n	800b380 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b36c:	6839      	ldr	r1, [r7, #0]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fcf7 	bl	800bd62 <USBD_CtlError>
          break;
 800b374:	e004      	b.n	800b380 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b376:	6839      	ldr	r1, [r7, #0]
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 fcf2 	bl	800bd62 <USBD_CtlError>
          break;
 800b37e:	e000      	b.n	800b382 <USBD_StdItfReq+0xc2>
          break;
 800b380:	bf00      	nop
      }
      break;
 800b382:	e004      	b.n	800b38e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fceb 	bl	800bd62 <USBD_CtlError>
      break;
 800b38c:	bf00      	nop
  }

  return ret;
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b390:	4618      	mov	r0, r3
 800b392:	3710      	adds	r7, #16
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	889b      	ldrh	r3, [r3, #4]
 800b3aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3b4:	2b40      	cmp	r3, #64	; 0x40
 800b3b6:	d007      	beq.n	800b3c8 <USBD_StdEPReq+0x30>
 800b3b8:	2b40      	cmp	r3, #64	; 0x40
 800b3ba:	f200 817f 	bhi.w	800b6bc <USBD_StdEPReq+0x324>
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d02a      	beq.n	800b418 <USBD_StdEPReq+0x80>
 800b3c2:	2b20      	cmp	r3, #32
 800b3c4:	f040 817a 	bne.w	800b6bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b3c8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f7ff fe83 	bl	800b0d8 <USBD_CoreFindEP>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3d6:	7b7b      	ldrb	r3, [r7, #13]
 800b3d8:	2bff      	cmp	r3, #255	; 0xff
 800b3da:	f000 8174 	beq.w	800b6c6 <USBD_StdEPReq+0x32e>
 800b3de:	7b7b      	ldrb	r3, [r7, #13]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f040 8170 	bne.w	800b6c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b3e6:	7b7a      	ldrb	r2, [r7, #13]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b3ee:	7b7a      	ldrb	r2, [r7, #13]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	32ae      	adds	r2, #174	; 0xae
 800b3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f000 8163 	beq.w	800b6c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b400:	7b7a      	ldrb	r2, [r7, #13]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	32ae      	adds	r2, #174	; 0xae
 800b406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	4798      	blx	r3
 800b412:	4603      	mov	r3, r0
 800b414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b416:	e156      	b.n	800b6c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	785b      	ldrb	r3, [r3, #1]
 800b41c:	2b03      	cmp	r3, #3
 800b41e:	d008      	beq.n	800b432 <USBD_StdEPReq+0x9a>
 800b420:	2b03      	cmp	r3, #3
 800b422:	f300 8145 	bgt.w	800b6b0 <USBD_StdEPReq+0x318>
 800b426:	2b00      	cmp	r3, #0
 800b428:	f000 809b 	beq.w	800b562 <USBD_StdEPReq+0x1ca>
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d03c      	beq.n	800b4aa <USBD_StdEPReq+0x112>
 800b430:	e13e      	b.n	800b6b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d002      	beq.n	800b444 <USBD_StdEPReq+0xac>
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d016      	beq.n	800b470 <USBD_StdEPReq+0xd8>
 800b442:	e02c      	b.n	800b49e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b444:	7bbb      	ldrb	r3, [r7, #14]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00d      	beq.n	800b466 <USBD_StdEPReq+0xce>
 800b44a:	7bbb      	ldrb	r3, [r7, #14]
 800b44c:	2b80      	cmp	r3, #128	; 0x80
 800b44e:	d00a      	beq.n	800b466 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b450:	7bbb      	ldrb	r3, [r7, #14]
 800b452:	4619      	mov	r1, r3
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f001 f97b 	bl	800c750 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b45a:	2180      	movs	r1, #128	; 0x80
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f001 f977 	bl	800c750 <USBD_LL_StallEP>
 800b462:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b464:	e020      	b.n	800b4a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b466:	6839      	ldr	r1, [r7, #0]
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 fc7a 	bl	800bd62 <USBD_CtlError>
              break;
 800b46e:	e01b      	b.n	800b4a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	885b      	ldrh	r3, [r3, #2]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10e      	bne.n	800b496 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b478:	7bbb      	ldrb	r3, [r7, #14]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00b      	beq.n	800b496 <USBD_StdEPReq+0xfe>
 800b47e:	7bbb      	ldrb	r3, [r7, #14]
 800b480:	2b80      	cmp	r3, #128	; 0x80
 800b482:	d008      	beq.n	800b496 <USBD_StdEPReq+0xfe>
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	88db      	ldrh	r3, [r3, #6]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d104      	bne.n	800b496 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b48c:	7bbb      	ldrb	r3, [r7, #14]
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f001 f95d 	bl	800c750 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fd2e 	bl	800bef8 <USBD_CtlSendStatus>

              break;
 800b49c:	e004      	b.n	800b4a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fc5e 	bl	800bd62 <USBD_CtlError>
              break;
 800b4a6:	bf00      	nop
          }
          break;
 800b4a8:	e107      	b.n	800b6ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b02      	cmp	r3, #2
 800b4b4:	d002      	beq.n	800b4bc <USBD_StdEPReq+0x124>
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d016      	beq.n	800b4e8 <USBD_StdEPReq+0x150>
 800b4ba:	e04b      	b.n	800b554 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4bc:	7bbb      	ldrb	r3, [r7, #14]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00d      	beq.n	800b4de <USBD_StdEPReq+0x146>
 800b4c2:	7bbb      	ldrb	r3, [r7, #14]
 800b4c4:	2b80      	cmp	r3, #128	; 0x80
 800b4c6:	d00a      	beq.n	800b4de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f001 f93f 	bl	800c750 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4d2:	2180      	movs	r1, #128	; 0x80
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f001 f93b 	bl	800c750 <USBD_LL_StallEP>
 800b4da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4dc:	e040      	b.n	800b560 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fc3e 	bl	800bd62 <USBD_CtlError>
              break;
 800b4e6:	e03b      	b.n	800b560 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	885b      	ldrh	r3, [r3, #2]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d136      	bne.n	800b55e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d004      	beq.n	800b504 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b4fa:	7bbb      	ldrb	r3, [r7, #14]
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f001 f945 	bl	800c78e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fcf7 	bl	800bef8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b50a:	7bbb      	ldrb	r3, [r7, #14]
 800b50c:	4619      	mov	r1, r3
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7ff fde2 	bl	800b0d8 <USBD_CoreFindEP>
 800b514:	4603      	mov	r3, r0
 800b516:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b518:	7b7b      	ldrb	r3, [r7, #13]
 800b51a:	2bff      	cmp	r3, #255	; 0xff
 800b51c:	d01f      	beq.n	800b55e <USBD_StdEPReq+0x1c6>
 800b51e:	7b7b      	ldrb	r3, [r7, #13]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d11c      	bne.n	800b55e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b524:	7b7a      	ldrb	r2, [r7, #13]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b52c:	7b7a      	ldrb	r2, [r7, #13]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	32ae      	adds	r2, #174	; 0xae
 800b532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d010      	beq.n	800b55e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b53c:	7b7a      	ldrb	r2, [r7, #13]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	32ae      	adds	r2, #174	; 0xae
 800b542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	4798      	blx	r3
 800b54e:	4603      	mov	r3, r0
 800b550:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b552:	e004      	b.n	800b55e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b554:	6839      	ldr	r1, [r7, #0]
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 fc03 	bl	800bd62 <USBD_CtlError>
              break;
 800b55c:	e000      	b.n	800b560 <USBD_StdEPReq+0x1c8>
              break;
 800b55e:	bf00      	nop
          }
          break;
 800b560:	e0ab      	b.n	800b6ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d002      	beq.n	800b574 <USBD_StdEPReq+0x1dc>
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d032      	beq.n	800b5d8 <USBD_StdEPReq+0x240>
 800b572:	e097      	b.n	800b6a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b574:	7bbb      	ldrb	r3, [r7, #14]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d007      	beq.n	800b58a <USBD_StdEPReq+0x1f2>
 800b57a:	7bbb      	ldrb	r3, [r7, #14]
 800b57c:	2b80      	cmp	r3, #128	; 0x80
 800b57e:	d004      	beq.n	800b58a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fbed 	bl	800bd62 <USBD_CtlError>
                break;
 800b588:	e091      	b.n	800b6ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b58a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	da0b      	bge.n	800b5aa <USBD_StdEPReq+0x212>
 800b592:	7bbb      	ldrb	r3, [r7, #14]
 800b594:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b598:	4613      	mov	r3, r2
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	3310      	adds	r3, #16
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	e00b      	b.n	800b5c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5aa:	7bbb      	ldrb	r3, [r7, #14]
 800b5ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	4413      	add	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	4413      	add	r3, r2
 800b5c0:	3304      	adds	r3, #4
 800b5c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	2202      	movs	r2, #2
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fc37 	bl	800be44 <USBD_CtlSendData>
              break;
 800b5d6:	e06a      	b.n	800b6ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b5d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	da11      	bge.n	800b604 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5e0:	7bbb      	ldrb	r3, [r7, #14]
 800b5e2:	f003 020f 	and.w	r2, r3, #15
 800b5e6:	6879      	ldr	r1, [r7, #4]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4413      	add	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	440b      	add	r3, r1
 800b5f2:	3324      	adds	r3, #36	; 0x24
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d117      	bne.n	800b62a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b5fa:	6839      	ldr	r1, [r7, #0]
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 fbb0 	bl	800bd62 <USBD_CtlError>
                  break;
 800b602:	e054      	b.n	800b6ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b604:	7bbb      	ldrb	r3, [r7, #14]
 800b606:	f003 020f 	and.w	r2, r3, #15
 800b60a:	6879      	ldr	r1, [r7, #4]
 800b60c:	4613      	mov	r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4413      	add	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	440b      	add	r3, r1
 800b616:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b61a:	881b      	ldrh	r3, [r3, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d104      	bne.n	800b62a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fb9d 	bl	800bd62 <USBD_CtlError>
                  break;
 800b628:	e041      	b.n	800b6ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b62a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	da0b      	bge.n	800b64a <USBD_StdEPReq+0x2b2>
 800b632:	7bbb      	ldrb	r3, [r7, #14]
 800b634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b638:	4613      	mov	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	4413      	add	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	3310      	adds	r3, #16
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	4413      	add	r3, r2
 800b646:	3304      	adds	r3, #4
 800b648:	e00b      	b.n	800b662 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b64a:	7bbb      	ldrb	r3, [r7, #14]
 800b64c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b650:	4613      	mov	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4413      	add	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	4413      	add	r3, r2
 800b660:	3304      	adds	r3, #4
 800b662:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b664:	7bbb      	ldrb	r3, [r7, #14]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d002      	beq.n	800b670 <USBD_StdEPReq+0x2d8>
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	2b80      	cmp	r3, #128	; 0x80
 800b66e:	d103      	bne.n	800b678 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	2200      	movs	r2, #0
 800b674:	601a      	str	r2, [r3, #0]
 800b676:	e00e      	b.n	800b696 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b678:	7bbb      	ldrb	r3, [r7, #14]
 800b67a:	4619      	mov	r1, r3
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f001 f8a5 	bl	800c7cc <USBD_LL_IsStallEP>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d003      	beq.n	800b690 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	2201      	movs	r2, #1
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	e002      	b.n	800b696 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	2200      	movs	r2, #0
 800b694:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	2202      	movs	r2, #2
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fbd1 	bl	800be44 <USBD_CtlSendData>
              break;
 800b6a2:	e004      	b.n	800b6ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b6a4:	6839      	ldr	r1, [r7, #0]
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fb5b 	bl	800bd62 <USBD_CtlError>
              break;
 800b6ac:	bf00      	nop
          }
          break;
 800b6ae:	e004      	b.n	800b6ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fb55 	bl	800bd62 <USBD_CtlError>
          break;
 800b6b8:	bf00      	nop
      }
      break;
 800b6ba:	e005      	b.n	800b6c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fb4f 	bl	800bd62 <USBD_CtlError>
      break;
 800b6c4:	e000      	b.n	800b6c8 <USBD_StdEPReq+0x330>
      break;
 800b6c6:	bf00      	nop
  }

  return ret;
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
	...

0800b6d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	885b      	ldrh	r3, [r3, #2]
 800b6ee:	0a1b      	lsrs	r3, r3, #8
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	2b06      	cmp	r3, #6
 800b6f6:	f200 8128 	bhi.w	800b94a <USBD_GetDescriptor+0x276>
 800b6fa:	a201      	add	r2, pc, #4	; (adr r2, 800b700 <USBD_GetDescriptor+0x2c>)
 800b6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b700:	0800b71d 	.word	0x0800b71d
 800b704:	0800b735 	.word	0x0800b735
 800b708:	0800b775 	.word	0x0800b775
 800b70c:	0800b94b 	.word	0x0800b94b
 800b710:	0800b94b 	.word	0x0800b94b
 800b714:	0800b8eb 	.word	0x0800b8eb
 800b718:	0800b917 	.word	0x0800b917
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	7c12      	ldrb	r2, [r2, #16]
 800b728:	f107 0108 	add.w	r1, r7, #8
 800b72c:	4610      	mov	r0, r2
 800b72e:	4798      	blx	r3
 800b730:	60f8      	str	r0, [r7, #12]
      break;
 800b732:	e112      	b.n	800b95a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	7c1b      	ldrb	r3, [r3, #16]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10d      	bne.n	800b758 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b744:	f107 0208 	add.w	r2, r7, #8
 800b748:	4610      	mov	r0, r2
 800b74a:	4798      	blx	r3
 800b74c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	3301      	adds	r3, #1
 800b752:	2202      	movs	r2, #2
 800b754:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b756:	e100      	b.n	800b95a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b760:	f107 0208 	add.w	r2, r7, #8
 800b764:	4610      	mov	r0, r2
 800b766:	4798      	blx	r3
 800b768:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3301      	adds	r3, #1
 800b76e:	2202      	movs	r2, #2
 800b770:	701a      	strb	r2, [r3, #0]
      break;
 800b772:	e0f2      	b.n	800b95a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	885b      	ldrh	r3, [r3, #2]
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b05      	cmp	r3, #5
 800b77c:	f200 80ac 	bhi.w	800b8d8 <USBD_GetDescriptor+0x204>
 800b780:	a201      	add	r2, pc, #4	; (adr r2, 800b788 <USBD_GetDescriptor+0xb4>)
 800b782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b786:	bf00      	nop
 800b788:	0800b7a1 	.word	0x0800b7a1
 800b78c:	0800b7d5 	.word	0x0800b7d5
 800b790:	0800b809 	.word	0x0800b809
 800b794:	0800b83d 	.word	0x0800b83d
 800b798:	0800b871 	.word	0x0800b871
 800b79c:	0800b8a5 	.word	0x0800b8a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00b      	beq.n	800b7c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	7c12      	ldrb	r2, [r2, #16]
 800b7b8:	f107 0108 	add.w	r1, r7, #8
 800b7bc:	4610      	mov	r0, r2
 800b7be:	4798      	blx	r3
 800b7c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7c2:	e091      	b.n	800b8e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7c4:	6839      	ldr	r1, [r7, #0]
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 facb 	bl	800bd62 <USBD_CtlError>
            err++;
 800b7cc:	7afb      	ldrb	r3, [r7, #11]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b7d2:	e089      	b.n	800b8e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00b      	beq.n	800b7f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	7c12      	ldrb	r2, [r2, #16]
 800b7ec:	f107 0108 	add.w	r1, r7, #8
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	4798      	blx	r3
 800b7f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7f6:	e077      	b.n	800b8e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 fab1 	bl	800bd62 <USBD_CtlError>
            err++;
 800b800:	7afb      	ldrb	r3, [r7, #11]
 800b802:	3301      	adds	r3, #1
 800b804:	72fb      	strb	r3, [r7, #11]
          break;
 800b806:	e06f      	b.n	800b8e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00b      	beq.n	800b82c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	7c12      	ldrb	r2, [r2, #16]
 800b820:	f107 0108 	add.w	r1, r7, #8
 800b824:	4610      	mov	r0, r2
 800b826:	4798      	blx	r3
 800b828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b82a:	e05d      	b.n	800b8e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fa97 	bl	800bd62 <USBD_CtlError>
            err++;
 800b834:	7afb      	ldrb	r3, [r7, #11]
 800b836:	3301      	adds	r3, #1
 800b838:	72fb      	strb	r3, [r7, #11]
          break;
 800b83a:	e055      	b.n	800b8e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00b      	beq.n	800b860 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	7c12      	ldrb	r2, [r2, #16]
 800b854:	f107 0108 	add.w	r1, r7, #8
 800b858:	4610      	mov	r0, r2
 800b85a:	4798      	blx	r3
 800b85c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b85e:	e043      	b.n	800b8e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b860:	6839      	ldr	r1, [r7, #0]
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 fa7d 	bl	800bd62 <USBD_CtlError>
            err++;
 800b868:	7afb      	ldrb	r3, [r7, #11]
 800b86a:	3301      	adds	r3, #1
 800b86c:	72fb      	strb	r3, [r7, #11]
          break;
 800b86e:	e03b      	b.n	800b8e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b876:	695b      	ldr	r3, [r3, #20]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00b      	beq.n	800b894 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b882:	695b      	ldr	r3, [r3, #20]
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	7c12      	ldrb	r2, [r2, #16]
 800b888:	f107 0108 	add.w	r1, r7, #8
 800b88c:	4610      	mov	r0, r2
 800b88e:	4798      	blx	r3
 800b890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b892:	e029      	b.n	800b8e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fa63 	bl	800bd62 <USBD_CtlError>
            err++;
 800b89c:	7afb      	ldrb	r3, [r7, #11]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8a2:	e021      	b.n	800b8e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00b      	beq.n	800b8c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8b6:	699b      	ldr	r3, [r3, #24]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	7c12      	ldrb	r2, [r2, #16]
 800b8bc:	f107 0108 	add.w	r1, r7, #8
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	4798      	blx	r3
 800b8c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8c6:	e00f      	b.n	800b8e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8c8:	6839      	ldr	r1, [r7, #0]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fa49 	bl	800bd62 <USBD_CtlError>
            err++;
 800b8d0:	7afb      	ldrb	r3, [r7, #11]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8d6:	e007      	b.n	800b8e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fa41 	bl	800bd62 <USBD_CtlError>
          err++;
 800b8e0:	7afb      	ldrb	r3, [r7, #11]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b8e6:	bf00      	nop
      }
      break;
 800b8e8:	e037      	b.n	800b95a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	7c1b      	ldrb	r3, [r3, #16]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d109      	bne.n	800b906 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8fa:	f107 0208 	add.w	r2, r7, #8
 800b8fe:	4610      	mov	r0, r2
 800b900:	4798      	blx	r3
 800b902:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b904:	e029      	b.n	800b95a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fa2a 	bl	800bd62 <USBD_CtlError>
        err++;
 800b90e:	7afb      	ldrb	r3, [r7, #11]
 800b910:	3301      	adds	r3, #1
 800b912:	72fb      	strb	r3, [r7, #11]
      break;
 800b914:	e021      	b.n	800b95a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	7c1b      	ldrb	r3, [r3, #16]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d10d      	bne.n	800b93a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b926:	f107 0208 	add.w	r2, r7, #8
 800b92a:	4610      	mov	r0, r2
 800b92c:	4798      	blx	r3
 800b92e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	3301      	adds	r3, #1
 800b934:	2207      	movs	r2, #7
 800b936:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b938:	e00f      	b.n	800b95a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fa10 	bl	800bd62 <USBD_CtlError>
        err++;
 800b942:	7afb      	ldrb	r3, [r7, #11]
 800b944:	3301      	adds	r3, #1
 800b946:	72fb      	strb	r3, [r7, #11]
      break;
 800b948:	e007      	b.n	800b95a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b94a:	6839      	ldr	r1, [r7, #0]
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fa08 	bl	800bd62 <USBD_CtlError>
      err++;
 800b952:	7afb      	ldrb	r3, [r7, #11]
 800b954:	3301      	adds	r3, #1
 800b956:	72fb      	strb	r3, [r7, #11]
      break;
 800b958:	bf00      	nop
  }

  if (err != 0U)
 800b95a:	7afb      	ldrb	r3, [r7, #11]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d11e      	bne.n	800b99e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	88db      	ldrh	r3, [r3, #6]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d016      	beq.n	800b996 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b968:	893b      	ldrh	r3, [r7, #8]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00e      	beq.n	800b98c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	88da      	ldrh	r2, [r3, #6]
 800b972:	893b      	ldrh	r3, [r7, #8]
 800b974:	4293      	cmp	r3, r2
 800b976:	bf28      	it	cs
 800b978:	4613      	movcs	r3, r2
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b97e:	893b      	ldrh	r3, [r7, #8]
 800b980:	461a      	mov	r2, r3
 800b982:	68f9      	ldr	r1, [r7, #12]
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 fa5d 	bl	800be44 <USBD_CtlSendData>
 800b98a:	e009      	b.n	800b9a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b98c:	6839      	ldr	r1, [r7, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 f9e7 	bl	800bd62 <USBD_CtlError>
 800b994:	e004      	b.n	800b9a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 faae 	bl	800bef8 <USBD_CtlSendStatus>
 800b99c:	e000      	b.n	800b9a0 <USBD_GetDescriptor+0x2cc>
    return;
 800b99e:	bf00      	nop
  }
}
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop

0800b9a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	889b      	ldrh	r3, [r3, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d131      	bne.n	800ba1e <USBD_SetAddress+0x76>
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	88db      	ldrh	r3, [r3, #6]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d12d      	bne.n	800ba1e <USBD_SetAddress+0x76>
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	885b      	ldrh	r3, [r3, #2]
 800b9c6:	2b7f      	cmp	r3, #127	; 0x7f
 800b9c8:	d829      	bhi.n	800ba1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	885b      	ldrh	r3, [r3, #2]
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	d104      	bne.n	800b9ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b9e2:	6839      	ldr	r1, [r7, #0]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 f9bc 	bl	800bd62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ea:	e01d      	b.n	800ba28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	7bfa      	ldrb	r2, [r7, #15]
 800b9f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 ff13 	bl	800c824 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fa7a 	bl	800bef8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba04:	7bfb      	ldrb	r3, [r7, #15]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d004      	beq.n	800ba14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba12:	e009      	b.n	800ba28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba1c:	e004      	b.n	800ba28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f99e 	bl	800bd62 <USBD_CtlError>
  }
}
 800ba26:	bf00      	nop
 800ba28:	bf00      	nop
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	885b      	ldrh	r3, [r3, #2]
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	4b4e      	ldr	r3, [pc, #312]	; (800bb80 <USBD_SetConfig+0x150>)
 800ba46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba48:	4b4d      	ldr	r3, [pc, #308]	; (800bb80 <USBD_SetConfig+0x150>)
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d905      	bls.n	800ba5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba50:	6839      	ldr	r1, [r7, #0]
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f985 	bl	800bd62 <USBD_CtlError>
    return USBD_FAIL;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	e08c      	b.n	800bb76 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d002      	beq.n	800ba6e <USBD_SetConfig+0x3e>
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d029      	beq.n	800bac0 <USBD_SetConfig+0x90>
 800ba6c:	e075      	b.n	800bb5a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ba6e:	4b44      	ldr	r3, [pc, #272]	; (800bb80 <USBD_SetConfig+0x150>)
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d020      	beq.n	800bab8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ba76:	4b42      	ldr	r3, [pc, #264]	; (800bb80 <USBD_SetConfig+0x150>)
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba80:	4b3f      	ldr	r3, [pc, #252]	; (800bb80 <USBD_SetConfig+0x150>)
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	4619      	mov	r1, r3
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f7fe ffe7 	bl	800aa5a <USBD_SetClassConfig>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d008      	beq.n	800baa8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 f962 	bl	800bd62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2202      	movs	r2, #2
 800baa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800baa6:	e065      	b.n	800bb74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fa25 	bl	800bef8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2203      	movs	r2, #3
 800bab2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bab6:	e05d      	b.n	800bb74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 fa1d 	bl	800bef8 <USBD_CtlSendStatus>
      break;
 800babe:	e059      	b.n	800bb74 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bac0:	4b2f      	ldr	r3, [pc, #188]	; (800bb80 <USBD_SetConfig+0x150>)
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d112      	bne.n	800baee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2202      	movs	r2, #2
 800bacc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bad0:	4b2b      	ldr	r3, [pc, #172]	; (800bb80 <USBD_SetConfig+0x150>)
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	461a      	mov	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bada:	4b29      	ldr	r3, [pc, #164]	; (800bb80 <USBD_SetConfig+0x150>)
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7fe ffd6 	bl	800aa92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fa06 	bl	800bef8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800baec:	e042      	b.n	800bb74 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800baee:	4b24      	ldr	r3, [pc, #144]	; (800bb80 <USBD_SetConfig+0x150>)
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	461a      	mov	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d02a      	beq.n	800bb52 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	4619      	mov	r1, r3
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f7fe ffc4 	bl	800aa92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb0a:	4b1d      	ldr	r3, [pc, #116]	; (800bb80 <USBD_SetConfig+0x150>)
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	461a      	mov	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb14:	4b1a      	ldr	r3, [pc, #104]	; (800bb80 <USBD_SetConfig+0x150>)
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	4619      	mov	r1, r3
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7fe ff9d 	bl	800aa5a <USBD_SetClassConfig>
 800bb20:	4603      	mov	r3, r0
 800bb22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00f      	beq.n	800bb4a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f918 	bl	800bd62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	4619      	mov	r1, r3
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7fe ffa9 	bl	800aa92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2202      	movs	r2, #2
 800bb44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb48:	e014      	b.n	800bb74 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f9d4 	bl	800bef8 <USBD_CtlSendStatus>
      break;
 800bb50:	e010      	b.n	800bb74 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f9d0 	bl	800bef8 <USBD_CtlSendStatus>
      break;
 800bb58:	e00c      	b.n	800bb74 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 f900 	bl	800bd62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb62:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <USBD_SetConfig+0x150>)
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7fe ff92 	bl	800aa92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	73fb      	strb	r3, [r7, #15]
      break;
 800bb72:	bf00      	nop
  }

  return ret;
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	200005d4 	.word	0x200005d4

0800bb84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	88db      	ldrh	r3, [r3, #6]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d004      	beq.n	800bba0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb96:	6839      	ldr	r1, [r7, #0]
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 f8e2 	bl	800bd62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb9e:	e023      	b.n	800bbe8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	dc02      	bgt.n	800bbb2 <USBD_GetConfig+0x2e>
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	dc03      	bgt.n	800bbb8 <USBD_GetConfig+0x34>
 800bbb0:	e015      	b.n	800bbde <USBD_GetConfig+0x5a>
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	d00b      	beq.n	800bbce <USBD_GetConfig+0x4a>
 800bbb6:	e012      	b.n	800bbde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	3308      	adds	r3, #8
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f93c 	bl	800be44 <USBD_CtlSendData>
        break;
 800bbcc:	e00c      	b.n	800bbe8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	3304      	adds	r3, #4
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f934 	bl	800be44 <USBD_CtlSendData>
        break;
 800bbdc:	e004      	b.n	800bbe8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bbde:	6839      	ldr	r1, [r7, #0]
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f8be 	bl	800bd62 <USBD_CtlError>
        break;
 800bbe6:	bf00      	nop
}
 800bbe8:	bf00      	nop
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	3b01      	subs	r3, #1
 800bc04:	2b02      	cmp	r3, #2
 800bc06:	d81e      	bhi.n	800bc46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	88db      	ldrh	r3, [r3, #6]
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d004      	beq.n	800bc1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bc10:	6839      	ldr	r1, [r7, #0]
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f8a5 	bl	800bd62 <USBD_CtlError>
        break;
 800bc18:	e01a      	b.n	800bc50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d005      	beq.n	800bc36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	f043 0202 	orr.w	r2, r3, #2
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	330c      	adds	r3, #12
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f900 	bl	800be44 <USBD_CtlSendData>
      break;
 800bc44:	e004      	b.n	800bc50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc46:	6839      	ldr	r1, [r7, #0]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f88a 	bl	800bd62 <USBD_CtlError>
      break;
 800bc4e:	bf00      	nop
  }
}
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	885b      	ldrh	r3, [r3, #2]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d107      	bne.n	800bc7a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f940 	bl	800bef8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bc78:	e013      	b.n	800bca2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	885b      	ldrh	r3, [r3, #2]
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d10b      	bne.n	800bc9a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	889b      	ldrh	r3, [r3, #4]
 800bc86:	0a1b      	lsrs	r3, r3, #8
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 f930 	bl	800bef8 <USBD_CtlSendStatus>
}
 800bc98:	e003      	b.n	800bca2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bc9a:	6839      	ldr	r1, [r7, #0]
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 f860 	bl	800bd62 <USBD_CtlError>
}
 800bca2:	bf00      	nop
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b082      	sub	sp, #8
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	2b02      	cmp	r3, #2
 800bcc0:	d80b      	bhi.n	800bcda <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	885b      	ldrh	r3, [r3, #2]
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d10c      	bne.n	800bce4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 f910 	bl	800bef8 <USBD_CtlSendStatus>
      }
      break;
 800bcd8:	e004      	b.n	800bce4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bcda:	6839      	ldr	r1, [r7, #0]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 f840 	bl	800bd62 <USBD_CtlError>
      break;
 800bce2:	e000      	b.n	800bce6 <USBD_ClrFeature+0x3c>
      break;
 800bce4:	bf00      	nop
  }
}
 800bce6:	bf00      	nop
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	781a      	ldrb	r2, [r3, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	3301      	adds	r3, #1
 800bd08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	781a      	ldrb	r2, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3301      	adds	r3, #1
 800bd16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f7ff fa41 	bl	800b1a0 <SWAPBYTE>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	461a      	mov	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f7ff fa34 	bl	800b1a0 <SWAPBYTE>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	3301      	adds	r3, #1
 800bd44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f7ff fa27 	bl	800b1a0 <SWAPBYTE>
 800bd52:	4603      	mov	r3, r0
 800bd54:	461a      	mov	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	80da      	strh	r2, [r3, #6]
}
 800bd5a:	bf00      	nop
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b082      	sub	sp, #8
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
 800bd6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd6c:	2180      	movs	r1, #128	; 0x80
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fcee 	bl	800c750 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bd74:	2100      	movs	r1, #0
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 fcea 	bl	800c750 <USBD_LL_StallEP>
}
 800bd7c:	bf00      	nop
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b086      	sub	sp, #24
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd90:	2300      	movs	r3, #0
 800bd92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d036      	beq.n	800be08 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bd9e:	6938      	ldr	r0, [r7, #16]
 800bda0:	f000 f836 	bl	800be10 <USBD_GetLen>
 800bda4:	4603      	mov	r3, r0
 800bda6:	3301      	adds	r3, #1
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	005b      	lsls	r3, r3, #1
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bdb2:	7dfb      	ldrb	r3, [r7, #23]
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	7812      	ldrb	r2, [r2, #0]
 800bdbc:	701a      	strb	r2, [r3, #0]
  idx++;
 800bdbe:	7dfb      	ldrb	r3, [r7, #23]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bdc4:	7dfb      	ldrb	r3, [r7, #23]
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	4413      	add	r3, r2
 800bdca:	2203      	movs	r2, #3
 800bdcc:	701a      	strb	r2, [r3, #0]
  idx++;
 800bdce:	7dfb      	ldrb	r3, [r7, #23]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bdd4:	e013      	b.n	800bdfe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bdd6:	7dfb      	ldrb	r3, [r7, #23]
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	4413      	add	r3, r2
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	7812      	ldrb	r2, [r2, #0]
 800bde0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	3301      	adds	r3, #1
 800bde6:	613b      	str	r3, [r7, #16]
    idx++;
 800bde8:	7dfb      	ldrb	r3, [r7, #23]
 800bdea:	3301      	adds	r3, #1
 800bdec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bdee:	7dfb      	ldrb	r3, [r7, #23]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	701a      	strb	r2, [r3, #0]
    idx++;
 800bdf8:	7dfb      	ldrb	r3, [r7, #23]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1e7      	bne.n	800bdd6 <USBD_GetString+0x52>
 800be06:	e000      	b.n	800be0a <USBD_GetString+0x86>
    return;
 800be08:	bf00      	nop
  }
}
 800be0a:	3718      	adds	r7, #24
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800be20:	e005      	b.n	800be2e <USBD_GetLen+0x1e>
  {
    len++;
 800be22:	7bfb      	ldrb	r3, [r7, #15]
 800be24:	3301      	adds	r3, #1
 800be26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	3301      	adds	r3, #1
 800be2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1f5      	bne.n	800be22 <USBD_GetLen+0x12>
  }

  return len;
 800be36:	7bfb      	ldrb	r3, [r7, #15]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2202      	movs	r2, #2
 800be54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	68ba      	ldr	r2, [r7, #8]
 800be68:	2100      	movs	r1, #0
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	f000 fcf9 	bl	800c862 <USBD_LL_Transmit>

  return USBD_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b084      	sub	sp, #16
 800be7e:	af00      	add	r7, sp, #0
 800be80:	60f8      	str	r0, [r7, #12]
 800be82:	60b9      	str	r1, [r7, #8]
 800be84:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	2100      	movs	r1, #0
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f000 fce8 	bl	800c862 <USBD_LL_Transmit>

  return USBD_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2203      	movs	r2, #3
 800beac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	68ba      	ldr	r2, [r7, #8]
 800bec4:	2100      	movs	r1, #0
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f000 fcec 	bl	800c8a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b084      	sub	sp, #16
 800beda:	af00      	add	r7, sp, #0
 800bedc:	60f8      	str	r0, [r7, #12]
 800bede:	60b9      	str	r1, [r7, #8]
 800bee0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	2100      	movs	r1, #0
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f000 fcdb 	bl	800c8a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3710      	adds	r7, #16
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2204      	movs	r2, #4
 800bf04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf08:	2300      	movs	r3, #0
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fca7 	bl	800c862 <USBD_LL_Transmit>

  return USBD_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b082      	sub	sp, #8
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2205      	movs	r2, #5
 800bf2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf2e:	2300      	movs	r3, #0
 800bf30:	2200      	movs	r2, #0
 800bf32:	2100      	movs	r1, #0
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fcb5 	bl	800c8a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	4912      	ldr	r1, [pc, #72]	; (800bf94 <MX_USB_DEVICE_Init+0x50>)
 800bf4c:	4812      	ldr	r0, [pc, #72]	; (800bf98 <MX_USB_DEVICE_Init+0x54>)
 800bf4e:	f7fe fd07 	bl	800a960 <USBD_Init>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d001      	beq.n	800bf5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bf58:	f7f6 fea6 	bl	8002ca8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bf5c:	490f      	ldr	r1, [pc, #60]	; (800bf9c <MX_USB_DEVICE_Init+0x58>)
 800bf5e:	480e      	ldr	r0, [pc, #56]	; (800bf98 <MX_USB_DEVICE_Init+0x54>)
 800bf60:	f7fe fd2e 	bl	800a9c0 <USBD_RegisterClass>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d001      	beq.n	800bf6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bf6a:	f7f6 fe9d 	bl	8002ca8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bf6e:	490c      	ldr	r1, [pc, #48]	; (800bfa0 <MX_USB_DEVICE_Init+0x5c>)
 800bf70:	4809      	ldr	r0, [pc, #36]	; (800bf98 <MX_USB_DEVICE_Init+0x54>)
 800bf72:	f7fe fc1f 	bl	800a7b4 <USBD_CDC_RegisterInterface>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d001      	beq.n	800bf80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bf7c:	f7f6 fe94 	bl	8002ca8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bf80:	4805      	ldr	r0, [pc, #20]	; (800bf98 <MX_USB_DEVICE_Init+0x54>)
 800bf82:	f7fe fd53 	bl	800aa2c <USBD_Start>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d001      	beq.n	800bf90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bf8c:	f7f6 fe8c 	bl	8002ca8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bf90:	bf00      	nop
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	200000ac 	.word	0x200000ac
 800bf98:	200005d8 	.word	0x200005d8
 800bf9c:	20000018 	.word	0x20000018
 800bfa0:	20000098 	.word	0x20000098

0800bfa4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	4905      	ldr	r1, [pc, #20]	; (800bfc0 <CDC_Init_FS+0x1c>)
 800bfac:	4805      	ldr	r0, [pc, #20]	; (800bfc4 <CDC_Init_FS+0x20>)
 800bfae:	f7fe fc1b 	bl	800a7e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bfb2:	4905      	ldr	r1, [pc, #20]	; (800bfc8 <CDC_Init_FS+0x24>)
 800bfb4:	4803      	ldr	r0, [pc, #12]	; (800bfc4 <CDC_Init_FS+0x20>)
 800bfb6:	f7fe fc39 	bl	800a82c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bfba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	200010b4 	.word	0x200010b4
 800bfc4:	200005d8 	.word	0x200005d8
 800bfc8:	200008b4 	.word	0x200008b4

0800bfcc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bfd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	6039      	str	r1, [r7, #0]
 800bfe6:	71fb      	strb	r3, [r7, #7]
 800bfe8:	4613      	mov	r3, r2
 800bfea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bfec:	79fb      	ldrb	r3, [r7, #7]
 800bfee:	2b23      	cmp	r3, #35	; 0x23
 800bff0:	d84a      	bhi.n	800c088 <CDC_Control_FS+0xac>
 800bff2:	a201      	add	r2, pc, #4	; (adr r2, 800bff8 <CDC_Control_FS+0x1c>)
 800bff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff8:	0800c089 	.word	0x0800c089
 800bffc:	0800c089 	.word	0x0800c089
 800c000:	0800c089 	.word	0x0800c089
 800c004:	0800c089 	.word	0x0800c089
 800c008:	0800c089 	.word	0x0800c089
 800c00c:	0800c089 	.word	0x0800c089
 800c010:	0800c089 	.word	0x0800c089
 800c014:	0800c089 	.word	0x0800c089
 800c018:	0800c089 	.word	0x0800c089
 800c01c:	0800c089 	.word	0x0800c089
 800c020:	0800c089 	.word	0x0800c089
 800c024:	0800c089 	.word	0x0800c089
 800c028:	0800c089 	.word	0x0800c089
 800c02c:	0800c089 	.word	0x0800c089
 800c030:	0800c089 	.word	0x0800c089
 800c034:	0800c089 	.word	0x0800c089
 800c038:	0800c089 	.word	0x0800c089
 800c03c:	0800c089 	.word	0x0800c089
 800c040:	0800c089 	.word	0x0800c089
 800c044:	0800c089 	.word	0x0800c089
 800c048:	0800c089 	.word	0x0800c089
 800c04c:	0800c089 	.word	0x0800c089
 800c050:	0800c089 	.word	0x0800c089
 800c054:	0800c089 	.word	0x0800c089
 800c058:	0800c089 	.word	0x0800c089
 800c05c:	0800c089 	.word	0x0800c089
 800c060:	0800c089 	.word	0x0800c089
 800c064:	0800c089 	.word	0x0800c089
 800c068:	0800c089 	.word	0x0800c089
 800c06c:	0800c089 	.word	0x0800c089
 800c070:	0800c089 	.word	0x0800c089
 800c074:	0800c089 	.word	0x0800c089
 800c078:	0800c089 	.word	0x0800c089
 800c07c:	0800c089 	.word	0x0800c089
 800c080:	0800c089 	.word	0x0800c089
 800c084:	0800c089 	.word	0x0800c089
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c088:	bf00      	nop
  }

  return (USBD_OK);
 800c08a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c0a2:	6879      	ldr	r1, [r7, #4]
 800c0a4:	4805      	ldr	r0, [pc, #20]	; (800c0bc <CDC_Receive_FS+0x24>)
 800c0a6:	f7fe fbc1 	bl	800a82c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c0aa:	4804      	ldr	r0, [pc, #16]	; (800c0bc <CDC_Receive_FS+0x24>)
 800c0ac:	f7fe fc22 	bl	800a8f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c0b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	200005d8 	.word	0x200005d8

0800c0c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c0d0:	4b0d      	ldr	r3, [pc, #52]	; (800c108 <CDC_Transmit_FS+0x48>)
 800c0d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d001      	beq.n	800c0e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e00b      	b.n	800c0fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c0e6:	887b      	ldrh	r3, [r7, #2]
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	6879      	ldr	r1, [r7, #4]
 800c0ec:	4806      	ldr	r0, [pc, #24]	; (800c108 <CDC_Transmit_FS+0x48>)
 800c0ee:	f7fe fb7b 	bl	800a7e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c0f2:	4805      	ldr	r0, [pc, #20]	; (800c108 <CDC_Transmit_FS+0x48>)
 800c0f4:	f7fe fbb8 	bl	800a868 <USBD_CDC_TransmitPacket>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	200005d8 	.word	0x200005d8

0800c10c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b087      	sub	sp, #28
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	4613      	mov	r3, r2
 800c118:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c11a:	2300      	movs	r3, #0
 800c11c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c11e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c122:	4618      	mov	r0, r3
 800c124:	371c      	adds	r7, #28
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr
	...

0800c130 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	4603      	mov	r3, r0
 800c138:	6039      	str	r1, [r7, #0]
 800c13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	2212      	movs	r2, #18
 800c140:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c142:	4b03      	ldr	r3, [pc, #12]	; (800c150 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c144:	4618      	mov	r0, r3
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	200000c8 	.word	0x200000c8

0800c154 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	4603      	mov	r3, r0
 800c15c:	6039      	str	r1, [r7, #0]
 800c15e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	2204      	movs	r2, #4
 800c164:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c166:	4b03      	ldr	r3, [pc, #12]	; (800c174 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c168:	4618      	mov	r0, r3
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	200000dc 	.word	0x200000dc

0800c178 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	4603      	mov	r3, r0
 800c180:	6039      	str	r1, [r7, #0]
 800c182:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c184:	79fb      	ldrb	r3, [r7, #7]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d105      	bne.n	800c196 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	4907      	ldr	r1, [pc, #28]	; (800c1ac <USBD_FS_ProductStrDescriptor+0x34>)
 800c18e:	4808      	ldr	r0, [pc, #32]	; (800c1b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c190:	f7ff fdf8 	bl	800bd84 <USBD_GetString>
 800c194:	e004      	b.n	800c1a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c196:	683a      	ldr	r2, [r7, #0]
 800c198:	4904      	ldr	r1, [pc, #16]	; (800c1ac <USBD_FS_ProductStrDescriptor+0x34>)
 800c19a:	4805      	ldr	r0, [pc, #20]	; (800c1b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c19c:	f7ff fdf2 	bl	800bd84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1a0:	4b02      	ldr	r3, [pc, #8]	; (800c1ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	200018b4 	.word	0x200018b4
 800c1b0:	0800cbc0 	.word	0x0800cbc0

0800c1b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	6039      	str	r1, [r7, #0]
 800c1be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c1c0:	683a      	ldr	r2, [r7, #0]
 800c1c2:	4904      	ldr	r1, [pc, #16]	; (800c1d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c1c4:	4804      	ldr	r0, [pc, #16]	; (800c1d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c1c6:	f7ff fddd 	bl	800bd84 <USBD_GetString>
  return USBD_StrDesc;
 800c1ca:	4b02      	ldr	r3, [pc, #8]	; (800c1d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	200018b4 	.word	0x200018b4
 800c1d8:	0800cbd8 	.word	0x0800cbd8

0800c1dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	6039      	str	r1, [r7, #0]
 800c1e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	221a      	movs	r2, #26
 800c1ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c1ee:	f000 f843 	bl	800c278 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c1f2:	4b02      	ldr	r3, [pc, #8]	; (800c1fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	200000e0 	.word	0x200000e0

0800c200 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	4603      	mov	r3, r0
 800c208:	6039      	str	r1, [r7, #0]
 800c20a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c20c:	79fb      	ldrb	r3, [r7, #7]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d105      	bne.n	800c21e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c212:	683a      	ldr	r2, [r7, #0]
 800c214:	4907      	ldr	r1, [pc, #28]	; (800c234 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c216:	4808      	ldr	r0, [pc, #32]	; (800c238 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c218:	f7ff fdb4 	bl	800bd84 <USBD_GetString>
 800c21c:	e004      	b.n	800c228 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c21e:	683a      	ldr	r2, [r7, #0]
 800c220:	4904      	ldr	r1, [pc, #16]	; (800c234 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c222:	4805      	ldr	r0, [pc, #20]	; (800c238 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c224:	f7ff fdae 	bl	800bd84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c228:	4b02      	ldr	r3, [pc, #8]	; (800c234 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3708      	adds	r7, #8
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	200018b4 	.word	0x200018b4
 800c238:	0800cbec 	.word	0x0800cbec

0800c23c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	4603      	mov	r3, r0
 800c244:	6039      	str	r1, [r7, #0]
 800c246:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c248:	79fb      	ldrb	r3, [r7, #7]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d105      	bne.n	800c25a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	4907      	ldr	r1, [pc, #28]	; (800c270 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c252:	4808      	ldr	r0, [pc, #32]	; (800c274 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c254:	f7ff fd96 	bl	800bd84 <USBD_GetString>
 800c258:	e004      	b.n	800c264 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c25a:	683a      	ldr	r2, [r7, #0]
 800c25c:	4904      	ldr	r1, [pc, #16]	; (800c270 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c25e:	4805      	ldr	r0, [pc, #20]	; (800c274 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c260:	f7ff fd90 	bl	800bd84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c264:	4b02      	ldr	r3, [pc, #8]	; (800c270 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c266:	4618      	mov	r0, r3
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	200018b4 	.word	0x200018b4
 800c274:	0800cbf8 	.word	0x0800cbf8

0800c278 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c27e:	4b0f      	ldr	r3, [pc, #60]	; (800c2bc <Get_SerialNum+0x44>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c284:	4b0e      	ldr	r3, [pc, #56]	; (800c2c0 <Get_SerialNum+0x48>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c28a:	4b0e      	ldr	r3, [pc, #56]	; (800c2c4 <Get_SerialNum+0x4c>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4413      	add	r3, r2
 800c296:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d009      	beq.n	800c2b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c29e:	2208      	movs	r2, #8
 800c2a0:	4909      	ldr	r1, [pc, #36]	; (800c2c8 <Get_SerialNum+0x50>)
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f000 f814 	bl	800c2d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c2a8:	2204      	movs	r2, #4
 800c2aa:	4908      	ldr	r1, [pc, #32]	; (800c2cc <Get_SerialNum+0x54>)
 800c2ac:	68b8      	ldr	r0, [r7, #8]
 800c2ae:	f000 f80f 	bl	800c2d0 <IntToUnicode>
  }
}
 800c2b2:	bf00      	nop
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	1fff7a10 	.word	0x1fff7a10
 800c2c0:	1fff7a14 	.word	0x1fff7a14
 800c2c4:	1fff7a18 	.word	0x1fff7a18
 800c2c8:	200000e2 	.word	0x200000e2
 800c2cc:	200000f2 	.word	0x200000f2

0800c2d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b087      	sub	sp, #28
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	4613      	mov	r3, r2
 800c2dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	75fb      	strb	r3, [r7, #23]
 800c2e6:	e027      	b.n	800c338 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	0f1b      	lsrs	r3, r3, #28
 800c2ec:	2b09      	cmp	r3, #9
 800c2ee:	d80b      	bhi.n	800c308 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	0f1b      	lsrs	r3, r3, #28
 800c2f4:	b2da      	uxtb	r2, r3
 800c2f6:	7dfb      	ldrb	r3, [r7, #23]
 800c2f8:	005b      	lsls	r3, r3, #1
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	440b      	add	r3, r1
 800c300:	3230      	adds	r2, #48	; 0x30
 800c302:	b2d2      	uxtb	r2, r2
 800c304:	701a      	strb	r2, [r3, #0]
 800c306:	e00a      	b.n	800c31e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	0f1b      	lsrs	r3, r3, #28
 800c30c:	b2da      	uxtb	r2, r3
 800c30e:	7dfb      	ldrb	r3, [r7, #23]
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	4619      	mov	r1, r3
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	440b      	add	r3, r1
 800c318:	3237      	adds	r2, #55	; 0x37
 800c31a:	b2d2      	uxtb	r2, r2
 800c31c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	011b      	lsls	r3, r3, #4
 800c322:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c324:	7dfb      	ldrb	r3, [r7, #23]
 800c326:	005b      	lsls	r3, r3, #1
 800c328:	3301      	adds	r3, #1
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	4413      	add	r3, r2
 800c32e:	2200      	movs	r2, #0
 800c330:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c332:	7dfb      	ldrb	r3, [r7, #23]
 800c334:	3301      	adds	r3, #1
 800c336:	75fb      	strb	r3, [r7, #23]
 800c338:	7dfa      	ldrb	r2, [r7, #23]
 800c33a:	79fb      	ldrb	r3, [r7, #7]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d3d3      	bcc.n	800c2e8 <IntToUnicode+0x18>
  }
}
 800c340:	bf00      	nop
 800c342:	bf00      	nop
 800c344:	371c      	adds	r7, #28
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
	...

0800c350 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b08a      	sub	sp, #40	; 0x28
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c358:	f107 0314 	add.w	r3, r7, #20
 800c35c:	2200      	movs	r2, #0
 800c35e:	601a      	str	r2, [r3, #0]
 800c360:	605a      	str	r2, [r3, #4]
 800c362:	609a      	str	r2, [r3, #8]
 800c364:	60da      	str	r2, [r3, #12]
 800c366:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c370:	d147      	bne.n	800c402 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c372:	2300      	movs	r3, #0
 800c374:	613b      	str	r3, [r7, #16]
 800c376:	4b25      	ldr	r3, [pc, #148]	; (800c40c <HAL_PCD_MspInit+0xbc>)
 800c378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c37a:	4a24      	ldr	r2, [pc, #144]	; (800c40c <HAL_PCD_MspInit+0xbc>)
 800c37c:	f043 0301 	orr.w	r3, r3, #1
 800c380:	6313      	str	r3, [r2, #48]	; 0x30
 800c382:	4b22      	ldr	r3, [pc, #136]	; (800c40c <HAL_PCD_MspInit+0xbc>)
 800c384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c386:	f003 0301 	and.w	r3, r3, #1
 800c38a:	613b      	str	r3, [r7, #16]
 800c38c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c38e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c394:	2300      	movs	r3, #0
 800c396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c398:	2300      	movs	r3, #0
 800c39a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c39c:	f107 0314 	add.w	r3, r7, #20
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	481b      	ldr	r0, [pc, #108]	; (800c410 <HAL_PCD_MspInit+0xc0>)
 800c3a4:	f7f7 fcf4 	bl	8003d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c3a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c3ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3ae:	2302      	movs	r3, #2
 800c3b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c3ba:	230a      	movs	r3, #10
 800c3bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3be:	f107 0314 	add.w	r3, r7, #20
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	4812      	ldr	r0, [pc, #72]	; (800c410 <HAL_PCD_MspInit+0xc0>)
 800c3c6:	f7f7 fce3 	bl	8003d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c3ca:	4b10      	ldr	r3, [pc, #64]	; (800c40c <HAL_PCD_MspInit+0xbc>)
 800c3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ce:	4a0f      	ldr	r2, [pc, #60]	; (800c40c <HAL_PCD_MspInit+0xbc>)
 800c3d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3d4:	6353      	str	r3, [r2, #52]	; 0x34
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	60fb      	str	r3, [r7, #12]
 800c3da:	4b0c      	ldr	r3, [pc, #48]	; (800c40c <HAL_PCD_MspInit+0xbc>)
 800c3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3de:	4a0b      	ldr	r2, [pc, #44]	; (800c40c <HAL_PCD_MspInit+0xbc>)
 800c3e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c3e4:	6453      	str	r3, [r2, #68]	; 0x44
 800c3e6:	4b09      	ldr	r3, [pc, #36]	; (800c40c <HAL_PCD_MspInit+0xbc>)
 800c3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3ee:	60fb      	str	r3, [r7, #12]
 800c3f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	2043      	movs	r0, #67	; 0x43
 800c3f8:	f7f7 f917 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c3fc:	2043      	movs	r0, #67	; 0x43
 800c3fe:	f7f7 f930 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c402:	bf00      	nop
 800c404:	3728      	adds	r7, #40	; 0x28
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	40023800 	.word	0x40023800
 800c410:	40020000 	.word	0x40020000

0800c414 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c428:	4619      	mov	r1, r3
 800c42a:	4610      	mov	r0, r2
 800c42c:	f7fe fb4b 	bl	800aac6 <USBD_LL_SetupStage>
}
 800c430:	bf00      	nop
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	460b      	mov	r3, r1
 800c442:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c44a:	78fa      	ldrb	r2, [r7, #3]
 800c44c:	6879      	ldr	r1, [r7, #4]
 800c44e:	4613      	mov	r3, r2
 800c450:	00db      	lsls	r3, r3, #3
 800c452:	4413      	add	r3, r2
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	440b      	add	r3, r1
 800c458:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	78fb      	ldrb	r3, [r7, #3]
 800c460:	4619      	mov	r1, r3
 800c462:	f7fe fb85 	bl	800ab70 <USBD_LL_DataOutStage>
}
 800c466:	bf00      	nop
 800c468:	3708      	adds	r7, #8
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b082      	sub	sp, #8
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
 800c476:	460b      	mov	r3, r1
 800c478:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c480:	78fa      	ldrb	r2, [r7, #3]
 800c482:	6879      	ldr	r1, [r7, #4]
 800c484:	4613      	mov	r3, r2
 800c486:	00db      	lsls	r3, r3, #3
 800c488:	4413      	add	r3, r2
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	440b      	add	r3, r1
 800c48e:	334c      	adds	r3, #76	; 0x4c
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	78fb      	ldrb	r3, [r7, #3]
 800c494:	4619      	mov	r1, r3
 800c496:	f7fe fc1e 	bl	800acd6 <USBD_LL_DataInStage>
}
 800c49a:	bf00      	nop
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b082      	sub	sp, #8
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fe fd52 	bl	800af5a <USBD_LL_SOF>
}
 800c4b6:	bf00      	nop
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b084      	sub	sp, #16
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d102      	bne.n	800c4d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	73fb      	strb	r3, [r7, #15]
 800c4d6:	e008      	b.n	800c4ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	2b02      	cmp	r3, #2
 800c4de:	d102      	bne.n	800c4e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	73fb      	strb	r3, [r7, #15]
 800c4e4:	e001      	b.n	800c4ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c4e6:	f7f6 fbdf 	bl	8002ca8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c4f0:	7bfa      	ldrb	r2, [r7, #15]
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fe fcf2 	bl	800aede <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c500:	4618      	mov	r0, r3
 800c502:	f7fe fc9a 	bl	800ae3a <USBD_LL_Reset>
}
 800c506:	bf00      	nop
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
	...

0800c510 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fe fced 	bl	800aefe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	6812      	ldr	r2, [r2, #0]
 800c532:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c536:	f043 0301 	orr.w	r3, r3, #1
 800c53a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a1b      	ldr	r3, [r3, #32]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d005      	beq.n	800c550 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c544:	4b04      	ldr	r3, [pc, #16]	; (800c558 <HAL_PCD_SuspendCallback+0x48>)
 800c546:	691b      	ldr	r3, [r3, #16]
 800c548:	4a03      	ldr	r2, [pc, #12]	; (800c558 <HAL_PCD_SuspendCallback+0x48>)
 800c54a:	f043 0306 	orr.w	r3, r3, #6
 800c54e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c550:	bf00      	nop
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	e000ed00 	.word	0xe000ed00

0800c55c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fe fcdd 	bl	800af2a <USBD_LL_Resume>
}
 800c570:	bf00      	nop
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	460b      	mov	r3, r1
 800c582:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c58a:	78fa      	ldrb	r2, [r7, #3]
 800c58c:	4611      	mov	r1, r2
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fe fd35 	bl	800affe <USBD_LL_IsoOUTIncomplete>
}
 800c594:	bf00      	nop
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5ae:	78fa      	ldrb	r2, [r7, #3]
 800c5b0:	4611      	mov	r1, r2
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fe fcf1 	bl	800af9a <USBD_LL_IsoINIncomplete>
}
 800c5b8:	bf00      	nop
 800c5ba:	3708      	adds	r7, #8
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7fe fd47 	bl	800b062 <USBD_LL_DevConnected>
}
 800c5d4:	bf00      	nop
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe fd44 	bl	800b078 <USBD_LL_DevDisconnected>
}
 800c5f0:	bf00      	nop
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d13c      	bne.n	800c682 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c608:	4a20      	ldr	r2, [pc, #128]	; (800c68c <USBD_LL_Init+0x94>)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4a1e      	ldr	r2, [pc, #120]	; (800c68c <USBD_LL_Init+0x94>)
 800c614:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c618:	4b1c      	ldr	r3, [pc, #112]	; (800c68c <USBD_LL_Init+0x94>)
 800c61a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c61e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c620:	4b1a      	ldr	r3, [pc, #104]	; (800c68c <USBD_LL_Init+0x94>)
 800c622:	2204      	movs	r2, #4
 800c624:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c626:	4b19      	ldr	r3, [pc, #100]	; (800c68c <USBD_LL_Init+0x94>)
 800c628:	2202      	movs	r2, #2
 800c62a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c62c:	4b17      	ldr	r3, [pc, #92]	; (800c68c <USBD_LL_Init+0x94>)
 800c62e:	2200      	movs	r2, #0
 800c630:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c632:	4b16      	ldr	r3, [pc, #88]	; (800c68c <USBD_LL_Init+0x94>)
 800c634:	2202      	movs	r2, #2
 800c636:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c638:	4b14      	ldr	r3, [pc, #80]	; (800c68c <USBD_LL_Init+0x94>)
 800c63a:	2200      	movs	r2, #0
 800c63c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c63e:	4b13      	ldr	r3, [pc, #76]	; (800c68c <USBD_LL_Init+0x94>)
 800c640:	2200      	movs	r2, #0
 800c642:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c644:	4b11      	ldr	r3, [pc, #68]	; (800c68c <USBD_LL_Init+0x94>)
 800c646:	2200      	movs	r2, #0
 800c648:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c64a:	4b10      	ldr	r3, [pc, #64]	; (800c68c <USBD_LL_Init+0x94>)
 800c64c:	2201      	movs	r2, #1
 800c64e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c650:	4b0e      	ldr	r3, [pc, #56]	; (800c68c <USBD_LL_Init+0x94>)
 800c652:	2200      	movs	r2, #0
 800c654:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c656:	480d      	ldr	r0, [pc, #52]	; (800c68c <USBD_LL_Init+0x94>)
 800c658:	f7f8 fb7e 	bl	8004d58 <HAL_PCD_Init>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d001      	beq.n	800c666 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c662:	f7f6 fb21 	bl	8002ca8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c666:	2180      	movs	r1, #128	; 0x80
 800c668:	4808      	ldr	r0, [pc, #32]	; (800c68c <USBD_LL_Init+0x94>)
 800c66a:	f7f9 fdd6 	bl	800621a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c66e:	2240      	movs	r2, #64	; 0x40
 800c670:	2100      	movs	r1, #0
 800c672:	4806      	ldr	r0, [pc, #24]	; (800c68c <USBD_LL_Init+0x94>)
 800c674:	f7f9 fd8a 	bl	800618c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c678:	2280      	movs	r2, #128	; 0x80
 800c67a:	2101      	movs	r1, #1
 800c67c:	4803      	ldr	r0, [pc, #12]	; (800c68c <USBD_LL_Init+0x94>)
 800c67e:	f7f9 fd85 	bl	800618c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	20001ab4 	.word	0x20001ab4

0800c690 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c698:	2300      	movs	r3, #0
 800c69a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c69c:	2300      	movs	r3, #0
 800c69e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7f8 fc73 	bl	8004f92 <HAL_PCD_Start>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6b0:	7bfb      	ldrb	r3, [r7, #15]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 f942 	bl	800c93c <USBD_Get_USB_Status>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b084      	sub	sp, #16
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	4608      	mov	r0, r1
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	70fb      	strb	r3, [r7, #3]
 800c6d8:	460b      	mov	r3, r1
 800c6da:	70bb      	strb	r3, [r7, #2]
 800c6dc:	4613      	mov	r3, r2
 800c6de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c6ee:	78bb      	ldrb	r3, [r7, #2]
 800c6f0:	883a      	ldrh	r2, [r7, #0]
 800c6f2:	78f9      	ldrb	r1, [r7, #3]
 800c6f4:	f7f9 f944 	bl	8005980 <HAL_PCD_EP_Open>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 f91c 	bl	800c93c <USBD_Get_USB_Status>
 800c704:	4603      	mov	r3, r0
 800c706:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c708:	7bbb      	ldrb	r3, [r7, #14]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b084      	sub	sp, #16
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	460b      	mov	r3, r1
 800c71c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c722:	2300      	movs	r3, #0
 800c724:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c72c:	78fa      	ldrb	r2, [r7, #3]
 800c72e:	4611      	mov	r1, r2
 800c730:	4618      	mov	r0, r3
 800c732:	f7f9 f98d 	bl	8005a50 <HAL_PCD_EP_Close>
 800c736:	4603      	mov	r3, r0
 800c738:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c73a:	7bfb      	ldrb	r3, [r7, #15]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f000 f8fd 	bl	800c93c <USBD_Get_USB_Status>
 800c742:	4603      	mov	r3, r0
 800c744:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c746:	7bbb      	ldrb	r3, [r7, #14]
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3710      	adds	r7, #16
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	460b      	mov	r3, r1
 800c75a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c75c:	2300      	movs	r3, #0
 800c75e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c760:	2300      	movs	r3, #0
 800c762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c76a:	78fa      	ldrb	r2, [r7, #3]
 800c76c:	4611      	mov	r1, r2
 800c76e:	4618      	mov	r0, r3
 800c770:	f7f9 fa65 	bl	8005c3e <HAL_PCD_EP_SetStall>
 800c774:	4603      	mov	r3, r0
 800c776:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c778:	7bfb      	ldrb	r3, [r7, #15]
 800c77a:	4618      	mov	r0, r3
 800c77c:	f000 f8de 	bl	800c93c <USBD_Get_USB_Status>
 800c780:	4603      	mov	r3, r0
 800c782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c784:	7bbb      	ldrb	r3, [r7, #14]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b084      	sub	sp, #16
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	460b      	mov	r3, r1
 800c798:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c79a:	2300      	movs	r3, #0
 800c79c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7a8:	78fa      	ldrb	r2, [r7, #3]
 800c7aa:	4611      	mov	r1, r2
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7f9 faaa 	bl	8005d06 <HAL_PCD_EP_ClrStall>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7b6:	7bfb      	ldrb	r3, [r7, #15]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f000 f8bf 	bl	800c93c <USBD_Get_USB_Status>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c7e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	da0b      	bge.n	800c800 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c7e8:	78fb      	ldrb	r3, [r7, #3]
 800c7ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c7ee:	68f9      	ldr	r1, [r7, #12]
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	00db      	lsls	r3, r3, #3
 800c7f4:	4413      	add	r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	440b      	add	r3, r1
 800c7fa:	333e      	adds	r3, #62	; 0x3e
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	e00b      	b.n	800c818 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c800:	78fb      	ldrb	r3, [r7, #3]
 800c802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c806:	68f9      	ldr	r1, [r7, #12]
 800c808:	4613      	mov	r3, r2
 800c80a:	00db      	lsls	r3, r3, #3
 800c80c:	4413      	add	r3, r2
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	440b      	add	r3, r1
 800c812:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c816:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3714      	adds	r7, #20
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	460b      	mov	r3, r1
 800c82e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c830:	2300      	movs	r3, #0
 800c832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c834:	2300      	movs	r3, #0
 800c836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c83e:	78fa      	ldrb	r2, [r7, #3]
 800c840:	4611      	mov	r1, r2
 800c842:	4618      	mov	r0, r3
 800c844:	f7f9 f877 	bl	8005936 <HAL_PCD_SetAddress>
 800c848:	4603      	mov	r3, r0
 800c84a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c84c:	7bfb      	ldrb	r3, [r7, #15]
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 f874 	bl	800c93c <USBD_Get_USB_Status>
 800c854:	4603      	mov	r3, r0
 800c856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c858:	7bbb      	ldrb	r3, [r7, #14]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b086      	sub	sp, #24
 800c866:	af00      	add	r7, sp, #0
 800c868:	60f8      	str	r0, [r7, #12]
 800c86a:	607a      	str	r2, [r7, #4]
 800c86c:	603b      	str	r3, [r7, #0]
 800c86e:	460b      	mov	r3, r1
 800c870:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c876:	2300      	movs	r3, #0
 800c878:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c880:	7af9      	ldrb	r1, [r7, #11]
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	f7f9 f990 	bl	8005baa <HAL_PCD_EP_Transmit>
 800c88a:	4603      	mov	r3, r0
 800c88c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c88e:	7dfb      	ldrb	r3, [r7, #23]
 800c890:	4618      	mov	r0, r3
 800c892:	f000 f853 	bl	800c93c <USBD_Get_USB_Status>
 800c896:	4603      	mov	r3, r0
 800c898:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c89a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b086      	sub	sp, #24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	607a      	str	r2, [r7, #4]
 800c8ae:	603b      	str	r3, [r7, #0]
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c8c2:	7af9      	ldrb	r1, [r7, #11]
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	f7f9 f90c 	bl	8005ae4 <HAL_PCD_EP_Receive>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8d0:	7dfb      	ldrb	r3, [r7, #23]
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f000 f832 	bl	800c93c <USBD_Get_USB_Status>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8dc:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3718      	adds	r7, #24
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b082      	sub	sp, #8
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c8f8:	78fa      	ldrb	r2, [r7, #3]
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7f9 f93c 	bl	8005b7a <HAL_PCD_EP_GetRxCount>
 800c902:	4603      	mov	r3, r0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c914:	4b03      	ldr	r3, [pc, #12]	; (800c924 <USBD_static_malloc+0x18>)
}
 800c916:	4618      	mov	r0, r3
 800c918:	370c      	adds	r7, #12
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	20001fc0 	.word	0x20001fc0

0800c928 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]

}
 800c930:	bf00      	nop
 800c932:	370c      	adds	r7, #12
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	4603      	mov	r3, r0
 800c944:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c946:	2300      	movs	r3, #0
 800c948:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c94a:	79fb      	ldrb	r3, [r7, #7]
 800c94c:	2b03      	cmp	r3, #3
 800c94e:	d817      	bhi.n	800c980 <USBD_Get_USB_Status+0x44>
 800c950:	a201      	add	r2, pc, #4	; (adr r2, 800c958 <USBD_Get_USB_Status+0x1c>)
 800c952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c956:	bf00      	nop
 800c958:	0800c969 	.word	0x0800c969
 800c95c:	0800c96f 	.word	0x0800c96f
 800c960:	0800c975 	.word	0x0800c975
 800c964:	0800c97b 	.word	0x0800c97b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c968:	2300      	movs	r3, #0
 800c96a:	73fb      	strb	r3, [r7, #15]
    break;
 800c96c:	e00b      	b.n	800c986 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c96e:	2303      	movs	r3, #3
 800c970:	73fb      	strb	r3, [r7, #15]
    break;
 800c972:	e008      	b.n	800c986 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c974:	2301      	movs	r3, #1
 800c976:	73fb      	strb	r3, [r7, #15]
    break;
 800c978:	e005      	b.n	800c986 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c97a:	2303      	movs	r3, #3
 800c97c:	73fb      	strb	r3, [r7, #15]
    break;
 800c97e:	e002      	b.n	800c986 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c980:	2303      	movs	r3, #3
 800c982:	73fb      	strb	r3, [r7, #15]
    break;
 800c984:	bf00      	nop
  }
  return usb_status;
 800c986:	7bfb      	ldrb	r3, [r7, #15]
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3714      	adds	r7, #20
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <_ZdlPvj>:
 800c994:	f000 b803 	b.w	800c99e <_ZdlPv>

0800c998 <__cxa_pure_virtual>:
 800c998:	b508      	push	{r3, lr}
 800c99a:	f000 f80f 	bl	800c9bc <_ZSt9terminatev>

0800c99e <_ZdlPv>:
 800c99e:	f000 b843 	b.w	800ca28 <free>

0800c9a2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c9a2:	b508      	push	{r3, lr}
 800c9a4:	4780      	blx	r0
 800c9a6:	f000 f80e 	bl	800c9c6 <abort>
	...

0800c9ac <_ZSt13get_terminatev>:
 800c9ac:	4b02      	ldr	r3, [pc, #8]	; (800c9b8 <_ZSt13get_terminatev+0xc>)
 800c9ae:	6818      	ldr	r0, [r3, #0]
 800c9b0:	f3bf 8f5b 	dmb	ish
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	200000fc 	.word	0x200000fc

0800c9bc <_ZSt9terminatev>:
 800c9bc:	b508      	push	{r3, lr}
 800c9be:	f7ff fff5 	bl	800c9ac <_ZSt13get_terminatev>
 800c9c2:	f7ff ffee 	bl	800c9a2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800c9c6 <abort>:
 800c9c6:	b508      	push	{r3, lr}
 800c9c8:	2006      	movs	r0, #6
 800c9ca:	f000 f8bf 	bl	800cb4c <raise>
 800c9ce:	2001      	movs	r0, #1
 800c9d0:	f7f6 fc74 	bl	80032bc <_exit>

0800c9d4 <__errno>:
 800c9d4:	4b01      	ldr	r3, [pc, #4]	; (800c9dc <__errno+0x8>)
 800c9d6:	6818      	ldr	r0, [r3, #0]
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	20000100 	.word	0x20000100

0800c9e0 <__libc_init_array>:
 800c9e0:	b570      	push	{r4, r5, r6, lr}
 800c9e2:	4d0d      	ldr	r5, [pc, #52]	; (800ca18 <__libc_init_array+0x38>)
 800c9e4:	4c0d      	ldr	r4, [pc, #52]	; (800ca1c <__libc_init_array+0x3c>)
 800c9e6:	1b64      	subs	r4, r4, r5
 800c9e8:	10a4      	asrs	r4, r4, #2
 800c9ea:	2600      	movs	r6, #0
 800c9ec:	42a6      	cmp	r6, r4
 800c9ee:	d109      	bne.n	800ca04 <__libc_init_array+0x24>
 800c9f0:	4d0b      	ldr	r5, [pc, #44]	; (800ca20 <__libc_init_array+0x40>)
 800c9f2:	4c0c      	ldr	r4, [pc, #48]	; (800ca24 <__libc_init_array+0x44>)
 800c9f4:	f000 f8d4 	bl	800cba0 <_init>
 800c9f8:	1b64      	subs	r4, r4, r5
 800c9fa:	10a4      	asrs	r4, r4, #2
 800c9fc:	2600      	movs	r6, #0
 800c9fe:	42a6      	cmp	r6, r4
 800ca00:	d105      	bne.n	800ca0e <__libc_init_array+0x2e>
 800ca02:	bd70      	pop	{r4, r5, r6, pc}
 800ca04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca08:	4798      	blx	r3
 800ca0a:	3601      	adds	r6, #1
 800ca0c:	e7ee      	b.n	800c9ec <__libc_init_array+0xc>
 800ca0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca12:	4798      	blx	r3
 800ca14:	3601      	adds	r6, #1
 800ca16:	e7f2      	b.n	800c9fe <__libc_init_array+0x1e>
 800ca18:	0800ccfc 	.word	0x0800ccfc
 800ca1c:	0800ccfc 	.word	0x0800ccfc
 800ca20:	0800ccfc 	.word	0x0800ccfc
 800ca24:	0800cd08 	.word	0x0800cd08

0800ca28 <free>:
 800ca28:	4b02      	ldr	r3, [pc, #8]	; (800ca34 <free+0xc>)
 800ca2a:	4601      	mov	r1, r0
 800ca2c:	6818      	ldr	r0, [r3, #0]
 800ca2e:	f000 b819 	b.w	800ca64 <_free_r>
 800ca32:	bf00      	nop
 800ca34:	20000100 	.word	0x20000100

0800ca38 <memcpy>:
 800ca38:	440a      	add	r2, r1
 800ca3a:	4291      	cmp	r1, r2
 800ca3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca40:	d100      	bne.n	800ca44 <memcpy+0xc>
 800ca42:	4770      	bx	lr
 800ca44:	b510      	push	{r4, lr}
 800ca46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca4e:	4291      	cmp	r1, r2
 800ca50:	d1f9      	bne.n	800ca46 <memcpy+0xe>
 800ca52:	bd10      	pop	{r4, pc}

0800ca54 <memset>:
 800ca54:	4402      	add	r2, r0
 800ca56:	4603      	mov	r3, r0
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d100      	bne.n	800ca5e <memset+0xa>
 800ca5c:	4770      	bx	lr
 800ca5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca62:	e7f9      	b.n	800ca58 <memset+0x4>

0800ca64 <_free_r>:
 800ca64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca66:	2900      	cmp	r1, #0
 800ca68:	d044      	beq.n	800caf4 <_free_r+0x90>
 800ca6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca6e:	9001      	str	r0, [sp, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f1a1 0404 	sub.w	r4, r1, #4
 800ca76:	bfb8      	it	lt
 800ca78:	18e4      	addlt	r4, r4, r3
 800ca7a:	f000 f883 	bl	800cb84 <__malloc_lock>
 800ca7e:	4a1e      	ldr	r2, [pc, #120]	; (800caf8 <_free_r+0x94>)
 800ca80:	9801      	ldr	r0, [sp, #4]
 800ca82:	6813      	ldr	r3, [r2, #0]
 800ca84:	b933      	cbnz	r3, 800ca94 <_free_r+0x30>
 800ca86:	6063      	str	r3, [r4, #4]
 800ca88:	6014      	str	r4, [r2, #0]
 800ca8a:	b003      	add	sp, #12
 800ca8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca90:	f000 b87e 	b.w	800cb90 <__malloc_unlock>
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	d908      	bls.n	800caaa <_free_r+0x46>
 800ca98:	6825      	ldr	r5, [r4, #0]
 800ca9a:	1961      	adds	r1, r4, r5
 800ca9c:	428b      	cmp	r3, r1
 800ca9e:	bf01      	itttt	eq
 800caa0:	6819      	ldreq	r1, [r3, #0]
 800caa2:	685b      	ldreq	r3, [r3, #4]
 800caa4:	1949      	addeq	r1, r1, r5
 800caa6:	6021      	streq	r1, [r4, #0]
 800caa8:	e7ed      	b.n	800ca86 <_free_r+0x22>
 800caaa:	461a      	mov	r2, r3
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	b10b      	cbz	r3, 800cab4 <_free_r+0x50>
 800cab0:	42a3      	cmp	r3, r4
 800cab2:	d9fa      	bls.n	800caaa <_free_r+0x46>
 800cab4:	6811      	ldr	r1, [r2, #0]
 800cab6:	1855      	adds	r5, r2, r1
 800cab8:	42a5      	cmp	r5, r4
 800caba:	d10b      	bne.n	800cad4 <_free_r+0x70>
 800cabc:	6824      	ldr	r4, [r4, #0]
 800cabe:	4421      	add	r1, r4
 800cac0:	1854      	adds	r4, r2, r1
 800cac2:	42a3      	cmp	r3, r4
 800cac4:	6011      	str	r1, [r2, #0]
 800cac6:	d1e0      	bne.n	800ca8a <_free_r+0x26>
 800cac8:	681c      	ldr	r4, [r3, #0]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	6053      	str	r3, [r2, #4]
 800cace:	4421      	add	r1, r4
 800cad0:	6011      	str	r1, [r2, #0]
 800cad2:	e7da      	b.n	800ca8a <_free_r+0x26>
 800cad4:	d902      	bls.n	800cadc <_free_r+0x78>
 800cad6:	230c      	movs	r3, #12
 800cad8:	6003      	str	r3, [r0, #0]
 800cada:	e7d6      	b.n	800ca8a <_free_r+0x26>
 800cadc:	6825      	ldr	r5, [r4, #0]
 800cade:	1961      	adds	r1, r4, r5
 800cae0:	428b      	cmp	r3, r1
 800cae2:	bf04      	itt	eq
 800cae4:	6819      	ldreq	r1, [r3, #0]
 800cae6:	685b      	ldreq	r3, [r3, #4]
 800cae8:	6063      	str	r3, [r4, #4]
 800caea:	bf04      	itt	eq
 800caec:	1949      	addeq	r1, r1, r5
 800caee:	6021      	streq	r1, [r4, #0]
 800caf0:	6054      	str	r4, [r2, #4]
 800caf2:	e7ca      	b.n	800ca8a <_free_r+0x26>
 800caf4:	b003      	add	sp, #12
 800caf6:	bd30      	pop	{r4, r5, pc}
 800caf8:	200021e0 	.word	0x200021e0

0800cafc <_raise_r>:
 800cafc:	291f      	cmp	r1, #31
 800cafe:	b538      	push	{r3, r4, r5, lr}
 800cb00:	4604      	mov	r4, r0
 800cb02:	460d      	mov	r5, r1
 800cb04:	d904      	bls.n	800cb10 <_raise_r+0x14>
 800cb06:	2316      	movs	r3, #22
 800cb08:	6003      	str	r3, [r0, #0]
 800cb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb0e:	bd38      	pop	{r3, r4, r5, pc}
 800cb10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb12:	b112      	cbz	r2, 800cb1a <_raise_r+0x1e>
 800cb14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb18:	b94b      	cbnz	r3, 800cb2e <_raise_r+0x32>
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f000 f830 	bl	800cb80 <_getpid_r>
 800cb20:	462a      	mov	r2, r5
 800cb22:	4601      	mov	r1, r0
 800cb24:	4620      	mov	r0, r4
 800cb26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb2a:	f000 b817 	b.w	800cb5c <_kill_r>
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d00a      	beq.n	800cb48 <_raise_r+0x4c>
 800cb32:	1c59      	adds	r1, r3, #1
 800cb34:	d103      	bne.n	800cb3e <_raise_r+0x42>
 800cb36:	2316      	movs	r3, #22
 800cb38:	6003      	str	r3, [r0, #0]
 800cb3a:	2001      	movs	r0, #1
 800cb3c:	e7e7      	b.n	800cb0e <_raise_r+0x12>
 800cb3e:	2400      	movs	r4, #0
 800cb40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb44:	4628      	mov	r0, r5
 800cb46:	4798      	blx	r3
 800cb48:	2000      	movs	r0, #0
 800cb4a:	e7e0      	b.n	800cb0e <_raise_r+0x12>

0800cb4c <raise>:
 800cb4c:	4b02      	ldr	r3, [pc, #8]	; (800cb58 <raise+0xc>)
 800cb4e:	4601      	mov	r1, r0
 800cb50:	6818      	ldr	r0, [r3, #0]
 800cb52:	f7ff bfd3 	b.w	800cafc <_raise_r>
 800cb56:	bf00      	nop
 800cb58:	20000100 	.word	0x20000100

0800cb5c <_kill_r>:
 800cb5c:	b538      	push	{r3, r4, r5, lr}
 800cb5e:	4d07      	ldr	r5, [pc, #28]	; (800cb7c <_kill_r+0x20>)
 800cb60:	2300      	movs	r3, #0
 800cb62:	4604      	mov	r4, r0
 800cb64:	4608      	mov	r0, r1
 800cb66:	4611      	mov	r1, r2
 800cb68:	602b      	str	r3, [r5, #0]
 800cb6a:	f7f6 fb97 	bl	800329c <_kill>
 800cb6e:	1c43      	adds	r3, r0, #1
 800cb70:	d102      	bne.n	800cb78 <_kill_r+0x1c>
 800cb72:	682b      	ldr	r3, [r5, #0]
 800cb74:	b103      	cbz	r3, 800cb78 <_kill_r+0x1c>
 800cb76:	6023      	str	r3, [r4, #0]
 800cb78:	bd38      	pop	{r3, r4, r5, pc}
 800cb7a:	bf00      	nop
 800cb7c:	200021e4 	.word	0x200021e4

0800cb80 <_getpid_r>:
 800cb80:	f7f6 bb84 	b.w	800328c <_getpid>

0800cb84 <__malloc_lock>:
 800cb84:	4801      	ldr	r0, [pc, #4]	; (800cb8c <__malloc_lock+0x8>)
 800cb86:	f000 b809 	b.w	800cb9c <__retarget_lock_acquire_recursive>
 800cb8a:	bf00      	nop
 800cb8c:	200021e8 	.word	0x200021e8

0800cb90 <__malloc_unlock>:
 800cb90:	4801      	ldr	r0, [pc, #4]	; (800cb98 <__malloc_unlock+0x8>)
 800cb92:	f000 b804 	b.w	800cb9e <__retarget_lock_release_recursive>
 800cb96:	bf00      	nop
 800cb98:	200021e8 	.word	0x200021e8

0800cb9c <__retarget_lock_acquire_recursive>:
 800cb9c:	4770      	bx	lr

0800cb9e <__retarget_lock_release_recursive>:
 800cb9e:	4770      	bx	lr

0800cba0 <_init>:
 800cba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba2:	bf00      	nop
 800cba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba6:	bc08      	pop	{r3}
 800cba8:	469e      	mov	lr, r3
 800cbaa:	4770      	bx	lr

0800cbac <_fini>:
 800cbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbae:	bf00      	nop
 800cbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbb2:	bc08      	pop	{r3}
 800cbb4:	469e      	mov	lr, r3
 800cbb6:	4770      	bx	lr
