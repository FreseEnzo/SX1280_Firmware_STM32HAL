
F407-SX1280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c984  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800cb0c  0800cb0c  0001cb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc48  0800cc48  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc48  0800cc48  0001cc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc50  0800cc50  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800cc50  0800cc50  0001cc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800cc5c  0800cc5c  0001cc5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800cc64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          0000212c  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002290  20002290  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e4aa  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005770  00000000  00000000  0004e63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e50  00000000  00000000  00053db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c80  00000000  00000000  00055c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a9da  00000000  00000000  00057880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026fa8  00000000  00000000  0008225a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dda5f  00000000  00000000  000a9202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00186c61  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000873c  00000000  00000000  00186cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800caf4 	.word	0x0800caf4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	0800caf4 	.word	0x0800caf4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <_ZN14RoboIME_SX128012GPIOCallbackEv>:

SX1280Hal radio0(&hspi2, SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, SX1280_RST_GPIO_Port, SX1280_RST_Pin, &callbacks);


//Public methods
void RoboIME_SX1280::GPIOCallback(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	radio0.HalInterruptCallback();
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <_ZN14RoboIME_SX128012GPIOCallbackEv+0x20>)
 8000cb2:	f000 fe5c 	bl	800196e <_ZN9SX1280Hal20HalInterruptCallbackEv>
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <_ZN14RoboIME_SX128012GPIOCallbackEv+0x24>)
 8000cbc:	f003 f9df 	bl	800407e <HAL_GPIO_TogglePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200001a4 	.word	0x200001a4
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <_ZN14RoboIME_SX12805setupEv>:
int RoboIME_SX1280::setup(){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	6078      	str	r0, [r7, #4]
	/* Modulation Params*/

	   ModulationParams.Params.Flrc.BitrateBandwidth  = ( RadioFlrcBitrates_t )       FLRC_BR_0_260_BW_0_3;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	22eb      	movs	r2, #235	; 0xeb
 8000cdc:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	   ModulationParams.Params.Flrc.CodingRate        = ( RadioFlrcCodingRates_t )    FLRC_CR_1_2;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	   ModulationParams.Params.Flrc.ModulationShaping = ( RadioModShapings_t )        RADIO_MOD_SHAPING_BT_1_0;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2210      	movs	r2, #16
 8000cec:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

	   PacketParams.Params.Flrc.PreambleLength        = ( RadioPreambleLengths_t )     PREAMBLE_LENGTH_32_BITS;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2270      	movs	r2, #112	; 0x70
 8000cf4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	   PacketParams.Params.Flrc.SyncWordLength        = ( RadioFlrcSyncWordLengths_t )FLRC_SYNCWORD_LENGTH_4_BYTE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	   PacketParams.Params.Flrc.SyncWordMatch         = ( RadioSyncWordRxMatchs_t )   RADIO_RX_MATCH_SYNCWORD_1;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2210      	movs	r2, #16
 8000d04:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	   PacketParams.Params.Flrc.HeaderType            = ( RadioPacketLengthModes_t )  RADIO_PACKET_VARIABLE_LENGTH;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	   PacketParams.Params.Flrc.PayloadLength         =                               bufferSize-1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	227f      	movs	r2, #127	; 0x7f
 8000d14:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	   PacketParams.Params.Flrc.CrcLength             = ( RadioCrcTypes_t )           RADIO_CRC_3_BYTES;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2230      	movs	r2, #48	; 0x30
 8000d1c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	   PacketParams.Params.Flrc.Whitening             = ( RadioWhiteningModes_t )	  RADIO_WHITENING_OFF;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2208      	movs	r2, #8
 8000d24:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	   ModulationParams.PacketType = PACKET_TYPE_FLRC;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	   PacketParams.PacketType     = PACKET_TYPE_FLRC;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2203      	movs	r2, #3
 8000d34:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82


   	HAL_Delay(500);
 8000d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d3c:	f002 fb20 	bl	8003380 <HAL_Delay>
   	radio0.Init();
 8000d40:	4821      	ldr	r0, [pc, #132]	; (8000dc8 <_ZN14RoboIME_SX12805setupEv+0xf8>)
 8000d42:	f000 fe45 	bl	80019d0 <_ZN6SX12804InitEv>
   	radio0.SetRegulatorMode(USE_LDO);
 8000d46:	2100      	movs	r1, #0
 8000d48:	481f      	ldr	r0, [pc, #124]	; (8000dc8 <_ZN14RoboIME_SX12805setupEv+0xf8>)
 8000d4a:	f001 f9d0 	bl	80020ee <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>
   	radio0.SetStandby( STDBY_RC);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	481d      	ldr	r0, [pc, #116]	; (8000dc8 <_ZN14RoboIME_SX12805setupEv+0xf8>)
 8000d52:	f000 fead 	bl	8001ab0 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>
   	//radio0.SetLNAGainSetting(LNA_HIGH_SENSITIVITY_MODE);
   	radio0.SetPacketType( ModulationParams.PacketType );
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481a      	ldr	r0, [pc, #104]	; (8000dc8 <_ZN14RoboIME_SX12805setupEv+0xf8>)
 8000d60:	f000 ff31 	bl	8001bc6 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
   	radio0.SetModulationParams( &ModulationParams );
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	339f      	adds	r3, #159	; 0x9f
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <_ZN14RoboIME_SX12805setupEv+0xf8>)
 8000d6c:	f000 ffd6 	bl	8001d1c <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>
   	radio0.SetPacketParams( &PacketParams );
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3382      	adds	r3, #130	; 0x82
 8000d74:	4619      	mov	r1, r3
 8000d76:	4814      	ldr	r0, [pc, #80]	; (8000dc8 <_ZN14RoboIME_SX12805setupEv+0xf8>)
 8000d78:	f001 f84c 	bl	8001e14 <_ZN6SX128015SetPacketParamsEP14PacketParams_t>
   	radio0.SetRfFrequency( 2350000000UL );
 8000d7c:	4913      	ldr	r1, [pc, #76]	; (8000dcc <_ZN14RoboIME_SX12805setupEv+0xfc>)
 8000d7e:	4812      	ldr	r0, [pc, #72]	; (8000dc8 <_ZN14RoboIME_SX12805setupEv+0xf8>)
 8000d80:	f000 ff62 	bl	8001c48 <_ZN6SX128014SetRfFrequencyEm>
   	radio0.SetBufferBaseAddresses( 0x00, 0x00 );
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <_ZN14RoboIME_SX12805setupEv+0xf8>)
 8000d8a:	f000 ffad 	bl	8001ce8 <_ZN6SX128022SetBufferBaseAddressesEhh>
   	//radio0.SetSyncWord( 1, syncWord ); // NAO USEI
   	// only used in GFSK, FLRC
   	//uint8_t crcSeedLocal[2] = {0x45, 0x67}; // NAO USEI
   	//radio0.SetCrcSeed( crcSeedLocal ); // NAO USEI
   	//radio0.SetCrcPolynomial( 0x0123 ); // NAOP USEI
   	radio0.SetTxParams( 0, RADIO_RAMP_20_US );
 8000d8e:	22e0      	movs	r2, #224	; 0xe0
 8000d90:	2100      	movs	r1, #0
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <_ZN14RoboIME_SX12805setupEv+0xf8>)
 8000d94:	f000 ff8c 	bl	8001cb0 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>
   	uint16_t RxIrqMask = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT;
 8000d98:	f244 0302 	movw	r3, #16386	; 0x4002
 8000d9c:	81fb      	strh	r3, [r7, #14]
   	radio0.SetDioIrqParams( RxIrqMask, RxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8000d9e:	89fa      	ldrh	r2, [r7, #14]
 8000da0:	89f9      	ldrh	r1, [r7, #14]
 8000da2:	2300      	movs	r3, #0
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2300      	movs	r3, #0
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <_ZN14RoboIME_SX12805setupEv+0xf8>)
 8000daa:	f001 f92f 	bl	800200c <_ZN6SX128015SetDioIrqParamsEtttt>
   	radio0.SetRx( ( TickTime_t ) { RADIO_TICK_SIZE_1000_US, 0xFFFF } );
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_ZN14RoboIME_SX12805setupEv+0x100>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <_ZN14RoboIME_SX12805setupEv+0xf8>)
 8000db8:	f000 fecf 	bl	8001b5a <_ZN6SX12805SetRxE10TickTime_s>

   	//radio0.SetPollingMode( );
   	//radio0.ProcessIrqs( );

   	return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200001a4 	.word	0x200001a4
 8000dcc:	8c122780 	.word	0x8c122780
 8000dd0:	0800cb0c 	.word	0x0800cb0c

08000dd4 <_ZN14RoboIME_SX128011sendPayloadEPhh>:

void RoboIME_SX1280::sendPayload(uint8_t* payload, uint8_t payloadSize){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	4613      	mov	r3, r2
 8000de0:	71fb      	strb	r3, [r7, #7]
	radio0.SetDioIrqParams( TxIrqMask, TxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	; 0xac
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8000dee:	2300      	movs	r3, #0
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <_ZN14RoboIME_SX128011sendPayloadEPhh+0x4c>)
 8000df6:	f001 f909 	bl	800200c <_ZN6SX128015SetDioIrqParamsEtttt>
	radio0.SendPayload( payload, payloadSize,( TickTime_t ){ RADIO_TICK_SIZE_1000_US, 100 } );
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <_ZN14RoboIME_SX128011sendPayloadEPhh+0x50>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	79fa      	ldrb	r2, [r7, #7]
 8000e02:	2300      	movs	r3, #0
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <_ZN14RoboIME_SX128011sendPayloadEPhh+0x4c>)
 8000e0c:	f001 f9be 	bl	800218c <_ZN6SX128011SendPayloadEPhh10TickTime_sh>
	radio0.GetIrqStatus();
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <_ZN14RoboIME_SX128011sendPayloadEPhh+0x4c>)
 8000e12:	f001 f936 	bl	8002082 <_ZN6SX128012GetIrqStatusEv>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200001a4 	.word	0x200001a4
 8000e24:	0800cb10 	.word	0x0800cb10

08000e28 <_ZN14RoboIME_SX128014receivePayloadEPh>:
uint8_t RoboIME_SX1280::receivePayload(uint8_t* payload){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
	uint8_t actualBufferSize;
	radio0.SetDioIrqParams( RxIrqMask, RxIrqMask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	; 0xae
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2300      	movs	r3, #0
 8000e44:	4819      	ldr	r0, [pc, #100]	; (8000eac <_ZN14RoboIME_SX128014receivePayloadEPh+0x84>)
 8000e46:	f001 f8e1 	bl	800200c <_ZN6SX128015SetDioIrqParamsEtttt>
	oldCount = payloadTemp[0];
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	radio0.GetPayload(payloadTemp, &actualBufferSize, bufferSize);
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	f107 020f 	add.w	r2, r7, #15
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	4813      	ldr	r0, [pc, #76]	; (8000eac <_ZN14RoboIME_SX128014receivePayloadEPh+0x84>)
 8000e5e:	f001 f971 	bl	8002144 <_ZN6SX128010GetPayloadEPhS0_h>
	if (payloadTemp[0] != oldCount && payloadTemp[1] == roboId)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d013      	beq.n	8000e98 <_ZN14RoboIME_SX128014receivePayloadEPh+0x70>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	785a      	ldrb	r2, [r3, #1]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d10c      	bne.n	8000e98 <_ZN14RoboIME_SX128014receivePayloadEPh+0x70>
	{
		memcpy(payload, payloadTemp, bufferSize);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	4619      	mov	r1, r3
 8000e84:	6838      	ldr	r0, [r7, #0]
 8000e86:	f00b fd81 	bl	800c98c <memcpy>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000e8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e8e:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <_ZN14RoboIME_SX128014receivePayloadEPh+0x88>)
 8000e90:	f003 f8f5 	bl	800407e <HAL_GPIO_TogglePin>
		return actualBufferSize;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	e005      	b.n	8000ea4 <_ZN14RoboIME_SX128014receivePayloadEPh+0x7c>
	}
	else
	{
		 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <_ZN14RoboIME_SX128014receivePayloadEPh+0x88>)
 8000e9e:	f003 f8ee 	bl	800407e <HAL_GPIO_TogglePin>
		 return 0;
 8000ea2:	2300      	movs	r3, #0
	}

}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200001a4 	.word	0x200001a4
 8000eb0:	40020c00 	.word	0x40020c00

08000eb4 <_ZN14RoboIME_SX128010setRobotIdEh>:
void RoboIME_SX1280::setPayload( uint8_t *buffer, uint8_t size, uint8_t offset ){

	radio0.SetPayload( buffer, size, offset );
}
int RoboIME_SX1280::setRobotId(uint8_t id){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	70fb      	strb	r3, [r7, #3]
	roboId = id;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	78fa      	ldrb	r2, [r7, #3]
 8000ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	return 0;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <_Z41__static_initialization_and_destruction_0ii>:

void RoboIME_SX1280::setRX(void)
{
	radio0.SetRx( ( TickTime_t ) { RADIO_TICK_SIZE_1000_US, 0xFFFF } );
}
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af06      	add	r7, sp, #24
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d117      	bne.n	8000f18 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d112      	bne.n	8000f18 <_Z41__static_initialization_and_destruction_0ii+0x40>
SX1280Hal radio0(&hspi2, SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, SX1280_RST_GPIO_Port, SX1280_RST_Pin, &callbacks);
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000ef4:	9304      	str	r3, [sp, #16]
 8000ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efa:	9303      	str	r3, [sp, #12]
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000f12:	480d      	ldr	r0, [pc, #52]	; (8000f48 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000f14:	f000 f996 	bl	8001244 <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d107      	bne.n	8000f2e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d102      	bne.n	8000f2e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000f2a:	f000 f9c7 	bl	80012bc <_ZN9SX1280HalD1Ev>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000180 	.word	0x20000180
 8000f3c:	40020c00 	.word	0x40020c00
 8000f40:	40020400 	.word	0x40020400
 8000f44:	20000470 	.word	0x20000470
 8000f48:	200001a4 	.word	0x200001a4

08000f4c <_GLOBAL__sub_I_callbacks>:
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff ffbf 	bl	8000ed8 <_Z41__static_initialization_and_destruction_0ii>
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_GLOBAL__sub_D_callbacks>:
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff ffb7 	bl	8000ed8 <_Z41__static_initialization_and_destruction_0ii>
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_ZN14RoboIME_SX1280C1Ev>:
#include "string.h"
#include <cstring>
#include "SerialDebug.hpp"
#include "sx1280/sx1280-hal.h"

class RoboIME_SX1280 {
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f244 0201 	movw	r2, #16385	; 0x4001
 8000f7a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f244 0202 	movw	r2, #16386	; 0x4002
 8000f84:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <HAL_UART_TxCpltCallback>:
	if(htim==&htim6){

	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
		//debug.serialTxCpltCallback();
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin){
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fbc:	d103      	bne.n	8000fc6 <HAL_GPIO_EXTI_Callback+0x1a>
	case GPIO_PIN_8:
		radio.GPIOCallback();
 8000fbe:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x24>)
 8000fc0:	f7ff fe72 	bl	8000ca8 <_ZN14RoboIME_SX128012GPIOCallbackEv>
		break;
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_EXTI_Callback+0x1c>
	default:
		break;
 8000fc6:	bf00      	nop
	}
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000208 	.word	0x20000208

08000fd4 <start>:

void start(){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0a4      	sub	sp, #144	; 0x90
 8000fd8:	af00      	add	r7, sp, #0

	radio.setup();
 8000fda:	4834      	ldr	r0, [pc, #208]	; (80010ac <start+0xd8>)
 8000fdc:	f7ff fe78 	bl	8000cd0 <_ZN14RoboIME_SX12805setupEv>
   /*Radio Type*/
    bool isMaster = false;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	uint8_t Buffer[radio.bufferSize];
	memset( BufferReceived, 0x00, radio.bufferSize );
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4831      	ldr	r0, [pc, #196]	; (80010b0 <start+0xdc>)
 8000fec:	f00b fcdc 	bl	800c9a8 <memset>
	HAL_Delay(5);
 8000ff0:	2005      	movs	r0, #5
 8000ff2:	f002 f9c5 	bl	8003380 <HAL_Delay>

//	char *data = "hello adfa \n";
int count = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
while(1)
{

	if(isMaster == true)
 8000ffc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001000:	2b01      	cmp	r3, #1
 8001002:	d13b      	bne.n	800107c <start+0xa8>
	{

		// Send the next PING frame
		Buffer[0] = count;
 8001004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001008:	b2db      	uxtb	r3, r3
 800100a:	713b      	strb	r3, [r7, #4]
		Buffer[1] = 2;
 800100c:	2302      	movs	r3, #2
 800100e:	717b      	strb	r3, [r7, #5]
		Buffer[2] = 3;
 8001010:	2303      	movs	r3, #3
 8001012:	71bb      	strb	r3, [r7, #6]
		Buffer[3] = 4;
 8001014:	2304      	movs	r3, #4
 8001016:	71fb      	strb	r3, [r7, #7]
		Buffer[4] = 5;
 8001018:	2305      	movs	r3, #5
 800101a:	723b      	strb	r3, [r7, #8]
		Buffer[5] = 6;
 800101c:	2306      	movs	r3, #6
 800101e:	727b      	strb	r3, [r7, #9]
		Buffer[6] = 7;
 8001020:	2307      	movs	r3, #7
 8001022:	72bb      	strb	r3, [r7, #10]
		Buffer[7] = 8;
 8001024:	2308      	movs	r3, #8
 8001026:	72fb      	strb	r3, [r7, #11]
		for(int i = 8; i < 16; i++ )
 8001028:	2308      	movs	r3, #8
 800102a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800102e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001032:	2b0f      	cmp	r3, #15
 8001034:	dc0e      	bgt.n	8001054 <start+0x80>
		{
			Buffer[i] = i;
 8001036:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800103a:	b2d9      	uxtb	r1, r3
 800103c:	1d3a      	adds	r2, r7, #4
 800103e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001042:	4413      	add	r3, r2
 8001044:	460a      	mov	r2, r1
 8001046:	701a      	strb	r2, [r3, #0]
		for(int i = 8; i < 16; i++ )
 8001048:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800104c:	3301      	adds	r3, #1
 800104e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001052:	e7ec      	b.n	800102e <start+0x5a>
		}

		radio.sendPayload(Buffer, radio.bufferSize);
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	4619      	mov	r1, r3
 800105a:	4814      	ldr	r0, [pc, #80]	; (80010ac <start+0xd8>)
 800105c:	f7ff feba 	bl	8000dd4 <_ZN14RoboIME_SX128011sendPayloadEPhh>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001060:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001064:	4813      	ldr	r0, [pc, #76]	; (80010b4 <start+0xe0>)
 8001066:	f003 f80a 	bl	800407e <HAL_GPIO_TogglePin>
		count ++;
 800106a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800106e:	3301      	adds	r3, #1
 8001070:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		HAL_Delay(100);
 8001074:	2064      	movs	r0, #100	; 0x64
 8001076:	f002 f983 	bl	8003380 <HAL_Delay>
 800107a:	e7bf      	b.n	8000ffc <start+0x28>
	}
	else
	{
		radio.setRobotId(2);
 800107c:	2102      	movs	r1, #2
 800107e:	480b      	ldr	r0, [pc, #44]	; (80010ac <start+0xd8>)
 8001080:	f7ff ff18 	bl	8000eb4 <_ZN14RoboIME_SX128010setRobotIdEh>
			if(radio.receivePayload(BufferReceived))
 8001084:	490a      	ldr	r1, [pc, #40]	; (80010b0 <start+0xdc>)
 8001086:	4809      	ldr	r0, [pc, #36]	; (80010ac <start+0xd8>)
 8001088:	f7ff fece 	bl	8000e28 <_ZN14RoboIME_SX128014receivePayloadEPh>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf14      	ite	ne
 8001092:	2301      	movne	r3, #1
 8001094:	2300      	moveq	r3, #0
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <start+0xd0>
			{
				 CDC_Transmit_FS(BufferReceived, radio.bufferSize);
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	4804      	ldr	r0, [pc, #16]	; (80010b0 <start+0xdc>)
 80010a0:	f00a ffb8 	bl	800c014 <CDC_Transmit_FS>
			}

			 HAL_Delay(100);
 80010a4:	2064      	movs	r0, #100	; 0x64
 80010a6:	f002 f96b 	bl	8003380 <HAL_Delay>
	}
	}
 80010aa:	e7a7      	b.n	8000ffc <start+0x28>
 80010ac:	20000208 	.word	0x20000208
 80010b0:	200002fc 	.word	0x200002fc
 80010b4:	40020c00 	.word	0x40020c00

080010b8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d107      	bne.n	80010d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d102      	bne.n	80010d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
RoboIME_SX1280 radio;
 80010d2:	4803      	ldr	r0, [pc, #12]	; (80010e0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80010d4:	f7ff ff4a 	bl	8000f6c <_ZN14RoboIME_SX1280C1Ev>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000208 	.word	0x20000208

080010e4 <_GLOBAL__sub_I_radio>:
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010ec:	2001      	movs	r0, #1
 80010ee:	f7ff ffe3 	bl	80010b8 <_Z41__static_initialization_and_destruction_0ii>
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_ZN5RadioC1EP16RadioCallbacks_t>:
     *
     * \param [in]  callbacks     The structure of callbacks function pointers
     *                            to be called on radio interrupts
     *
     */
    Radio( RadioCallbacks_t *callbacks )
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
    {
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <_ZN5RadioC1EP16RadioCallbacks_t+0x68>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	601a      	str	r2, [r3, #0]
        this->txDone = callbacks->txDone;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	605a      	str	r2, [r3, #4]
        this->rxDone = callbacks->rxDone;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	609a      	str	r2, [r3, #8]
        this->rxSyncWordDone = callbacks->rxSyncWordDone;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	60da      	str	r2, [r3, #12]
        this->rxHeaderDone = callbacks->rxHeaderDone;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	611a      	str	r2, [r3, #16]
        this->txTimeout = callbacks->txTimeout;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	615a      	str	r2, [r3, #20]
        this->rxTimeout = callbacks->rxTimeout;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
        this->rxError = callbacks->rxError;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	699a      	ldr	r2, [r3, #24]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	61da      	str	r2, [r3, #28]
        this->rangingDone = callbacks->rangingDone;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	69da      	ldr	r2, [r3, #28]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	621a      	str	r2, [r3, #32]
        this->cadDone = callbacks->cadDone;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	6a1a      	ldr	r2, [r3, #32]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
    }
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	0800cbac 	.word	0x0800cbac

08001160 <_ZN5RadioD1Ev>:
    virtual ~Radio( void ){ };
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <_ZN5RadioD1Ev+0x1c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	0800cbac 	.word	0x0800cbac

08001180 <_ZN5RadioD0Ev>:
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ffe9 	bl	8001160 <_ZN5RadioD1Ev>
 800118e:	2128      	movs	r1, #40	; 0x28
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f00b fba9 	bl	800c8e8 <_ZdlPvj>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_ZN6SX1280C1EP16RadioCallbacks_t>:
     * \brief Instantiates a SX1280 object and provides API functions to communicates with the radio
     *
     * \param [in]  callbacks      Pointer to the callbacks structure defining
     *                             all callbacks function pointers
     */
    SX1280( RadioCallbacks_t *callbacks ):
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
        // The class members are value-initialiazed in member-initilaizer list
        Radio( callbacks ), OperatingMode( MODE_STDBY_RC ), PacketType( PACKET_TYPE_NONE ),
        LoRaBandwidth( LORA_BW_1600 ), IrqState( false ), PollingMode( false )
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ffa0 	bl	80010f4 <_ZN5RadioC1EP16RadioCallbacks_t>
 80011b4:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <_ZN6SX1280C1EP16RadioCallbacks_t+0x58>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2202      	movs	r2, #2
 80011be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	220f      	movs	r2, #15
 80011c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	220a      	movs	r2, #10
 80011ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    {
        this->dioIrq        = &SX1280::OnDioIrq;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <_ZN6SX1280C1EP16RadioCallbacks_t+0x5c>)
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	631a      	str	r2, [r3, #48]	; 0x30

        // Warning: this constructor set the LoRaBandwidth member to a valid
        // value, but it is not related to the actual radio configuration!
    }
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	0800cbe8 	.word	0x0800cbe8
 80011fc:	080021e5 	.word	0x080021e5

08001200 <_ZN6SX1280D1Ev>:

    virtual ~SX1280( )
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    {
 8001208:	4a05      	ldr	r2, [pc, #20]	; (8001220 <_ZN6SX1280D1Ev+0x20>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ffa5 	bl	8001160 <_ZN5RadioD1Ev>
    }
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	0800cbe8 	.word	0x0800cbe8

08001224 <_ZN6SX1280D0Ev>:
    virtual ~SX1280( )
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    }
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ffe7 	bl	8001200 <_ZN6SX1280D1Ev>
 8001232:	2138      	movs	r1, #56	; 0x38
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f00b fb57 	bl	800c8e8 <_ZdlPvj>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t>:
// This code handles cases where assert_param is undefined
#ifndef assert_param
#define assert_param( ... )
#endif

SX1280Hal::SX1280Hal( SPI_HandleTypeDef* hspi,
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	807b      	strh	r3, [r7, #2]
                      RadioCallbacks_t *callbacks )
        :   SX1280( callbacks ),
            RadioNssPort( nssPort ), RadioNssPin( nssPin ),
            RadioResetPort( rstPort ), RadioResetPin( rstPin ),
            RadioCtsnPort( nullptr ), RadioCtsnPin( 0 ),
            BUSYPort( busyPort ), BUSYPin( busyPin )
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ffa2 	bl	80011a0 <_ZN6SX1280C1EP16RadioCallbacks_t>
 800125c:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <_ZN9SX1280HalC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_tP16RadioCallbacks_t+0x74>)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6a3a      	ldr	r2, [r7, #32]
 8001274:	645a      	str	r2, [r3, #68]	; 0x44
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800127a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	64da      	str	r2, [r3, #76]	; 0x4c
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8bba      	ldrh	r2, [r7, #28]
 8001296:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	65da      	str	r2, [r3, #92]	; 0x5c
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	661a      	str	r2, [r3, #96]	; 0x60
{
    RadioSpi = hspi;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	639a      	str	r2, [r3, #56]	; 0x38

    //HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
    //HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_SET);
}
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	0800cb64 	.word	0x0800cb64

080012bc <_ZN9SX1280HalD1Ev>:

SX1280Hal::~SX1280Hal( void )
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	4a05      	ldr	r2, [pc, #20]	; (80012dc <_ZN9SX1280HalD1Ev+0x20>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff97 	bl	8001200 <_ZN6SX1280D1Ev>
{
};
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	0800cb64 	.word	0x0800cb64

080012e0 <_ZN9SX1280HalD0Ev>:
SX1280Hal::~SX1280Hal( void )
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
};
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ffe7 	bl	80012bc <_ZN9SX1280HalD1Ev>
 80012ee:	2164      	movs	r1, #100	; 0x64
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f00b faf9 	bl	800c8e8 <_ZdlPvj>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_ZN9SX1280Hal9IoIrqInitEM6SX1280FvvE>:

void SX1280Hal::IoIrqInit( DioIrqHandler irqHandler )
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	e883 0006 	stmia.w	r3, {r1, r2}
    assert_param( RadioSpi != NULL);
    // BUSY.mode( PullNone );
    //Conexão entre interrupt do HAL e da biblioteca
    //irqHandler é o ponteiro para a função que deve ser chamada em caso de interrupt
    RadioIrqHandler = irqHandler;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	335c      	adds	r3, #92	; 0x5c
 8001312:	1d3a      	adds	r2, r7, #4
 8001314:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001318:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_ZN9SX1280Hal5ResetEv>:

void SX1280Hal::Reset( void )
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	//Por que desliga o IRQ?
	/* Habilitar o delay de outra forma*/
    //__disable_irq( );
    HAL_Delay( 20 );
 8001330:	2014      	movs	r0, #20
 8001332:	f002 f825 	bl	8003380 <HAL_Delay>
    HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_RESET);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	f002 fe82 	bl	800404c <HAL_GPIO_WritePin>
    HAL_Delay( 50 );
 8001348:	2032      	movs	r0, #50	; 0x32
 800134a:	f002 f819 	bl	8003380 <HAL_Delay>
    HAL_GPIO_WritePin(RadioResetPort, RadioResetPin, GPIO_PIN_SET);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001358:	2201      	movs	r2, #1
 800135a:	4619      	mov	r1, r3
 800135c:	f002 fe76 	bl	800404c <HAL_GPIO_WritePin>
    HAL_Delay( 20 );
 8001360:	2014      	movs	r0, #20
 8001362:	f002 f80d 	bl	8003380 <HAL_Delay>
   // __enable_irq( );
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_ZN9SX1280Hal6WakeupEv>:

void SX1280Hal::Wakeup( void )
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001376:	b672      	cpsid	i
}
 8001378:	bf00      	nop
    __disable_irq( );

    //Don't wait for BUSY here

    if( RadioSpi != NULL )
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137e:	2b00      	cmp	r3, #0
 8001380:	d019      	beq.n	80013b6 <_ZN9SX1280Hal6WakeupEv+0x48>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800138c:	2200      	movs	r2, #0
 800138e:	4619      	mov	r1, r3
 8001390:	f002 fe5c 	bl	800404c <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_GET_STATUS );
 8001394:	21c0      	movs	r1, #192	; 0xc0
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fad4 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 800139c:	2100      	movs	r1, #0
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fad0 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ae:	2201      	movs	r2, #1
 80013b0:	4619      	mov	r1, r3
 80013b2:	f002 fe4b 	bl	800404c <HAL_GPIO_WritePin>
    }

    // Wait for chip to be ready.
    WaitOnBusy( );
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80013c0:	4619      	mov	r1, r3
 80013c2:	4610      	mov	r0, r2
 80013c4:	f002 fe2a 	bl	800401c <HAL_GPIO_ReadPin>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	bf14      	ite	ne
 80013ce:	2301      	movne	r3, #1
 80013d0:	2300      	moveq	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d000      	beq.n	80013da <_ZN9SX1280Hal6WakeupEv+0x6c>
 80013d8:	e7ed      	b.n	80013b6 <_ZN9SX1280Hal6WakeupEv+0x48>
  __ASM volatile ("cpsie i" : : : "memory");
 80013da:	b662      	cpsie	i
}
 80013dc:	bf00      	nop

    __enable_irq( );
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht>:

void SX1280Hal::WriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	461a      	mov	r2, r3
 80013f2:	460b      	mov	r3, r1
 80013f4:	72fb      	strb	r3, [r7, #11]
 80013f6:	4613      	mov	r3, r2
 80013f8:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f002 fe08 	bl	800401c <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf14      	ite	ne
 8001412:	2301      	movne	r3, #1
 8001414:	2300      	moveq	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d000      	beq.n	800141e <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x38>
 800141c:	e7ed      	b.n	80013fa <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x14>

    if( RadioSpi != NULL )
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001422:	2b00      	cmp	r3, #0
 8001424:	d028      	beq.n	8001478 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x92>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	f002 fe0a 	bl	800404c <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( ( uint8_t )command );
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	4619      	mov	r1, r3
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 fa81 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 8001442:	2300      	movs	r3, #0
 8001444:	82fb      	strh	r3, [r7, #22]
 8001446:	8afa      	ldrh	r2, [r7, #22]
 8001448:	893b      	ldrh	r3, [r7, #8]
 800144a:	429a      	cmp	r2, r3
 800144c:	d20b      	bcs.n	8001466 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x80>
        {
            SpiTransmitReceiveByte( buffer[i] );
 800144e:	8afb      	ldrh	r3, [r7, #22]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	4619      	mov	r1, r3
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 fa73 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 800145e:	8afb      	ldrh	r3, [r7, #22]
 8001460:	3301      	adds	r3, #1
 8001462:	82fb      	strh	r3, [r7, #22]
 8001464:	e7ef      	b.n	8001446 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x60>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001470:	2201      	movs	r2, #1
 8001472:	4619      	mov	r1, r3
 8001474:	f002 fdea 	bl	800404c <HAL_GPIO_WritePin>
    }

    if( command != RADIO_SET_SLEEP )
 8001478:	7afb      	ldrb	r3, [r7, #11]
 800147a:	2b84      	cmp	r3, #132	; 0x84
 800147c:	d011      	beq.n	80014a2 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0xbc>
    {
        WaitOnBusy( );
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f002 fdc6 	bl	800401c <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	bf14      	ite	ne
 8001496:	2301      	movne	r3, #1
 8001498:	2300      	moveq	r3, #0
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d000      	beq.n	80014a2 <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0xbc>
 80014a0:	e7ed      	b.n	800147e <_ZN9SX1280Hal12WriteCommandE15RadioCommands_uPht+0x98>
    }
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht>:

void SX1280Hal::ReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 80014aa:	b590      	push	{r4, r7, lr}
 80014ac:	b087      	sub	sp, #28
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	461a      	mov	r2, r3
 80014b6:	460b      	mov	r3, r1
 80014b8:	72fb      	strb	r3, [r7, #11]
 80014ba:	4613      	mov	r3, r2
 80014bc:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f002 fda6 	bl	800401c <HAL_GPIO_ReadPin>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bf14      	ite	ne
 80014d6:	2301      	movne	r3, #1
 80014d8:	2300      	moveq	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d000      	beq.n	80014e2 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x38>
 80014e0:	e7ed      	b.n	80014be <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x14>

    if( RadioSpi != NULL )
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d042      	beq.n	8001570 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xc6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	f002 fda8 	bl	800404c <HAL_GPIO_WritePin>
        if( command == RADIO_GET_STATUS )
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	2bc0      	cmp	r3, #192	; 0xc0
 8001500:	d111      	bne.n	8001526 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x7c>
        {
            buffer[0] = SpiTransmitReceiveByte( ( uint8_t )command );
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	4619      	mov	r1, r3
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 fa1c 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	701a      	strb	r2, [r3, #0]
            SpiTransmitReceiveByte( 0 );
 8001514:	2100      	movs	r1, #0
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 fa14 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            SpiTransmitReceiveByte( 0 );
 800151c:	2100      	movs	r1, #0
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 fa10 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 8001524:	e01b      	b.n	800155e <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xb4>
        }
        else
        {
            SpiTransmitReceiveByte( ( uint8_t )command );
 8001526:	7afb      	ldrb	r3, [r7, #11]
 8001528:	4619      	mov	r1, r3
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 fa0a 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            SpiTransmitReceiveByte( 0 );
 8001530:	2100      	movs	r1, #0
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 fa06 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
            for( uint16_t i = 0; i < size; i++ )
 8001538:	2300      	movs	r3, #0
 800153a:	82fb      	strh	r3, [r7, #22]
 800153c:	8afa      	ldrh	r2, [r7, #22]
 800153e:	893b      	ldrh	r3, [r7, #8]
 8001540:	429a      	cmp	r2, r3
 8001542:	d20c      	bcs.n	800155e <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xb4>
            {
                 buffer[i] = SpiTransmitReceiveByte( 0 );
 8001544:	8afb      	ldrh	r3, [r7, #22]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	18d4      	adds	r4, r2, r3
 800154a:	2100      	movs	r1, #0
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f9f9 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 8001552:	4603      	mov	r3, r0
 8001554:	7023      	strb	r3, [r4, #0]
            for( uint16_t i = 0; i < size; i++ )
 8001556:	8afb      	ldrh	r3, [r7, #22]
 8001558:	3301      	adds	r3, #1
 800155a:	82fb      	strh	r3, [r7, #22]
 800155c:	e7ee      	b.n	800153c <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0x92>
            }
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001568:	2201      	movs	r2, #1
 800156a:	4619      	mov	r1, r3
 800156c:	f002 fd6e 	bl	800404c <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800157a:	4619      	mov	r1, r3
 800157c:	4610      	mov	r0, r2
 800157e:	f002 fd4d 	bl	800401c <HAL_GPIO_ReadPin>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf14      	ite	ne
 8001588:	2301      	movne	r3, #1
 800158a:	2300      	moveq	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d000      	beq.n	8001594 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xea>
 8001592:	e7ed      	b.n	8001570 <_ZN9SX1280Hal11ReadCommandE15RadioCommands_uPht+0xc6>
}
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd90      	pop	{r4, r7, pc}

0800159c <_ZN9SX1280Hal13WriteRegisterEtPht>:

void SX1280Hal::WriteRegister( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	461a      	mov	r2, r3
 80015a8:	460b      	mov	r3, r1
 80015aa:	817b      	strh	r3, [r7, #10]
 80015ac:	4613      	mov	r3, r2
 80015ae:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80015ba:	4619      	mov	r1, r3
 80015bc:	4610      	mov	r0, r2
 80015be:	f002 fd2d 	bl	800401c <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf14      	ite	ne
 80015c8:	2301      	movne	r3, #1
 80015ca:	2300      	moveq	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d000      	beq.n	80015d4 <_ZN9SX1280Hal13WriteRegisterEtPht+0x38>
 80015d2:	e7ed      	b.n	80015b0 <_ZN9SX1280Hal13WriteRegisterEtPht+0x14>

    if( RadioSpi != NULL )
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d035      	beq.n	8001648 <_ZN9SX1280Hal13WriteRegisterEtPht+0xac>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	f002 fd2f 	bl	800404c <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_WRITE_REGISTER );
 80015ee:	2118      	movs	r1, #24
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 f9a7 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( ( address & 0xFF00 ) >> 8 );
 80015f6:	897b      	ldrh	r3, [r7, #10]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	4619      	mov	r1, r3
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 f99f 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( address & 0x00FF );
 8001606:	897b      	ldrh	r3, [r7, #10]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 f999 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 8001612:	2300      	movs	r3, #0
 8001614:	82fb      	strh	r3, [r7, #22]
 8001616:	8afa      	ldrh	r2, [r7, #22]
 8001618:	893b      	ldrh	r3, [r7, #8]
 800161a:	429a      	cmp	r2, r3
 800161c:	d20b      	bcs.n	8001636 <_ZN9SX1280Hal13WriteRegisterEtPht+0x9a>
        {
            SpiTransmitReceiveByte( buffer[i] );
 800161e:	8afb      	ldrh	r3, [r7, #22]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4619      	mov	r1, r3
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f000 f98b 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 800162e:	8afb      	ldrh	r3, [r7, #22]
 8001630:	3301      	adds	r3, #1
 8001632:	82fb      	strh	r3, [r7, #22]
 8001634:	e7ef      	b.n	8001616 <_ZN9SX1280Hal13WriteRegisterEtPht+0x7a>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001640:	2201      	movs	r2, #1
 8001642:	4619      	mov	r1, r3
 8001644:	f002 fd02 	bl	800404c <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001652:	4619      	mov	r1, r3
 8001654:	4610      	mov	r0, r2
 8001656:	f002 fce1 	bl	800401c <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d000      	beq.n	800166c <_ZN9SX1280Hal13WriteRegisterEtPht+0xd0>
 800166a:	e7ed      	b.n	8001648 <_ZN9SX1280Hal13WriteRegisterEtPht+0xac>
}
 800166c:	bf00      	nop
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <_ZN9SX1280Hal13WriteRegisterEth>:

void SX1280Hal::WriteRegister( uint16_t address, uint8_t value )
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
    WriteRegister( address, &value, 1 );
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3318      	adds	r3, #24
 800168a:	681c      	ldr	r4, [r3, #0]
 800168c:	1c7a      	adds	r2, r7, #1
 800168e:	8879      	ldrh	r1, [r7, #2]
 8001690:	2301      	movs	r3, #1
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	47a0      	blx	r4
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bd90      	pop	{r4, r7, pc}

0800169e <_ZN9SX1280Hal12ReadRegisterEtPht>:

void SX1280Hal::ReadRegister( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800169e:	b590      	push	{r4, r7, lr}
 80016a0:	b087      	sub	sp, #28
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	461a      	mov	r2, r3
 80016aa:	460b      	mov	r3, r1
 80016ac:	817b      	strh	r3, [r7, #10]
 80016ae:	4613      	mov	r3, r2
 80016b0:	813b      	strh	r3, [r7, #8]
    WaitOnBusy( );
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80016bc:	4619      	mov	r1, r3
 80016be:	4610      	mov	r0, r2
 80016c0:	f002 fcac 	bl	800401c <HAL_GPIO_ReadPin>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bf14      	ite	ne
 80016ca:	2301      	movne	r3, #1
 80016cc:	2300      	moveq	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d000      	beq.n	80016d6 <_ZN9SX1280Hal12ReadRegisterEtPht+0x38>
 80016d4:	e7ed      	b.n	80016b2 <_ZN9SX1280Hal12ReadRegisterEtPht+0x14>

    if( RadioSpi != NULL )
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d03a      	beq.n	8001754 <_ZN9SX1280Hal12ReadRegisterEtPht+0xb6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016e8:	2200      	movs	r2, #0
 80016ea:	4619      	mov	r1, r3
 80016ec:	f002 fcae 	bl	800404c <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_READ_REGISTER );
 80016f0:	2119      	movs	r1, #25
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 f926 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( ( address & 0xFF00 ) >> 8 );
 80016f8:	897b      	ldrh	r3, [r7, #10]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	4619      	mov	r1, r3
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f91e 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( address & 0x00FF );
 8001708:	897b      	ldrh	r3, [r7, #10]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4619      	mov	r1, r3
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f918 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 8001714:	2100      	movs	r1, #0
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f914 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 800171c:	2300      	movs	r3, #0
 800171e:	82fb      	strh	r3, [r7, #22]
 8001720:	8afa      	ldrh	r2, [r7, #22]
 8001722:	893b      	ldrh	r3, [r7, #8]
 8001724:	429a      	cmp	r2, r3
 8001726:	d20c      	bcs.n	8001742 <_ZN9SX1280Hal12ReadRegisterEtPht+0xa4>
        {
            buffer[i] = SpiTransmitReceiveByte( 0 );
 8001728:	8afb      	ldrh	r3, [r7, #22]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	18d4      	adds	r4, r2, r3
 800172e:	2100      	movs	r1, #0
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f907 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 8001736:	4603      	mov	r3, r0
 8001738:	7023      	strb	r3, [r4, #0]
        for( uint16_t i = 0; i < size; i++ )
 800173a:	8afb      	ldrh	r3, [r7, #22]
 800173c:	3301      	adds	r3, #1
 800173e:	82fb      	strh	r3, [r7, #22]
 8001740:	e7ee      	b.n	8001720 <_ZN9SX1280Hal12ReadRegisterEtPht+0x82>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800174c:	2201      	movs	r2, #1
 800174e:	4619      	mov	r1, r3
 8001750:	f002 fc7c 	bl	800404c <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800175e:	4619      	mov	r1, r3
 8001760:	4610      	mov	r0, r2
 8001762:	f002 fc5b 	bl	800401c <HAL_GPIO_ReadPin>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	bf14      	ite	ne
 800176c:	2301      	movne	r3, #1
 800176e:	2300      	moveq	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d000      	beq.n	8001778 <_ZN9SX1280Hal12ReadRegisterEtPht+0xda>
 8001776:	e7ed      	b.n	8001754 <_ZN9SX1280Hal12ReadRegisterEtPht+0xb6>
}
 8001778:	bf00      	nop
 800177a:	371c      	adds	r7, #28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd90      	pop	{r4, r7, pc}

08001780 <_ZN9SX1280Hal12ReadRegisterEt>:

uint8_t SX1280Hal::ReadRegister( uint16_t address )
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
    uint8_t data;

    ReadRegister( address, &data, 1 );
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	3320      	adds	r3, #32
 8001792:	681c      	ldr	r4, [r3, #0]
 8001794:	f107 020f 	add.w	r2, r7, #15
 8001798:	8879      	ldrh	r1, [r7, #2]
 800179a:	2301      	movs	r3, #1
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	47a0      	blx	r4
    return data;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd90      	pop	{r4, r7, pc}

080017aa <_ZN9SX1280Hal11WriteBufferEhPhh>:

void SX1280Hal::WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	461a      	mov	r2, r3
 80017b6:	460b      	mov	r3, r1
 80017b8:	72fb      	strb	r3, [r7, #11]
 80017ba:	4613      	mov	r3, r2
 80017bc:	72bb      	strb	r3, [r7, #10]
    WaitOnBusy( );
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f002 fc26 	bl	800401c <HAL_GPIO_ReadPin>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d000      	beq.n	80017e2 <_ZN9SX1280Hal11WriteBufferEhPhh+0x38>
 80017e0:	e7ed      	b.n	80017be <_ZN9SX1280Hal11WriteBufferEhPhh+0x14>

    if( RadioSpi != NULL )
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d02d      	beq.n	8001846 <_ZN9SX1280Hal11WriteBufferEhPhh+0x9c>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017f4:	2200      	movs	r2, #0
 80017f6:	4619      	mov	r1, r3
 80017f8:	f002 fc28 	bl	800404c <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_WRITE_BUFFER );
 80017fc:	211a      	movs	r1, #26
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f8a0 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( offset );
 8001804:	7afb      	ldrb	r3, [r7, #11]
 8001806:	4619      	mov	r1, r3
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f000 f89b 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 800180e:	2300      	movs	r3, #0
 8001810:	82fb      	strh	r3, [r7, #22]
 8001812:	7abb      	ldrb	r3, [r7, #10]
 8001814:	b29b      	uxth	r3, r3
 8001816:	8afa      	ldrh	r2, [r7, #22]
 8001818:	429a      	cmp	r2, r3
 800181a:	d20b      	bcs.n	8001834 <_ZN9SX1280Hal11WriteBufferEhPhh+0x8a>
        {
            SpiTransmitReceiveByte( buffer[i] );
 800181c:	8afb      	ldrh	r3, [r7, #22]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f88c 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 800182c:	8afb      	ldrh	r3, [r7, #22]
 800182e:	3301      	adds	r3, #1
 8001830:	82fb      	strh	r3, [r7, #22]
 8001832:	e7ee      	b.n	8001812 <_ZN9SX1280Hal11WriteBufferEhPhh+0x68>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800183e:	2201      	movs	r2, #1
 8001840:	4619      	mov	r1, r3
 8001842:	f002 fc03 	bl	800404c <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f002 fbe2 	bl	800401c <HAL_GPIO_ReadPin>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf14      	ite	ne
 800185e:	2301      	movne	r3, #1
 8001860:	2300      	moveq	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d000      	beq.n	800186a <_ZN9SX1280Hal11WriteBufferEhPhh+0xc0>
 8001868:	e7ed      	b.n	8001846 <_ZN9SX1280Hal11WriteBufferEhPhh+0x9c>
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_ZN9SX1280Hal10ReadBufferEhPhh>:

void SX1280Hal::ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001872:	b590      	push	{r4, r7, lr}
 8001874:	b087      	sub	sp, #28
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	461a      	mov	r2, r3
 800187e:	460b      	mov	r3, r1
 8001880:	72fb      	strb	r3, [r7, #11]
 8001882:	4613      	mov	r3, r2
 8001884:	72bb      	strb	r3, [r7, #10]
    WaitOnBusy( );
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f002 fbc2 	bl	800401c <HAL_GPIO_ReadPin>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf14      	ite	ne
 800189e:	2301      	movne	r3, #1
 80018a0:	2300      	moveq	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d000      	beq.n	80018aa <_ZN9SX1280Hal10ReadBufferEhPhh+0x38>
 80018a8:	e7ed      	b.n	8001886 <_ZN9SX1280Hal10ReadBufferEhPhh+0x14>

    if( RadioSpi != NULL )
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d032      	beq.n	8001918 <_ZN9SX1280Hal10ReadBufferEhPhh+0xa6>
    {
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_RESET);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	f002 fbc4 	bl	800404c <HAL_GPIO_WritePin>
        SpiTransmitReceiveByte( RADIO_READ_BUFFER );
 80018c4:	211b      	movs	r1, #27
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 f83c 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( offset );
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	4619      	mov	r1, r3
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f837 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        SpiTransmitReceiveByte( 0 );
 80018d6:	2100      	movs	r1, #0
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f833 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
        for( uint16_t i = 0; i < size; i++ )
 80018de:	2300      	movs	r3, #0
 80018e0:	82fb      	strh	r3, [r7, #22]
 80018e2:	7abb      	ldrb	r3, [r7, #10]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	8afa      	ldrh	r2, [r7, #22]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d20c      	bcs.n	8001906 <_ZN9SX1280Hal10ReadBufferEhPhh+0x94>
        {
            buffer[i] = SpiTransmitReceiveByte( 0 );
 80018ec:	8afb      	ldrh	r3, [r7, #22]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	18d4      	adds	r4, r2, r3
 80018f2:	2100      	movs	r1, #0
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f825 	bl	8001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>
 80018fa:	4603      	mov	r3, r0
 80018fc:	7023      	strb	r3, [r4, #0]
        for( uint16_t i = 0; i < size; i++ )
 80018fe:	8afb      	ldrh	r3, [r7, #22]
 8001900:	3301      	adds	r3, #1
 8001902:	82fb      	strh	r3, [r7, #22]
 8001904:	e7ed      	b.n	80018e2 <_ZN9SX1280Hal10ReadBufferEhPhh+0x70>
        }
        HAL_GPIO_WritePin(RadioNssPort, RadioNssPin, GPIO_PIN_SET);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001910:	2201      	movs	r2, #1
 8001912:	4619      	mov	r1, r3
 8001914:	f002 fb9a 	bl	800404c <HAL_GPIO_WritePin>
    }

    WaitOnBusy( );
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001922:	4619      	mov	r1, r3
 8001924:	4610      	mov	r0, r2
 8001926:	f002 fb79 	bl	800401c <HAL_GPIO_ReadPin>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d000      	beq.n	800193c <_ZN9SX1280Hal10ReadBufferEhPhh+0xca>
 800193a:	e7ed      	b.n	8001918 <_ZN9SX1280Hal10ReadBufferEhPhh+0xa6>
}
 800193c:	bf00      	nop
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}

08001944 <_ZN9SX1280Hal22SpiTransmitReceiveByteEh>:

uint8_t SX1280Hal::SpiTransmitReceiveByte( uint8_t byte )
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af02      	add	r7, sp, #8
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	70fb      	strb	r3, [r7, #3]
	//Se for IT ou DMA a função acaba antes de terminar de transmitir
	uint8_t receivedByte;
	HAL_SPI_TransmitReceive(RadioSpi, &byte, &receivedByte, 1, 100);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001954:	f107 020f 	add.w	r2, r7, #15
 8001958:	1cf9      	adds	r1, r7, #3
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2301      	movs	r3, #1
 8001960:	f005 fa83 	bl	8006e6a <HAL_SPI_TransmitReceive>
	return receivedByte;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_ZN9SX1280Hal20HalInterruptCallbackEv>:

void SX1280Hal::HalInterruptCallback(void){
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	if(RadioIrqHandler != NULL){
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	2b00      	cmp	r3, #0
 800197c:	d107      	bne.n	800198e <_ZN9SX1280Hal20HalInterruptCallbackEv+0x20>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <_ZN9SX1280Hal20HalInterruptCallbackEv+0x20>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x22>
 800198e:	2300      	movs	r3, #0
 8001990:	2b01      	cmp	r3, #1
 8001992:	d019      	beq.n	80019c8 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x5a>
		(this->*RadioIrqHandler)();
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800199a:	1052      	asrs	r2, r2, #1
 800199c:	1899      	adds	r1, r3, r2
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x42>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	e009      	b.n	80019c4 <_ZN9SX1280Hal20HalInterruptCallbackEv+0x56>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80019b6:	1052      	asrs	r2, r2, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019c0:	4413      	add	r3, r2
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4608      	mov	r0, r1
 80019c6:	4798      	blx	r3
	}
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_ZN6SX12804InitEv>:
 * \brief Radio hardware registers initialization
 */
const RadioRegisters_t RadioRegsInit[] = RADIO_INIT_REGISTERS_VALUE;

void SX1280::Init( void )
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    Reset( );
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3308      	adds	r3, #8
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	4798      	blx	r3
    IoIrqInit( dioIrq );
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3334      	adds	r3, #52	; 0x34
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	322c      	adds	r2, #44	; 0x2c
 80019f0:	ca06      	ldmia	r2, {r1, r2}
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	4798      	blx	r3
    Wakeup( );
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3338      	adds	r3, #56	; 0x38
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3
    SetRegistersDefault( );
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f804 	bl	8001a10 <_ZN6SX128019SetRegistersDefaultEv>
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_ZN6SX128019SetRegistersDefaultEv>:

void SX1280::SetRegistersDefault( void )
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    for( int16_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8001a18:	2300      	movs	r3, #0
 8001a1a:	81fb      	strh	r3, [r7, #14]
    {
        WriteRegister( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    }
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_ZN6SX128018GetFirmwareVersionEv>:

uint16_t SX1280::GetFirmwareVersion( void )
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
    return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3324      	adds	r3, #36	; 0x24
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f240 1153 	movw	r1, #339	; 0x153
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	4798      	blx	r3
 8001a40:	4603      	mov	r3, r0
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	b21c      	sxth	r4, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	3324      	adds	r3, #36	; 0x24
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	4798      	blx	r3
 8001a56:	4603      	mov	r3, r0
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	4323      	orrs	r3, r4
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	b29b      	uxth	r3, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd90      	pop	{r4, r7, pc}

08001a68 <_ZN6SX12809GetStatusEv>:

RadioStatus_t SX1280::GetStatus( void )
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    uint8_t stat = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
    RadioStatus_t status;

    ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3314      	adds	r3, #20
 8001a7a:	681c      	ldr	r4, [r3, #0]
 8001a7c:	f107 020f 	add.w	r2, r7, #15
 8001a80:	2301      	movs	r3, #1
 8001a82:	21c0      	movs	r1, #192	; 0xc0
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	47a0      	blx	r4
    status.Value = stat;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	733b      	strb	r3, [r7, #12]
    return( status );
 8001a8c:	7b3b      	ldrb	r3, [r7, #12]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd90      	pop	{r4, r7, pc}

08001a96 <_ZN6SX12809GetOpModeEv>:

RadioOperatingModes_t SX1280::GetOpMode( void )
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
    return( OperatingMode );
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t>:
    OperatingMode = MODE_SLEEP;
    WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
}

void SX1280::SetStandby( RadioStandbyModes_t standbyConfig )
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
    WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3310      	adds	r3, #16
 8001ac2:	681c      	ldr	r4, [r3, #0]
 8001ac4:	1cfa      	adds	r2, r7, #3
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	47a0      	blx	r4
    if( standbyConfig == STDBY_RC )
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d104      	bne.n	8001ade <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x2e>
    {
        OperatingMode = MODE_STDBY_RC;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8001adc:	e003      	b.n	8001ae6 <_ZN6SX128010SetStandbyE19RadioStandbyModes_t+0x36>
        OperatingMode = MODE_STDBY_XOSC;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd90      	pop	{r4, r7, pc}

08001aee <_ZN6SX12805SetTxE10TickTime_s>:
    WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SX1280::SetTx( TickTime_t timeout )
{
 8001aee:	b590      	push	{r4, r7, lr}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    buf[0] = timeout.PeriodBase;
 8001af8:	783b      	ldrb	r3, [r7, #0]
 8001afa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	73bb      	strb	r3, [r7, #14]

    ClearIrqStatus( IRQ_RADIO_ALL );
 8001b0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fad0 	bl	80020b6 <_ZN6SX128014ClearIrqStatusEt>

    // If the radio is doing ranging operations, then apply the specific calls
    // prior to SetTx
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
 8001b16:	2101      	movs	r1, #1
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f86b 	bl	8001bf4 <_ZN6SX128013GetPacketTypeEb>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <_ZN6SX12805SetTxE10TickTime_s+0x48>
    {
        SetRangingRole( RADIO_RANGING_ROLE_MASTER );
 8001b2e:	2101      	movs	r1, #1
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fb41 	bl	80021b8 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    }
    WriteCommand( RADIO_SET_TX, buf, 3 );
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3310      	adds	r3, #16
 8001b3c:	681c      	ldr	r4, [r3, #0]
 8001b3e:	f107 020c 	add.w	r2, r7, #12
 8001b42:	2303      	movs	r3, #3
 8001b44:	2183      	movs	r1, #131	; 0x83
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	47a0      	blx	r4
    OperatingMode = MODE_TX;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2206      	movs	r2, #6
 8001b4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd90      	pop	{r4, r7, pc}

08001b5a <_ZN6SX12805SetRxE10TickTime_s>:

void SX1280::SetRx( TickTime_t timeout )
{
 8001b5a:	b590      	push	{r4, r7, lr}
 8001b5c:	b085      	sub	sp, #20
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    buf[0] = timeout.PeriodBase;
 8001b64:	783b      	ldrb	r3, [r7, #0]
 8001b66:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	73bb      	strb	r3, [r7, #14]

    ClearIrqStatus( IRQ_RADIO_ALL );
 8001b78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 fa9a 	bl	80020b6 <_ZN6SX128014ClearIrqStatusEt>

    // If the radio is doing ranging operations, then apply the specific calls
    // prior to SetRx
    if( GetPacketType( true ) == PACKET_TYPE_RANGING )
 8001b82:	2101      	movs	r1, #1
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f835 	bl	8001bf4 <_ZN6SX128013GetPacketTypeEb>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <_ZN6SX12805SetRxE10TickTime_s+0x48>
    {
        SetRangingRole( RADIO_RANGING_ROLE_SLAVE );
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 fb0b 	bl	80021b8 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>
    }
    WriteCommand( RADIO_SET_RX, buf, 3 );
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3310      	adds	r3, #16
 8001ba8:	681c      	ldr	r4, [r3, #0]
 8001baa:	f107 020c 	add.w	r2, r7, #12
 8001bae:	2303      	movs	r3, #3
 8001bb0:	2182      	movs	r1, #130	; 0x82
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	47a0      	blx	r4
    OperatingMode = MODE_RX;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2205      	movs	r2, #5
 8001bba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd90      	pop	{r4, r7, pc}

08001bc6 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>:
{
    WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX1280::SetPacketType( RadioPacketTypes_t packetType )
{
 8001bc6:	b590      	push	{r4, r7, lr}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	70fb      	strb	r3, [r7, #3]
    // Save packet type internally to avoid questioning the radio
    this->PacketType = packetType;
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3310      	adds	r3, #16
 8001be0:	681c      	ldr	r4, [r3, #0]
 8001be2:	1cfa      	adds	r2, r7, #3
 8001be4:	2301      	movs	r3, #1
 8001be6:	218a      	movs	r1, #138	; 0x8a
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	47a0      	blx	r4
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd90      	pop	{r4, r7, pc}

08001bf4 <_ZN6SX128013GetPacketTypeEb>:

RadioPacketTypes_t SX1280::GetPacketType( bool returnLocalCopy )
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
    RadioPacketTypes_t packetType = PACKET_TYPE_NONE;
 8001c00:	230f      	movs	r3, #15
 8001c02:	73fb      	strb	r3, [r7, #15]
    if( returnLocalCopy == false )
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d114      	bne.n	8001c34 <_ZN6SX128013GetPacketTypeEb+0x40>
    {
        ReadCommand( RADIO_GET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	3314      	adds	r3, #20
 8001c10:	681c      	ldr	r4, [r3, #0]
 8001c12:	f107 020f 	add.w	r2, r7, #15
 8001c16:	2301      	movs	r3, #1
 8001c18:	2103      	movs	r1, #3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	47a0      	blx	r4
        if( this->PacketType != packetType )
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d008      	beq.n	8001c3c <_ZN6SX128013GetPacketTypeEb+0x48>
        {
            this->PacketType = packetType;
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001c32:	e003      	b.n	8001c3c <_ZN6SX128013GetPacketTypeEb+0x48>
        }
    }
    else
    {
        packetType = this->PacketType;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c3a:	73fb      	strb	r3, [r7, #15]
    }
    return packetType;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}
	...

08001c48 <_ZN6SX128014SetRfFrequencyEm>:

void SX1280::SetRfFrequency( uint32_t rfFrequency )
{
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];
    uint32_t freq = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]

    freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
 8001c56:	6838      	ldr	r0, [r7, #0]
 8001c58:	f7fe fbf8 	bl	800044c <__aeabi_ui2d>
 8001c5c:	a312      	add	r3, pc, #72	; (adr r3, 8001ca8 <_ZN6SX128014SetRfFrequencyEm+0x60>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	f7fe fd97 	bl	8000794 <__aeabi_ddiv>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe fe79 	bl	8000964 <__aeabi_d2uiz>
 8001c72:	4603      	mov	r3, r0
 8001c74:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	0c1b      	lsrs	r3, r3, #16
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( freq & 0xFF );
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	72bb      	strb	r3, [r7, #10]
    WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3310      	adds	r3, #16
 8001c92:	681c      	ldr	r4, [r3, #0]
 8001c94:	f107 0208 	add.w	r2, r7, #8
 8001c98:	2303      	movs	r3, #3
 8001c9a:	2186      	movs	r1, #134	; 0x86
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	47a0      	blx	r4
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	4068cba8 	.word	0x4068cba8

08001cb0 <_ZN6SX128011SetTxParamsEa16RadioRampTimes_t>:

void SX1280::SetTxParams( int8_t power, RadioRampTimes_t rampTime )
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	70fb      	strb	r3, [r7, #3]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[2];

    // The power value to send on SPI/UART is in the range [0..31] and the
    // physical output power is in the range [-18..13]dBm
    buf[0] = power + 18;
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	3312      	adds	r3, #18
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8001cc8:	78bb      	ldrb	r3, [r7, #2]
 8001cca:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	3310      	adds	r3, #16
 8001cd2:	681c      	ldr	r4, [r3, #0]
 8001cd4:	f107 020c 	add.w	r2, r7, #12
 8001cd8:	2302      	movs	r3, #2
 8001cda:	218e      	movs	r1, #142	; 0x8e
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	47a0      	blx	r4
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd90      	pop	{r4, r7, pc}

08001ce8 <_ZN6SX128022SetBufferBaseAddressesEhh>:
    WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
    OperatingMode = MODE_CAD;
}

void SX1280::SetBufferBaseAddresses( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	70fb      	strb	r3, [r7, #3]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	70bb      	strb	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8001cfc:	78bb      	ldrb	r3, [r7, #2]
 8001cfe:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3310      	adds	r3, #16
 8001d06:	681c      	ldr	r4, [r3, #0]
 8001d08:	f107 020c 	add.w	r2, r7, #12
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	218f      	movs	r1, #143	; 0x8f
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	47a0      	blx	r4
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd90      	pop	{r4, r7, pc}

08001d1c <_ZN6SX128019SetModulationParamsEP18ModulationParams_t>:

void SX1280::SetModulationParams( ModulationParams_t *modParams )
{
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
    uint8_t buf[3];

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != modParams->PacketType )
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d005      	beq.n	8001d40 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x24>
    {
        this->SetPacketType( modParams->PacketType );
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ff43 	bl	8001bc6 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( modParams->PacketType )
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d857      	bhi.n	8001df8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
 8001d48:	a201      	add	r2, pc, #4	; (adr r2, 8001d50 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0x34>)
 8001d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4e:	bf00      	nop
 8001d50:	08001d91 	.word	0x08001d91
 8001d54:	08001da5 	.word	0x08001da5
 8001d58:	08001da5 	.word	0x08001da5
 8001d5c:	08001dc3 	.word	0x08001dc3
 8001d60:	08001dd7 	.word	0x08001dd7
 8001d64:	08001df9 	.word	0x08001df9
 8001d68:	08001df9 	.word	0x08001df9
 8001d6c:	08001df9 	.word	0x08001df9
 8001d70:	08001df9 	.word	0x08001df9
 8001d74:	08001df9 	.word	0x08001df9
 8001d78:	08001df9 	.word	0x08001df9
 8001d7c:	08001df9 	.word	0x08001df9
 8001d80:	08001df9 	.word	0x08001df9
 8001d84:	08001df9 	.word	0x08001df9
 8001d88:	08001df9 	.word	0x08001df9
 8001d8c:	08001deb 	.word	0x08001deb
    {
        case PACKET_TYPE_GFSK:
            buf[0] = modParams->Params.Gfsk.BitrateBandwidth;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	785b      	ldrb	r3, [r3, #1]
 8001d94:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Gfsk.ModulationIndex;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	789b      	ldrb	r3, [r3, #2]
 8001d9a:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Gfsk.ModulationShaping;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	78db      	ldrb	r3, [r3, #3]
 8001da0:	73bb      	strb	r3, [r7, #14]
            break;
 8001da2:	e029      	b.n	8001df8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_LORA:
        case PACKET_TYPE_RANGING:
            buf[0] = modParams->Params.LoRa.SpreadingFactor;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	791b      	ldrb	r3, [r3, #4]
 8001da8:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.LoRa.Bandwidth;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	795b      	ldrb	r3, [r3, #5]
 8001dae:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.LoRa.CodingRate;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	799b      	ldrb	r3, [r3, #6]
 8001db4:	73bb      	strb	r3, [r7, #14]
            this->LoRaBandwidth = modParams->Params.LoRa.Bandwidth;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	795a      	ldrb	r2, [r3, #5]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            break;
 8001dc0:	e01a      	b.n	8001df8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_FLRC:
            buf[0] = modParams->Params.Flrc.BitrateBandwidth;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	79db      	ldrb	r3, [r3, #7]
 8001dc6:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Flrc.CodingRate;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	7a1b      	ldrb	r3, [r3, #8]
 8001dcc:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Flrc.ModulationShaping;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	7a5b      	ldrb	r3, [r3, #9]
 8001dd2:	73bb      	strb	r3, [r7, #14]
            break;
 8001dd4:	e010      	b.n	8001df8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_BLE:
            buf[0] = modParams->Params.Ble.BitrateBandwidth;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	7a9b      	ldrb	r3, [r3, #10]
 8001dda:	733b      	strb	r3, [r7, #12]
            buf[1] = modParams->Params.Ble.ModulationIndex;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	7adb      	ldrb	r3, [r3, #11]
 8001de0:	737b      	strb	r3, [r7, #13]
            buf[2] = modParams->Params.Ble.ModulationShaping;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	7b1b      	ldrb	r3, [r3, #12]
 8001de6:	73bb      	strb	r3, [r7, #14]
            break;
 8001de8:	e006      	b.n	8001df8 <_ZN6SX128019SetModulationParamsEP18ModulationParams_t+0xdc>
        case PACKET_TYPE_NONE:
            buf[0] = NULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	733b      	strb	r3, [r7, #12]
            buf[1] = NULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	737b      	strb	r3, [r7, #13]
            buf[2] = NULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73bb      	strb	r3, [r7, #14]
            break;
 8001df6:	bf00      	nop
    }
    WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3310      	adds	r3, #16
 8001dfe:	681c      	ldr	r4, [r3, #0]
 8001e00:	f107 020c 	add.w	r2, r7, #12
 8001e04:	2303      	movs	r3, #3
 8001e06:	218b      	movs	r1, #139	; 0x8b
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	47a0      	blx	r4
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd90      	pop	{r4, r7, pc}

08001e14 <_ZN6SX128015SetPacketParamsEP14PacketParams_t>:

void SX1280::SetPacketParams( PacketParams_t *packetParams )
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
    uint8_t buf[7];
    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( this->PacketType != packetParams->PacketType )
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d005      	beq.n	8001e38 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x24>
    {
        this->SetPacketType( packetParams->PacketType );
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fec7 	bl	8001bc6 <_ZN6SX128013SetPacketTypeE18RadioPacketTypes_t>
    }

    switch( packetParams->PacketType )
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	f200 8085 	bhi.w	8001f4c <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
 8001e42:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x34>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001e89 	.word	0x08001e89
 8001e4c:	08001eb5 	.word	0x08001eb5
 8001e50:	08001eb5 	.word	0x08001eb5
 8001e54:	08001edd 	.word	0x08001edd
 8001e58:	08001f09 	.word	0x08001f09
 8001e5c:	08001f4d 	.word	0x08001f4d
 8001e60:	08001f4d 	.word	0x08001f4d
 8001e64:	08001f4d 	.word	0x08001f4d
 8001e68:	08001f4d 	.word	0x08001f4d
 8001e6c:	08001f4d 	.word	0x08001f4d
 8001e70:	08001f4d 	.word	0x08001f4d
 8001e74:	08001f4d 	.word	0x08001f4d
 8001e78:	08001f4d 	.word	0x08001f4d
 8001e7c:	08001f4d 	.word	0x08001f4d
 8001e80:	08001f4d 	.word	0x08001f4d
 8001e84:	08001f2f 	.word	0x08001f2f
    {
        case PACKET_TYPE_GFSK:
            buf[0] = packetParams->Params.Gfsk.PreambleLength;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	785b      	ldrb	r3, [r3, #1]
 8001e8c:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Gfsk.SyncWordLength;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	789b      	ldrb	r3, [r3, #2]
 8001e92:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Gfsk.SyncWordMatch;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	78db      	ldrb	r3, [r3, #3]
 8001e98:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Gfsk.HeaderType;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	791b      	ldrb	r3, [r3, #4]
 8001e9e:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.Gfsk.PayloadLength;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	795b      	ldrb	r3, [r3, #5]
 8001ea4:	733b      	strb	r3, [r7, #12]
            buf[5] = packetParams->Params.Gfsk.CrcLength;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	799b      	ldrb	r3, [r3, #6]
 8001eaa:	737b      	strb	r3, [r7, #13]
            buf[6] = packetParams->Params.Gfsk.Whitening;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	79db      	ldrb	r3, [r3, #7]
 8001eb0:	73bb      	strb	r3, [r7, #14]
            break;
 8001eb2:	e04b      	b.n	8001f4c <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_LORA:
        case PACKET_TYPE_RANGING:
            buf[0] = packetParams->Params.LoRa.PreambleLength;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	7a1b      	ldrb	r3, [r3, #8]
 8001eb8:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.LoRa.HeaderType;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	7a5b      	ldrb	r3, [r3, #9]
 8001ebe:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.LoRa.PayloadLength;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	7a9b      	ldrb	r3, [r3, #10]
 8001ec4:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.LoRa.Crc;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	7adb      	ldrb	r3, [r3, #11]
 8001eca:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.LoRa.InvertIQ;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	7b1b      	ldrb	r3, [r3, #12]
 8001ed0:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73bb      	strb	r3, [r7, #14]
            break;
 8001eda:	e037      	b.n	8001f4c <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_FLRC:
            buf[0] = packetParams->Params.Flrc.PreambleLength;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	7b5b      	ldrb	r3, [r3, #13]
 8001ee0:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Flrc.SyncWordLength;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	7b9b      	ldrb	r3, [r3, #14]
 8001ee6:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Flrc.SyncWordMatch;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	7bdb      	ldrb	r3, [r3, #15]
 8001eec:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Flrc.HeaderType;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	7c1b      	ldrb	r3, [r3, #16]
 8001ef2:	72fb      	strb	r3, [r7, #11]
            buf[4] = packetParams->Params.Flrc.PayloadLength;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	7c5b      	ldrb	r3, [r3, #17]
 8001ef8:	733b      	strb	r3, [r7, #12]
            buf[5] = packetParams->Params.Flrc.CrcLength;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	7c9b      	ldrb	r3, [r3, #18]
 8001efe:	737b      	strb	r3, [r7, #13]
            buf[6] = packetParams->Params.Flrc.Whitening;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	7cdb      	ldrb	r3, [r3, #19]
 8001f04:	73bb      	strb	r3, [r7, #14]
            break;
 8001f06:	e021      	b.n	8001f4c <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_BLE:
            buf[0] = packetParams->Params.Ble.ConnectionState;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	7d1b      	ldrb	r3, [r3, #20]
 8001f0c:	723b      	strb	r3, [r7, #8]
            buf[1] = packetParams->Params.Ble.CrcLength;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	7d5b      	ldrb	r3, [r3, #21]
 8001f12:	727b      	strb	r3, [r7, #9]
            buf[2] = packetParams->Params.Ble.BleTestPayload;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	7d9b      	ldrb	r3, [r3, #22]
 8001f18:	72bb      	strb	r3, [r7, #10]
            buf[3] = packetParams->Params.Ble.Whitening;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	7ddb      	ldrb	r3, [r3, #23]
 8001f1e:	72fb      	strb	r3, [r7, #11]
            buf[4] = NULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73bb      	strb	r3, [r7, #14]
            break;
 8001f2c:	e00e      	b.n	8001f4c <_ZN6SX128015SetPacketParamsEP14PacketParams_t+0x138>
        case PACKET_TYPE_NONE:
            buf[0] = NULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	723b      	strb	r3, [r7, #8]
            buf[1] = NULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	727b      	strb	r3, [r7, #9]
            buf[2] = NULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	72bb      	strb	r3, [r7, #10]
            buf[3] = NULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	72fb      	strb	r3, [r7, #11]
            buf[4] = NULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	733b      	strb	r3, [r7, #12]
            buf[5] = NULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	737b      	strb	r3, [r7, #13]
            buf[6] = NULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73bb      	strb	r3, [r7, #14]
            break;
 8001f4a:	bf00      	nop
    }
    WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3310      	adds	r3, #16
 8001f52:	681c      	ldr	r4, [r3, #0]
 8001f54:	f107 0208 	add.w	r2, r7, #8
 8001f58:	2307      	movs	r3, #7
 8001f5a:	218c      	movs	r1, #140	; 0x8c
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	47a0      	blx	r4
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd90      	pop	{r4, r7, pc}

08001f68 <_ZN6SX128017GetRxBufferStatusEPhS0_>:
{
    this->WriteRegister( REG_LR_PREAMBLELENGTH, ( this->ReadRegister( REG_LR_PREAMBLELENGTH ) & MASK_FORCE_PREAMBLELENGTH ) | preambleLength );
}

void SX1280::GetRxBufferStatus( uint8_t *rxPayloadLength, uint8_t *rxStartBufferPointer )
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
    uint8_t status[2];

    ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	3314      	adds	r3, #20
 8001f7a:	681c      	ldr	r4, [r3, #0]
 8001f7c:	f107 0214 	add.w	r2, r7, #20
 8001f80:	2302      	movs	r3, #2
 8001f82:	2117      	movs	r1, #23
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	47a0      	blx	r4

    // In case of LORA fixed header, the rxPayloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( this -> GetPacketType( true ) == PACKET_TYPE_LORA ) && ( ReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 8001f88:	2101      	movs	r1, #1
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff fe32 	bl	8001bf4 <_ZN6SX128013GetPacketTypeEb>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d10e      	bne.n	8001fb4 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4c>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3324      	adds	r3, #36	; 0x24
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f640 1103 	movw	r1, #2307	; 0x903
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	4798      	blx	r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	09db      	lsrs	r3, r3, #7
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4c>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x4e>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00c      	beq.n	8001fd4 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x6c>
    {
        *rxPayloadLength = ReadRegister( REG_LR_PAYLOADLENGTH );
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	3324      	adds	r3, #36	; 0x24
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f640 1101 	movw	r1, #2305	; 0x901
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	4798      	blx	r3
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	701a      	strb	r2, [r3, #0]
 8001fd2:	e014      	b.n	8001ffe <_ZN6SX128017GetRxBufferStatusEPhS0_+0x96>
    }
    else if( this -> GetPacketType( true ) == PACKET_TYPE_BLE )
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7ff fe0c 	bl	8001bf4 <_ZN6SX128013GetPacketTypeEb>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	2300      	movne	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <_ZN6SX128017GetRxBufferStatusEPhS0_+0x90>
    {
        // In the case of BLE, the size returned in status[0] do not include the 2-byte length PDU header
        // so it is added there
        *rxPayloadLength = status[0] + 2;
 8001fec:	7d3b      	ldrb	r3, [r7, #20]
 8001fee:	3302      	adds	r3, #2
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	701a      	strb	r2, [r3, #0]
 8001ff6:	e002      	b.n	8001ffe <_ZN6SX128017GetRxBufferStatusEPhS0_+0x96>
    }
    else
    {
        *rxPayloadLength = status[0];
 8001ff8:	7d3a      	ldrb	r2, [r7, #20]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	701a      	strb	r2, [r3, #0]
    }

    *rxStartBufferPointer = status[1];
 8001ffe:	7d7a      	ldrb	r2, [r7, #21]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	701a      	strb	r2, [r3, #0]
}
 8002004:	bf00      	nop
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd90      	pop	{r4, r7, pc}

0800200c <_ZN6SX128015SetDioIrqParamsEtttt>:

    return ( int8_t ) ( -raw / 2 );
}

void SX1280::SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	4608      	mov	r0, r1
 8002016:	4611      	mov	r1, r2
 8002018:	461a      	mov	r2, r3
 800201a:	4603      	mov	r3, r0
 800201c:	817b      	strh	r3, [r7, #10]
 800201e:	460b      	mov	r3, r1
 8002020:	813b      	strh	r3, [r7, #8]
 8002022:	4613      	mov	r3, r2
 8002024:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8002026:	897b      	ldrh	r3, [r7, #10]
 8002028:	0a1b      	lsrs	r3, r3, #8
 800202a:	b29b      	uxth	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	743b      	strb	r3, [r7, #16]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8002030:	897b      	ldrh	r3, [r7, #10]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	747b      	strb	r3, [r7, #17]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8002036:	893b      	ldrh	r3, [r7, #8]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	b29b      	uxth	r3, r3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	74bb      	strb	r3, [r7, #18]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8002040:	893b      	ldrh	r3, [r7, #8]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	74fb      	strb	r3, [r7, #19]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	b29b      	uxth	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	753b      	strb	r3, [r7, #20]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	757b      	strb	r3, [r7, #21]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8002056:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	b29b      	uxth	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	75bb      	strb	r3, [r7, #22]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8002060:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002062:	b2db      	uxtb	r3, r3
 8002064:	75fb      	strb	r3, [r7, #23]
    WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	3310      	adds	r3, #16
 800206c:	681c      	ldr	r4, [r3, #0]
 800206e:	f107 0210 	add.w	r2, r7, #16
 8002072:	2308      	movs	r3, #8
 8002074:	218d      	movs	r1, #141	; 0x8d
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	47a0      	blx	r4
}
 800207a:	bf00      	nop
 800207c:	371c      	adds	r7, #28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd90      	pop	{r4, r7, pc}

08002082 <_ZN6SX128012GetIrqStatusEv>:

uint16_t SX1280::GetIrqStatus( void )
{
 8002082:	b590      	push	{r4, r7, lr}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
    uint8_t irqStatus[2];
    ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3314      	adds	r3, #20
 8002090:	681c      	ldr	r4, [r3, #0]
 8002092:	f107 020c 	add.w	r2, r7, #12
 8002096:	2302      	movs	r3, #2
 8002098:	2115      	movs	r1, #21
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	47a0      	blx	r4
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 800209e:	7b3b      	ldrb	r3, [r7, #12]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	7b7b      	ldrb	r3, [r7, #13]
 80020a6:	b21b      	sxth	r3, r3
 80020a8:	4313      	orrs	r3, r2
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	b29b      	uxth	r3, r3
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd90      	pop	{r4, r7, pc}

080020b6 <_ZN6SX128014ClearIrqStatusEt>:

void SX1280::ClearIrqStatus( uint16_t irqMask )
{
 80020b6:	b590      	push	{r4, r7, lr}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
 80020c2:	887b      	ldrh	r3, [r7, #2]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	737b      	strb	r3, [r7, #13]
    WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3310      	adds	r3, #16
 80020d8:	681c      	ldr	r4, [r3, #0]
 80020da:	f107 020c 	add.w	r2, r7, #12
 80020de:	2302      	movs	r3, #2
 80020e0:	2197      	movs	r1, #151	; 0x97
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	47a0      	blx	r4
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}

080020ee <_ZN6SX128016SetRegulatorModeE21RadioRegulatorModes_t>:
                  ( calibParam.RC64KEnable );
    WriteCommand( RADIO_CALIBRATE, &cal, 1 );
}

void SX1280::SetRegulatorMode( RadioRegulatorModes_t mode )
{
 80020ee:	b590      	push	{r4, r7, lr}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	70fb      	strb	r3, [r7, #3]
    WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3310      	adds	r3, #16
 8002100:	681c      	ldr	r4, [r3, #0]
 8002102:	1cfa      	adds	r2, r7, #3
 8002104:	2301      	movs	r3, #1
 8002106:	2196      	movs	r1, #150	; 0x96
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	47a0      	blx	r4
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}

08002114 <_ZN6SX128010SetPayloadEPhhh>:
{
    WriteCommand( RADIO_SET_LONGPREAMBLE, ( uint8_t * )&enable, 1 );
}

void SX1280::SetPayload( uint8_t *buffer, uint8_t size, uint8_t offset )
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	4611      	mov	r1, r2
 8002120:	461a      	mov	r2, r3
 8002122:	460b      	mov	r3, r1
 8002124:	71fb      	strb	r3, [r7, #7]
 8002126:	4613      	mov	r3, r2
 8002128:	71bb      	strb	r3, [r7, #6]
    WriteBuffer( offset, buffer, size );
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3328      	adds	r3, #40	; 0x28
 8002130:	681c      	ldr	r4, [r3, #0]
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	79b9      	ldrb	r1, [r7, #6]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	47a0      	blx	r4
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bd90      	pop	{r4, r7, pc}

08002144 <_ZN6SX128010GetPayloadEPhS0_h>:

uint8_t SX1280::GetPayload( uint8_t *buffer, uint8_t *size , uint8_t maxSize )
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	70fb      	strb	r3, [r7, #3]
    uint8_t offset;

    GetRxBufferStatus( size, &offset );
 8002152:	f107 0317 	add.w	r3, r7, #23
 8002156:	461a      	mov	r2, r3
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f7ff ff04 	bl	8001f68 <_ZN6SX128017GetRxBufferStatusEPhS0_>
    if( *size > maxSize )
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	429a      	cmp	r2, r3
 8002168:	d201      	bcs.n	800216e <_ZN6SX128010GetPayloadEPhS0_h+0x2a>
    {
        return 1;
 800216a:	2301      	movs	r3, #1
 800216c:	e00a      	b.n	8002184 <_ZN6SX128010GetPayloadEPhS0_h+0x40>
    }
    ReadBuffer( offset, buffer, *size );
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	332c      	adds	r3, #44	; 0x2c
 8002174:	681c      	ldr	r4, [r3, #0]
 8002176:	7df9      	ldrb	r1, [r7, #23]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	47a0      	blx	r4
    return 0;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd90      	pop	{r4, r7, pc}

0800218c <_ZN6SX128011SendPayloadEPhh10TickTime_sh>:

void SX1280::SendPayload( uint8_t *payload, uint8_t size, TickTime_t timeout, uint8_t offset )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	71fb      	strb	r3, [r7, #7]
    SetPayload( payload, size, offset );
 800219c:	7e3b      	ldrb	r3, [r7, #24]
 800219e:	79fa      	ldrb	r2, [r7, #7]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff ffb6 	bl	8002114 <_ZN6SX128010SetPayloadEPhhh>
    SetTx( timeout );
 80021a8:	6839      	ldr	r1, [r7, #0]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7ff fc9f 	bl	8001aee <_ZN6SX12805SetTxE10TickTime_s>
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_ZN6SX128014SetRangingRoleE19RadioRangingRoles_t>:
    // Silently set 8 as minimum value
    WriteRegister( REG_LR_RANGINGFILTERWINDOWSIZE, ( num < DEFAULT_RANGING_FILTER_SIZE ) ? DEFAULT_RANGING_FILTER_SIZE : num );
}

void SX1280::SetRangingRole( RadioRangingRoles_t role )
{
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[1];

    buf[0] = role;
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	733b      	strb	r3, [r7, #12]
    WriteCommand( RADIO_SET_RANGING_ROLE, &buf[0], 1 );
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3310      	adds	r3, #16
 80021ce:	681c      	ldr	r4, [r3, #0]
 80021d0:	f107 020c 	add.w	r2, r7, #12
 80021d4:	2301      	movs	r3, #1
 80021d6:	21a3      	movs	r1, #163	; 0xa3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	47a0      	blx	r4
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd90      	pop	{r4, r7, pc}

080021e4 <_ZN6SX12808OnDioIrqEv>:
{
    this->PollingMode = false;
}

void SX1280::OnDioIrq( void )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
    /*
     * When polling mode is activated, it is up to the application to call
     * ProcessIrqs( ). Otherwise, the driver automatically calls ProcessIrqs( )
     * on radio interrupt.
     */
    if( this->PollingMode == true )
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d104      	bne.n	8002200 <_ZN6SX12808OnDioIrqEv+0x1c>
    {
        this->IrqState = true;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    }
    else
    {
        this->ProcessIrqs( );
    }
}
 80021fe:	e002      	b.n	8002206 <_ZN6SX12808OnDioIrqEv+0x22>
        this->ProcessIrqs( );
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f805 	bl	8002210 <_ZN6SX128011ProcessIrqsEv>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <_ZN6SX128011ProcessIrqsEv>:

void SX1280::ProcessIrqs( void )
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
    RadioPacketTypes_t packetType = PACKET_TYPE_NONE;
 8002218:	230f      	movs	r3, #15
 800221a:	73fb      	strb	r3, [r7, #15]

    if( this->PollingMode == true )
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002222:	2b01      	cmp	r3, #1
 8002224:	d10d      	bne.n	8002242 <_ZN6SX128011ProcessIrqsEv+0x32>
    {
        if( this->IrqState == true )
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800222c:	2b01      	cmp	r3, #1
 800222e:	f040 81c1 	bne.w	80025b4 <_ZN6SX128011ProcessIrqsEv+0x3a4>
  __ASM volatile ("cpsid i" : : : "memory");
 8002232:	b672      	cpsid	i
}
 8002234:	bf00      	nop
        {
            __disable_irq( );
            this->IrqState = false;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  __ASM volatile ("cpsie i" : : : "memory");
 800223e:	b662      	cpsie	i
}
 8002240:	bf00      	nop
        {
            return;
        }
    }

    packetType = GetPacketType( true );
 8002242:	2101      	movs	r1, #1
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff fcd5 	bl	8001bf4 <_ZN6SX128013GetPacketTypeEb>
 800224a:	4603      	mov	r3, r0
 800224c:	73fb      	strb	r3, [r7, #15]
    uint16_t irqRegs = GetIrqStatus( );
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ff17 	bl	8002082 <_ZN6SX128012GetIrqStatusEv>
 8002254:	4603      	mov	r3, r0
 8002256:	81bb      	strh	r3, [r7, #12]
    ClearIrqStatus( IRQ_RADIO_ALL );
 8002258:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff2a 	bl	80020b6 <_ZN6SX128014ClearIrqStatusEt>
    }
    TEST_PIN_1 = 0;
    TEST_PIN_2 = 0;
#endif

    switch( packetType )
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	2b04      	cmp	r3, #4
 8002266:	f200 81a7 	bhi.w	80025b8 <_ZN6SX128011ProcessIrqsEv+0x3a8>
 800226a:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <_ZN6SX128011ProcessIrqsEv+0x60>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	08002285 	.word	0x08002285
 8002274:	08002383 	.word	0x08002383
 8002278:	080024cb 	.word	0x080024cb
 800227c:	08002285 	.word	0x08002285
 8002280:	08002285 	.word	0x08002285
    {
        case PACKET_TYPE_GFSK:
        case PACKET_TYPE_FLRC:
        case PACKET_TYPE_BLE:
            switch( OperatingMode )
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800228a:	2b05      	cmp	r3, #5
 800228c:	d002      	beq.n	8002294 <_ZN6SX128011ProcessIrqsEv+0x84>
 800228e:	2b06      	cmp	r3, #6
 8002290:	d05a      	beq.n	8002348 <_ZN6SX128011ProcessIrqsEv+0x138>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 8002292:	e075      	b.n	8002380 <_ZN6SX128011ProcessIrqsEv+0x170>
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 8002294:	89bb      	ldrh	r3, [r7, #12]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d022      	beq.n	80022e4 <_ZN6SX128011ProcessIrqsEv+0xd4>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 800229e:	89bb      	ldrh	r3, [r7, #12]
 80022a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <_ZN6SX128011ProcessIrqsEv+0xaa>
                            if( rxError != NULL )
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d019      	beq.n	80022e4 <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxError( IRQ_CRC_ERROR_CODE );
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2002      	movs	r0, #2
 80022b6:	4798      	blx	r3
 80022b8:	e014      	b.n	80022e4 <_ZN6SX128011ProcessIrqsEv+0xd4>
                        else if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
 80022ba:	89bb      	ldrh	r3, [r7, #12]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <_ZN6SX128011ProcessIrqsEv+0xc6>
                            if( rxError != NULL )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00b      	beq.n	80022e4 <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxError( IRQ_SYNCWORD_ERROR_CODE );
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	2001      	movs	r0, #1
 80022d2:	4798      	blx	r3
 80022d4:	e006      	b.n	80022e4 <_ZN6SX128011ProcessIrqsEv+0xd4>
                            if( rxDone != NULL )
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <_ZN6SX128011ProcessIrqsEv+0xd4>
                                rxDone( );
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	4798      	blx	r3
                    if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
 80022e4:	89bb      	ldrh	r3, [r7, #12]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <_ZN6SX128011ProcessIrqsEv+0xec>
                        if( rxSyncWordDone != NULL )
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <_ZN6SX128011ProcessIrqsEv+0xec>
                            rxSyncWordDone( );
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4798      	blx	r3
                    if( ( irqRegs & IRQ_SYNCWORD_ERROR ) == IRQ_SYNCWORD_ERROR )
 80022fc:	89bb      	ldrh	r3, [r7, #12]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <_ZN6SX128011ProcessIrqsEv+0x106>
                        if( rxError != NULL )
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <_ZN6SX128011ProcessIrqsEv+0x106>
                            rxError( IRQ_SYNCWORD_ERROR_CODE );
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	2001      	movs	r0, #1
 8002314:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002316:	89bb      	ldrh	r3, [r7, #12]
 8002318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <_ZN6SX128011ProcessIrqsEv+0x11e>
                        if( rxTimeout != NULL )
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <_ZN6SX128011ProcessIrqsEv+0x11e>
                            rxTimeout( );
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4798      	blx	r3
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 800232e:	89bb      	ldrh	r3, [r7, #12]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <_ZN6SX128011ProcessIrqsEv+0x16a>
                        if( txDone != NULL )
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01c      	beq.n	800237a <_ZN6SX128011ProcessIrqsEv+0x16a>
                            txDone( );
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4798      	blx	r3
                    break;
 8002346:	e018      	b.n	800237a <_ZN6SX128011ProcessIrqsEv+0x16a>
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8002348:	89bb      	ldrh	r3, [r7, #12]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <_ZN6SX128011ProcessIrqsEv+0x150>
                        if( txDone != NULL )
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <_ZN6SX128011ProcessIrqsEv+0x150>
                            txDone( );
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002360:	89bb      	ldrh	r3, [r7, #12]
 8002362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <_ZN6SX128011ProcessIrqsEv+0x16e>
                        if( txTimeout != NULL )
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <_ZN6SX128011ProcessIrqsEv+0x16e>
                            txTimeout( );
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4798      	blx	r3
                    break;
 8002378:	e001      	b.n	800237e <_ZN6SX128011ProcessIrqsEv+0x16e>
                    break;
 800237a:	bf00      	nop
 800237c:	e11d      	b.n	80025ba <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 800237e:	bf00      	nop
            }
            break;
 8002380:	e11b      	b.n	80025ba <_ZN6SX128011ProcessIrqsEv+0x3aa>
        case PACKET_TYPE_LORA:
            switch( OperatingMode )
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002388:	2b07      	cmp	r3, #7
 800238a:	d06d      	beq.n	8002468 <_ZN6SX128011ProcessIrqsEv+0x258>
 800238c:	2b07      	cmp	r3, #7
 800238e:	f300 8094 	bgt.w	80024ba <_ZN6SX128011ProcessIrqsEv+0x2aa>
 8002392:	2b05      	cmp	r3, #5
 8002394:	d002      	beq.n	800239c <_ZN6SX128011ProcessIrqsEv+0x18c>
 8002396:	2b06      	cmp	r3, #6
 8002398:	d04d      	beq.n	8002436 <_ZN6SX128011ProcessIrqsEv+0x226>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 800239a:	e08e      	b.n	80024ba <_ZN6SX128011ProcessIrqsEv+0x2aa>
                    if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 800239c:	89bb      	ldrh	r3, [r7, #12]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d014      	beq.n	80023d0 <_ZN6SX128011ProcessIrqsEv+0x1c0>
                        if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 80023a6:	89bb      	ldrh	r3, [r7, #12]
 80023a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <_ZN6SX128011ProcessIrqsEv+0x1b2>
                            if( rxError != NULL )
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00b      	beq.n	80023d0 <_ZN6SX128011ProcessIrqsEv+0x1c0>
                                rxError( IRQ_CRC_ERROR_CODE );
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2002      	movs	r0, #2
 80023be:	4798      	blx	r3
 80023c0:	e006      	b.n	80023d0 <_ZN6SX128011ProcessIrqsEv+0x1c0>
                            if( rxDone != NULL )
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <_ZN6SX128011ProcessIrqsEv+0x1c0>
                                rxDone( );
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 80023d0:	89bb      	ldrh	r3, [r7, #12]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <_ZN6SX128011ProcessIrqsEv+0x1d8>
                        if( rxHeaderDone != NULL )
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <_ZN6SX128011ProcessIrqsEv+0x1d8>
                            rxHeaderDone( );
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 80023e8:	89bb      	ldrh	r3, [r7, #12]
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <_ZN6SX128011ProcessIrqsEv+0x1f2>
                        if( rxError != NULL )
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <_ZN6SX128011ProcessIrqsEv+0x1f2>
                            rxError( IRQ_HEADER_ERROR_CODE );
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	2000      	movs	r0, #0
 8002400:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002402:	89bb      	ldrh	r3, [r7, #12]
 8002404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d006      	beq.n	800241a <_ZN6SX128011ProcessIrqsEv+0x20a>
                        if( rxTimeout != NULL )
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <_ZN6SX128011ProcessIrqsEv+0x20a>
                            rxTimeout( );
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
 800241a:	89bb      	ldrh	r3, [r7, #12]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d04c      	beq.n	80024be <_ZN6SX128011ProcessIrqsEv+0x2ae>
                        if( rxError != NULL )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d048      	beq.n	80024be <_ZN6SX128011ProcessIrqsEv+0x2ae>
                            rxError( IRQ_RANGING_ON_LORA_ERROR_CODE );
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2003      	movs	r0, #3
 8002432:	4798      	blx	r3
                    break;
 8002434:	e043      	b.n	80024be <_ZN6SX128011ProcessIrqsEv+0x2ae>
                    if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 8002436:	89bb      	ldrh	r3, [r7, #12]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <_ZN6SX128011ProcessIrqsEv+0x23e>
                        if( txDone != NULL )
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <_ZN6SX128011ProcessIrqsEv+0x23e>
                            txDone( );
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800244e:	89bb      	ldrh	r3, [r7, #12]
 8002450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d034      	beq.n	80024c2 <_ZN6SX128011ProcessIrqsEv+0x2b2>
                        if( txTimeout != NULL )
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d030      	beq.n	80024c2 <_ZN6SX128011ProcessIrqsEv+0x2b2>
                            txTimeout( );
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	4798      	blx	r3
                    break;
 8002466:	e02c      	b.n	80024c2 <_ZN6SX128011ProcessIrqsEv+0x2b2>
                    if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 8002468:	89bb      	ldrh	r3, [r7, #12]
 800246a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d016      	beq.n	80024a0 <_ZN6SX128011ProcessIrqsEv+0x290>
                        if( ( irqRegs & IRQ_CAD_DETECTED ) == IRQ_CAD_DETECTED )
 8002472:	89bb      	ldrh	r3, [r7, #12]
 8002474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <_ZN6SX128011ProcessIrqsEv+0x27e>
                            if( cadDone != NULL )
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	2b00      	cmp	r3, #0
 8002482:	d020      	beq.n	80024c6 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                                cadDone( true );
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	2001      	movs	r0, #1
 800248a:	4798      	blx	r3
                    break;
 800248c:	e01b      	b.n	80024c6 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                            if( cadDone != NULL )
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	2b00      	cmp	r3, #0
 8002494:	d017      	beq.n	80024c6 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                                cadDone( false );
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	2000      	movs	r0, #0
 800249c:	4798      	blx	r3
                    break;
 800249e:	e012      	b.n	80024c6 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                    else if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 80024a0:	89bb      	ldrh	r3, [r7, #12]
 80024a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                        if( rxTimeout != NULL )
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                            rxTimeout( );
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	4798      	blx	r3
                    break;
 80024b8:	e005      	b.n	80024c6 <_ZN6SX128011ProcessIrqsEv+0x2b6>
                    break;
 80024ba:	bf00      	nop
 80024bc:	e07d      	b.n	80025ba <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 80024be:	bf00      	nop
 80024c0:	e07b      	b.n	80025ba <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 80024c2:	bf00      	nop
 80024c4:	e079      	b.n	80025ba <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 80024c6:	bf00      	nop
            }
            break;
 80024c8:	e077      	b.n	80025ba <_ZN6SX128011ProcessIrqsEv+0x3aa>
        case PACKET_TYPE_RANGING:
            switch( OperatingMode )
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d002      	beq.n	80024da <_ZN6SX128011ProcessIrqsEv+0x2ca>
 80024d4:	2b06      	cmp	r3, #6
 80024d6:	d04e      	beq.n	8002576 <_ZN6SX128011ProcessIrqsEv+0x366>
                        }
                    }
                    break;
                default:
                    // Unexpected IRQ: silently returns
                    break;
 80024d8:	e06b      	b.n	80025b2 <_ZN6SX128011ProcessIrqsEv+0x3a2>
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_DISCARDED ) == IRQ_RANGING_SLAVE_REQUEST_DISCARDED )
 80024da:	89bb      	ldrh	r3, [r7, #12]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <_ZN6SX128011ProcessIrqsEv+0x2e4>
                        if( rangingDone != NULL )
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <_ZN6SX128011ProcessIrqsEv+0x2e4>
                            rangingDone( IRQ_RANGING_SLAVE_ERROR_CODE );
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	2000      	movs	r0, #0
 80024f2:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_REQUEST_VALID ) == IRQ_RANGING_SLAVE_REQUEST_VALID )
 80024f4:	89bb      	ldrh	r3, [r7, #12]
 80024f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d007      	beq.n	800250e <_ZN6SX128011ProcessIrqsEv+0x2fe>
                        if( rangingDone != NULL )
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <_ZN6SX128011ProcessIrqsEv+0x2fe>
                            rangingDone( IRQ_RANGING_SLAVE_VALID_CODE );
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	2001      	movs	r0, #1
 800250c:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_SLAVE_RESPONSE_DONE ) == IRQ_RANGING_SLAVE_RESPONSE_DONE )
 800250e:	89bb      	ldrh	r3, [r7, #12]
 8002510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <_ZN6SX128011ProcessIrqsEv+0x318>
                        if( rangingDone != NULL )
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <_ZN6SX128011ProcessIrqsEv+0x318>
                            rangingDone( IRQ_RANGING_SLAVE_VALID_CODE );
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	2001      	movs	r0, #1
 8002526:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 8002528:	89bb      	ldrh	r3, [r7, #12]
 800252a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <_ZN6SX128011ProcessIrqsEv+0x332>
                        if( rangingDone != NULL )
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <_ZN6SX128011ProcessIrqsEv+0x332>
                            rangingDone( IRQ_RANGING_SLAVE_ERROR_CODE );
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	2000      	movs	r0, #0
 8002540:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 8002542:	89bb      	ldrh	r3, [r7, #12]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	d006      	beq.n	800255a <_ZN6SX128011ProcessIrqsEv+0x34a>
                        if( rxHeaderDone != NULL )
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <_ZN6SX128011ProcessIrqsEv+0x34a>
                            rxHeaderDone( );
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	4798      	blx	r3
                    if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 800255a:	89bb      	ldrh	r3, [r7, #12]
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b00      	cmp	r3, #0
 8002562:	d023      	beq.n	80025ac <_ZN6SX128011ProcessIrqsEv+0x39c>
                        if( rxError != NULL )
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01f      	beq.n	80025ac <_ZN6SX128011ProcessIrqsEv+0x39c>
                            rxError( IRQ_HEADER_ERROR_CODE );
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	2000      	movs	r0, #0
 8002572:	4798      	blx	r3
                    break;
 8002574:	e01a      	b.n	80025ac <_ZN6SX128011ProcessIrqsEv+0x39c>
                    if( ( irqRegs & IRQ_RANGING_MASTER_TIMEOUT ) == IRQ_RANGING_MASTER_TIMEOUT )
 8002576:	89bb      	ldrh	r3, [r7, #12]
 8002578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <_ZN6SX128011ProcessIrqsEv+0x380>
                        if( rangingDone != NULL )
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <_ZN6SX128011ProcessIrqsEv+0x380>
                            rangingDone( IRQ_RANGING_MASTER_ERROR_CODE );
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	2002      	movs	r0, #2
 800258e:	4798      	blx	r3
                    if( ( irqRegs & IRQ_RANGING_MASTER_RESULT_VALID ) == IRQ_RANGING_MASTER_RESULT_VALID )
 8002590:	89bb      	ldrh	r3, [r7, #12]
 8002592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <_ZN6SX128011ProcessIrqsEv+0x3a0>
                        if( rangingDone != NULL )
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <_ZN6SX128011ProcessIrqsEv+0x3a0>
                            rangingDone( IRQ_RANGING_MASTER_VALID_CODE );
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	2003      	movs	r0, #3
 80025a8:	4798      	blx	r3
                    break;
 80025aa:	e001      	b.n	80025b0 <_ZN6SX128011ProcessIrqsEv+0x3a0>
                    break;
 80025ac:	bf00      	nop
 80025ae:	e004      	b.n	80025ba <_ZN6SX128011ProcessIrqsEv+0x3aa>
                    break;
 80025b0:	bf00      	nop
            }
            break;
 80025b2:	e002      	b.n	80025ba <_ZN6SX128011ProcessIrqsEv+0x3aa>
            return;
 80025b4:	bf00      	nop
 80025b6:	e000      	b.n	80025ba <_ZN6SX128011ProcessIrqsEv+0x3aa>
        default:
            // Unexpected IRQ: silently returns
            break;
 80025b8:	bf00      	nop
    }
}
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025c4:	f000 fe6a 	bl	800329c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025c8:	f000 f816 	bl	80025f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025cc:	f000 f9d8 	bl	8002980 <MX_GPIO_Init>
  MX_DMA_Init();
 80025d0:	f000 f9a6 	bl	8002920 <MX_DMA_Init>
  MX_I2C1_Init();
 80025d4:	f000 f87a 	bl	80026cc <MX_I2C1_Init>
  MX_I2S3_Init();
 80025d8:	f000 f8a6 	bl	8002728 <MX_I2S3_Init>
  MX_SPI1_Init();
 80025dc:	f000 f8d4 	bl	8002788 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80025e0:	f009 fc5a 	bl	800be98 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80025e4:	f000 f972 	bl	80028cc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80025e8:	f000 f93a 	bl	8002860 <MX_TIM6_Init>
  MX_SPI2_Init();
 80025ec:	f000 f902 	bl	80027f4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  start();
 80025f0:	f7fe fcf0 	bl	8000fd4 <start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <main+0x34>
	...

080025f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b094      	sub	sp, #80	; 0x50
 80025fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025fe:	f107 0320 	add.w	r3, r7, #32
 8002602:	2230      	movs	r2, #48	; 0x30
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f00a f9ce 	bl	800c9a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <SystemClock_Config+0xcc>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <SystemClock_Config+0xcc>)
 8002626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262a:	6413      	str	r3, [r2, #64]	; 0x40
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <SystemClock_Config+0xcc>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002638:	2300      	movs	r3, #0
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <SystemClock_Config+0xd0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a21      	ldr	r2, [pc, #132]	; (80026c8 <SystemClock_Config+0xd0>)
 8002642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <SystemClock_Config+0xd0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002654:	2301      	movs	r3, #1
 8002656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800265e:	2302      	movs	r3, #2
 8002660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002668:	2308      	movs	r3, #8
 800266a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800266c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002670:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002672:	2302      	movs	r3, #2
 8002674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002676:	2307      	movs	r3, #7
 8002678:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800267a:	f107 0320 	add.w	r3, r7, #32
 800267e:	4618      	mov	r0, r3
 8002680:	f003 fd92 	bl	80061a8 <HAL_RCC_OscConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800268a:	f000 fab7 	bl	8002bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800268e:	230f      	movs	r3, #15
 8002690:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002692:	2302      	movs	r3, #2
 8002694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800269a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800269e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	2105      	movs	r1, #5
 80026ac:	4618      	mov	r0, r3
 80026ae:	f003 fff3 	bl	8006698 <HAL_RCC_ClockConfig>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80026b8:	f000 faa0 	bl	8002bfc <Error_Handler>
  }
}
 80026bc:	bf00      	nop
 80026be:	3750      	adds	r7, #80	; 0x50
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40007000 	.word	0x40007000

080026cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <MX_I2C1_Init+0x50>)
 80026d2:	4a13      	ldr	r2, [pc, #76]	; (8002720 <MX_I2C1_Init+0x54>)
 80026d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <MX_I2C1_Init+0x50>)
 80026d8:	4a12      	ldr	r2, [pc, #72]	; (8002724 <MX_I2C1_Init+0x58>)
 80026da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026dc:	4b0f      	ldr	r3, [pc, #60]	; (800271c <MX_I2C1_Init+0x50>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <MX_I2C1_Init+0x50>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <MX_I2C1_Init+0x50>)
 80026ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026f0:	4b0a      	ldr	r3, [pc, #40]	; (800271c <MX_I2C1_Init+0x50>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <MX_I2C1_Init+0x50>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026fc:	4b07      	ldr	r3, [pc, #28]	; (800271c <MX_I2C1_Init+0x50>)
 80026fe:	2200      	movs	r2, #0
 8002700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <MX_I2C1_Init+0x50>)
 8002704:	2200      	movs	r2, #0
 8002706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002708:	4804      	ldr	r0, [pc, #16]	; (800271c <MX_I2C1_Init+0x50>)
 800270a:	f001 fceb 	bl	80040e4 <HAL_I2C_Init>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002714:	f000 fa72 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}
 800271c:	2000037c 	.word	0x2000037c
 8002720:	40005400 	.word	0x40005400
 8002724:	000186a0 	.word	0x000186a0

08002728 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <MX_I2S3_Init+0x54>)
 800272e:	4a14      	ldr	r2, [pc, #80]	; (8002780 <MX_I2S3_Init+0x58>)
 8002730:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <MX_I2S3_Init+0x54>)
 8002734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002738:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <MX_I2S3_Init+0x54>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <MX_I2S3_Init+0x54>)
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002746:	4b0d      	ldr	r3, [pc, #52]	; (800277c <MX_I2S3_Init+0x54>)
 8002748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800274c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <MX_I2S3_Init+0x54>)
 8002750:	4a0c      	ldr	r2, [pc, #48]	; (8002784 <MX_I2S3_Init+0x5c>)
 8002752:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_I2S3_Init+0x54>)
 8002756:	2200      	movs	r2, #0
 8002758:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <MX_I2S3_Init+0x54>)
 800275c:	2200      	movs	r2, #0
 800275e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <MX_I2S3_Init+0x54>)
 8002762:	2200      	movs	r2, #0
 8002764:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002766:	4805      	ldr	r0, [pc, #20]	; (800277c <MX_I2S3_Init+0x54>)
 8002768:	f001 fe00 	bl	800436c <HAL_I2S_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002772:	f000 fa43 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200003d0 	.word	0x200003d0
 8002780:	40003c00 	.word	0x40003c00
 8002784:	00017700 	.word	0x00017700

08002788 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800278c:	4b17      	ldr	r3, [pc, #92]	; (80027ec <MX_SPI1_Init+0x64>)
 800278e:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <MX_SPI1_Init+0x68>)
 8002790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002792:	4b16      	ldr	r3, [pc, #88]	; (80027ec <MX_SPI1_Init+0x64>)
 8002794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002798:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800279a:	4b14      	ldr	r3, [pc, #80]	; (80027ec <MX_SPI1_Init+0x64>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <MX_SPI1_Init+0x64>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_SPI1_Init+0x64>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <MX_SPI1_Init+0x64>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <MX_SPI1_Init+0x64>)
 80027b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <MX_SPI1_Init+0x64>)
 80027bc:	2200      	movs	r2, #0
 80027be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027c0:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <MX_SPI1_Init+0x64>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <MX_SPI1_Init+0x64>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <MX_SPI1_Init+0x64>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <MX_SPI1_Init+0x64>)
 80027d4:	220a      	movs	r2, #10
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027d8:	4804      	ldr	r0, [pc, #16]	; (80027ec <MX_SPI1_Init+0x64>)
 80027da:	f004 fabd 	bl	8006d58 <HAL_SPI_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027e4:	f000 fa0a 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000418 	.word	0x20000418
 80027f0:	40013000 	.word	0x40013000

080027f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80027f8:	4b17      	ldr	r3, [pc, #92]	; (8002858 <MX_SPI2_Init+0x64>)
 80027fa:	4a18      	ldr	r2, [pc, #96]	; (800285c <MX_SPI2_Init+0x68>)
 80027fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027fe:	4b16      	ldr	r3, [pc, #88]	; (8002858 <MX_SPI2_Init+0x64>)
 8002800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002804:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002806:	4b14      	ldr	r3, [pc, #80]	; (8002858 <MX_SPI2_Init+0x64>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <MX_SPI2_Init+0x64>)
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <MX_SPI2_Init+0x64>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <MX_SPI2_Init+0x64>)
 800281a:	2200      	movs	r2, #0
 800281c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <MX_SPI2_Init+0x64>)
 8002820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002824:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <MX_SPI2_Init+0x64>)
 8002828:	2228      	movs	r2, #40	; 0x28
 800282a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <MX_SPI2_Init+0x64>)
 800282e:	2200      	movs	r2, #0
 8002830:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <MX_SPI2_Init+0x64>)
 8002834:	2200      	movs	r2, #0
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <MX_SPI2_Init+0x64>)
 800283a:	2200      	movs	r2, #0
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <MX_SPI2_Init+0x64>)
 8002840:	220a      	movs	r2, #10
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002844:	4804      	ldr	r0, [pc, #16]	; (8002858 <MX_SPI2_Init+0x64>)
 8002846:	f004 fa87 	bl	8006d58 <HAL_SPI_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002850:	f000 f9d4 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000470 	.word	0x20000470
 800285c:	40003800 	.word	0x40003800

08002860 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002866:	463b      	mov	r3, r7
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800286e:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <MX_TIM6_Init+0x64>)
 8002870:	4a15      	ldr	r2, [pc, #84]	; (80028c8 <MX_TIM6_Init+0x68>)
 8002872:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 167;
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <MX_TIM6_Init+0x64>)
 8002876:	22a7      	movs	r2, #167	; 0xa7
 8002878:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <MX_TIM6_Init+0x64>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <MX_TIM6_Init+0x64>)
 8002882:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002886:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <MX_TIM6_Init+0x64>)
 800288a:	2200      	movs	r2, #0
 800288c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800288e:	480d      	ldr	r0, [pc, #52]	; (80028c4 <MX_TIM6_Init+0x64>)
 8002890:	f004 fe76 	bl	8007580 <HAL_TIM_Base_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800289a:	f000 f9af 	bl	8002bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028a6:	463b      	mov	r3, r7
 80028a8:	4619      	mov	r1, r3
 80028aa:	4806      	ldr	r0, [pc, #24]	; (80028c4 <MX_TIM6_Init+0x64>)
 80028ac:	f004 ff58 	bl	8007760 <HAL_TIMEx_MasterConfigSynchronization>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80028b6:	f000 f9a1 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000588 	.word	0x20000588
 80028c8:	40001000 	.word	0x40001000

080028cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028d2:	4a12      	ldr	r2, [pc, #72]	; (800291c <MX_USART2_UART_Init+0x50>)
 80028d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028d8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80028dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028f2:	220c      	movs	r2, #12
 80028f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002902:	4805      	ldr	r0, [pc, #20]	; (8002918 <MX_USART2_UART_Init+0x4c>)
 8002904:	f004 ffa8 	bl	8007858 <HAL_UART_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800290e:	f000 f975 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200005d0 	.word	0x200005d0
 800291c:	40004400 	.word	0x40004400

08002920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <MX_DMA_Init+0x5c>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a13      	ldr	r2, [pc, #76]	; (800297c <MX_DMA_Init+0x5c>)
 8002930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <MX_DMA_Init+0x5c>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	200e      	movs	r0, #14
 8002948:	f000 fe19 	bl	800357e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800294c:	200e      	movs	r0, #14
 800294e:	f000 fe32 	bl	80035b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	200f      	movs	r0, #15
 8002958:	f000 fe11 	bl	800357e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800295c:	200f      	movs	r0, #15
 800295e:	f000 fe2a 	bl	80035b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2100      	movs	r1, #0
 8002966:	2011      	movs	r0, #17
 8002968:	f000 fe09 	bl	800357e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800296c:	2011      	movs	r0, #17
 800296e:	f000 fe22 	bl	80035b6 <HAL_NVIC_EnableIRQ>

}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800

08002980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002986:	f107 031c 	add.w	r3, r7, #28
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	60da      	str	r2, [r3, #12]
 8002994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	4b92      	ldr	r3, [pc, #584]	; (8002be4 <MX_GPIO_Init+0x264>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a91      	ldr	r2, [pc, #580]	; (8002be4 <MX_GPIO_Init+0x264>)
 80029a0:	f043 0310 	orr.w	r3, r3, #16
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b8f      	ldr	r3, [pc, #572]	; (8002be4 <MX_GPIO_Init+0x264>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	4b8b      	ldr	r3, [pc, #556]	; (8002be4 <MX_GPIO_Init+0x264>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a8a      	ldr	r2, [pc, #552]	; (8002be4 <MX_GPIO_Init+0x264>)
 80029bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b88      	ldr	r3, [pc, #544]	; (8002be4 <MX_GPIO_Init+0x264>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	4b84      	ldr	r3, [pc, #528]	; (8002be4 <MX_GPIO_Init+0x264>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a83      	ldr	r2, [pc, #524]	; (8002be4 <MX_GPIO_Init+0x264>)
 80029d8:	f043 0304 	orr.w	r3, r3, #4
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b81      	ldr	r3, [pc, #516]	; (8002be4 <MX_GPIO_Init+0x264>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b7d      	ldr	r3, [pc, #500]	; (8002be4 <MX_GPIO_Init+0x264>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a7c      	ldr	r2, [pc, #496]	; (8002be4 <MX_GPIO_Init+0x264>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b7a      	ldr	r3, [pc, #488]	; (8002be4 <MX_GPIO_Init+0x264>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	4b76      	ldr	r3, [pc, #472]	; (8002be4 <MX_GPIO_Init+0x264>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a75      	ldr	r2, [pc, #468]	; (8002be4 <MX_GPIO_Init+0x264>)
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b73      	ldr	r3, [pc, #460]	; (8002be4 <MX_GPIO_Init+0x264>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	4b6f      	ldr	r3, [pc, #444]	; (8002be4 <MX_GPIO_Init+0x264>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a6e      	ldr	r2, [pc, #440]	; (8002be4 <MX_GPIO_Init+0x264>)
 8002a2c:	f043 0308 	orr.w	r3, r3, #8
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b6c      	ldr	r3, [pc, #432]	; (8002be4 <MX_GPIO_Init+0x264>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2108      	movs	r1, #8
 8002a42:	4869      	ldr	r0, [pc, #420]	; (8002be8 <MX_GPIO_Init+0x268>)
 8002a44:	f001 fb02 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	4867      	ldr	r0, [pc, #412]	; (8002bec <MX_GPIO_Init+0x26c>)
 8002a4e:	f001 fafd 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, GPIO_PIN_SET);
 8002a52:	2201      	movs	r2, #1
 8002a54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a58:	4865      	ldr	r0, [pc, #404]	; (8002bf0 <MX_GPIO_Init+0x270>)
 8002a5a:	f001 faf7 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a64:	4863      	ldr	r0, [pc, #396]	; (8002bf4 <MX_GPIO_Init+0x274>)
 8002a66:	f001 faf1 	bl	800404c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002a70:	4860      	ldr	r0, [pc, #384]	; (8002bf4 <MX_GPIO_Init+0x274>)
 8002a72:	f001 faeb 	bl	800404c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002a76:	2308      	movs	r3, #8
 8002a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f107 031c 	add.w	r3, r7, #28
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4856      	ldr	r0, [pc, #344]	; (8002be8 <MX_GPIO_Init+0x268>)
 8002a8e:	f001 f929 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002a92:	2301      	movs	r3, #1
 8002a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a96:	2301      	movs	r3, #1
 8002a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4850      	ldr	r0, [pc, #320]	; (8002bec <MX_GPIO_Init+0x26c>)
 8002aaa:	f001 f91b 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002aae:	2308      	movs	r3, #8
 8002ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002abe:	2305      	movs	r3, #5
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4848      	ldr	r0, [pc, #288]	; (8002bec <MX_GPIO_Init+0x26c>)
 8002aca:	f001 f90b 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ad2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4845      	ldr	r0, [pc, #276]	; (8002bf8 <MX_GPIO_Init+0x278>)
 8002ae4:	f001 f8fe 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002ae8:	2304      	movs	r3, #4
 8002aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aec:	2300      	movs	r3, #0
 8002aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002af4:	f107 031c 	add.w	r3, r7, #28
 8002af8:	4619      	mov	r1, r3
 8002afa:	483d      	ldr	r0, [pc, #244]	; (8002bf0 <MX_GPIO_Init+0x270>)
 8002afc:	f001 f8f2 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b12:	2305      	movs	r3, #5
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002b16:	f107 031c 	add.w	r3, r7, #28
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4834      	ldr	r0, [pc, #208]	; (8002bf0 <MX_GPIO_Init+0x270>)
 8002b1e:	f001 f8e1 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_NSS_Pin */
  GPIO_InitStruct.Pin = SX1280_NSS_Pin;
 8002b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX1280_NSS_GPIO_Port, &GPIO_InitStruct);
 8002b34:	f107 031c 	add.w	r3, r7, #28
 8002b38:	4619      	mov	r1, r3
 8002b3a:	482d      	ldr	r0, [pc, #180]	; (8002bf0 <MX_GPIO_Init+0x270>)
 8002b3c:	f001 f8d2 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_INT_Pin */
  GPIO_InitStruct.Pin = SX1280_INT_Pin;
 8002b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SX1280_INT_GPIO_Port, &GPIO_InitStruct);
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	4619      	mov	r1, r3
 8002b56:	4827      	ldr	r0, [pc, #156]	; (8002bf4 <MX_GPIO_Init+0x274>)
 8002b58:	f001 f8c4 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SX1280_BUSY_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SX1280_BUSY_Pin|OTG_FS_OverCurrent_Pin;
 8002b5c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b6a:	f107 031c 	add.w	r3, r7, #28
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4820      	ldr	r0, [pc, #128]	; (8002bf4 <MX_GPIO_Init+0x274>)
 8002b72:	f001 f8b7 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 8002b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002b7c:	2311      	movs	r3, #17
 8002b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b80:	2301      	movs	r3, #1
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 8002b88:	f107 031c 	add.w	r3, r7, #28
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4819      	ldr	r0, [pc, #100]	; (8002bf4 <MX_GPIO_Init+0x274>)
 8002b90:	f001 f8a8 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002b94:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002b98:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba6:	f107 031c 	add.w	r3, r7, #28
 8002baa:	4619      	mov	r1, r3
 8002bac:	4811      	ldr	r0, [pc, #68]	; (8002bf4 <MX_GPIO_Init+0x274>)
 8002bae:	f001 f899 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002bb6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002bc0:	f107 031c 	add.w	r3, r7, #28
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4808      	ldr	r0, [pc, #32]	; (8002be8 <MX_GPIO_Init+0x268>)
 8002bc8:	f001 f88c 	bl	8003ce4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2101      	movs	r1, #1
 8002bd0:	2017      	movs	r0, #23
 8002bd2:	f000 fcd4 	bl	800357e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002bd6:	2017      	movs	r0, #23
 8002bd8:	f000 fced 	bl	80035b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bdc:	bf00      	nop
 8002bde:	3730      	adds	r7, #48	; 0x30
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40020800 	.word	0x40020800
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	40020c00 	.word	0x40020c00
 8002bf8:	40020000 	.word	0x40020000

08002bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c00:	b672      	cpsid	i
}
 8002c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c04:	e7fe      	b.n	8002c04 <Error_Handler+0x8>
	...

08002c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	603b      	str	r3, [r7, #0]
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800

08002c58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <HAL_I2C_MspInit+0x84>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d12c      	bne.n	8002cd4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <HAL_I2C_MspInit+0x88>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <HAL_I2C_MspInit+0x88>)
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_I2C_MspInit+0x88>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002c96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c9c:	2312      	movs	r3, #18
 8002c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	480c      	ldr	r0, [pc, #48]	; (8002ce4 <HAL_I2C_MspInit+0x8c>)
 8002cb4:	f001 f816 	bl	8003ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <HAL_I2C_MspInit+0x88>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <HAL_I2C_MspInit+0x88>)
 8002cc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_I2C_MspInit+0x88>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cd4:	bf00      	nop
 8002cd6:	3728      	adds	r7, #40	; 0x28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40005400 	.word	0x40005400
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020400 	.word	0x40020400

08002ce8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	; 0x38
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a31      	ldr	r2, [pc, #196]	; (8002dd8 <HAL_I2S_MspInit+0xf0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d15a      	bne.n	8002dce <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002d1c:	23c0      	movs	r3, #192	; 0xc0
 8002d1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002d20:	2302      	movs	r3, #2
 8002d22:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 fed5 	bl	8006ad8 <HAL_RCCEx_PeriphCLKConfig>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002d34:	f7ff ff62 	bl	8002bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <HAL_I2S_MspInit+0xf4>)
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	4a26      	ldr	r2, [pc, #152]	; (8002ddc <HAL_I2S_MspInit+0xf4>)
 8002d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d46:	6413      	str	r3, [r2, #64]	; 0x40
 8002d48:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_I2S_MspInit+0xf4>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_I2S_MspInit+0xf4>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <HAL_I2S_MspInit+0xf4>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6313      	str	r3, [r2, #48]	; 0x30
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_I2S_MspInit+0xf4>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_I2S_MspInit+0xf4>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <HAL_I2S_MspInit+0xf4>)
 8002d7a:	f043 0304 	orr.w	r3, r3, #4
 8002d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d80:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <HAL_I2S_MspInit+0xf4>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d9c:	2306      	movs	r3, #6
 8002d9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da4:	4619      	mov	r1, r3
 8002da6:	480e      	ldr	r0, [pc, #56]	; (8002de0 <HAL_I2S_MspInit+0xf8>)
 8002da8:	f000 ff9c 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002dac:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dbe:	2306      	movs	r3, #6
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4806      	ldr	r0, [pc, #24]	; (8002de4 <HAL_I2S_MspInit+0xfc>)
 8002dca:	f000 ff8b 	bl	8003ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002dce:	bf00      	nop
 8002dd0:	3738      	adds	r7, #56	; 0x38
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40003c00 	.word	0x40003c00
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40020000 	.word	0x40020000
 8002de4:	40020800 	.word	0x40020800

08002de8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a64      	ldr	r2, [pc, #400]	; (8002f98 <HAL_SPI_MspInit+0x1b0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d12c      	bne.n	8002e64 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	4b63      	ldr	r3, [pc, #396]	; (8002f9c <HAL_SPI_MspInit+0x1b4>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	4a62      	ldr	r2, [pc, #392]	; (8002f9c <HAL_SPI_MspInit+0x1b4>)
 8002e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e18:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1a:	4b60      	ldr	r3, [pc, #384]	; (8002f9c <HAL_SPI_MspInit+0x1b4>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	4b5c      	ldr	r3, [pc, #368]	; (8002f9c <HAL_SPI_MspInit+0x1b4>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a5b      	ldr	r2, [pc, #364]	; (8002f9c <HAL_SPI_MspInit+0x1b4>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b59      	ldr	r3, [pc, #356]	; (8002f9c <HAL_SPI_MspInit+0x1b4>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002e42:	23e0      	movs	r3, #224	; 0xe0
 8002e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e52:	2305      	movs	r3, #5
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e56:	f107 031c 	add.w	r3, r7, #28
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4850      	ldr	r0, [pc, #320]	; (8002fa0 <HAL_SPI_MspInit+0x1b8>)
 8002e5e:	f000 ff41 	bl	8003ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e62:	e094      	b.n	8002f8e <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a4e      	ldr	r2, [pc, #312]	; (8002fa4 <HAL_SPI_MspInit+0x1bc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	f040 808f 	bne.w	8002f8e <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	4b49      	ldr	r3, [pc, #292]	; (8002f9c <HAL_SPI_MspInit+0x1b4>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	4a48      	ldr	r2, [pc, #288]	; (8002f9c <HAL_SPI_MspInit+0x1b4>)
 8002e7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e80:	4b46      	ldr	r3, [pc, #280]	; (8002f9c <HAL_SPI_MspInit+0x1b4>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	4b42      	ldr	r3, [pc, #264]	; (8002f9c <HAL_SPI_MspInit+0x1b4>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	4a41      	ldr	r2, [pc, #260]	; (8002f9c <HAL_SPI_MspInit+0x1b4>)
 8002e96:	f043 0302 	orr.w	r3, r3, #2
 8002e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9c:	4b3f      	ldr	r3, [pc, #252]	; (8002f9c <HAL_SPI_MspInit+0x1b4>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ea8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002eba:	2305      	movs	r3, #5
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4838      	ldr	r0, [pc, #224]	; (8002fa8 <HAL_SPI_MspInit+0x1c0>)
 8002ec6:	f000 ff0d 	bl	8003ce4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002eca:	4b38      	ldr	r3, [pc, #224]	; (8002fac <HAL_SPI_MspInit+0x1c4>)
 8002ecc:	4a38      	ldr	r2, [pc, #224]	; (8002fb0 <HAL_SPI_MspInit+0x1c8>)
 8002ece:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002ed0:	4b36      	ldr	r3, [pc, #216]	; (8002fac <HAL_SPI_MspInit+0x1c4>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ed6:	4b35      	ldr	r3, [pc, #212]	; (8002fac <HAL_SPI_MspInit+0x1c4>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002edc:	4b33      	ldr	r3, [pc, #204]	; (8002fac <HAL_SPI_MspInit+0x1c4>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee2:	4b32      	ldr	r3, [pc, #200]	; (8002fac <HAL_SPI_MspInit+0x1c4>)
 8002ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eea:	4b30      	ldr	r3, [pc, #192]	; (8002fac <HAL_SPI_MspInit+0x1c4>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ef0:	4b2e      	ldr	r3, [pc, #184]	; (8002fac <HAL_SPI_MspInit+0x1c4>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <HAL_SPI_MspInit+0x1c4>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002efc:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <HAL_SPI_MspInit+0x1c4>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <HAL_SPI_MspInit+0x1c4>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002f08:	4828      	ldr	r0, [pc, #160]	; (8002fac <HAL_SPI_MspInit+0x1c4>)
 8002f0a:	f000 fb6f 	bl	80035ec <HAL_DMA_Init>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8002f14:	f7ff fe72 	bl	8002bfc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a24      	ldr	r2, [pc, #144]	; (8002fac <HAL_SPI_MspInit+0x1c4>)
 8002f1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f1e:	4a23      	ldr	r2, [pc, #140]	; (8002fac <HAL_SPI_MspInit+0x1c4>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002f24:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <HAL_SPI_MspInit+0x1cc>)
 8002f26:	4a24      	ldr	r2, [pc, #144]	; (8002fb8 <HAL_SPI_MspInit+0x1d0>)
 8002f28:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002f2a:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <HAL_SPI_MspInit+0x1cc>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f30:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_SPI_MspInit+0x1cc>)
 8002f32:	2240      	movs	r2, #64	; 0x40
 8002f34:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f36:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <HAL_SPI_MspInit+0x1cc>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_SPI_MspInit+0x1cc>)
 8002f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f42:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <HAL_SPI_MspInit+0x1cc>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <HAL_SPI_MspInit+0x1cc>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002f50:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <HAL_SPI_MspInit+0x1cc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <HAL_SPI_MspInit+0x1cc>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <HAL_SPI_MspInit+0x1cc>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002f62:	4814      	ldr	r0, [pc, #80]	; (8002fb4 <HAL_SPI_MspInit+0x1cc>)
 8002f64:	f000 fb42 	bl	80035ec <HAL_DMA_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 8002f6e:	f7ff fe45 	bl	8002bfc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <HAL_SPI_MspInit+0x1cc>)
 8002f76:	649a      	str	r2, [r3, #72]	; 0x48
 8002f78:	4a0e      	ldr	r2, [pc, #56]	; (8002fb4 <HAL_SPI_MspInit+0x1cc>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	2024      	movs	r0, #36	; 0x24
 8002f84:	f000 fafb 	bl	800357e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002f88:	2024      	movs	r0, #36	; 0x24
 8002f8a:	f000 fb14 	bl	80035b6 <HAL_NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3730      	adds	r7, #48	; 0x30
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40013000 	.word	0x40013000
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	40003800 	.word	0x40003800
 8002fa8:	40020400 	.word	0x40020400
 8002fac:	200004c8 	.word	0x200004c8
 8002fb0:	40026058 	.word	0x40026058
 8002fb4:	20000528 	.word	0x20000528
 8002fb8:	40026070 	.word	0x40026070

08002fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d10d      	bne.n	8002fea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <HAL_TIM_Base_MspInit+0x40>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <HAL_TIM_Base_MspInit+0x40>)
 8002fd8:	f043 0310 	orr.w	r3, r3, #16
 8002fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <HAL_TIM_Base_MspInit+0x40>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40001000 	.word	0x40001000
 8002ffc:	40023800 	.word	0x40023800

08003000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a34      	ldr	r2, [pc, #208]	; (80030f0 <HAL_UART_MspInit+0xf0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d161      	bne.n	80030e6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	4b33      	ldr	r3, [pc, #204]	; (80030f4 <HAL_UART_MspInit+0xf4>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	4a32      	ldr	r2, [pc, #200]	; (80030f4 <HAL_UART_MspInit+0xf4>)
 800302c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003030:	6413      	str	r3, [r2, #64]	; 0x40
 8003032:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <HAL_UART_MspInit+0xf4>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <HAL_UART_MspInit+0xf4>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	4a2b      	ldr	r2, [pc, #172]	; (80030f4 <HAL_UART_MspInit+0xf4>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <HAL_UART_MspInit+0xf4>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800305a:	230c      	movs	r3, #12
 800305c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305e:	2302      	movs	r3, #2
 8003060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003066:	2303      	movs	r3, #3
 8003068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800306a:	2307      	movs	r3, #7
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	f107 0314 	add.w	r3, r7, #20
 8003072:	4619      	mov	r1, r3
 8003074:	4820      	ldr	r0, [pc, #128]	; (80030f8 <HAL_UART_MspInit+0xf8>)
 8003076:	f000 fe35 	bl	8003ce4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_UART_MspInit+0xfc>)
 800307c:	4a20      	ldr	r2, [pc, #128]	; (8003100 <HAL_UART_MspInit+0x100>)
 800307e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003080:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_UART_MspInit+0xfc>)
 8003082:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003086:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003088:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <HAL_UART_MspInit+0xfc>)
 800308a:	2240      	movs	r2, #64	; 0x40
 800308c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <HAL_UART_MspInit+0xfc>)
 8003090:	2200      	movs	r2, #0
 8003092:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_UART_MspInit+0xfc>)
 8003096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800309a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800309c:	4b17      	ldr	r3, [pc, #92]	; (80030fc <HAL_UART_MspInit+0xfc>)
 800309e:	2200      	movs	r2, #0
 80030a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_UART_MspInit+0xfc>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80030a8:	4b14      	ldr	r3, [pc, #80]	; (80030fc <HAL_UART_MspInit+0xfc>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_UART_MspInit+0xfc>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_UART_MspInit+0xfc>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80030ba:	4810      	ldr	r0, [pc, #64]	; (80030fc <HAL_UART_MspInit+0xfc>)
 80030bc:	f000 fa96 	bl	80035ec <HAL_DMA_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80030c6:	f7ff fd99 	bl	8002bfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <HAL_UART_MspInit+0xfc>)
 80030ce:	635a      	str	r2, [r3, #52]	; 0x34
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_UART_MspInit+0xfc>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2100      	movs	r1, #0
 80030da:	2026      	movs	r0, #38	; 0x26
 80030dc:	f000 fa4f 	bl	800357e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030e0:	2026      	movs	r0, #38	; 0x26
 80030e2:	f000 fa68 	bl	80035b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	; 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40004400 	.word	0x40004400
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40020000 	.word	0x40020000
 80030fc:	20000614 	.word	0x20000614
 8003100:	400260a0 	.word	0x400260a0

08003104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003108:	e7fe      	b.n	8003108 <NMI_Handler+0x4>

0800310a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310e:	e7fe      	b.n	800310e <HardFault_Handler+0x4>

08003110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003114:	e7fe      	b.n	8003114 <MemManage_Handler+0x4>

08003116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800311a:	e7fe      	b.n	800311a <BusFault_Handler+0x4>

0800311c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003120:	e7fe      	b.n	8003120 <UsageFault_Handler+0x4>

08003122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003150:	f000 f8f6 	bl	8003340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}

08003158 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800315c:	4802      	ldr	r0, [pc, #8]	; (8003168 <DMA1_Stream3_IRQHandler+0x10>)
 800315e:	f000 fb85 	bl	800386c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	200004c8 	.word	0x200004c8

0800316c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003170:	4802      	ldr	r0, [pc, #8]	; (800317c <DMA1_Stream4_IRQHandler+0x10>)
 8003172:	f000 fb7b 	bl	800386c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000528 	.word	0x20000528

08003180 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003184:	4802      	ldr	r0, [pc, #8]	; (8003190 <DMA1_Stream6_IRQHandler+0x10>)
 8003186:	f000 fb71 	bl	800386c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000614 	.word	0x20000614

08003194 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX1280_INT_Pin);
 8003198:	f44f 7080 	mov.w	r0, #256	; 0x100
 800319c:	f000 ff8a 	bl	80040b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80031a8:	4802      	ldr	r0, [pc, #8]	; (80031b4 <SPI2_IRQHandler+0x10>)
 80031aa:	f004 f801 	bl	80071b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000470 	.word	0x20000470

080031b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031bc:	4802      	ldr	r0, [pc, #8]	; (80031c8 <USART2_IRQHandler+0x10>)
 80031be:	f004 fb99 	bl	80078f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	200005d0 	.word	0x200005d0

080031cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80031d0:	4802      	ldr	r0, [pc, #8]	; (80031dc <OTG_FS_IRQHandler+0x10>)
 80031d2:	f001 febb 	bl	8004f4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20001b58 	.word	0x20001b58

080031e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return 1;
 80031e4:	2301      	movs	r3, #1
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <_kill>:

int _kill(int pid, int sig)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031fa:	f009 fb95 	bl	800c928 <__errno>
 80031fe:	4603      	mov	r3, r0
 8003200:	2216      	movs	r2, #22
 8003202:	601a      	str	r2, [r3, #0]
  return -1;
 8003204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <_exit>:

void _exit (int status)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003218:	f04f 31ff 	mov.w	r1, #4294967295
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ffe7 	bl	80031f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003222:	e7fe      	b.n	8003222 <_exit+0x12>

08003224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <SystemInit+0x20>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	4a05      	ldr	r2, [pc, #20]	; (8003244 <SystemInit+0x20>)
 8003230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800324c:	480d      	ldr	r0, [pc, #52]	; (8003284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800324e:	490e      	ldr	r1, [pc, #56]	; (8003288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003250:	4a0e      	ldr	r2, [pc, #56]	; (800328c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003254:	e002      	b.n	800325c <LoopCopyDataInit>

08003256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325a:	3304      	adds	r3, #4

0800325c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800325c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800325e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003260:	d3f9      	bcc.n	8003256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003262:	4a0b      	ldr	r2, [pc, #44]	; (8003290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003264:	4c0b      	ldr	r4, [pc, #44]	; (8003294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003268:	e001      	b.n	800326e <LoopFillZerobss>

0800326a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800326c:	3204      	adds	r2, #4

0800326e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800326e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003270:	d3fb      	bcc.n	800326a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003272:	f7ff ffd7 	bl	8003224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003276:	f009 fb5d 	bl	800c934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800327a:	f7ff f9a1 	bl	80025c0 <main>
  bx  lr    
 800327e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003288:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 800328c:	0800cc64 	.word	0x0800cc64
  ldr r2, =_sbss
 8003290:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8003294:	20002290 	.word	0x20002290

08003298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003298:	e7fe      	b.n	8003298 <ADC_IRQHandler>
	...

0800329c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_Init+0x40>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <HAL_Init+0x40>)
 80032a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_Init+0x40>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <HAL_Init+0x40>)
 80032b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <HAL_Init+0x40>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a07      	ldr	r2, [pc, #28]	; (80032dc <HAL_Init+0x40>)
 80032be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c4:	2003      	movs	r0, #3
 80032c6:	f000 f94f 	bl	8003568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ca:	2000      	movs	r0, #0
 80032cc:	f000 f808 	bl	80032e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032d0:	f7ff fc9a 	bl	8002c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023c00 	.word	0x40023c00

080032e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_InitTick+0x54>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_InitTick+0x58>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f967 	bl	80035d2 <HAL_SYSTICK_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00e      	b.n	800332c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b0f      	cmp	r3, #15
 8003312:	d80a      	bhi.n	800332a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003314:	2200      	movs	r2, #0
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	f000 f92f 	bl	800357e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003320:	4a06      	ldr	r2, [pc, #24]	; (800333c <HAL_InitTick+0x5c>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000000 	.word	0x20000000
 8003338:	20000008 	.word	0x20000008
 800333c:	20000004 	.word	0x20000004

08003340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_IncTick+0x20>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b06      	ldr	r3, [pc, #24]	; (8003364 <HAL_IncTick+0x24>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4413      	add	r3, r2
 8003350:	4a04      	ldr	r2, [pc, #16]	; (8003364 <HAL_IncTick+0x24>)
 8003352:	6013      	str	r3, [r2, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000008 	.word	0x20000008
 8003364:	20000674 	.word	0x20000674

08003368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return uwTick;
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_GetTick+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000674 	.word	0x20000674

08003380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff ffee 	bl	8003368 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d005      	beq.n	80033a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_Delay+0x44>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033a6:	bf00      	nop
 80033a8:	f7ff ffde 	bl	8003368 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d8f7      	bhi.n	80033a8 <HAL_Delay+0x28>
  {
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000008 	.word	0x20000008

080033c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <__NVIC_SetPriorityGrouping+0x44>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033e4:	4013      	ands	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fa:	4a04      	ldr	r2, [pc, #16]	; (800340c <__NVIC_SetPriorityGrouping+0x44>)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	60d3      	str	r3, [r2, #12]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <__NVIC_GetPriorityGrouping+0x18>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	f003 0307 	and.w	r3, r3, #7
}
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	2b00      	cmp	r3, #0
 800343c:	db0b      	blt.n	8003456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	4907      	ldr	r1, [pc, #28]	; (8003464 <__NVIC_EnableIRQ+0x38>)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	2001      	movs	r0, #1
 800344e:	fa00 f202 	lsl.w	r2, r0, r2
 8003452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000e100 	.word	0xe000e100

08003468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	6039      	str	r1, [r7, #0]
 8003472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003478:	2b00      	cmp	r3, #0
 800347a:	db0a      	blt.n	8003492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	b2da      	uxtb	r2, r3
 8003480:	490c      	ldr	r1, [pc, #48]	; (80034b4 <__NVIC_SetPriority+0x4c>)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	0112      	lsls	r2, r2, #4
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	440b      	add	r3, r1
 800348c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003490:	e00a      	b.n	80034a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	b2da      	uxtb	r2, r3
 8003496:	4908      	ldr	r1, [pc, #32]	; (80034b8 <__NVIC_SetPriority+0x50>)
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	3b04      	subs	r3, #4
 80034a0:	0112      	lsls	r2, r2, #4
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	440b      	add	r3, r1
 80034a6:	761a      	strb	r2, [r3, #24]
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000e100 	.word	0xe000e100
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034bc:	b480      	push	{r7}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f1c3 0307 	rsb	r3, r3, #7
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	bf28      	it	cs
 80034da:	2304      	movcs	r3, #4
 80034dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3304      	adds	r3, #4
 80034e2:	2b06      	cmp	r3, #6
 80034e4:	d902      	bls.n	80034ec <NVIC_EncodePriority+0x30>
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3b03      	subs	r3, #3
 80034ea:	e000      	b.n	80034ee <NVIC_EncodePriority+0x32>
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f0:	f04f 32ff 	mov.w	r2, #4294967295
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43da      	mvns	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	401a      	ands	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003504:	f04f 31ff 	mov.w	r1, #4294967295
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	43d9      	mvns	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003514:	4313      	orrs	r3, r2
         );
}
 8003516:	4618      	mov	r0, r3
 8003518:	3724      	adds	r7, #36	; 0x24
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3b01      	subs	r3, #1
 8003530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003534:	d301      	bcc.n	800353a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003536:	2301      	movs	r3, #1
 8003538:	e00f      	b.n	800355a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <SysTick_Config+0x40>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3b01      	subs	r3, #1
 8003540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003542:	210f      	movs	r1, #15
 8003544:	f04f 30ff 	mov.w	r0, #4294967295
 8003548:	f7ff ff8e 	bl	8003468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <SysTick_Config+0x40>)
 800354e:	2200      	movs	r2, #0
 8003550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003552:	4b04      	ldr	r3, [pc, #16]	; (8003564 <SysTick_Config+0x40>)
 8003554:	2207      	movs	r2, #7
 8003556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	e000e010 	.word	0xe000e010

08003568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ff29 	bl	80033c8 <__NVIC_SetPriorityGrouping>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800357e:	b580      	push	{r7, lr}
 8003580:	b086      	sub	sp, #24
 8003582:	af00      	add	r7, sp, #0
 8003584:	4603      	mov	r3, r0
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003590:	f7ff ff3e 	bl	8003410 <__NVIC_GetPriorityGrouping>
 8003594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	6978      	ldr	r0, [r7, #20]
 800359c:	f7ff ff8e 	bl	80034bc <NVIC_EncodePriority>
 80035a0:	4602      	mov	r2, r0
 80035a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff5d 	bl	8003468 <__NVIC_SetPriority>
}
 80035ae:	bf00      	nop
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	4603      	mov	r3, r0
 80035be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff31 	bl	800342c <__NVIC_EnableIRQ>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff ffa2 	bl	8003524 <SysTick_Config>
 80035e0:	4603      	mov	r3, r0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035f8:	f7ff feb6 	bl	8003368 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e099      	b.n	800373c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003628:	e00f      	b.n	800364a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800362a:	f7ff fe9d 	bl	8003368 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b05      	cmp	r3, #5
 8003636:	d908      	bls.n	800364a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2203      	movs	r2, #3
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e078      	b.n	800373c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e8      	bne.n	800362a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4b38      	ldr	r3, [pc, #224]	; (8003744 <HAL_DMA_Init+0x158>)
 8003664:	4013      	ands	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003676:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d107      	bne.n	80036b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	4313      	orrs	r3, r2
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f023 0307 	bic.w	r3, r3, #7
 80036ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d117      	bne.n	800370e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00e      	beq.n	800370e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fa7b 	bl	8003bec <DMA_CheckFifoParam>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2240      	movs	r2, #64	; 0x40
 8003700:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800370a:	2301      	movs	r3, #1
 800370c:	e016      	b.n	800373c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fa32 	bl	8003b80 <DMA_CalcBaseAndBitshift>
 800371c:	4603      	mov	r3, r0
 800371e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003724:	223f      	movs	r2, #63	; 0x3f
 8003726:	409a      	lsls	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	f010803f 	.word	0xf010803f

08003748 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003756:	f7ff fe07 	bl	8003368 <HAL_GetTick>
 800375a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d008      	beq.n	800377a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2280      	movs	r2, #128	; 0x80
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e052      	b.n	8003820 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0216 	bic.w	r2, r2, #22
 8003788:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003798:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_DMA_Abort+0x62>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0208 	bic.w	r2, r2, #8
 80037b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ca:	e013      	b.n	80037f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037cc:	f7ff fdcc 	bl	8003368 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b05      	cmp	r3, #5
 80037d8:	d90c      	bls.n	80037f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2203      	movs	r2, #3
 80037e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e015      	b.n	8003820 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e4      	bne.n	80037cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	223f      	movs	r2, #63	; 0x3f
 8003808:	409a      	lsls	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d004      	beq.n	8003846 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2280      	movs	r2, #128	; 0x80
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e00c      	b.n	8003860 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2205      	movs	r2, #5
 800384a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003878:	4b8e      	ldr	r3, [pc, #568]	; (8003ab4 <HAL_DMA_IRQHandler+0x248>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a8e      	ldr	r2, [pc, #568]	; (8003ab8 <HAL_DMA_IRQHandler+0x24c>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0a9b      	lsrs	r3, r3, #10
 8003884:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	2208      	movs	r2, #8
 8003898:	409a      	lsls	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d01a      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0204 	bic.w	r2, r2, #4
 80038be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c4:	2208      	movs	r2, #8
 80038c6:	409a      	lsls	r2, r3
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	f043 0201 	orr.w	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	2201      	movs	r2, #1
 80038de:	409a      	lsls	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d012      	beq.n	800390e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	2201      	movs	r2, #1
 80038fc:	409a      	lsls	r2, r3
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f043 0202 	orr.w	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	2204      	movs	r2, #4
 8003914:	409a      	lsls	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d012      	beq.n	8003944 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00b      	beq.n	8003944 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	2204      	movs	r2, #4
 8003932:	409a      	lsls	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f043 0204 	orr.w	r2, r3, #4
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	2210      	movs	r2, #16
 800394a:	409a      	lsls	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d043      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d03c      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	2210      	movs	r2, #16
 8003968:	409a      	lsls	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d018      	beq.n	80039ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d024      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
 800399a:	e01f      	b.n	80039dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01b      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
 80039ac:	e016      	b.n	80039dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d107      	bne.n	80039cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0208 	bic.w	r2, r2, #8
 80039ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	2220      	movs	r2, #32
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 808f 	beq.w	8003b0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8087 	beq.w	8003b0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	2220      	movs	r2, #32
 8003a04:	409a      	lsls	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d136      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0216 	bic.w	r2, r2, #22
 8003a24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <HAL_DMA_IRQHandler+0x1da>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0208 	bic.w	r2, r2, #8
 8003a54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5a:	223f      	movs	r2, #63	; 0x3f
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d07e      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
        }
        return;
 8003a82:	e079      	b.n	8003b78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01d      	beq.n	8003ace <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10d      	bne.n	8003abc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d031      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
 8003ab0:	e02c      	b.n	8003b0c <HAL_DMA_IRQHandler+0x2a0>
 8003ab2:	bf00      	nop
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d023      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
 8003acc:	e01e      	b.n	8003b0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10f      	bne.n	8003afc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0210 	bic.w	r2, r2, #16
 8003aea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d032      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d022      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2205      	movs	r2, #5
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d307      	bcc.n	8003b54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f2      	bne.n	8003b38 <HAL_DMA_IRQHandler+0x2cc>
 8003b52:	e000      	b.n	8003b56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
 8003b76:	e000      	b.n	8003b7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b78:	bf00      	nop
    }
  }
}
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	3b10      	subs	r3, #16
 8003b90:	4a14      	ldr	r2, [pc, #80]	; (8003be4 <DMA_CalcBaseAndBitshift+0x64>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b9a:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <DMA_CalcBaseAndBitshift+0x68>)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d909      	bls.n	8003bc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bb6:	f023 0303 	bic.w	r3, r3, #3
 8003bba:	1d1a      	adds	r2, r3, #4
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	659a      	str	r2, [r3, #88]	; 0x58
 8003bc0:	e007      	b.n	8003bd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	aaaaaaab 	.word	0xaaaaaaab
 8003be8:	0800cc40 	.word	0x0800cc40

08003bec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d11f      	bne.n	8003c46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d856      	bhi.n	8003cba <DMA_CheckFifoParam+0xce>
 8003c0c:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <DMA_CheckFifoParam+0x28>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c25 	.word	0x08003c25
 8003c18:	08003c37 	.word	0x08003c37
 8003c1c:	08003c25 	.word	0x08003c25
 8003c20:	08003cbb 	.word	0x08003cbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d046      	beq.n	8003cbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c34:	e043      	b.n	8003cbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c3e:	d140      	bne.n	8003cc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c44:	e03d      	b.n	8003cc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c4e:	d121      	bne.n	8003c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d837      	bhi.n	8003cc6 <DMA_CheckFifoParam+0xda>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <DMA_CheckFifoParam+0x70>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003c6d 	.word	0x08003c6d
 8003c60:	08003c73 	.word	0x08003c73
 8003c64:	08003c6d 	.word	0x08003c6d
 8003c68:	08003c85 	.word	0x08003c85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c70:	e030      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d025      	beq.n	8003cca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c82:	e022      	b.n	8003cca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c8c:	d11f      	bne.n	8003cce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c92:	e01c      	b.n	8003cce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d903      	bls.n	8003ca2 <DMA_CheckFifoParam+0xb6>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d003      	beq.n	8003ca8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ca0:	e018      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca6:	e015      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00e      	beq.n	8003cd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb8:	e00b      	b.n	8003cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8003cba:	bf00      	nop
 8003cbc:	e00a      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e008      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e006      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e004      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cca:	bf00      	nop
 8003ccc:	e002      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003cce:	bf00      	nop
 8003cd0:	e000      	b.n	8003cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003cd2:	bf00      	nop
    }
  } 
  
  return status; 
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop

08003ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	e16b      	b.n	8003fd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d00:	2201      	movs	r2, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	f040 815a 	bne.w	8003fd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d005      	beq.n	8003d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d130      	bne.n	8003d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	2203      	movs	r2, #3
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43db      	mvns	r3, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	f003 0201 	and.w	r2, r3, #1
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d017      	beq.n	8003dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	2203      	movs	r2, #3
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d123      	bne.n	8003e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	08da      	lsrs	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3208      	adds	r2, #8
 8003de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	220f      	movs	r2, #15
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	08da      	lsrs	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3208      	adds	r2, #8
 8003e22:	69b9      	ldr	r1, [r7, #24]
 8003e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	2203      	movs	r2, #3
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 0203 	and.w	r2, r3, #3
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80b4 	beq.w	8003fd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	4b60      	ldr	r3, [pc, #384]	; (8003ff0 <HAL_GPIO_Init+0x30c>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	4a5f      	ldr	r2, [pc, #380]	; (8003ff0 <HAL_GPIO_Init+0x30c>)
 8003e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e78:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7a:	4b5d      	ldr	r3, [pc, #372]	; (8003ff0 <HAL_GPIO_Init+0x30c>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e86:	4a5b      	ldr	r2, [pc, #364]	; (8003ff4 <HAL_GPIO_Init+0x310>)
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	089b      	lsrs	r3, r3, #2
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	220f      	movs	r2, #15
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a52      	ldr	r2, [pc, #328]	; (8003ff8 <HAL_GPIO_Init+0x314>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d02b      	beq.n	8003f0a <HAL_GPIO_Init+0x226>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a51      	ldr	r2, [pc, #324]	; (8003ffc <HAL_GPIO_Init+0x318>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d025      	beq.n	8003f06 <HAL_GPIO_Init+0x222>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a50      	ldr	r2, [pc, #320]	; (8004000 <HAL_GPIO_Init+0x31c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01f      	beq.n	8003f02 <HAL_GPIO_Init+0x21e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a4f      	ldr	r2, [pc, #316]	; (8004004 <HAL_GPIO_Init+0x320>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d019      	beq.n	8003efe <HAL_GPIO_Init+0x21a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a4e      	ldr	r2, [pc, #312]	; (8004008 <HAL_GPIO_Init+0x324>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d013      	beq.n	8003efa <HAL_GPIO_Init+0x216>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a4d      	ldr	r2, [pc, #308]	; (800400c <HAL_GPIO_Init+0x328>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00d      	beq.n	8003ef6 <HAL_GPIO_Init+0x212>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a4c      	ldr	r2, [pc, #304]	; (8004010 <HAL_GPIO_Init+0x32c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <HAL_GPIO_Init+0x20e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a4b      	ldr	r2, [pc, #300]	; (8004014 <HAL_GPIO_Init+0x330>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d101      	bne.n	8003eee <HAL_GPIO_Init+0x20a>
 8003eea:	2307      	movs	r3, #7
 8003eec:	e00e      	b.n	8003f0c <HAL_GPIO_Init+0x228>
 8003eee:	2308      	movs	r3, #8
 8003ef0:	e00c      	b.n	8003f0c <HAL_GPIO_Init+0x228>
 8003ef2:	2306      	movs	r3, #6
 8003ef4:	e00a      	b.n	8003f0c <HAL_GPIO_Init+0x228>
 8003ef6:	2305      	movs	r3, #5
 8003ef8:	e008      	b.n	8003f0c <HAL_GPIO_Init+0x228>
 8003efa:	2304      	movs	r3, #4
 8003efc:	e006      	b.n	8003f0c <HAL_GPIO_Init+0x228>
 8003efe:	2303      	movs	r3, #3
 8003f00:	e004      	b.n	8003f0c <HAL_GPIO_Init+0x228>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e002      	b.n	8003f0c <HAL_GPIO_Init+0x228>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <HAL_GPIO_Init+0x228>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	f002 0203 	and.w	r2, r2, #3
 8003f12:	0092      	lsls	r2, r2, #2
 8003f14:	4093      	lsls	r3, r2
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f1c:	4935      	ldr	r1, [pc, #212]	; (8003ff4 <HAL_GPIO_Init+0x310>)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	089b      	lsrs	r3, r3, #2
 8003f22:	3302      	adds	r3, #2
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f2a:	4b3b      	ldr	r3, [pc, #236]	; (8004018 <HAL_GPIO_Init+0x334>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	43db      	mvns	r3, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4013      	ands	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f4e:	4a32      	ldr	r2, [pc, #200]	; (8004018 <HAL_GPIO_Init+0x334>)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f54:	4b30      	ldr	r3, [pc, #192]	; (8004018 <HAL_GPIO_Init+0x334>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f78:	4a27      	ldr	r2, [pc, #156]	; (8004018 <HAL_GPIO_Init+0x334>)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f7e:	4b26      	ldr	r3, [pc, #152]	; (8004018 <HAL_GPIO_Init+0x334>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fa2:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <HAL_GPIO_Init+0x334>)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <HAL_GPIO_Init+0x334>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fcc:	4a12      	ldr	r2, [pc, #72]	; (8004018 <HAL_GPIO_Init+0x334>)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	2b0f      	cmp	r3, #15
 8003fdc:	f67f ae90 	bls.w	8003d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	3724      	adds	r7, #36	; 0x24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40013800 	.word	0x40013800
 8003ff8:	40020000 	.word	0x40020000
 8003ffc:	40020400 	.word	0x40020400
 8004000:	40020800 	.word	0x40020800
 8004004:	40020c00 	.word	0x40020c00
 8004008:	40021000 	.word	0x40021000
 800400c:	40021400 	.word	0x40021400
 8004010:	40021800 	.word	0x40021800
 8004014:	40021c00 	.word	0x40021c00
 8004018:	40013c00 	.word	0x40013c00

0800401c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	e001      	b.n	800403e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800403e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
 8004058:	4613      	mov	r3, r2
 800405a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800405c:	787b      	ldrb	r3, [r7, #1]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004062:	887a      	ldrh	r2, [r7, #2]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004068:	e003      	b.n	8004072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800406a:	887b      	ldrh	r3, [r7, #2]
 800406c:	041a      	lsls	r2, r3, #16
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	619a      	str	r2, [r3, #24]
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	460b      	mov	r3, r1
 8004088:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004090:	887a      	ldrh	r2, [r7, #2]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4013      	ands	r3, r2
 8004096:	041a      	lsls	r2, r3, #16
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	43d9      	mvns	r1, r3
 800409c:	887b      	ldrh	r3, [r7, #2]
 800409e:	400b      	ands	r3, r1
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	619a      	str	r2, [r3, #24]
}
 80040a6:	bf00      	nop
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040be:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d006      	beq.n	80040d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040ca:	4a05      	ldr	r2, [pc, #20]	; (80040e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fc ff6a 	bl	8000fac <HAL_GPIO_EXTI_Callback>
  }
}
 80040d8:	bf00      	nop
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40013c00 	.word	0x40013c00

080040e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e12b      	b.n	800434e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fe fda4 	bl	8002c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2224      	movs	r2, #36	; 0x24
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004136:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004146:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004148:	f002 fc9e 	bl	8006a88 <HAL_RCC_GetPCLK1Freq>
 800414c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4a81      	ldr	r2, [pc, #516]	; (8004358 <HAL_I2C_Init+0x274>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d807      	bhi.n	8004168 <HAL_I2C_Init+0x84>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4a80      	ldr	r2, [pc, #512]	; (800435c <HAL_I2C_Init+0x278>)
 800415c:	4293      	cmp	r3, r2
 800415e:	bf94      	ite	ls
 8004160:	2301      	movls	r3, #1
 8004162:	2300      	movhi	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	e006      	b.n	8004176 <HAL_I2C_Init+0x92>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a7d      	ldr	r2, [pc, #500]	; (8004360 <HAL_I2C_Init+0x27c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	bf94      	ite	ls
 8004170:	2301      	movls	r3, #1
 8004172:	2300      	movhi	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e0e7      	b.n	800434e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4a78      	ldr	r2, [pc, #480]	; (8004364 <HAL_I2C_Init+0x280>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	0c9b      	lsrs	r3, r3, #18
 8004188:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	4a6a      	ldr	r2, [pc, #424]	; (8004358 <HAL_I2C_Init+0x274>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d802      	bhi.n	80041b8 <HAL_I2C_Init+0xd4>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	3301      	adds	r3, #1
 80041b6:	e009      	b.n	80041cc <HAL_I2C_Init+0xe8>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	4a69      	ldr	r2, [pc, #420]	; (8004368 <HAL_I2C_Init+0x284>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	099b      	lsrs	r3, r3, #6
 80041ca:	3301      	adds	r3, #1
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	430b      	orrs	r3, r1
 80041d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	495c      	ldr	r1, [pc, #368]	; (8004358 <HAL_I2C_Init+0x274>)
 80041e8:	428b      	cmp	r3, r1
 80041ea:	d819      	bhi.n	8004220 <HAL_I2C_Init+0x13c>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1e59      	subs	r1, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80041fa:	1c59      	adds	r1, r3, #1
 80041fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004200:	400b      	ands	r3, r1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_I2C_Init+0x138>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1e59      	subs	r1, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	fbb1 f3f3 	udiv	r3, r1, r3
 8004214:	3301      	adds	r3, #1
 8004216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421a:	e051      	b.n	80042c0 <HAL_I2C_Init+0x1dc>
 800421c:	2304      	movs	r3, #4
 800421e:	e04f      	b.n	80042c0 <HAL_I2C_Init+0x1dc>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d111      	bne.n	800424c <HAL_I2C_Init+0x168>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	1e58      	subs	r0, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	440b      	add	r3, r1
 8004236:	fbb0 f3f3 	udiv	r3, r0, r3
 800423a:	3301      	adds	r3, #1
 800423c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004240:	2b00      	cmp	r3, #0
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e012      	b.n	8004272 <HAL_I2C_Init+0x18e>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	1e58      	subs	r0, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6859      	ldr	r1, [r3, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	0099      	lsls	r1, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004262:	3301      	adds	r3, #1
 8004264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_Init+0x196>
 8004276:	2301      	movs	r3, #1
 8004278:	e022      	b.n	80042c0 <HAL_I2C_Init+0x1dc>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10e      	bne.n	80042a0 <HAL_I2C_Init+0x1bc>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1e58      	subs	r0, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6859      	ldr	r1, [r3, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	440b      	add	r3, r1
 8004290:	fbb0 f3f3 	udiv	r3, r0, r3
 8004294:	3301      	adds	r3, #1
 8004296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800429e:	e00f      	b.n	80042c0 <HAL_I2C_Init+0x1dc>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1e58      	subs	r0, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	0099      	lsls	r1, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042b6:	3301      	adds	r3, #1
 80042b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	6809      	ldr	r1, [r1, #0]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69da      	ldr	r2, [r3, #28]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6911      	ldr	r1, [r2, #16]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68d2      	ldr	r2, [r2, #12]
 80042fa:	4311      	orrs	r1, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	430b      	orrs	r3, r1
 8004302:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	000186a0 	.word	0x000186a0
 800435c:	001e847f 	.word	0x001e847f
 8004360:	003d08ff 	.word	0x003d08ff
 8004364:	431bde83 	.word	0x431bde83
 8004368:	10624dd3 	.word	0x10624dd3

0800436c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e128      	b.n	80045d0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a90      	ldr	r2, [pc, #576]	; (80045d8 <HAL_I2S_Init+0x26c>)
 8004396:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7fe fca5 	bl	8002ce8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80043b4:	f023 030f 	bic.w	r3, r3, #15
 80043b8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2202      	movs	r2, #2
 80043c0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d060      	beq.n	800448c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80043d2:	2310      	movs	r3, #16
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e001      	b.n	80043dc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80043d8:	2320      	movs	r3, #32
 80043da:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d802      	bhi.n	80043ea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80043ea:	2001      	movs	r0, #1
 80043ec:	f002 fc56 	bl	8006c9c <HAL_RCCEx_GetPeriphCLKFreq>
 80043f0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fa:	d125      	bne.n	8004448 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	fbb2 f2f3 	udiv	r2, r2, r3
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	461a      	mov	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	3305      	adds	r3, #5
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	e01f      	b.n	8004466 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	461a      	mov	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004442:	3305      	adds	r3, #5
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	e00e      	b.n	8004466 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	3305      	adds	r3, #5
 8004464:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4a5c      	ldr	r2, [pc, #368]	; (80045dc <HAL_I2S_Init+0x270>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	08db      	lsrs	r3, r3, #3
 8004470:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	085b      	lsrs	r3, r3, #1
 8004482:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	e003      	b.n	8004494 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800448c:	2302      	movs	r3, #2
 800448e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d902      	bls.n	80044a0 <HAL_I2S_Init+0x134>
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	2bff      	cmp	r3, #255	; 0xff
 800449e:	d907      	bls.n	80044b0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	f043 0210 	orr.w	r2, r3, #16
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e08f      	b.n	80045d0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	ea42 0103 	orr.w	r1, r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80044ce:	f023 030f 	bic.w	r3, r3, #15
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6851      	ldr	r1, [r2, #4]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6892      	ldr	r2, [r2, #8]
 80044da:	4311      	orrs	r1, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	68d2      	ldr	r2, [r2, #12]
 80044e0:	4311      	orrs	r1, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6992      	ldr	r2, [r2, #24]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d161      	bne.n	80045c0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a38      	ldr	r2, [pc, #224]	; (80045e0 <HAL_I2S_Init+0x274>)
 8004500:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a37      	ldr	r2, [pc, #220]	; (80045e4 <HAL_I2S_Init+0x278>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d101      	bne.n	8004510 <HAL_I2S_Init+0x1a4>
 800450c:	4b36      	ldr	r3, [pc, #216]	; (80045e8 <HAL_I2S_Init+0x27c>)
 800450e:	e001      	b.n	8004514 <HAL_I2S_Init+0x1a8>
 8004510:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	4932      	ldr	r1, [pc, #200]	; (80045e4 <HAL_I2S_Init+0x278>)
 800451c:	428a      	cmp	r2, r1
 800451e:	d101      	bne.n	8004524 <HAL_I2S_Init+0x1b8>
 8004520:	4a31      	ldr	r2, [pc, #196]	; (80045e8 <HAL_I2S_Init+0x27c>)
 8004522:	e001      	b.n	8004528 <HAL_I2S_Init+0x1bc>
 8004524:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004528:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800452c:	f023 030f 	bic.w	r3, r3, #15
 8004530:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2b      	ldr	r2, [pc, #172]	; (80045e4 <HAL_I2S_Init+0x278>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d101      	bne.n	8004540 <HAL_I2S_Init+0x1d4>
 800453c:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <HAL_I2S_Init+0x27c>)
 800453e:	e001      	b.n	8004544 <HAL_I2S_Init+0x1d8>
 8004540:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004544:	2202      	movs	r2, #2
 8004546:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <HAL_I2S_Init+0x278>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_I2S_Init+0x1ea>
 8004552:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <HAL_I2S_Init+0x27c>)
 8004554:	e001      	b.n	800455a <HAL_I2S_Init+0x1ee>
 8004556:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004566:	d003      	beq.n	8004570 <HAL_I2S_Init+0x204>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d103      	bne.n	8004578 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	e001      	b.n	800457c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004586:	4313      	orrs	r3, r2
 8004588:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004590:	4313      	orrs	r3, r2
 8004592:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800459a:	4313      	orrs	r3, r2
 800459c:	b29a      	uxth	r2, r3
 800459e:	897b      	ldrh	r3, [r7, #10]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045a8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a0d      	ldr	r2, [pc, #52]	; (80045e4 <HAL_I2S_Init+0x278>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d101      	bne.n	80045b8 <HAL_I2S_Init+0x24c>
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <HAL_I2S_Init+0x27c>)
 80045b6:	e001      	b.n	80045bc <HAL_I2S_Init+0x250>
 80045b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045bc:	897a      	ldrh	r2, [r7, #10]
 80045be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	080046e3 	.word	0x080046e3
 80045dc:	cccccccd 	.word	0xcccccccd
 80045e0:	080047f9 	.word	0x080047f9
 80045e4:	40003800 	.word	0x40003800
 80045e8:	40003400 	.word	0x40003400

080045ec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	881a      	ldrh	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	1c9a      	adds	r2, r3, #2
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10e      	bne.n	800467c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800466c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff ffb8 	bl	80045ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800467c:	bf00      	nop
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	b292      	uxth	r2, r2
 8004698:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	1c9a      	adds	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10e      	bne.n	80046da <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046ca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff ff93 	bl	8004600 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b086      	sub	sp, #24
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d13a      	bne.n	8004774 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b01      	cmp	r3, #1
 8004706:	d109      	bne.n	800471c <I2S_IRQHandler+0x3a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d102      	bne.n	800471c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff ffb4 	bl	8004684 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d126      	bne.n	8004774 <I2S_IRQHandler+0x92>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b20      	cmp	r3, #32
 8004732:	d11f      	bne.n	8004774 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004742:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	f043 0202 	orr.w	r2, r3, #2
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ff50 	bl	8004614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b03      	cmp	r3, #3
 800477e:	d136      	bne.n	80047ee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b02      	cmp	r3, #2
 8004788:	d109      	bne.n	800479e <I2S_IRQHandler+0xbc>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004794:	2b80      	cmp	r3, #128	; 0x80
 8004796:	d102      	bne.n	800479e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff45 	bl	8004628 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d122      	bne.n	80047ee <I2S_IRQHandler+0x10c>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d11b      	bne.n	80047ee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047c4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e0:	f043 0204 	orr.w	r2, r3, #4
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff ff13 	bl	8004614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047ee:	bf00      	nop
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a92      	ldr	r2, [pc, #584]	; (8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d101      	bne.n	8004816 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004812:	4b92      	ldr	r3, [pc, #584]	; (8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004814:	e001      	b.n	800481a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a8b      	ldr	r2, [pc, #556]	; (8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d101      	bne.n	8004834 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004830:	4b8a      	ldr	r3, [pc, #552]	; (8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004832:	e001      	b.n	8004838 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004834:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004844:	d004      	beq.n	8004850 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f040 8099 	bne.w	8004982 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b02      	cmp	r3, #2
 8004858:	d107      	bne.n	800486a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f925 	bl	8004ab4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b01      	cmp	r3, #1
 8004872:	d107      	bne.n	8004884 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f9c8 	bl	8004c14 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488a:	2b40      	cmp	r3, #64	; 0x40
 800488c:	d13a      	bne.n	8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	d035      	beq.n	8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a6e      	ldr	r2, [pc, #440]	; (8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d101      	bne.n	80048a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80048a2:	4b6e      	ldr	r3, [pc, #440]	; (8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048a4:	e001      	b.n	80048aa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80048a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4969      	ldr	r1, [pc, #420]	; (8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048b2:	428b      	cmp	r3, r1
 80048b4:	d101      	bne.n	80048ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80048b6:	4b69      	ldr	r3, [pc, #420]	; (8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048b8:	e001      	b.n	80048be <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80048ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048c2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	f043 0202 	orr.w	r2, r3, #2
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7ff fe88 	bl	8004614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b08      	cmp	r3, #8
 800490c:	f040 80c3 	bne.w	8004a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80bd 	beq.w	8004a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800492a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a49      	ldr	r2, [pc, #292]	; (8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004936:	4b49      	ldr	r3, [pc, #292]	; (8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004938:	e001      	b.n	800493e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800493a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4944      	ldr	r1, [pc, #272]	; (8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004946:	428b      	cmp	r3, r1
 8004948:	d101      	bne.n	800494e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800494a:	4b44      	ldr	r3, [pc, #272]	; (8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800494c:	e001      	b.n	8004952 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800494e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004952:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004956:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004958:	2300      	movs	r3, #0
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	60bb      	str	r3, [r7, #8]
 8004964:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	f043 0204 	orr.w	r2, r3, #4
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff fe4a 	bl	8004614 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004980:	e089      	b.n	8004a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b02      	cmp	r3, #2
 800498a:	d107      	bne.n	800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f8be 	bl	8004b18 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d107      	bne.n	80049b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f8fd 	bl	8004bb0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d12f      	bne.n	8004a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d02a      	beq.n	8004a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049d8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a1e      	ldr	r2, [pc, #120]	; (8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d101      	bne.n	80049e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80049e4:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049e6:	e001      	b.n	80049ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80049e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4919      	ldr	r1, [pc, #100]	; (8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049f4:	428b      	cmp	r3, r1
 80049f6:	d101      	bne.n	80049fc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80049f8:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049fa:	e001      	b.n	8004a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80049fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	f043 0202 	orr.w	r2, r3, #2
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff fdfa 	bl	8004614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d136      	bne.n	8004a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d031      	beq.n	8004a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a07      	ldr	r2, [pc, #28]	; (8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d101      	bne.n	8004a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a40:	e001      	b.n	8004a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004a42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4902      	ldr	r1, [pc, #8]	; (8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a4e:	428b      	cmp	r3, r1
 8004a50:	d106      	bne.n	8004a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004a52:	4b02      	ldr	r3, [pc, #8]	; (8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a54:	e006      	b.n	8004a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004a56:	bf00      	nop
 8004a58:	40003800 	.word	0x40003800
 8004a5c:	40003400 	.word	0x40003400
 8004a60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a68:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	f043 0204 	orr.w	r2, r3, #4
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff fdc0 	bl	8004614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a94:	e000      	b.n	8004a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a96:	bf00      	nop
}
 8004a98:	bf00      	nop
 8004a9a:	3720      	adds	r7, #32
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	1c99      	adds	r1, r3, #2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6251      	str	r1, [r2, #36]	; 0x24
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d113      	bne.n	8004b0e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004af4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d106      	bne.n	8004b0e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff ffc9 	bl	8004aa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c99      	adds	r1, r3, #2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6251      	str	r1, [r2, #36]	; 0x24
 8004b2a:	8819      	ldrh	r1, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1d      	ldr	r2, [pc, #116]	; (8004ba8 <I2SEx_TxISR_I2SExt+0x90>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d101      	bne.n	8004b3a <I2SEx_TxISR_I2SExt+0x22>
 8004b36:	4b1d      	ldr	r3, [pc, #116]	; (8004bac <I2SEx_TxISR_I2SExt+0x94>)
 8004b38:	e001      	b.n	8004b3e <I2SEx_TxISR_I2SExt+0x26>
 8004b3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b3e:	460a      	mov	r2, r1
 8004b40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d121      	bne.n	8004b9e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a12      	ldr	r2, [pc, #72]	; (8004ba8 <I2SEx_TxISR_I2SExt+0x90>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d101      	bne.n	8004b68 <I2SEx_TxISR_I2SExt+0x50>
 8004b64:	4b11      	ldr	r3, [pc, #68]	; (8004bac <I2SEx_TxISR_I2SExt+0x94>)
 8004b66:	e001      	b.n	8004b6c <I2SEx_TxISR_I2SExt+0x54>
 8004b68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	490d      	ldr	r1, [pc, #52]	; (8004ba8 <I2SEx_TxISR_I2SExt+0x90>)
 8004b74:	428b      	cmp	r3, r1
 8004b76:	d101      	bne.n	8004b7c <I2SEx_TxISR_I2SExt+0x64>
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <I2SEx_TxISR_I2SExt+0x94>)
 8004b7a:	e001      	b.n	8004b80 <I2SEx_TxISR_I2SExt+0x68>
 8004b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ff81 	bl	8004aa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40003800 	.word	0x40003800
 8004bac:	40003400 	.word	0x40003400

08004bb0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68d8      	ldr	r0, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	1c99      	adds	r1, r3, #2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004bc8:	b282      	uxth	r2, r0
 8004bca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d113      	bne.n	8004c0c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bf2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff ff4a 	bl	8004aa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a20      	ldr	r2, [pc, #128]	; (8004ca4 <I2SEx_RxISR_I2SExt+0x90>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d101      	bne.n	8004c2a <I2SEx_RxISR_I2SExt+0x16>
 8004c26:	4b20      	ldr	r3, [pc, #128]	; (8004ca8 <I2SEx_RxISR_I2SExt+0x94>)
 8004c28:	e001      	b.n	8004c2e <I2SEx_RxISR_I2SExt+0x1a>
 8004c2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c2e:	68d8      	ldr	r0, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	1c99      	adds	r1, r3, #2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004c3a:	b282      	uxth	r2, r0
 8004c3c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d121      	bne.n	8004c9a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a12      	ldr	r2, [pc, #72]	; (8004ca4 <I2SEx_RxISR_I2SExt+0x90>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d101      	bne.n	8004c64 <I2SEx_RxISR_I2SExt+0x50>
 8004c60:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <I2SEx_RxISR_I2SExt+0x94>)
 8004c62:	e001      	b.n	8004c68 <I2SEx_RxISR_I2SExt+0x54>
 8004c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	490d      	ldr	r1, [pc, #52]	; (8004ca4 <I2SEx_RxISR_I2SExt+0x90>)
 8004c70:	428b      	cmp	r3, r1
 8004c72:	d101      	bne.n	8004c78 <I2SEx_RxISR_I2SExt+0x64>
 8004c74:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <I2SEx_RxISR_I2SExt+0x94>)
 8004c76:	e001      	b.n	8004c7c <I2SEx_RxISR_I2SExt+0x68>
 8004c78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c80:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff ff03 	bl	8004aa0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40003800 	.word	0x40003800
 8004ca8:	40003400 	.word	0x40003400

08004cac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cae:	b08f      	sub	sp, #60	; 0x3c
 8004cb0:	af0a      	add	r7, sp, #40	; 0x28
 8004cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e10f      	b.n	8004ede <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d106      	bne.n	8004cde <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f007 fae3 	bl	800c2a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d102      	bne.n	8004cf8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f003 fdca 	bl	8008896 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	687e      	ldr	r6, [r7, #4]
 8004d0a:	466d      	mov	r5, sp
 8004d0c:	f106 0410 	add.w	r4, r6, #16
 8004d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d20:	1d33      	adds	r3, r6, #4
 8004d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d24:	6838      	ldr	r0, [r7, #0]
 8004d26:	f003 fca1 	bl	800866c <USB_CoreInit>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0d0      	b.n	8004ede <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2100      	movs	r1, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f003 fdb8 	bl	80088b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	73fb      	strb	r3, [r7, #15]
 8004d4c:	e04a      	b.n	8004de4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d4e:	7bfa      	ldrb	r2, [r7, #15]
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	333d      	adds	r3, #61	; 0x3d
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d62:	7bfa      	ldrb	r2, [r7, #15]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	333c      	adds	r3, #60	; 0x3c
 8004d72:	7bfa      	ldrb	r2, [r7, #15]
 8004d74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d76:	7bfa      	ldrb	r2, [r7, #15]
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	b298      	uxth	r0, r3
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	3344      	adds	r3, #68	; 0x44
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d8e:	7bfa      	ldrb	r2, [r7, #15]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	3340      	adds	r3, #64	; 0x40
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004da2:	7bfa      	ldrb	r2, [r7, #15]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	3348      	adds	r3, #72	; 0x48
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004db6:	7bfa      	ldrb	r2, [r7, #15]
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	334c      	adds	r3, #76	; 0x4c
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004dca:	7bfa      	ldrb	r2, [r7, #15]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	3354      	adds	r3, #84	; 0x54
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	3301      	adds	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]
 8004de4:	7bfa      	ldrb	r2, [r7, #15]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d3af      	bcc.n	8004d4e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dee:	2300      	movs	r3, #0
 8004df0:	73fb      	strb	r3, [r7, #15]
 8004df2:	e044      	b.n	8004e7e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004df4:	7bfa      	ldrb	r2, [r7, #15]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e0a:	7bfa      	ldrb	r2, [r7, #15]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e1c:	7bfa      	ldrb	r2, [r7, #15]
 8004e1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e20:	7bfa      	ldrb	r2, [r7, #15]
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e32:	2200      	movs	r2, #0
 8004e34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e4c:	7bfa      	ldrb	r2, [r7, #15]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e62:	7bfa      	ldrb	r2, [r7, #15]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
 8004e7e:	7bfa      	ldrb	r2, [r7, #15]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d3b5      	bcc.n	8004df4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	687e      	ldr	r6, [r7, #4]
 8004e90:	466d      	mov	r5, sp
 8004e92:	f106 0410 	add.w	r4, r6, #16
 8004e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ea2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ea6:	1d33      	adds	r3, r6, #4
 8004ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004eaa:	6838      	ldr	r0, [r7, #0]
 8004eac:	f003 fd50 	bl	8008950 <USB_DevInit>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e00d      	b.n	8004ede <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f004 fe9f 	bl	8009c1a <USB_DevDisconnect>

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ee6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_PCD_Start+0x1c>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e020      	b.n	8004f44 <HAL_PCD_Start+0x5e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d109      	bne.n	8004f26 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d005      	beq.n	8004f26 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f003 fca2 	bl	8008874 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f004 fe4f 	bl	8009bd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f4c:	b590      	push	{r4, r7, lr}
 8004f4e:	b08d      	sub	sp, #52	; 0x34
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f004 ff0d 	bl	8009d82 <USB_GetMode>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f040 848a 	bne.w	8005884 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f004 fe71 	bl	8009c5c <USB_ReadInterrupts>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 8480 	beq.w	8005882 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f004 fe5e 	bl	8009c5c <USB_ReadInterrupts>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d107      	bne.n	8004fba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f002 0202 	and.w	r2, r2, #2
 8004fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f004 fe4c 	bl	8009c5c <USB_ReadInterrupts>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f003 0310 	and.w	r3, r3, #16
 8004fca:	2b10      	cmp	r3, #16
 8004fcc:	d161      	bne.n	8005092 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699a      	ldr	r2, [r3, #24]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0210 	bic.w	r2, r2, #16
 8004fdc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f003 020f 	and.w	r2, r3, #15
 8004fea:	4613      	mov	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	0c5b      	lsrs	r3, r3, #17
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	2b02      	cmp	r3, #2
 8005008:	d124      	bne.n	8005054 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005010:	4013      	ands	r3, r2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d035      	beq.n	8005082 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	091b      	lsrs	r3, r3, #4
 800501e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005020:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005024:	b29b      	uxth	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	6a38      	ldr	r0, [r7, #32]
 800502a:	f004 fc83 	bl	8009934 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800503a:	441a      	add	r2, r3
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	6a1a      	ldr	r2, [r3, #32]
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800504c:	441a      	add	r2, r3
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	621a      	str	r2, [r3, #32]
 8005052:	e016      	b.n	8005082 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	0c5b      	lsrs	r3, r3, #17
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	2b06      	cmp	r3, #6
 800505e:	d110      	bne.n	8005082 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005066:	2208      	movs	r2, #8
 8005068:	4619      	mov	r1, r3
 800506a:	6a38      	ldr	r0, [r7, #32]
 800506c:	f004 fc62 	bl	8009934 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	6a1a      	ldr	r2, [r3, #32]
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	091b      	lsrs	r3, r3, #4
 8005078:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800507c:	441a      	add	r2, r3
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699a      	ldr	r2, [r3, #24]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0210 	orr.w	r2, r2, #16
 8005090:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f004 fde0 	bl	8009c5c <USB_ReadInterrupts>
 800509c:	4603      	mov	r3, r0
 800509e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050a6:	f040 80a7 	bne.w	80051f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f004 fde5 	bl	8009c82 <USB_ReadDevAllOutEpInterrupt>
 80050b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80050ba:	e099      	b.n	80051f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 808e 	beq.w	80051e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f004 fe09 	bl	8009cea <USB_ReadDevOutEPInterrupt>
 80050d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00c      	beq.n	80050fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f0:	461a      	mov	r2, r3
 80050f2:	2301      	movs	r3, #1
 80050f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fec3 	bl	8005e84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00c      	beq.n	8005122 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	2308      	movs	r3, #8
 8005118:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800511a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 ff99 	bl	8006054 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	461a      	mov	r2, r3
 800513a:	2310      	movs	r3, #16
 800513c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d030      	beq.n	80051aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005150:	2b80      	cmp	r3, #128	; 0x80
 8005152:	d109      	bne.n	8005168 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005166:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516a:	4613      	mov	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	4413      	add	r3, r2
 800517a:	3304      	adds	r3, #4
 800517c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	78db      	ldrb	r3, [r3, #3]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d108      	bne.n	8005198 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2200      	movs	r2, #0
 800518a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	b2db      	uxtb	r3, r3
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f007 f99a 	bl	800c4cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	461a      	mov	r2, r3
 80051a6:	2302      	movs	r3, #2
 80051a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c0:	461a      	mov	r2, r3
 80051c2:	2320      	movs	r3, #32
 80051c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	461a      	mov	r2, r3
 80051de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	3301      	adds	r3, #1
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	085b      	lsrs	r3, r3, #1
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f47f af62 	bne.w	80050bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f004 fd2d 	bl	8009c5c <USB_ReadInterrupts>
 8005202:	4603      	mov	r3, r0
 8005204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005208:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800520c:	f040 80db 	bne.w	80053c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f004 fd4e 	bl	8009cb6 <USB_ReadDevAllInEpInterrupt>
 800521a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005220:	e0cd      	b.n	80053be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80c2 	beq.w	80053b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	4611      	mov	r1, r2
 8005238:	4618      	mov	r0, r3
 800523a:	f004 fd74 	bl	8009d26 <USB_ReadDevInEPInterrupt>
 800523e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d057      	beq.n	80052fa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	2201      	movs	r2, #1
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	43db      	mvns	r3, r3
 8005264:	69f9      	ldr	r1, [r7, #28]
 8005266:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800526a:	4013      	ands	r3, r2
 800526c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	461a      	mov	r2, r3
 800527c:	2301      	movs	r3, #1
 800527e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d132      	bne.n	80052ee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	4613      	mov	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	334c      	adds	r3, #76	; 0x4c
 8005298:	6819      	ldr	r1, [r3, #0]
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529e:	4613      	mov	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4403      	add	r3, r0
 80052a8:	3348      	adds	r3, #72	; 0x48
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4419      	add	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b2:	4613      	mov	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4403      	add	r3, r0
 80052bc:	334c      	adds	r3, #76	; 0x4c
 80052be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d113      	bne.n	80052ee <HAL_PCD_IRQHandler+0x3a2>
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ca:	4613      	mov	r3, r2
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	3354      	adds	r3, #84	; 0x54
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d108      	bne.n	80052ee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052e6:	461a      	mov	r2, r3
 80052e8:	2101      	movs	r1, #1
 80052ea:	f004 fd7b 	bl	8009de4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	4619      	mov	r1, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f007 f864 	bl	800c3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005310:	461a      	mov	r2, r3
 8005312:	2308      	movs	r3, #8
 8005314:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532c:	461a      	mov	r2, r3
 800532e:	2310      	movs	r3, #16
 8005330:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005348:	461a      	mov	r2, r3
 800534a:	2340      	movs	r3, #64	; 0x40
 800534c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d023      	beq.n	80053a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800535a:	6a38      	ldr	r0, [r7, #32]
 800535c:	f003 fc5c 	bl	8008c18 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	3338      	adds	r3, #56	; 0x38
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4413      	add	r3, r2
 8005370:	3304      	adds	r3, #4
 8005372:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	78db      	ldrb	r3, [r3, #3]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d108      	bne.n	800538e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2200      	movs	r2, #0
 8005380:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	b2db      	uxtb	r3, r3
 8005386:	4619      	mov	r1, r3
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f007 f8b1 	bl	800c4f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539a:	461a      	mov	r2, r3
 800539c:	2302      	movs	r3, #2
 800539e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80053aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fcdb 	bl	8005d68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	3301      	adds	r3, #1
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f47f af2e 	bne.w	8005222 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f004 fc46 	bl	8009c5c <USB_ReadInterrupts>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053da:	d122      	bne.n	8005422 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ea:	f023 0301 	bic.w	r3, r3, #1
 80053ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d108      	bne.n	800540c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005402:	2100      	movs	r1, #0
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fec3 	bl	8006190 <HAL_PCDEx_LPM_Callback>
 800540a:	e002      	b.n	8005412 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f007 f84f 	bl	800c4b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695a      	ldr	r2, [r3, #20]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005420:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f004 fc18 	bl	8009c5c <USB_ReadInterrupts>
 800542c:	4603      	mov	r3, r0
 800542e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005436:	d112      	bne.n	800545e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b01      	cmp	r3, #1
 8005446:	d102      	bne.n	800544e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f007 f80b 	bl	800c464 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695a      	ldr	r2, [r3, #20]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800545c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f004 fbfa 	bl	8009c5c <USB_ReadInterrupts>
 8005468:	4603      	mov	r3, r0
 800546a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800546e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005472:	f040 80b7 	bne.w	80055e4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2110      	movs	r1, #16
 8005490:	4618      	mov	r0, r3
 8005492:	f003 fbc1 	bl	8008c18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005496:	2300      	movs	r3, #0
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800549a:	e046      	b.n	800552a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a8:	461a      	mov	r2, r3
 80054aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054dc:	461a      	mov	r2, r3
 80054de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005502:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005522:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	3301      	adds	r3, #1
 8005528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005530:	429a      	cmp	r2, r3
 8005532:	d3b3      	bcc.n	800549c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005542:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005546:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	2b00      	cmp	r3, #0
 800554e:	d016      	beq.n	800557e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005560:	f043 030b 	orr.w	r3, r3, #11
 8005564:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005576:	f043 030b 	orr.w	r3, r3, #11
 800557a:	6453      	str	r3, [r2, #68]	; 0x44
 800557c:	e015      	b.n	80055aa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800558c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005590:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005594:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055a4:	f043 030b 	orr.w	r3, r3, #11
 80055a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055ce:	461a      	mov	r2, r3
 80055d0:	f004 fc08 	bl	8009de4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80055e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f004 fb37 	bl	8009c5c <USB_ReadInterrupts>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f8:	d124      	bne.n	8005644 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f004 fbcd 	bl	8009d9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f003 fb82 	bl	8008d12 <USB_GetDevSpeed>
 800560e:	4603      	mov	r3, r0
 8005610:	461a      	mov	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681c      	ldr	r4, [r3, #0]
 800561a:	f001 fa29 	bl	8006a70 <HAL_RCC_GetHCLKFreq>
 800561e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005624:	b2db      	uxtb	r3, r3
 8005626:	461a      	mov	r2, r3
 8005628:	4620      	mov	r0, r4
 800562a:	f003 f881 	bl	8008730 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f006 feef 	bl	800c412 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695a      	ldr	r2, [r3, #20]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005642:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f004 fb07 	bl	8009c5c <USB_ReadInterrupts>
 800564e:	4603      	mov	r3, r0
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b08      	cmp	r3, #8
 8005656:	d10a      	bne.n	800566e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f006 fecc 	bl	800c3f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f002 0208 	and.w	r2, r2, #8
 800566c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f004 faf2 	bl	8009c5c <USB_ReadInterrupts>
 8005678:	4603      	mov	r3, r0
 800567a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567e:	2b80      	cmp	r3, #128	; 0x80
 8005680:	d122      	bne.n	80056c8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800568e:	2301      	movs	r3, #1
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
 8005692:	e014      	b.n	80056be <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005698:	4613      	mov	r3, r2
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d105      	bne.n	80056b8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fb27 	bl	8005d06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	3301      	adds	r3, #1
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d3e5      	bcc.n	8005694 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f004 fac5 	bl	8009c5c <USB_ReadInterrupts>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056dc:	d13b      	bne.n	8005756 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056de:	2301      	movs	r3, #1
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
 80056e2:	e02b      	b.n	800573c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f8:	4613      	mov	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	3340      	adds	r3, #64	; 0x40
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d115      	bne.n	8005736 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800570a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800570c:	2b00      	cmp	r3, #0
 800570e:	da12      	bge.n	8005736 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005714:	4613      	mov	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	333f      	adds	r3, #63	; 0x3f
 8005720:	2201      	movs	r2, #1
 8005722:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	b2db      	uxtb	r3, r3
 8005728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800572c:	b2db      	uxtb	r3, r3
 800572e:	4619      	mov	r1, r3
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fae8 	bl	8005d06 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	3301      	adds	r3, #1
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005742:	429a      	cmp	r2, r3
 8005744:	d3ce      	bcc.n	80056e4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695a      	ldr	r2, [r3, #20]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f004 fa7e 	bl	8009c5c <USB_ReadInterrupts>
 8005760:	4603      	mov	r3, r0
 8005762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800576a:	d155      	bne.n	8005818 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800576c:	2301      	movs	r3, #1
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
 8005770:	e045      	b.n	80057fe <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005786:	4613      	mov	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d12e      	bne.n	80057f8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800579a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800579c:	2b00      	cmp	r3, #0
 800579e:	da2b      	bge.n	80057f8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80057ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d121      	bne.n	80057f8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b8:	4613      	mov	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	4413      	add	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80057c6:	2201      	movs	r2, #1
 80057c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057f4:	6053      	str	r3, [r2, #4]
            break;
 80057f6:	e007      	b.n	8005808 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	3301      	adds	r3, #1
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005804:	429a      	cmp	r2, r3
 8005806:	d3b4      	bcc.n	8005772 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695a      	ldr	r2, [r3, #20]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f004 fa1d 	bl	8009c5c <USB_ReadInterrupts>
 8005822:	4603      	mov	r3, r0
 8005824:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582c:	d10a      	bne.n	8005844 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f006 fe70 	bl	800c514 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f004 fa07 	bl	8009c5c <USB_ReadInterrupts>
 800584e:	4603      	mov	r3, r0
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b04      	cmp	r3, #4
 8005856:	d115      	bne.n	8005884 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f003 0304 	and.w	r3, r3, #4
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f006 fe60 	bl	800c530 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6859      	ldr	r1, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	430a      	orrs	r2, r1
 800587e:	605a      	str	r2, [r3, #4]
 8005880:	e000      	b.n	8005884 <HAL_PCD_IRQHandler+0x938>
      return;
 8005882:	bf00      	nop
    }
  }
}
 8005884:	3734      	adds	r7, #52	; 0x34
 8005886:	46bd      	mov	sp, r7
 8005888:	bd90      	pop	{r4, r7, pc}

0800588a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	460b      	mov	r3, r1
 8005894:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_PCD_SetAddress+0x1a>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e013      	b.n	80058cc <HAL_PCD_SetAddress+0x42>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	78fa      	ldrb	r2, [r7, #3]
 80058b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	78fa      	ldrb	r2, [r7, #3]
 80058ba:	4611      	mov	r1, r2
 80058bc:	4618      	mov	r0, r3
 80058be:	f004 f965 	bl	8009b8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	4608      	mov	r0, r1
 80058de:	4611      	mov	r1, r2
 80058e0:	461a      	mov	r2, r3
 80058e2:	4603      	mov	r3, r0
 80058e4:	70fb      	strb	r3, [r7, #3]
 80058e6:	460b      	mov	r3, r1
 80058e8:	803b      	strh	r3, [r7, #0]
 80058ea:	4613      	mov	r3, r2
 80058ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	da0f      	bge.n	800591a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	f003 020f 	and.w	r2, r3, #15
 8005900:	4613      	mov	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	3338      	adds	r3, #56	; 0x38
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	4413      	add	r3, r2
 800590e:	3304      	adds	r3, #4
 8005910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	705a      	strb	r2, [r3, #1]
 8005918:	e00f      	b.n	800593a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	f003 020f 	and.w	r2, r3, #15
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	4413      	add	r3, r2
 8005930:	3304      	adds	r3, #4
 8005932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	b2da      	uxtb	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005946:	883a      	ldrh	r2, [r7, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	78ba      	ldrb	r2, [r7, #2]
 8005950:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d004      	beq.n	8005964 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005964:	78bb      	ldrb	r3, [r7, #2]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d102      	bne.n	8005970 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005976:	2b01      	cmp	r3, #1
 8005978:	d101      	bne.n	800597e <HAL_PCD_EP_Open+0xaa>
 800597a:	2302      	movs	r3, #2
 800597c:	e00e      	b.n	800599c <HAL_PCD_EP_Open+0xc8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68f9      	ldr	r1, [r7, #12]
 800598c:	4618      	mov	r0, r3
 800598e:	f003 f9e5 	bl	8008d5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800599a:	7afb      	ldrb	r3, [r7, #11]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	da0f      	bge.n	80059d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	f003 020f 	and.w	r2, r3, #15
 80059be:	4613      	mov	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	3338      	adds	r3, #56	; 0x38
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	4413      	add	r3, r2
 80059cc:	3304      	adds	r3, #4
 80059ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	705a      	strb	r2, [r3, #1]
 80059d6:	e00f      	b.n	80059f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	f003 020f 	and.w	r2, r3, #15
 80059de:	4613      	mov	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	3304      	adds	r3, #4
 80059f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_PCD_EP_Close+0x6e>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e00e      	b.n	8005a30 <HAL_PCD_EP_Close+0x8c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f003 fa23 	bl	8008e6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	607a      	str	r2, [r7, #4]
 8005a42:	603b      	str	r3, [r7, #0]
 8005a44:	460b      	mov	r3, r1
 8005a46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a48:	7afb      	ldrb	r3, [r7, #11]
 8005a4a:	f003 020f 	and.w	r2, r3, #15
 8005a4e:	4613      	mov	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	3304      	adds	r3, #4
 8005a60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2200      	movs	r2, #0
 8005a72:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2200      	movs	r2, #0
 8005a78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a7a:	7afb      	ldrb	r3, [r7, #11]
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d102      	bne.n	8005a94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a94:	7afb      	ldrb	r3, [r7, #11]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d109      	bne.n	8005ab2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6979      	ldr	r1, [r7, #20]
 8005aac:	f003 fd02 	bl	80094b4 <USB_EP0StartXfer>
 8005ab0:	e008      	b.n	8005ac4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	6979      	ldr	r1, [r7, #20]
 8005ac0:	f003 fab0 	bl	8009024 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	f003 020f 	and.w	r2, r3, #15
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005af0:	681b      	ldr	r3, [r3, #0]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b086      	sub	sp, #24
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b0e:	7afb      	ldrb	r3, [r7, #11]
 8005b10:	f003 020f 	and.w	r2, r3, #15
 8005b14:	4613      	mov	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	3338      	adds	r3, #56	; 0x38
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	3304      	adds	r3, #4
 8005b24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2200      	movs	r2, #0
 8005b36:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b3e:	7afb      	ldrb	r3, [r7, #11]
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d102      	bne.n	8005b58 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b58:	7afb      	ldrb	r3, [r7, #11]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6979      	ldr	r1, [r7, #20]
 8005b70:	f003 fca0 	bl	80094b4 <USB_EP0StartXfer>
 8005b74:	e008      	b.n	8005b88 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	6979      	ldr	r1, [r7, #20]
 8005b84:	f003 fa4e 	bl	8009024 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	f003 020f 	and.w	r2, r3, #15
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d901      	bls.n	8005bb0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e050      	b.n	8005c52 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	da0f      	bge.n	8005bd8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	f003 020f 	and.w	r2, r3, #15
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	3338      	adds	r3, #56	; 0x38
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	4413      	add	r3, r2
 8005bcc:	3304      	adds	r3, #4
 8005bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	705a      	strb	r2, [r3, #1]
 8005bd6:	e00d      	b.n	8005bf4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005bd8:	78fa      	ldrb	r2, [r7, #3]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	4413      	add	r3, r2
 8005bea:	3304      	adds	r3, #4
 8005bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bfa:	78fb      	ldrb	r3, [r7, #3]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_PCD_EP_SetStall+0x82>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e01e      	b.n	8005c52 <HAL_PCD_EP_SetStall+0xc0>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68f9      	ldr	r1, [r7, #12]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f003 fede 	bl	80099e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6818      	ldr	r0, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	b2d9      	uxtb	r1, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c42:	461a      	mov	r2, r3
 8005c44:	f004 f8ce 	bl	8009de4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	f003 020f 	and.w	r2, r3, #15
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d901      	bls.n	8005c78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e042      	b.n	8005cfe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da0f      	bge.n	8005ca0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	f003 020f 	and.w	r2, r3, #15
 8005c86:	4613      	mov	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	3338      	adds	r3, #56	; 0x38
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	4413      	add	r3, r2
 8005c94:	3304      	adds	r3, #4
 8005c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	705a      	strb	r2, [r3, #1]
 8005c9e:	e00f      	b.n	8005cc0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	f003 020f 	and.w	r2, r3, #15
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_PCD_EP_ClrStall+0x86>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e00e      	b.n	8005cfe <HAL_PCD_EP_ClrStall+0xa4>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68f9      	ldr	r1, [r7, #12]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f003 fee6 	bl	8009ac0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b084      	sub	sp, #16
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	da0c      	bge.n	8005d34 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	f003 020f 	and.w	r2, r3, #15
 8005d20:	4613      	mov	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	3338      	adds	r3, #56	; 0x38
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3304      	adds	r3, #4
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	e00c      	b.n	8005d4e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	f003 020f 	and.w	r2, r3, #15
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	4413      	add	r3, r2
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f003 fd05 	bl	8009764 <USB_EPStopXfer>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08a      	sub	sp, #40	; 0x28
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	3338      	adds	r3, #56	; 0x38
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1a      	ldr	r2, [r3, #32]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d901      	bls.n	8005da0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e06c      	b.n	8005e7a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	699a      	ldr	r2, [r3, #24]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d902      	bls.n	8005dbc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	3303      	adds	r3, #3
 8005dc0:	089b      	lsrs	r3, r3, #2
 8005dc2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dc4:	e02b      	b.n	8005e1e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d902      	bls.n	8005de2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	3303      	adds	r3, #3
 8005de6:	089b      	lsrs	r3, r3, #2
 8005de8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6919      	ldr	r1, [r3, #16]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	4603      	mov	r3, r0
 8005e00:	6978      	ldr	r0, [r7, #20]
 8005e02:	f003 fd59 	bl	80098b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	441a      	add	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1a      	ldr	r2, [r3, #32]
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	441a      	add	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d809      	bhi.n	8005e48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a1a      	ldr	r2, [r3, #32]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d203      	bcs.n	8005e48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1be      	bne.n	8005dc6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	699a      	ldr	r2, [r3, #24]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d811      	bhi.n	8005e78 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	6939      	ldr	r1, [r7, #16]
 8005e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e74:	4013      	ands	r3, r2
 8005e76:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	333c      	adds	r3, #60	; 0x3c
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d17b      	bne.n	8005fb2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d015      	beq.n	8005ef0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	4a61      	ldr	r2, [pc, #388]	; (800604c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	f240 80b9 	bls.w	8006040 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 80b3 	beq.w	8006040 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eec:	6093      	str	r3, [r2, #8]
 8005eee:	e0a7      	b.n	8006040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	461a      	mov	r2, r3
 8005f08:	2320      	movs	r3, #32
 8005f0a:	6093      	str	r3, [r2, #8]
 8005f0c:	e098      	b.n	8006040 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f040 8093 	bne.w	8006040 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	4a4b      	ldr	r2, [pc, #300]	; (800604c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d90f      	bls.n	8005f42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3e:	6093      	str	r3, [r2, #8]
 8005f40:	e07e      	b.n	8006040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	4613      	mov	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	4413      	add	r3, r2
 8005f54:	3304      	adds	r3, #4
 8005f56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	0159      	lsls	r1, r3, #5
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	440b      	add	r3, r1
 8005f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f6e:	1ad2      	subs	r2, r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d114      	bne.n	8005fa4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d109      	bne.n	8005f96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	2101      	movs	r1, #1
 8005f90:	f003 ff28 	bl	8009de4 <USB_EP0_OutStart>
 8005f94:	e006      	b.n	8005fa4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	441a      	add	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f006 f9ee 	bl	800c38c <HAL_PCD_DataOutStageCallback>
 8005fb0:	e046      	b.n	8006040 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	4a26      	ldr	r2, [pc, #152]	; (8006050 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d124      	bne.n	8006004 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fd6:	6093      	str	r3, [r2, #8]
 8005fd8:	e032      	b.n	8006040 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	2320      	movs	r3, #32
 8005ff4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f006 f9c5 	bl	800c38c <HAL_PCD_DataOutStageCallback>
 8006002:	e01d      	b.n	8006040 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d114      	bne.n	8006034 <PCD_EP_OutXfrComplete_int+0x1b0>
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	4613      	mov	r3, r2
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d108      	bne.n	8006034 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800602c:	461a      	mov	r2, r3
 800602e:	2100      	movs	r1, #0
 8006030:	f003 fed8 	bl	8009de4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	b2db      	uxtb	r3, r3
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f006 f9a6 	bl	800c38c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	4f54300a 	.word	0x4f54300a
 8006050:	4f54310a 	.word	0x4f54310a

08006054 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	333c      	adds	r3, #60	; 0x3c
 800606c:	3304      	adds	r3, #4
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4a15      	ldr	r2, [pc, #84]	; (80060dc <PCD_EP_OutSetupPacket_int+0x88>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d90e      	bls.n	80060a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006090:	2b00      	cmp	r3, #0
 8006092:	d009      	beq.n	80060a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a0:	461a      	mov	r2, r3
 80060a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f006 f95d 	bl	800c368 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <PCD_EP_OutSetupPacket_int+0x88>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d90c      	bls.n	80060d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d108      	bne.n	80060d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060c8:	461a      	mov	r2, r3
 80060ca:	2101      	movs	r1, #1
 80060cc:	f003 fe8a 	bl	8009de4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	4f54300a 	.word	0x4f54300a

080060e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
 80060ec:	4613      	mov	r3, r2
 80060ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d107      	bne.n	800610e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80060fe:	883b      	ldrh	r3, [r7, #0]
 8006100:	0419      	lsls	r1, r3, #16
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	430a      	orrs	r2, r1
 800610a:	629a      	str	r2, [r3, #40]	; 0x28
 800610c:	e028      	b.n	8006160 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006114:	0c1b      	lsrs	r3, r3, #16
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4413      	add	r3, r2
 800611a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800611c:	2300      	movs	r3, #0
 800611e:	73fb      	strb	r3, [r7, #15]
 8006120:	e00d      	b.n	800613e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	3340      	adds	r3, #64	; 0x40
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	4413      	add	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	3301      	adds	r3, #1
 800613c:	73fb      	strb	r3, [r7, #15]
 800613e:	7bfa      	ldrb	r2, [r7, #15]
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	3b01      	subs	r3, #1
 8006144:	429a      	cmp	r2, r3
 8006146:	d3ec      	bcc.n	8006122 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006148:	883b      	ldrh	r3, [r7, #0]
 800614a:	0418      	lsls	r0, r3, #16
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6819      	ldr	r1, [r3, #0]
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	3b01      	subs	r3, #1
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	4302      	orrs	r2, r0
 8006158:	3340      	adds	r3, #64	; 0x40
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	887a      	ldrh	r2, [r7, #2]
 8006180:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e267      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d075      	beq.n	80062b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061c6:	4b88      	ldr	r3, [pc, #544]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 030c 	and.w	r3, r3, #12
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d00c      	beq.n	80061ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061d2:	4b85      	ldr	r3, [pc, #532]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d112      	bne.n	8006204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061de:	4b82      	ldr	r3, [pc, #520]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ea:	d10b      	bne.n	8006204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ec:	4b7e      	ldr	r3, [pc, #504]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d05b      	beq.n	80062b0 <HAL_RCC_OscConfig+0x108>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d157      	bne.n	80062b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e242      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620c:	d106      	bne.n	800621c <HAL_RCC_OscConfig+0x74>
 800620e:	4b76      	ldr	r3, [pc, #472]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a75      	ldr	r2, [pc, #468]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 8006214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e01d      	b.n	8006258 <HAL_RCC_OscConfig+0xb0>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006224:	d10c      	bne.n	8006240 <HAL_RCC_OscConfig+0x98>
 8006226:	4b70      	ldr	r3, [pc, #448]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a6f      	ldr	r2, [pc, #444]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 800622c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	4b6d      	ldr	r3, [pc, #436]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a6c      	ldr	r2, [pc, #432]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 8006238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	e00b      	b.n	8006258 <HAL_RCC_OscConfig+0xb0>
 8006240:	4b69      	ldr	r3, [pc, #420]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a68      	ldr	r2, [pc, #416]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 8006246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	4b66      	ldr	r3, [pc, #408]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a65      	ldr	r2, [pc, #404]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 8006252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d013      	beq.n	8006288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006260:	f7fd f882 	bl	8003368 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006268:	f7fd f87e 	bl	8003368 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b64      	cmp	r3, #100	; 0x64
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e207      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627a:	4b5b      	ldr	r3, [pc, #364]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0f0      	beq.n	8006268 <HAL_RCC_OscConfig+0xc0>
 8006286:	e014      	b.n	80062b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006288:	f7fd f86e 	bl	8003368 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006290:	f7fd f86a 	bl	8003368 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b64      	cmp	r3, #100	; 0x64
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e1f3      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062a2:	4b51      	ldr	r3, [pc, #324]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f0      	bne.n	8006290 <HAL_RCC_OscConfig+0xe8>
 80062ae:	e000      	b.n	80062b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d063      	beq.n	8006386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062be:	4b4a      	ldr	r3, [pc, #296]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 030c 	and.w	r3, r3, #12
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00b      	beq.n	80062e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ca:	4b47      	ldr	r3, [pc, #284]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d11c      	bne.n	8006310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062d6:	4b44      	ldr	r3, [pc, #272]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d116      	bne.n	8006310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062e2:	4b41      	ldr	r3, [pc, #260]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_RCC_OscConfig+0x152>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d001      	beq.n	80062fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e1c7      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fa:	4b3b      	ldr	r3, [pc, #236]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	4937      	ldr	r1, [pc, #220]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 800630a:	4313      	orrs	r3, r2
 800630c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800630e:	e03a      	b.n	8006386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d020      	beq.n	800635a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006318:	4b34      	ldr	r3, [pc, #208]	; (80063ec <HAL_RCC_OscConfig+0x244>)
 800631a:	2201      	movs	r2, #1
 800631c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631e:	f7fd f823 	bl	8003368 <HAL_GetTick>
 8006322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006324:	e008      	b.n	8006338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006326:	f7fd f81f 	bl	8003368 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e1a8      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006338:	4b2b      	ldr	r3, [pc, #172]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0f0      	beq.n	8006326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006344:	4b28      	ldr	r3, [pc, #160]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	4925      	ldr	r1, [pc, #148]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 8006354:	4313      	orrs	r3, r2
 8006356:	600b      	str	r3, [r1, #0]
 8006358:	e015      	b.n	8006386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800635a:	4b24      	ldr	r3, [pc, #144]	; (80063ec <HAL_RCC_OscConfig+0x244>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006360:	f7fd f802 	bl	8003368 <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006368:	f7fc fffe 	bl	8003368 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e187      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800637a:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f0      	bne.n	8006368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d036      	beq.n	8006400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d016      	beq.n	80063c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800639a:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <HAL_RCC_OscConfig+0x248>)
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a0:	f7fc ffe2 	bl	8003368 <HAL_GetTick>
 80063a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063a8:	f7fc ffde 	bl	8003368 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e167      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ba:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <HAL_RCC_OscConfig+0x240>)
 80063bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0f0      	beq.n	80063a8 <HAL_RCC_OscConfig+0x200>
 80063c6:	e01b      	b.n	8006400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063c8:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <HAL_RCC_OscConfig+0x248>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ce:	f7fc ffcb 	bl	8003368 <HAL_GetTick>
 80063d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063d4:	e00e      	b.n	80063f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063d6:	f7fc ffc7 	bl	8003368 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d907      	bls.n	80063f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e150      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
 80063e8:	40023800 	.word	0x40023800
 80063ec:	42470000 	.word	0x42470000
 80063f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f4:	4b88      	ldr	r3, [pc, #544]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 80063f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1ea      	bne.n	80063d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 8097 	beq.w	800653c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800640e:	2300      	movs	r3, #0
 8006410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006412:	4b81      	ldr	r3, [pc, #516]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10f      	bne.n	800643e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800641e:	2300      	movs	r3, #0
 8006420:	60bb      	str	r3, [r7, #8]
 8006422:	4b7d      	ldr	r3, [pc, #500]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	4a7c      	ldr	r2, [pc, #496]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 8006428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800642c:	6413      	str	r3, [r2, #64]	; 0x40
 800642e:	4b7a      	ldr	r3, [pc, #488]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006436:	60bb      	str	r3, [r7, #8]
 8006438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800643a:	2301      	movs	r3, #1
 800643c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800643e:	4b77      	ldr	r3, [pc, #476]	; (800661c <HAL_RCC_OscConfig+0x474>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006446:	2b00      	cmp	r3, #0
 8006448:	d118      	bne.n	800647c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800644a:	4b74      	ldr	r3, [pc, #464]	; (800661c <HAL_RCC_OscConfig+0x474>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a73      	ldr	r2, [pc, #460]	; (800661c <HAL_RCC_OscConfig+0x474>)
 8006450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006456:	f7fc ff87 	bl	8003368 <HAL_GetTick>
 800645a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800645c:	e008      	b.n	8006470 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800645e:	f7fc ff83 	bl	8003368 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e10c      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006470:	4b6a      	ldr	r3, [pc, #424]	; (800661c <HAL_RCC_OscConfig+0x474>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0f0      	beq.n	800645e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d106      	bne.n	8006492 <HAL_RCC_OscConfig+0x2ea>
 8006484:	4b64      	ldr	r3, [pc, #400]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 8006486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006488:	4a63      	ldr	r2, [pc, #396]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 800648a:	f043 0301 	orr.w	r3, r3, #1
 800648e:	6713      	str	r3, [r2, #112]	; 0x70
 8006490:	e01c      	b.n	80064cc <HAL_RCC_OscConfig+0x324>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	2b05      	cmp	r3, #5
 8006498:	d10c      	bne.n	80064b4 <HAL_RCC_OscConfig+0x30c>
 800649a:	4b5f      	ldr	r3, [pc, #380]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 800649c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649e:	4a5e      	ldr	r2, [pc, #376]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 80064a0:	f043 0304 	orr.w	r3, r3, #4
 80064a4:	6713      	str	r3, [r2, #112]	; 0x70
 80064a6:	4b5c      	ldr	r3, [pc, #368]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 80064a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064aa:	4a5b      	ldr	r2, [pc, #364]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	6713      	str	r3, [r2, #112]	; 0x70
 80064b2:	e00b      	b.n	80064cc <HAL_RCC_OscConfig+0x324>
 80064b4:	4b58      	ldr	r3, [pc, #352]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 80064b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b8:	4a57      	ldr	r2, [pc, #348]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 80064ba:	f023 0301 	bic.w	r3, r3, #1
 80064be:	6713      	str	r3, [r2, #112]	; 0x70
 80064c0:	4b55      	ldr	r3, [pc, #340]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 80064c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c4:	4a54      	ldr	r2, [pc, #336]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 80064c6:	f023 0304 	bic.w	r3, r3, #4
 80064ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d015      	beq.n	8006500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d4:	f7fc ff48 	bl	8003368 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064da:	e00a      	b.n	80064f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064dc:	f7fc ff44 	bl	8003368 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e0cb      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f2:	4b49      	ldr	r3, [pc, #292]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0ee      	beq.n	80064dc <HAL_RCC_OscConfig+0x334>
 80064fe:	e014      	b.n	800652a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006500:	f7fc ff32 	bl	8003368 <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006506:	e00a      	b.n	800651e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006508:	f7fc ff2e 	bl	8003368 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	f241 3288 	movw	r2, #5000	; 0x1388
 8006516:	4293      	cmp	r3, r2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e0b5      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800651e:	4b3e      	ldr	r3, [pc, #248]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1ee      	bne.n	8006508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800652a:	7dfb      	ldrb	r3, [r7, #23]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d105      	bne.n	800653c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006530:	4b39      	ldr	r3, [pc, #228]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 8006532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006534:	4a38      	ldr	r2, [pc, #224]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 8006536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800653a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 80a1 	beq.w	8006688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006546:	4b34      	ldr	r3, [pc, #208]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	2b08      	cmp	r3, #8
 8006550:	d05c      	beq.n	800660c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	2b02      	cmp	r3, #2
 8006558:	d141      	bne.n	80065de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800655a:	4b31      	ldr	r3, [pc, #196]	; (8006620 <HAL_RCC_OscConfig+0x478>)
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006560:	f7fc ff02 	bl	8003368 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006568:	f7fc fefe 	bl	8003368 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e087      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800657a:	4b27      	ldr	r3, [pc, #156]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f0      	bne.n	8006568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69da      	ldr	r2, [r3, #28]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	019b      	lsls	r3, r3, #6
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	085b      	lsrs	r3, r3, #1
 800659e:	3b01      	subs	r3, #1
 80065a0:	041b      	lsls	r3, r3, #16
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	061b      	lsls	r3, r3, #24
 80065aa:	491b      	ldr	r1, [pc, #108]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065b0:	4b1b      	ldr	r3, [pc, #108]	; (8006620 <HAL_RCC_OscConfig+0x478>)
 80065b2:	2201      	movs	r2, #1
 80065b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b6:	f7fc fed7 	bl	8003368 <HAL_GetTick>
 80065ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065bc:	e008      	b.n	80065d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065be:	f7fc fed3 	bl	8003368 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d901      	bls.n	80065d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e05c      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d0:	4b11      	ldr	r3, [pc, #68]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0f0      	beq.n	80065be <HAL_RCC_OscConfig+0x416>
 80065dc:	e054      	b.n	8006688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065de:	4b10      	ldr	r3, [pc, #64]	; (8006620 <HAL_RCC_OscConfig+0x478>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e4:	f7fc fec0 	bl	8003368 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ea:	e008      	b.n	80065fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ec:	f7fc febc 	bl	8003368 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e045      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065fe:	4b06      	ldr	r3, [pc, #24]	; (8006618 <HAL_RCC_OscConfig+0x470>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f0      	bne.n	80065ec <HAL_RCC_OscConfig+0x444>
 800660a:	e03d      	b.n	8006688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d107      	bne.n	8006624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e038      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
 8006618:	40023800 	.word	0x40023800
 800661c:	40007000 	.word	0x40007000
 8006620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006624:	4b1b      	ldr	r3, [pc, #108]	; (8006694 <HAL_RCC_OscConfig+0x4ec>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d028      	beq.n	8006684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800663c:	429a      	cmp	r2, r3
 800663e:	d121      	bne.n	8006684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664a:	429a      	cmp	r2, r3
 800664c:	d11a      	bne.n	8006684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006654:	4013      	ands	r3, r2
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800665a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800665c:	4293      	cmp	r3, r2
 800665e:	d111      	bne.n	8006684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	3b01      	subs	r3, #1
 800666e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006670:	429a      	cmp	r2, r3
 8006672:	d107      	bne.n	8006684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006680:	429a      	cmp	r2, r3
 8006682:	d001      	beq.n	8006688 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	40023800 	.word	0x40023800

08006698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e0cc      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066ac:	4b68      	ldr	r3, [pc, #416]	; (8006850 <HAL_RCC_ClockConfig+0x1b8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d90c      	bls.n	80066d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ba:	4b65      	ldr	r3, [pc, #404]	; (8006850 <HAL_RCC_ClockConfig+0x1b8>)
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c2:	4b63      	ldr	r3, [pc, #396]	; (8006850 <HAL_RCC_ClockConfig+0x1b8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d001      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0b8      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d020      	beq.n	8006722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066ec:	4b59      	ldr	r3, [pc, #356]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	4a58      	ldr	r2, [pc, #352]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 80066f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006704:	4b53      	ldr	r3, [pc, #332]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	4a52      	ldr	r2, [pc, #328]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800670e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006710:	4b50      	ldr	r3, [pc, #320]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	494d      	ldr	r1, [pc, #308]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	4313      	orrs	r3, r2
 8006720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d044      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d107      	bne.n	8006746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006736:	4b47      	ldr	r3, [pc, #284]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d119      	bne.n	8006776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e07f      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d003      	beq.n	8006756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006752:	2b03      	cmp	r3, #3
 8006754:	d107      	bne.n	8006766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006756:	4b3f      	ldr	r3, [pc, #252]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e06f      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006766:	4b3b      	ldr	r3, [pc, #236]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e067      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006776:	4b37      	ldr	r3, [pc, #220]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f023 0203 	bic.w	r2, r3, #3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	4934      	ldr	r1, [pc, #208]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006784:	4313      	orrs	r3, r2
 8006786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006788:	f7fc fdee 	bl	8003368 <HAL_GetTick>
 800678c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800678e:	e00a      	b.n	80067a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006790:	f7fc fdea 	bl	8003368 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	f241 3288 	movw	r2, #5000	; 0x1388
 800679e:	4293      	cmp	r3, r2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e04f      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a6:	4b2b      	ldr	r3, [pc, #172]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 020c 	and.w	r2, r3, #12
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d1eb      	bne.n	8006790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067b8:	4b25      	ldr	r3, [pc, #148]	; (8006850 <HAL_RCC_ClockConfig+0x1b8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d20c      	bcs.n	80067e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067c6:	4b22      	ldr	r3, [pc, #136]	; (8006850 <HAL_RCC_ClockConfig+0x1b8>)
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ce:	4b20      	ldr	r3, [pc, #128]	; (8006850 <HAL_RCC_ClockConfig+0x1b8>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d001      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e032      	b.n	8006846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067ec:	4b19      	ldr	r3, [pc, #100]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	4916      	ldr	r1, [pc, #88]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d009      	beq.n	800681e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800680a:	4b12      	ldr	r3, [pc, #72]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	490e      	ldr	r1, [pc, #56]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 800681a:	4313      	orrs	r3, r2
 800681c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800681e:	f000 f821 	bl	8006864 <HAL_RCC_GetSysClockFreq>
 8006822:	4602      	mov	r2, r0
 8006824:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <HAL_RCC_ClockConfig+0x1bc>)
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	091b      	lsrs	r3, r3, #4
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	490a      	ldr	r1, [pc, #40]	; (8006858 <HAL_RCC_ClockConfig+0x1c0>)
 8006830:	5ccb      	ldrb	r3, [r1, r3]
 8006832:	fa22 f303 	lsr.w	r3, r2, r3
 8006836:	4a09      	ldr	r2, [pc, #36]	; (800685c <HAL_RCC_ClockConfig+0x1c4>)
 8006838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800683a:	4b09      	ldr	r3, [pc, #36]	; (8006860 <HAL_RCC_ClockConfig+0x1c8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fc fd4e 	bl	80032e0 <HAL_InitTick>

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40023c00 	.word	0x40023c00
 8006854:	40023800 	.word	0x40023800
 8006858:	0800cc28 	.word	0x0800cc28
 800685c:	20000000 	.word	0x20000000
 8006860:	20000004 	.word	0x20000004

08006864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006868:	b094      	sub	sp, #80	; 0x50
 800686a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	647b      	str	r3, [r7, #68]	; 0x44
 8006870:	2300      	movs	r3, #0
 8006872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006874:	2300      	movs	r3, #0
 8006876:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800687c:	4b79      	ldr	r3, [pc, #484]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x200>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 030c 	and.w	r3, r3, #12
 8006884:	2b08      	cmp	r3, #8
 8006886:	d00d      	beq.n	80068a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006888:	2b08      	cmp	r3, #8
 800688a:	f200 80e1 	bhi.w	8006a50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <HAL_RCC_GetSysClockFreq+0x34>
 8006892:	2b04      	cmp	r3, #4
 8006894:	d003      	beq.n	800689e <HAL_RCC_GetSysClockFreq+0x3a>
 8006896:	e0db      	b.n	8006a50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006898:	4b73      	ldr	r3, [pc, #460]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x204>)
 800689a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800689c:	e0db      	b.n	8006a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800689e:	4b73      	ldr	r3, [pc, #460]	; (8006a6c <HAL_RCC_GetSysClockFreq+0x208>)
 80068a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068a2:	e0d8      	b.n	8006a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068a4:	4b6f      	ldr	r3, [pc, #444]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068ae:	4b6d      	ldr	r3, [pc, #436]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d063      	beq.n	8006982 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068ba:	4b6a      	ldr	r3, [pc, #424]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	099b      	lsrs	r3, r3, #6
 80068c0:	2200      	movs	r2, #0
 80068c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80068c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068cc:	633b      	str	r3, [r7, #48]	; 0x30
 80068ce:	2300      	movs	r3, #0
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
 80068d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80068d6:	4622      	mov	r2, r4
 80068d8:	462b      	mov	r3, r5
 80068da:	f04f 0000 	mov.w	r0, #0
 80068de:	f04f 0100 	mov.w	r1, #0
 80068e2:	0159      	lsls	r1, r3, #5
 80068e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068e8:	0150      	lsls	r0, r2, #5
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4621      	mov	r1, r4
 80068f0:	1a51      	subs	r1, r2, r1
 80068f2:	6139      	str	r1, [r7, #16]
 80068f4:	4629      	mov	r1, r5
 80068f6:	eb63 0301 	sbc.w	r3, r3, r1
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	f04f 0200 	mov.w	r2, #0
 8006900:	f04f 0300 	mov.w	r3, #0
 8006904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006908:	4659      	mov	r1, fp
 800690a:	018b      	lsls	r3, r1, #6
 800690c:	4651      	mov	r1, sl
 800690e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006912:	4651      	mov	r1, sl
 8006914:	018a      	lsls	r2, r1, #6
 8006916:	4651      	mov	r1, sl
 8006918:	ebb2 0801 	subs.w	r8, r2, r1
 800691c:	4659      	mov	r1, fp
 800691e:	eb63 0901 	sbc.w	r9, r3, r1
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800692e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006936:	4690      	mov	r8, r2
 8006938:	4699      	mov	r9, r3
 800693a:	4623      	mov	r3, r4
 800693c:	eb18 0303 	adds.w	r3, r8, r3
 8006940:	60bb      	str	r3, [r7, #8]
 8006942:	462b      	mov	r3, r5
 8006944:	eb49 0303 	adc.w	r3, r9, r3
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	f04f 0200 	mov.w	r2, #0
 800694e:	f04f 0300 	mov.w	r3, #0
 8006952:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006956:	4629      	mov	r1, r5
 8006958:	024b      	lsls	r3, r1, #9
 800695a:	4621      	mov	r1, r4
 800695c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006960:	4621      	mov	r1, r4
 8006962:	024a      	lsls	r2, r1, #9
 8006964:	4610      	mov	r0, r2
 8006966:	4619      	mov	r1, r3
 8006968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800696a:	2200      	movs	r2, #0
 800696c:	62bb      	str	r3, [r7, #40]	; 0x28
 800696e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006974:	f7fa f816 	bl	80009a4 <__aeabi_uldivmod>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4613      	mov	r3, r2
 800697e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006980:	e058      	b.n	8006a34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006982:	4b38      	ldr	r3, [pc, #224]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	099b      	lsrs	r3, r3, #6
 8006988:	2200      	movs	r2, #0
 800698a:	4618      	mov	r0, r3
 800698c:	4611      	mov	r1, r2
 800698e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006992:	623b      	str	r3, [r7, #32]
 8006994:	2300      	movs	r3, #0
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
 8006998:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800699c:	4642      	mov	r2, r8
 800699e:	464b      	mov	r3, r9
 80069a0:	f04f 0000 	mov.w	r0, #0
 80069a4:	f04f 0100 	mov.w	r1, #0
 80069a8:	0159      	lsls	r1, r3, #5
 80069aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069ae:	0150      	lsls	r0, r2, #5
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4641      	mov	r1, r8
 80069b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80069ba:	4649      	mov	r1, r9
 80069bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	f04f 0300 	mov.w	r3, #0
 80069c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069d4:	ebb2 040a 	subs.w	r4, r2, sl
 80069d8:	eb63 050b 	sbc.w	r5, r3, fp
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	00eb      	lsls	r3, r5, #3
 80069e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069ea:	00e2      	lsls	r2, r4, #3
 80069ec:	4614      	mov	r4, r2
 80069ee:	461d      	mov	r5, r3
 80069f0:	4643      	mov	r3, r8
 80069f2:	18e3      	adds	r3, r4, r3
 80069f4:	603b      	str	r3, [r7, #0]
 80069f6:	464b      	mov	r3, r9
 80069f8:	eb45 0303 	adc.w	r3, r5, r3
 80069fc:	607b      	str	r3, [r7, #4]
 80069fe:	f04f 0200 	mov.w	r2, #0
 8006a02:	f04f 0300 	mov.w	r3, #0
 8006a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	028b      	lsls	r3, r1, #10
 8006a0e:	4621      	mov	r1, r4
 8006a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a14:	4621      	mov	r1, r4
 8006a16:	028a      	lsls	r2, r1, #10
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a1e:	2200      	movs	r2, #0
 8006a20:	61bb      	str	r3, [r7, #24]
 8006a22:	61fa      	str	r2, [r7, #28]
 8006a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a28:	f7f9 ffbc 	bl	80009a4 <__aeabi_uldivmod>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4613      	mov	r3, r2
 8006a32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a34:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	0c1b      	lsrs	r3, r3, #16
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	3301      	adds	r3, #1
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a4e:	e002      	b.n	8006a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3750      	adds	r7, #80	; 0x50
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a62:	bf00      	nop
 8006a64:	40023800 	.word	0x40023800
 8006a68:	00f42400 	.word	0x00f42400
 8006a6c:	007a1200 	.word	0x007a1200

08006a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a74:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a76:	681b      	ldr	r3, [r3, #0]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	20000000 	.word	0x20000000

08006a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a8c:	f7ff fff0 	bl	8006a70 <HAL_RCC_GetHCLKFreq>
 8006a90:	4602      	mov	r2, r0
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	0a9b      	lsrs	r3, r3, #10
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	4903      	ldr	r1, [pc, #12]	; (8006aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a9e:	5ccb      	ldrb	r3, [r1, r3]
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	0800cc38 	.word	0x0800cc38

08006ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ab4:	f7ff ffdc 	bl	8006a70 <HAL_RCC_GetHCLKFreq>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	0b5b      	lsrs	r3, r3, #13
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	4903      	ldr	r1, [pc, #12]	; (8006ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ac6:	5ccb      	ldrb	r3, [r1, r3]
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40023800 	.word	0x40023800
 8006ad4:	0800cc38 	.word	0x0800cc38

08006ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d105      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d035      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b00:	4b62      	ldr	r3, [pc, #392]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b06:	f7fc fc2f 	bl	8003368 <HAL_GetTick>
 8006b0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b0c:	e008      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b0e:	f7fc fc2b 	bl	8003368 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d901      	bls.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e0b0      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b20:	4b5b      	ldr	r3, [pc, #364]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1f0      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	019a      	lsls	r2, r3, #6
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	071b      	lsls	r3, r3, #28
 8006b38:	4955      	ldr	r1, [pc, #340]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b40:	4b52      	ldr	r3, [pc, #328]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b42:	2201      	movs	r2, #1
 8006b44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b46:	f7fc fc0f 	bl	8003368 <HAL_GetTick>
 8006b4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b4c:	e008      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b4e:	f7fc fc0b 	bl	8003368 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d901      	bls.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e090      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b60:	4b4b      	ldr	r3, [pc, #300]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0f0      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8083 	beq.w	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	4b44      	ldr	r3, [pc, #272]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	4a43      	ldr	r2, [pc, #268]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b88:	6413      	str	r3, [r2, #64]	; 0x40
 8006b8a:	4b41      	ldr	r3, [pc, #260]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b96:	4b3f      	ldr	r3, [pc, #252]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a3e      	ldr	r2, [pc, #248]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ba2:	f7fc fbe1 	bl	8003368 <HAL_GetTick>
 8006ba6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ba8:	e008      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006baa:	f7fc fbdd 	bl	8003368 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d901      	bls.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e062      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bbc:	4b35      	ldr	r3, [pc, #212]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0f0      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bc8:	4b31      	ldr	r3, [pc, #196]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d02f      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d028      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006be6:	4b2a      	ldr	r3, [pc, #168]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bf0:	4b29      	ldr	r3, [pc, #164]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bf6:	4b28      	ldr	r3, [pc, #160]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006bfc:	4a24      	ldr	r2, [pc, #144]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c02:	4b23      	ldr	r3, [pc, #140]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d114      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c0e:	f7fc fbab 	bl	8003368 <HAL_GetTick>
 8006c12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c14:	e00a      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c16:	f7fc fba7 	bl	8003368 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e02a      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2c:	4b18      	ldr	r3, [pc, #96]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0ee      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c44:	d10d      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006c46:	4b12      	ldr	r3, [pc, #72]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c5a:	490d      	ldr	r1, [pc, #52]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	608b      	str	r3, [r1, #8]
 8006c60:	e005      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c62:	4b0b      	ldr	r3, [pc, #44]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	4a0a      	ldr	r2, [pc, #40]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c68:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c6c:	6093      	str	r3, [r2, #8]
 8006c6e:	4b08      	ldr	r3, [pc, #32]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c7a:	4905      	ldr	r1, [pc, #20]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	42470068 	.word	0x42470068
 8006c90:	40023800 	.word	0x40023800
 8006c94:	40007000 	.word	0x40007000
 8006c98:	42470e40 	.word	0x42470e40

08006c9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d13e      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006cba:	4b23      	ldr	r3, [pc, #140]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d12f      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006cd0:	4b1e      	ldr	r3, [pc, #120]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cd2:	617b      	str	r3, [r7, #20]
          break;
 8006cd4:	e02f      	b.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006cd6:	4b1c      	ldr	r3, [pc, #112]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ce2:	d108      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ce4:	4b18      	ldr	r3, [pc, #96]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cec:	4a18      	ldr	r2, [pc, #96]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	e007      	b.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006cf6:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cfe:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d04:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006d06:	4b10      	ldr	r3, [pc, #64]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d0c:	099b      	lsrs	r3, r3, #6
 8006d0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	fb02 f303 	mul.w	r3, r2, r3
 8006d18:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006d1a:	4b0b      	ldr	r3, [pc, #44]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d20:	0f1b      	lsrs	r3, r3, #28
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2c:	617b      	str	r3, [r7, #20]
          break;
 8006d2e:	e002      	b.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]
          break;
 8006d34:	bf00      	nop
        }
      }
      break;
 8006d36:	bf00      	nop
    }
  }
  return frequency;
 8006d38:	697b      	ldr	r3, [r7, #20]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	00bb8000 	.word	0x00bb8000
 8006d50:	007a1200 	.word	0x007a1200
 8006d54:	00f42400 	.word	0x00f42400

08006d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e07b      	b.n	8006e62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d108      	bne.n	8006d84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d7a:	d009      	beq.n	8006d90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	61da      	str	r2, [r3, #28]
 8006d82:	e005      	b.n	8006d90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7fc f81c 	bl	8002de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	431a      	orrs	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e14:	ea42 0103 	orr.w	r1, r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	0c1b      	lsrs	r3, r3, #16
 8006e2e:	f003 0104 	and.w	r1, r3, #4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	f003 0210 	and.w	r2, r3, #16
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b08c      	sub	sp, #48	; 0x30
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	607a      	str	r2, [r7, #4]
 8006e76:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_SPI_TransmitReceive+0x26>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e18a      	b.n	80071a6 <HAL_SPI_TransmitReceive+0x33c>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e98:	f7fc fa66 	bl	8003368 <HAL_GetTick>
 8006e9c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006eae:	887b      	ldrh	r3, [r7, #2]
 8006eb0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d00f      	beq.n	8006eda <HAL_SPI_TransmitReceive+0x70>
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ec0:	d107      	bne.n	8006ed2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d103      	bne.n	8006ed2 <HAL_SPI_TransmitReceive+0x68>
 8006eca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d003      	beq.n	8006eda <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ed8:	e15b      	b.n	8007192 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <HAL_SPI_TransmitReceive+0x82>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <HAL_SPI_TransmitReceive+0x82>
 8006ee6:	887b      	ldrh	r3, [r7, #2]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d103      	bne.n	8006ef4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ef2:	e14e      	b.n	8007192 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d003      	beq.n	8006f08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2205      	movs	r2, #5
 8006f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	887a      	ldrh	r2, [r7, #2]
 8006f18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	887a      	ldrh	r2, [r7, #2]
 8006f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	887a      	ldrh	r2, [r7, #2]
 8006f2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	887a      	ldrh	r2, [r7, #2]
 8006f30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f48:	2b40      	cmp	r3, #64	; 0x40
 8006f4a:	d007      	beq.n	8006f5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f64:	d178      	bne.n	8007058 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_SPI_TransmitReceive+0x10a>
 8006f6e:	8b7b      	ldrh	r3, [r7, #26]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d166      	bne.n	8007042 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f78:	881a      	ldrh	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f84:	1c9a      	adds	r2, r3, #2
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f98:	e053      	b.n	8007042 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d11b      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x176>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d016      	beq.n	8006fe0 <HAL_SPI_TransmitReceive+0x176>
 8006fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d113      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbc:	881a      	ldrh	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc8:	1c9a      	adds	r2, r3, #2
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d119      	bne.n	8007022 <HAL_SPI_TransmitReceive+0x1b8>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d014      	beq.n	8007022 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007002:	b292      	uxth	r2, r2
 8007004:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	1c9a      	adds	r2, r3, #2
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800701e:	2301      	movs	r3, #1
 8007020:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007022:	f7fc f9a1 	bl	8003368 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800702e:	429a      	cmp	r2, r3
 8007030:	d807      	bhi.n	8007042 <HAL_SPI_TransmitReceive+0x1d8>
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007038:	d003      	beq.n	8007042 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007040:	e0a7      	b.n	8007192 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1a6      	bne.n	8006f9a <HAL_SPI_TransmitReceive+0x130>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1a1      	bne.n	8006f9a <HAL_SPI_TransmitReceive+0x130>
 8007056:	e07c      	b.n	8007152 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <HAL_SPI_TransmitReceive+0x1fc>
 8007060:	8b7b      	ldrh	r3, [r7, #26]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d16b      	bne.n	800713e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	330c      	adds	r3, #12
 8007070:	7812      	ldrb	r2, [r2, #0]
 8007072:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007082:	b29b      	uxth	r3, r3
 8007084:	3b01      	subs	r3, #1
 8007086:	b29a      	uxth	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800708c:	e057      	b.n	800713e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b02      	cmp	r3, #2
 800709a:	d11c      	bne.n	80070d6 <HAL_SPI_TransmitReceive+0x26c>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d017      	beq.n	80070d6 <HAL_SPI_TransmitReceive+0x26c>
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d114      	bne.n	80070d6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	330c      	adds	r3, #12
 80070b6:	7812      	ldrb	r2, [r2, #0]
 80070b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	3b01      	subs	r3, #1
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d119      	bne.n	8007118 <HAL_SPI_TransmitReceive+0x2ae>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d014      	beq.n	8007118 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007114:	2301      	movs	r3, #1
 8007116:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007118:	f7fc f926 	bl	8003368 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007124:	429a      	cmp	r2, r3
 8007126:	d803      	bhi.n	8007130 <HAL_SPI_TransmitReceive+0x2c6>
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712e:	d102      	bne.n	8007136 <HAL_SPI_TransmitReceive+0x2cc>
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	2b00      	cmp	r3, #0
 8007134:	d103      	bne.n	800713e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800713c:	e029      	b.n	8007192 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007142:	b29b      	uxth	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1a2      	bne.n	800708e <HAL_SPI_TransmitReceive+0x224>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d19d      	bne.n	800708e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007154:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f9d0 	bl	80074fc <SPI_EndRxTxTransaction>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d006      	beq.n	8007170 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2220      	movs	r2, #32
 800716c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800716e:	e010      	b.n	8007192 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10b      	bne.n	8007190 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	e000      	b.n	8007192 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007190:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3730      	adds	r7, #48	; 0x30
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	099b      	lsrs	r3, r3, #6
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10f      	bne.n	80071f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	099b      	lsrs	r3, r3, #6
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d004      	beq.n	80071f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	4798      	blx	r3
    return;
 80071f2:	e0d7      	b.n	80073a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	085b      	lsrs	r3, r3, #1
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <HAL_SPI_IRQHandler+0x66>
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	09db      	lsrs	r3, r3, #7
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d004      	beq.n	8007216 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
    return;
 8007214:	e0c6      	b.n	80073a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10c      	bne.n	800723c <HAL_SPI_IRQHandler+0x8c>
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	099b      	lsrs	r3, r3, #6
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d106      	bne.n	800723c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	0a1b      	lsrs	r3, r3, #8
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 80b4 	beq.w	80073a4 <HAL_SPI_IRQHandler+0x1f4>
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	095b      	lsrs	r3, r3, #5
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 80ad 	beq.w	80073a4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	099b      	lsrs	r3, r3, #6
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d023      	beq.n	800729e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b03      	cmp	r3, #3
 8007260:	d011      	beq.n	8007286 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007266:	f043 0204 	orr.w	r2, r3, #4
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	617b      	str	r3, [r7, #20]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	e00b      	b.n	800729e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007286:	2300      	movs	r3, #0
 8007288:	613b      	str	r3, [r7, #16]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	613b      	str	r3, [r7, #16]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	613b      	str	r3, [r7, #16]
 800729a:	693b      	ldr	r3, [r7, #16]
        return;
 800729c:	e082      	b.n	80073a4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	095b      	lsrs	r3, r3, #5
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d014      	beq.n	80072d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ae:	f043 0201 	orr.w	r2, r3, #1
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	0a1b      	lsrs	r3, r3, #8
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00c      	beq.n	80072fa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e4:	f043 0208 	orr.w	r2, r3, #8
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80072ec:	2300      	movs	r3, #0
 80072ee:	60bb      	str	r3, [r7, #8]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	60bb      	str	r3, [r7, #8]
 80072f8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d04f      	beq.n	80073a2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007310:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <HAL_SPI_IRQHandler+0x17e>
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d034      	beq.n	8007398 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0203 	bic.w	r2, r2, #3
 800733c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007342:	2b00      	cmp	r3, #0
 8007344:	d011      	beq.n	800736a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734a:	4a18      	ldr	r2, [pc, #96]	; (80073ac <HAL_SPI_IRQHandler+0x1fc>)
 800734c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007352:	4618      	mov	r0, r3
 8007354:	f7fc fa68 	bl	8003828 <HAL_DMA_Abort_IT>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d005      	beq.n	800736a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007362:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800736e:	2b00      	cmp	r3, #0
 8007370:	d016      	beq.n	80073a0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007376:	4a0d      	ldr	r2, [pc, #52]	; (80073ac <HAL_SPI_IRQHandler+0x1fc>)
 8007378:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737e:	4618      	mov	r0, r3
 8007380:	f7fc fa52 	bl	8003828 <HAL_DMA_Abort_IT>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007396:	e003      	b.n	80073a0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f809 	bl	80073b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800739e:	e000      	b.n	80073a2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80073a0:	bf00      	nop
    return;
 80073a2:	bf00      	nop
  }
}
 80073a4:	3720      	adds	r7, #32
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	080073c5 	.word	0x080073c5

080073b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f7ff ffe6 	bl	80073b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073e4:	bf00      	nop
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073fc:	f7fb ffb4 	bl	8003368 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	1a9b      	subs	r3, r3, r2
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	4413      	add	r3, r2
 800740a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800740c:	f7fb ffac 	bl	8003368 <HAL_GetTick>
 8007410:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007412:	4b39      	ldr	r3, [pc, #228]	; (80074f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	015b      	lsls	r3, r3, #5
 8007418:	0d1b      	lsrs	r3, r3, #20
 800741a:	69fa      	ldr	r2, [r7, #28]
 800741c:	fb02 f303 	mul.w	r3, r2, r3
 8007420:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007422:	e054      	b.n	80074ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742a:	d050      	beq.n	80074ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800742c:	f7fb ff9c 	bl	8003368 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	429a      	cmp	r2, r3
 800743a:	d902      	bls.n	8007442 <SPI_WaitFlagStateUntilTimeout+0x56>
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d13d      	bne.n	80074be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007450:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800745a:	d111      	bne.n	8007480 <SPI_WaitFlagStateUntilTimeout+0x94>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007464:	d004      	beq.n	8007470 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800746e:	d107      	bne.n	8007480 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800747e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007488:	d10f      	bne.n	80074aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e017      	b.n	80074ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4013      	ands	r3, r2
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	429a      	cmp	r2, r3
 80074dc:	bf0c      	ite	eq
 80074de:	2301      	moveq	r3, #1
 80074e0:	2300      	movne	r3, #0
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	461a      	mov	r2, r3
 80074e6:	79fb      	ldrb	r3, [r7, #7]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d19b      	bne.n	8007424 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3720      	adds	r7, #32
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000000 	.word	0x20000000

080074fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af02      	add	r7, sp, #8
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007508:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <SPI_EndRxTxTransaction+0x7c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a1b      	ldr	r2, [pc, #108]	; (800757c <SPI_EndRxTxTransaction+0x80>)
 800750e:	fba2 2303 	umull	r2, r3, r2, r3
 8007512:	0d5b      	lsrs	r3, r3, #21
 8007514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007518:	fb02 f303 	mul.w	r3, r2, r3
 800751c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007526:	d112      	bne.n	800754e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2200      	movs	r2, #0
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff ff5a 	bl	80073ec <SPI_WaitFlagStateUntilTimeout>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d016      	beq.n	800756c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007542:	f043 0220 	orr.w	r2, r3, #32
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e00f      	b.n	800756e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	3b01      	subs	r3, #1
 8007558:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007564:	2b80      	cmp	r3, #128	; 0x80
 8007566:	d0f2      	beq.n	800754e <SPI_EndRxTxTransaction+0x52>
 8007568:	e000      	b.n	800756c <SPI_EndRxTxTransaction+0x70>
        break;
 800756a:	bf00      	nop
  }

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20000000 	.word	0x20000000
 800757c:	165e9f81 	.word	0x165e9f81

08007580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e041      	b.n	8007616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d106      	bne.n	80075ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7fb fd08 	bl	8002fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f000 f82e 	bl	8007620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a40      	ldr	r2, [pc, #256]	; (8007734 <TIM_Base_SetConfig+0x114>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d013      	beq.n	8007660 <TIM_Base_SetConfig+0x40>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763e:	d00f      	beq.n	8007660 <TIM_Base_SetConfig+0x40>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a3d      	ldr	r2, [pc, #244]	; (8007738 <TIM_Base_SetConfig+0x118>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d00b      	beq.n	8007660 <TIM_Base_SetConfig+0x40>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a3c      	ldr	r2, [pc, #240]	; (800773c <TIM_Base_SetConfig+0x11c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d007      	beq.n	8007660 <TIM_Base_SetConfig+0x40>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a3b      	ldr	r2, [pc, #236]	; (8007740 <TIM_Base_SetConfig+0x120>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d003      	beq.n	8007660 <TIM_Base_SetConfig+0x40>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a3a      	ldr	r2, [pc, #232]	; (8007744 <TIM_Base_SetConfig+0x124>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d108      	bne.n	8007672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a2f      	ldr	r2, [pc, #188]	; (8007734 <TIM_Base_SetConfig+0x114>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d02b      	beq.n	80076d2 <TIM_Base_SetConfig+0xb2>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007680:	d027      	beq.n	80076d2 <TIM_Base_SetConfig+0xb2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a2c      	ldr	r2, [pc, #176]	; (8007738 <TIM_Base_SetConfig+0x118>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d023      	beq.n	80076d2 <TIM_Base_SetConfig+0xb2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a2b      	ldr	r2, [pc, #172]	; (800773c <TIM_Base_SetConfig+0x11c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d01f      	beq.n	80076d2 <TIM_Base_SetConfig+0xb2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a2a      	ldr	r2, [pc, #168]	; (8007740 <TIM_Base_SetConfig+0x120>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d01b      	beq.n	80076d2 <TIM_Base_SetConfig+0xb2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a29      	ldr	r2, [pc, #164]	; (8007744 <TIM_Base_SetConfig+0x124>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d017      	beq.n	80076d2 <TIM_Base_SetConfig+0xb2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a28      	ldr	r2, [pc, #160]	; (8007748 <TIM_Base_SetConfig+0x128>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d013      	beq.n	80076d2 <TIM_Base_SetConfig+0xb2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a27      	ldr	r2, [pc, #156]	; (800774c <TIM_Base_SetConfig+0x12c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d00f      	beq.n	80076d2 <TIM_Base_SetConfig+0xb2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a26      	ldr	r2, [pc, #152]	; (8007750 <TIM_Base_SetConfig+0x130>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00b      	beq.n	80076d2 <TIM_Base_SetConfig+0xb2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a25      	ldr	r2, [pc, #148]	; (8007754 <TIM_Base_SetConfig+0x134>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d007      	beq.n	80076d2 <TIM_Base_SetConfig+0xb2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a24      	ldr	r2, [pc, #144]	; (8007758 <TIM_Base_SetConfig+0x138>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d003      	beq.n	80076d2 <TIM_Base_SetConfig+0xb2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a23      	ldr	r2, [pc, #140]	; (800775c <TIM_Base_SetConfig+0x13c>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d108      	bne.n	80076e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a0a      	ldr	r2, [pc, #40]	; (8007734 <TIM_Base_SetConfig+0x114>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d003      	beq.n	8007718 <TIM_Base_SetConfig+0xf8>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a0c      	ldr	r2, [pc, #48]	; (8007744 <TIM_Base_SetConfig+0x124>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d103      	bne.n	8007720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	691a      	ldr	r2, [r3, #16]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	615a      	str	r2, [r3, #20]
}
 8007726:	bf00      	nop
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	40010000 	.word	0x40010000
 8007738:	40000400 	.word	0x40000400
 800773c:	40000800 	.word	0x40000800
 8007740:	40000c00 	.word	0x40000c00
 8007744:	40010400 	.word	0x40010400
 8007748:	40014000 	.word	0x40014000
 800774c:	40014400 	.word	0x40014400
 8007750:	40014800 	.word	0x40014800
 8007754:	40001800 	.word	0x40001800
 8007758:	40001c00 	.word	0x40001c00
 800775c:	40002000 	.word	0x40002000

08007760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007774:	2302      	movs	r3, #2
 8007776:	e05a      	b.n	800782e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a21      	ldr	r2, [pc, #132]	; (800783c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d022      	beq.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c4:	d01d      	beq.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a1d      	ldr	r2, [pc, #116]	; (8007840 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d018      	beq.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a1b      	ldr	r2, [pc, #108]	; (8007844 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d013      	beq.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a1a      	ldr	r2, [pc, #104]	; (8007848 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00e      	beq.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a18      	ldr	r2, [pc, #96]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d009      	beq.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a17      	ldr	r2, [pc, #92]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d004      	beq.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a15      	ldr	r2, [pc, #84]	; (8007854 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d10c      	bne.n	800781c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	4313      	orrs	r3, r2
 8007812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	40010000 	.word	0x40010000
 8007840:	40000400 	.word	0x40000400
 8007844:	40000800 	.word	0x40000800
 8007848:	40000c00 	.word	0x40000c00
 800784c:	40010400 	.word	0x40010400
 8007850:	40014000 	.word	0x40014000
 8007854:	40001800 	.word	0x40001800

08007858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e03f      	b.n	80078ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fb fbbe 	bl	8003000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2224      	movs	r2, #36	; 0x24
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800789a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fc71 	bl	8008184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	691a      	ldr	r2, [r3, #16]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	695a      	ldr	r2, [r3, #20]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68da      	ldr	r2, [r3, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2220      	movs	r2, #32
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2220      	movs	r2, #32
 80078e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b0ba      	sub	sp, #232	; 0xe8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800791a:	2300      	movs	r3, #0
 800791c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007920:	2300      	movs	r3, #0
 8007922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10f      	bne.n	800795a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800793a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <HAL_UART_IRQHandler+0x66>
 8007946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fb5b 	bl	800800e <UART_Receive_IT>
      return;
 8007958:	e256      	b.n	8007e08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800795a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 80de 	beq.w	8007b20 <HAL_UART_IRQHandler+0x22c>
 8007964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d106      	bne.n	800797e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007974:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 80d1 	beq.w	8007b20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800797e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00b      	beq.n	80079a2 <HAL_UART_IRQHandler+0xae>
 800798a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800798e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007992:	2b00      	cmp	r3, #0
 8007994:	d005      	beq.n	80079a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	f043 0201 	orr.w	r2, r3, #1
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a6:	f003 0304 	and.w	r3, r3, #4
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00b      	beq.n	80079c6 <HAL_UART_IRQHandler+0xd2>
 80079ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d005      	beq.n	80079c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	f043 0202 	orr.w	r2, r3, #2
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00b      	beq.n	80079ea <HAL_UART_IRQHandler+0xf6>
 80079d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d005      	beq.n	80079ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e2:	f043 0204 	orr.w	r2, r3, #4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80079ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ee:	f003 0308 	and.w	r3, r3, #8
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d011      	beq.n	8007a1a <HAL_UART_IRQHandler+0x126>
 80079f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d105      	bne.n	8007a0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	f043 0208 	orr.w	r2, r3, #8
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 81ed 	beq.w	8007dfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d008      	beq.n	8007a42 <HAL_UART_IRQHandler+0x14e>
 8007a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a34:	f003 0320 	and.w	r3, r3, #32
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fae6 	bl	800800e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4c:	2b40      	cmp	r3, #64	; 0x40
 8007a4e:	bf0c      	ite	eq
 8007a50:	2301      	moveq	r3, #1
 8007a52:	2300      	movne	r3, #0
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5e:	f003 0308 	and.w	r3, r3, #8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d103      	bne.n	8007a6e <HAL_UART_IRQHandler+0x17a>
 8007a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d04f      	beq.n	8007b0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f9ee 	bl	8007e50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7e:	2b40      	cmp	r3, #64	; 0x40
 8007a80:	d141      	bne.n	8007b06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3314      	adds	r3, #20
 8007a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3314      	adds	r3, #20
 8007aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1d9      	bne.n	8007a82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d013      	beq.n	8007afe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ada:	4a7d      	ldr	r2, [pc, #500]	; (8007cd0 <HAL_UART_IRQHandler+0x3dc>)
 8007adc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fb fea0 	bl	8003828 <HAL_DMA_Abort_IT>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d016      	beq.n	8007b1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afc:	e00e      	b.n	8007b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f990 	bl	8007e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b04:	e00a      	b.n	8007b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f98c 	bl	8007e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0c:	e006      	b.n	8007b1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f988 	bl	8007e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b1a:	e170      	b.n	8007dfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1c:	bf00      	nop
    return;
 8007b1e:	e16e      	b.n	8007dfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	f040 814a 	bne.w	8007dbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b2e:	f003 0310 	and.w	r3, r3, #16
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 8143 	beq.w	8007dbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b3c:	f003 0310 	and.w	r3, r3, #16
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 813c 	beq.w	8007dbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b46:	2300      	movs	r3, #0
 8007b48:	60bb      	str	r3, [r7, #8]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	60bb      	str	r3, [r7, #8]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	60bb      	str	r3, [r7, #8]
 8007b5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b66:	2b40      	cmp	r3, #64	; 0x40
 8007b68:	f040 80b4 	bne.w	8007cd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 8140 	beq.w	8007e02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	f080 8139 	bcs.w	8007e02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba2:	f000 8088 	beq.w	8007cb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	330c      	adds	r3, #12
 8007bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bb4:	e853 3f00 	ldrex	r3, [r3]
 8007bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007bbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007bd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007bde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007be2:	e841 2300 	strex	r3, r2, [r1]
 8007be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1d9      	bne.n	8007ba6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3314      	adds	r3, #20
 8007bf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bfc:	e853 3f00 	ldrex	r3, [r3]
 8007c00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c04:	f023 0301 	bic.w	r3, r3, #1
 8007c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3314      	adds	r3, #20
 8007c12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c22:	e841 2300 	strex	r3, r2, [r1]
 8007c26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1e1      	bne.n	8007bf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3314      	adds	r3, #20
 8007c34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3314      	adds	r3, #20
 8007c4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e3      	bne.n	8007c2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	330c      	adds	r3, #12
 8007c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c86:	f023 0310 	bic.w	r3, r3, #16
 8007c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	330c      	adds	r3, #12
 8007c94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007c98:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e3      	bne.n	8007c74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fb fd49 	bl	8003748 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f8b6 	bl	8007e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ccc:	e099      	b.n	8007e02 <HAL_UART_IRQHandler+0x50e>
 8007cce:	bf00      	nop
 8007cd0:	08007f17 	.word	0x08007f17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 808b 	beq.w	8007e06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007cf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 8086 	beq.w	8007e06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	330c      	adds	r3, #12
 8007d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	330c      	adds	r3, #12
 8007d1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007d1e:	647a      	str	r2, [r7, #68]	; 0x44
 8007d20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e3      	bne.n	8007cfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3314      	adds	r3, #20
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	623b      	str	r3, [r7, #32]
   return(result);
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	f023 0301 	bic.w	r3, r3, #1
 8007d48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3314      	adds	r3, #20
 8007d52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d56:	633a      	str	r2, [r7, #48]	; 0x30
 8007d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e3      	bne.n	8007d32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f023 0310 	bic.w	r3, r3, #16
 8007d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	330c      	adds	r3, #12
 8007d98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007d9c:	61fa      	str	r2, [r7, #28]
 8007d9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	69b9      	ldr	r1, [r7, #24]
 8007da2:	69fa      	ldr	r2, [r7, #28]
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	617b      	str	r3, [r7, #20]
   return(result);
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e3      	bne.n	8007d78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f83e 	bl	8007e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dbc:	e023      	b.n	8007e06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d009      	beq.n	8007dde <HAL_UART_IRQHandler+0x4ea>
 8007dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f8b1 	bl	8007f3e <UART_Transmit_IT>
    return;
 8007ddc:	e014      	b.n	8007e08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00e      	beq.n	8007e08 <HAL_UART_IRQHandler+0x514>
 8007dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d008      	beq.n	8007e08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f8f1 	bl	8007fde <UART_EndTransmit_IT>
    return;
 8007dfc:	e004      	b.n	8007e08 <HAL_UART_IRQHandler+0x514>
    return;
 8007dfe:	bf00      	nop
 8007e00:	e002      	b.n	8007e08 <HAL_UART_IRQHandler+0x514>
      return;
 8007e02:	bf00      	nop
 8007e04:	e000      	b.n	8007e08 <HAL_UART_IRQHandler+0x514>
      return;
 8007e06:	bf00      	nop
  }
}
 8007e08:	37e8      	adds	r7, #232	; 0xe8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop

08007e10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b095      	sub	sp, #84	; 0x54
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	330c      	adds	r3, #12
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e62:	e853 3f00 	ldrex	r3, [r3]
 8007e66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	330c      	adds	r3, #12
 8007e76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e78:	643a      	str	r2, [r7, #64]	; 0x40
 8007e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e80:	e841 2300 	strex	r3, r2, [r1]
 8007e84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1e5      	bne.n	8007e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3314      	adds	r3, #20
 8007e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	e853 3f00 	ldrex	r3, [r3]
 8007e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	f023 0301 	bic.w	r3, r3, #1
 8007ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3314      	adds	r3, #20
 8007eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb4:	e841 2300 	strex	r3, r2, [r1]
 8007eb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1e5      	bne.n	8007e8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d119      	bne.n	8007efc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	330c      	adds	r3, #12
 8007ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	e853 3f00 	ldrex	r3, [r3]
 8007ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f023 0310 	bic.w	r3, r3, #16
 8007ede:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	330c      	adds	r3, #12
 8007ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ee8:	61ba      	str	r2, [r7, #24]
 8007eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	6979      	ldr	r1, [r7, #20]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e5      	bne.n	8007ec8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f0a:	bf00      	nop
 8007f0c:	3754      	adds	r7, #84	; 0x54
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f7ff ff77 	bl	8007e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f36:	bf00      	nop
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b085      	sub	sp, #20
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b21      	cmp	r3, #33	; 0x21
 8007f50:	d13e      	bne.n	8007fd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5a:	d114      	bne.n	8007f86 <UART_Transmit_IT+0x48>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d110      	bne.n	8007f86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	1c9a      	adds	r2, r3, #2
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	621a      	str	r2, [r3, #32]
 8007f84:	e008      	b.n	8007f98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	1c59      	adds	r1, r3, #1
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	6211      	str	r1, [r2, #32]
 8007f90:	781a      	ldrb	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10f      	bne.n	8007fcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e000      	b.n	8007fd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007fd0:	2302      	movs	r3, #2
  }
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ff4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7f8 ffc9 	bl	8000f96 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b08c      	sub	sp, #48	; 0x30
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b22      	cmp	r3, #34	; 0x22
 8008020:	f040 80ab 	bne.w	800817a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800802c:	d117      	bne.n	800805e <UART_Receive_IT+0x50>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d113      	bne.n	800805e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008036:	2300      	movs	r3, #0
 8008038:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	b29b      	uxth	r3, r3
 8008048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800804c:	b29a      	uxth	r2, r3
 800804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008050:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008056:	1c9a      	adds	r2, r3, #2
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	629a      	str	r2, [r3, #40]	; 0x28
 800805c:	e026      	b.n	80080ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008062:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008064:	2300      	movs	r3, #0
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008070:	d007      	beq.n	8008082 <UART_Receive_IT+0x74>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10a      	bne.n	8008090 <UART_Receive_IT+0x82>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d106      	bne.n	8008090 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	b2da      	uxtb	r2, r3
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	701a      	strb	r2, [r3, #0]
 800808e:	e008      	b.n	80080a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809c:	b2da      	uxtb	r2, r3
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	4619      	mov	r1, r3
 80080ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d15a      	bne.n	8008176 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68da      	ldr	r2, [r3, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0220 	bic.w	r2, r2, #32
 80080ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	695a      	ldr	r2, [r3, #20]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0201 	bic.w	r2, r2, #1
 80080ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d135      	bne.n	800816c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	330c      	adds	r3, #12
 800810c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	613b      	str	r3, [r7, #16]
   return(result);
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f023 0310 	bic.w	r3, r3, #16
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	330c      	adds	r3, #12
 8008124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008126:	623a      	str	r2, [r7, #32]
 8008128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812a:	69f9      	ldr	r1, [r7, #28]
 800812c:	6a3a      	ldr	r2, [r7, #32]
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	61bb      	str	r3, [r7, #24]
   return(result);
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e5      	bne.n	8008106 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0310 	and.w	r3, r3, #16
 8008144:	2b10      	cmp	r3, #16
 8008146:	d10a      	bne.n	800815e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008148:	2300      	movs	r3, #0
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7ff fe67 	bl	8007e38 <HAL_UARTEx_RxEventCallback>
 800816a:	e002      	b.n	8008172 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7ff fe4f 	bl	8007e10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	e002      	b.n	800817c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	e000      	b.n	800817c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800817a:	2302      	movs	r3, #2
  }
}
 800817c:	4618      	mov	r0, r3
 800817e:	3730      	adds	r7, #48	; 0x30
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008188:	b0c0      	sub	sp, #256	; 0x100
 800818a:	af00      	add	r7, sp, #0
 800818c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800819c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a0:	68d9      	ldr	r1, [r3, #12]
 80081a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	ea40 0301 	orr.w	r3, r0, r1
 80081ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	431a      	orrs	r2, r3
 80081bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	431a      	orrs	r2, r3
 80081c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80081dc:	f021 010c 	bic.w	r1, r1, #12
 80081e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081ea:	430b      	orrs	r3, r1
 80081ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80081fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081fe:	6999      	ldr	r1, [r3, #24]
 8008200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	ea40 0301 	orr.w	r3, r0, r1
 800820a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	4b8f      	ldr	r3, [pc, #572]	; (8008450 <UART_SetConfig+0x2cc>)
 8008214:	429a      	cmp	r2, r3
 8008216:	d005      	beq.n	8008224 <UART_SetConfig+0xa0>
 8008218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	4b8d      	ldr	r3, [pc, #564]	; (8008454 <UART_SetConfig+0x2d0>)
 8008220:	429a      	cmp	r2, r3
 8008222:	d104      	bne.n	800822e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008224:	f7fe fc44 	bl	8006ab0 <HAL_RCC_GetPCLK2Freq>
 8008228:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800822c:	e003      	b.n	8008236 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800822e:	f7fe fc2b 	bl	8006a88 <HAL_RCC_GetPCLK1Freq>
 8008232:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008240:	f040 810c 	bne.w	800845c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008248:	2200      	movs	r2, #0
 800824a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800824e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008252:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008256:	4622      	mov	r2, r4
 8008258:	462b      	mov	r3, r5
 800825a:	1891      	adds	r1, r2, r2
 800825c:	65b9      	str	r1, [r7, #88]	; 0x58
 800825e:	415b      	adcs	r3, r3
 8008260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008266:	4621      	mov	r1, r4
 8008268:	eb12 0801 	adds.w	r8, r2, r1
 800826c:	4629      	mov	r1, r5
 800826e:	eb43 0901 	adc.w	r9, r3, r1
 8008272:	f04f 0200 	mov.w	r2, #0
 8008276:	f04f 0300 	mov.w	r3, #0
 800827a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800827e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008286:	4690      	mov	r8, r2
 8008288:	4699      	mov	r9, r3
 800828a:	4623      	mov	r3, r4
 800828c:	eb18 0303 	adds.w	r3, r8, r3
 8008290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008294:	462b      	mov	r3, r5
 8008296:	eb49 0303 	adc.w	r3, r9, r3
 800829a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800829e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80082ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80082b2:	460b      	mov	r3, r1
 80082b4:	18db      	adds	r3, r3, r3
 80082b6:	653b      	str	r3, [r7, #80]	; 0x50
 80082b8:	4613      	mov	r3, r2
 80082ba:	eb42 0303 	adc.w	r3, r2, r3
 80082be:	657b      	str	r3, [r7, #84]	; 0x54
 80082c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80082c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80082c8:	f7f8 fb6c 	bl	80009a4 <__aeabi_uldivmod>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4b61      	ldr	r3, [pc, #388]	; (8008458 <UART_SetConfig+0x2d4>)
 80082d2:	fba3 2302 	umull	r2, r3, r3, r2
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	011c      	lsls	r4, r3, #4
 80082da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082de:	2200      	movs	r2, #0
 80082e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80082e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80082ec:	4642      	mov	r2, r8
 80082ee:	464b      	mov	r3, r9
 80082f0:	1891      	adds	r1, r2, r2
 80082f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80082f4:	415b      	adcs	r3, r3
 80082f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80082fc:	4641      	mov	r1, r8
 80082fe:	eb12 0a01 	adds.w	sl, r2, r1
 8008302:	4649      	mov	r1, r9
 8008304:	eb43 0b01 	adc.w	fp, r3, r1
 8008308:	f04f 0200 	mov.w	r2, #0
 800830c:	f04f 0300 	mov.w	r3, #0
 8008310:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008314:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800831c:	4692      	mov	sl, r2
 800831e:	469b      	mov	fp, r3
 8008320:	4643      	mov	r3, r8
 8008322:	eb1a 0303 	adds.w	r3, sl, r3
 8008326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800832a:	464b      	mov	r3, r9
 800832c:	eb4b 0303 	adc.w	r3, fp, r3
 8008330:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008340:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008344:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008348:	460b      	mov	r3, r1
 800834a:	18db      	adds	r3, r3, r3
 800834c:	643b      	str	r3, [r7, #64]	; 0x40
 800834e:	4613      	mov	r3, r2
 8008350:	eb42 0303 	adc.w	r3, r2, r3
 8008354:	647b      	str	r3, [r7, #68]	; 0x44
 8008356:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800835a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800835e:	f7f8 fb21 	bl	80009a4 <__aeabi_uldivmod>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4611      	mov	r1, r2
 8008368:	4b3b      	ldr	r3, [pc, #236]	; (8008458 <UART_SetConfig+0x2d4>)
 800836a:	fba3 2301 	umull	r2, r3, r3, r1
 800836e:	095b      	lsrs	r3, r3, #5
 8008370:	2264      	movs	r2, #100	; 0x64
 8008372:	fb02 f303 	mul.w	r3, r2, r3
 8008376:	1acb      	subs	r3, r1, r3
 8008378:	00db      	lsls	r3, r3, #3
 800837a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800837e:	4b36      	ldr	r3, [pc, #216]	; (8008458 <UART_SetConfig+0x2d4>)
 8008380:	fba3 2302 	umull	r2, r3, r3, r2
 8008384:	095b      	lsrs	r3, r3, #5
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800838c:	441c      	add	r4, r3
 800838e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008392:	2200      	movs	r2, #0
 8008394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008398:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800839c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80083a0:	4642      	mov	r2, r8
 80083a2:	464b      	mov	r3, r9
 80083a4:	1891      	adds	r1, r2, r2
 80083a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80083a8:	415b      	adcs	r3, r3
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083b0:	4641      	mov	r1, r8
 80083b2:	1851      	adds	r1, r2, r1
 80083b4:	6339      	str	r1, [r7, #48]	; 0x30
 80083b6:	4649      	mov	r1, r9
 80083b8:	414b      	adcs	r3, r1
 80083ba:	637b      	str	r3, [r7, #52]	; 0x34
 80083bc:	f04f 0200 	mov.w	r2, #0
 80083c0:	f04f 0300 	mov.w	r3, #0
 80083c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80083c8:	4659      	mov	r1, fp
 80083ca:	00cb      	lsls	r3, r1, #3
 80083cc:	4651      	mov	r1, sl
 80083ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083d2:	4651      	mov	r1, sl
 80083d4:	00ca      	lsls	r2, r1, #3
 80083d6:	4610      	mov	r0, r2
 80083d8:	4619      	mov	r1, r3
 80083da:	4603      	mov	r3, r0
 80083dc:	4642      	mov	r2, r8
 80083de:	189b      	adds	r3, r3, r2
 80083e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083e4:	464b      	mov	r3, r9
 80083e6:	460a      	mov	r2, r1
 80083e8:	eb42 0303 	adc.w	r3, r2, r3
 80083ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80083fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008400:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008404:	460b      	mov	r3, r1
 8008406:	18db      	adds	r3, r3, r3
 8008408:	62bb      	str	r3, [r7, #40]	; 0x28
 800840a:	4613      	mov	r3, r2
 800840c:	eb42 0303 	adc.w	r3, r2, r3
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008416:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800841a:	f7f8 fac3 	bl	80009a4 <__aeabi_uldivmod>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4b0d      	ldr	r3, [pc, #52]	; (8008458 <UART_SetConfig+0x2d4>)
 8008424:	fba3 1302 	umull	r1, r3, r3, r2
 8008428:	095b      	lsrs	r3, r3, #5
 800842a:	2164      	movs	r1, #100	; 0x64
 800842c:	fb01 f303 	mul.w	r3, r1, r3
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	3332      	adds	r3, #50	; 0x32
 8008436:	4a08      	ldr	r2, [pc, #32]	; (8008458 <UART_SetConfig+0x2d4>)
 8008438:	fba2 2303 	umull	r2, r3, r2, r3
 800843c:	095b      	lsrs	r3, r3, #5
 800843e:	f003 0207 	and.w	r2, r3, #7
 8008442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4422      	add	r2, r4
 800844a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800844c:	e105      	b.n	800865a <UART_SetConfig+0x4d6>
 800844e:	bf00      	nop
 8008450:	40011000 	.word	0x40011000
 8008454:	40011400 	.word	0x40011400
 8008458:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800845c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008460:	2200      	movs	r2, #0
 8008462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008466:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800846a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800846e:	4642      	mov	r2, r8
 8008470:	464b      	mov	r3, r9
 8008472:	1891      	adds	r1, r2, r2
 8008474:	6239      	str	r1, [r7, #32]
 8008476:	415b      	adcs	r3, r3
 8008478:	627b      	str	r3, [r7, #36]	; 0x24
 800847a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800847e:	4641      	mov	r1, r8
 8008480:	1854      	adds	r4, r2, r1
 8008482:	4649      	mov	r1, r9
 8008484:	eb43 0501 	adc.w	r5, r3, r1
 8008488:	f04f 0200 	mov.w	r2, #0
 800848c:	f04f 0300 	mov.w	r3, #0
 8008490:	00eb      	lsls	r3, r5, #3
 8008492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008496:	00e2      	lsls	r2, r4, #3
 8008498:	4614      	mov	r4, r2
 800849a:	461d      	mov	r5, r3
 800849c:	4643      	mov	r3, r8
 800849e:	18e3      	adds	r3, r4, r3
 80084a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084a4:	464b      	mov	r3, r9
 80084a6:	eb45 0303 	adc.w	r3, r5, r3
 80084aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084be:	f04f 0200 	mov.w	r2, #0
 80084c2:	f04f 0300 	mov.w	r3, #0
 80084c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80084ca:	4629      	mov	r1, r5
 80084cc:	008b      	lsls	r3, r1, #2
 80084ce:	4621      	mov	r1, r4
 80084d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084d4:	4621      	mov	r1, r4
 80084d6:	008a      	lsls	r2, r1, #2
 80084d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80084dc:	f7f8 fa62 	bl	80009a4 <__aeabi_uldivmod>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	4b60      	ldr	r3, [pc, #384]	; (8008668 <UART_SetConfig+0x4e4>)
 80084e6:	fba3 2302 	umull	r2, r3, r3, r2
 80084ea:	095b      	lsrs	r3, r3, #5
 80084ec:	011c      	lsls	r4, r3, #4
 80084ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80084fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008500:	4642      	mov	r2, r8
 8008502:	464b      	mov	r3, r9
 8008504:	1891      	adds	r1, r2, r2
 8008506:	61b9      	str	r1, [r7, #24]
 8008508:	415b      	adcs	r3, r3
 800850a:	61fb      	str	r3, [r7, #28]
 800850c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008510:	4641      	mov	r1, r8
 8008512:	1851      	adds	r1, r2, r1
 8008514:	6139      	str	r1, [r7, #16]
 8008516:	4649      	mov	r1, r9
 8008518:	414b      	adcs	r3, r1
 800851a:	617b      	str	r3, [r7, #20]
 800851c:	f04f 0200 	mov.w	r2, #0
 8008520:	f04f 0300 	mov.w	r3, #0
 8008524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008528:	4659      	mov	r1, fp
 800852a:	00cb      	lsls	r3, r1, #3
 800852c:	4651      	mov	r1, sl
 800852e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008532:	4651      	mov	r1, sl
 8008534:	00ca      	lsls	r2, r1, #3
 8008536:	4610      	mov	r0, r2
 8008538:	4619      	mov	r1, r3
 800853a:	4603      	mov	r3, r0
 800853c:	4642      	mov	r2, r8
 800853e:	189b      	adds	r3, r3, r2
 8008540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008544:	464b      	mov	r3, r9
 8008546:	460a      	mov	r2, r1
 8008548:	eb42 0303 	adc.w	r3, r2, r3
 800854c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	67bb      	str	r3, [r7, #120]	; 0x78
 800855a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008568:	4649      	mov	r1, r9
 800856a:	008b      	lsls	r3, r1, #2
 800856c:	4641      	mov	r1, r8
 800856e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008572:	4641      	mov	r1, r8
 8008574:	008a      	lsls	r2, r1, #2
 8008576:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800857a:	f7f8 fa13 	bl	80009a4 <__aeabi_uldivmod>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4b39      	ldr	r3, [pc, #228]	; (8008668 <UART_SetConfig+0x4e4>)
 8008584:	fba3 1302 	umull	r1, r3, r3, r2
 8008588:	095b      	lsrs	r3, r3, #5
 800858a:	2164      	movs	r1, #100	; 0x64
 800858c:	fb01 f303 	mul.w	r3, r1, r3
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	011b      	lsls	r3, r3, #4
 8008594:	3332      	adds	r3, #50	; 0x32
 8008596:	4a34      	ldr	r2, [pc, #208]	; (8008668 <UART_SetConfig+0x4e4>)
 8008598:	fba2 2303 	umull	r2, r3, r2, r3
 800859c:	095b      	lsrs	r3, r3, #5
 800859e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085a2:	441c      	add	r4, r3
 80085a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085a8:	2200      	movs	r2, #0
 80085aa:	673b      	str	r3, [r7, #112]	; 0x70
 80085ac:	677a      	str	r2, [r7, #116]	; 0x74
 80085ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80085b2:	4642      	mov	r2, r8
 80085b4:	464b      	mov	r3, r9
 80085b6:	1891      	adds	r1, r2, r2
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	415b      	adcs	r3, r3
 80085bc:	60fb      	str	r3, [r7, #12]
 80085be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085c2:	4641      	mov	r1, r8
 80085c4:	1851      	adds	r1, r2, r1
 80085c6:	6039      	str	r1, [r7, #0]
 80085c8:	4649      	mov	r1, r9
 80085ca:	414b      	adcs	r3, r1
 80085cc:	607b      	str	r3, [r7, #4]
 80085ce:	f04f 0200 	mov.w	r2, #0
 80085d2:	f04f 0300 	mov.w	r3, #0
 80085d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80085da:	4659      	mov	r1, fp
 80085dc:	00cb      	lsls	r3, r1, #3
 80085de:	4651      	mov	r1, sl
 80085e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085e4:	4651      	mov	r1, sl
 80085e6:	00ca      	lsls	r2, r1, #3
 80085e8:	4610      	mov	r0, r2
 80085ea:	4619      	mov	r1, r3
 80085ec:	4603      	mov	r3, r0
 80085ee:	4642      	mov	r2, r8
 80085f0:	189b      	adds	r3, r3, r2
 80085f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80085f4:	464b      	mov	r3, r9
 80085f6:	460a      	mov	r2, r1
 80085f8:	eb42 0303 	adc.w	r3, r2, r3
 80085fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	663b      	str	r3, [r7, #96]	; 0x60
 8008608:	667a      	str	r2, [r7, #100]	; 0x64
 800860a:	f04f 0200 	mov.w	r2, #0
 800860e:	f04f 0300 	mov.w	r3, #0
 8008612:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008616:	4649      	mov	r1, r9
 8008618:	008b      	lsls	r3, r1, #2
 800861a:	4641      	mov	r1, r8
 800861c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008620:	4641      	mov	r1, r8
 8008622:	008a      	lsls	r2, r1, #2
 8008624:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008628:	f7f8 f9bc 	bl	80009a4 <__aeabi_uldivmod>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4b0d      	ldr	r3, [pc, #52]	; (8008668 <UART_SetConfig+0x4e4>)
 8008632:	fba3 1302 	umull	r1, r3, r3, r2
 8008636:	095b      	lsrs	r3, r3, #5
 8008638:	2164      	movs	r1, #100	; 0x64
 800863a:	fb01 f303 	mul.w	r3, r1, r3
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	011b      	lsls	r3, r3, #4
 8008642:	3332      	adds	r3, #50	; 0x32
 8008644:	4a08      	ldr	r2, [pc, #32]	; (8008668 <UART_SetConfig+0x4e4>)
 8008646:	fba2 2303 	umull	r2, r3, r2, r3
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	f003 020f 	and.w	r2, r3, #15
 8008650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4422      	add	r2, r4
 8008658:	609a      	str	r2, [r3, #8]
}
 800865a:	bf00      	nop
 800865c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008660:	46bd      	mov	sp, r7
 8008662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008666:	bf00      	nop
 8008668:	51eb851f 	.word	0x51eb851f

0800866c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800866c:	b084      	sub	sp, #16
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	f107 001c 	add.w	r0, r7, #28
 800867a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	2b01      	cmp	r3, #1
 8008682:	d122      	bne.n	80086ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80086ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d105      	bne.n	80086be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fbee 	bl	8009ea0 <USB_CoreReset>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73fb      	strb	r3, [r7, #15]
 80086c8:	e01a      	b.n	8008700 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f001 fbe2 	bl	8009ea0 <USB_CoreReset>
 80086dc:	4603      	mov	r3, r0
 80086de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80086e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d106      	bne.n	80086f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	639a      	str	r2, [r3, #56]	; 0x38
 80086f2:	e005      	b.n	8008700 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	2b01      	cmp	r3, #1
 8008704:	d10b      	bne.n	800871e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f043 0206 	orr.w	r2, r3, #6
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f043 0220 	orr.w	r2, r3, #32
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800872a:	b004      	add	sp, #16
 800872c:	4770      	bx	lr
	...

08008730 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	4613      	mov	r3, r2
 800873c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	2b02      	cmp	r3, #2
 8008742:	d165      	bne.n	8008810 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	4a41      	ldr	r2, [pc, #260]	; (800884c <USB_SetTurnaroundTime+0x11c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d906      	bls.n	800875a <USB_SetTurnaroundTime+0x2a>
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	4a40      	ldr	r2, [pc, #256]	; (8008850 <USB_SetTurnaroundTime+0x120>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d202      	bcs.n	800875a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008754:	230f      	movs	r3, #15
 8008756:	617b      	str	r3, [r7, #20]
 8008758:	e062      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	4a3c      	ldr	r2, [pc, #240]	; (8008850 <USB_SetTurnaroundTime+0x120>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d306      	bcc.n	8008770 <USB_SetTurnaroundTime+0x40>
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	4a3b      	ldr	r2, [pc, #236]	; (8008854 <USB_SetTurnaroundTime+0x124>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d202      	bcs.n	8008770 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800876a:	230e      	movs	r3, #14
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	e057      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	4a38      	ldr	r2, [pc, #224]	; (8008854 <USB_SetTurnaroundTime+0x124>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d306      	bcc.n	8008786 <USB_SetTurnaroundTime+0x56>
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	4a37      	ldr	r2, [pc, #220]	; (8008858 <USB_SetTurnaroundTime+0x128>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d202      	bcs.n	8008786 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008780:	230d      	movs	r3, #13
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	e04c      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	4a33      	ldr	r2, [pc, #204]	; (8008858 <USB_SetTurnaroundTime+0x128>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d306      	bcc.n	800879c <USB_SetTurnaroundTime+0x6c>
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	4a32      	ldr	r2, [pc, #200]	; (800885c <USB_SetTurnaroundTime+0x12c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d802      	bhi.n	800879c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008796:	230c      	movs	r3, #12
 8008798:	617b      	str	r3, [r7, #20]
 800879a:	e041      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	4a2f      	ldr	r2, [pc, #188]	; (800885c <USB_SetTurnaroundTime+0x12c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d906      	bls.n	80087b2 <USB_SetTurnaroundTime+0x82>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	4a2e      	ldr	r2, [pc, #184]	; (8008860 <USB_SetTurnaroundTime+0x130>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d802      	bhi.n	80087b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80087ac:	230b      	movs	r3, #11
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	e036      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	4a2a      	ldr	r2, [pc, #168]	; (8008860 <USB_SetTurnaroundTime+0x130>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d906      	bls.n	80087c8 <USB_SetTurnaroundTime+0x98>
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	4a29      	ldr	r2, [pc, #164]	; (8008864 <USB_SetTurnaroundTime+0x134>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d802      	bhi.n	80087c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80087c2:	230a      	movs	r3, #10
 80087c4:	617b      	str	r3, [r7, #20]
 80087c6:	e02b      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	4a26      	ldr	r2, [pc, #152]	; (8008864 <USB_SetTurnaroundTime+0x134>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d906      	bls.n	80087de <USB_SetTurnaroundTime+0xae>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4a25      	ldr	r2, [pc, #148]	; (8008868 <USB_SetTurnaroundTime+0x138>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d202      	bcs.n	80087de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80087d8:	2309      	movs	r3, #9
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	e020      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	4a21      	ldr	r2, [pc, #132]	; (8008868 <USB_SetTurnaroundTime+0x138>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d306      	bcc.n	80087f4 <USB_SetTurnaroundTime+0xc4>
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	4a20      	ldr	r2, [pc, #128]	; (800886c <USB_SetTurnaroundTime+0x13c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d802      	bhi.n	80087f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80087ee:	2308      	movs	r3, #8
 80087f0:	617b      	str	r3, [r7, #20]
 80087f2:	e015      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	4a1d      	ldr	r2, [pc, #116]	; (800886c <USB_SetTurnaroundTime+0x13c>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d906      	bls.n	800880a <USB_SetTurnaroundTime+0xda>
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4a1c      	ldr	r2, [pc, #112]	; (8008870 <USB_SetTurnaroundTime+0x140>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d202      	bcs.n	800880a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008804:	2307      	movs	r3, #7
 8008806:	617b      	str	r3, [r7, #20]
 8008808:	e00a      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800880a:	2306      	movs	r3, #6
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	e007      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d102      	bne.n	800881c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008816:	2309      	movs	r3, #9
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	e001      	b.n	8008820 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800881c:	2309      	movs	r3, #9
 800881e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	68da      	ldr	r2, [r3, #12]
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	029b      	lsls	r3, r3, #10
 8008834:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008838:	431a      	orrs	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	00d8acbf 	.word	0x00d8acbf
 8008850:	00e4e1c0 	.word	0x00e4e1c0
 8008854:	00f42400 	.word	0x00f42400
 8008858:	01067380 	.word	0x01067380
 800885c:	011a499f 	.word	0x011a499f
 8008860:	01312cff 	.word	0x01312cff
 8008864:	014ca43f 	.word	0x014ca43f
 8008868:	016e3600 	.word	0x016e3600
 800886c:	01a6ab1f 	.word	0x01a6ab1f
 8008870:	01e84800 	.word	0x01e84800

08008874 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f043 0201 	orr.w	r2, r3, #1
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f023 0201 	bic.w	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d115      	bne.n	8008906 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088e6:	2001      	movs	r0, #1
 80088e8:	f7fa fd4a 	bl	8003380 <HAL_Delay>
      ms++;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	3301      	adds	r3, #1
 80088f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f001 fa45 	bl	8009d82 <USB_GetMode>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d01e      	beq.n	800893c <USB_SetCurrentMode+0x84>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2b31      	cmp	r3, #49	; 0x31
 8008902:	d9f0      	bls.n	80088e6 <USB_SetCurrentMode+0x2e>
 8008904:	e01a      	b.n	800893c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008906:	78fb      	ldrb	r3, [r7, #3]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d115      	bne.n	8008938 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008918:	2001      	movs	r0, #1
 800891a:	f7fa fd31 	bl	8003380 <HAL_Delay>
      ms++;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3301      	adds	r3, #1
 8008922:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 fa2c 	bl	8009d82 <USB_GetMode>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <USB_SetCurrentMode+0x84>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b31      	cmp	r3, #49	; 0x31
 8008934:	d9f0      	bls.n	8008918 <USB_SetCurrentMode+0x60>
 8008936:	e001      	b.n	800893c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e005      	b.n	8008948 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2b32      	cmp	r3, #50	; 0x32
 8008940:	d101      	bne.n	8008946 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e000      	b.n	8008948 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008950:	b084      	sub	sp, #16
 8008952:	b580      	push	{r7, lr}
 8008954:	b086      	sub	sp, #24
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800895e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800896a:	2300      	movs	r3, #0
 800896c:	613b      	str	r3, [r7, #16]
 800896e:	e009      	b.n	8008984 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	3340      	adds	r3, #64	; 0x40
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	2200      	movs	r2, #0
 800897c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	3301      	adds	r3, #1
 8008982:	613b      	str	r3, [r7, #16]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	2b0e      	cmp	r3, #14
 8008988:	d9f2      	bls.n	8008970 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800898a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d11c      	bne.n	80089ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800899e:	f043 0302 	orr.w	r3, r3, #2
 80089a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	639a      	str	r2, [r3, #56]	; 0x38
 80089c8:	e00b      	b.n	80089e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089e8:	461a      	mov	r2, r3
 80089ea:	2300      	movs	r3, #0
 80089ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f4:	4619      	mov	r1, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fc:	461a      	mov	r2, r3
 80089fe:	680b      	ldr	r3, [r1, #0]
 8008a00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d10c      	bne.n	8008a22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d104      	bne.n	8008a18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008a0e:	2100      	movs	r1, #0
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f965 	bl	8008ce0 <USB_SetDevSpeed>
 8008a16:	e008      	b.n	8008a2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008a18:	2101      	movs	r1, #1
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f960 	bl	8008ce0 <USB_SetDevSpeed>
 8008a20:	e003      	b.n	8008a2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a22:	2103      	movs	r1, #3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f95b 	bl	8008ce0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a2a:	2110      	movs	r1, #16
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f8f3 	bl	8008c18 <USB_FlushTxFifo>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f91f 	bl	8008c80 <USB_FlushRxFifo>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a52:	461a      	mov	r2, r3
 8008a54:	2300      	movs	r3, #0
 8008a56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5e:	461a      	mov	r2, r3
 8008a60:	2300      	movs	r3, #0
 8008a62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a70:	2300      	movs	r3, #0
 8008a72:	613b      	str	r3, [r7, #16]
 8008a74:	e043      	b.n	8008afe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a8c:	d118      	bne.n	8008ac0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10a      	bne.n	8008aaa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	e013      	b.n	8008ad2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	e008      	b.n	8008ad2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008acc:	461a      	mov	r2, r3
 8008ace:	2300      	movs	r3, #0
 8008ad0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ade:	461a      	mov	r2, r3
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	015a      	lsls	r2, r3, #5
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af0:	461a      	mov	r2, r3
 8008af2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008af6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	3301      	adds	r3, #1
 8008afc:	613b      	str	r3, [r7, #16]
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d3b7      	bcc.n	8008a76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b06:	2300      	movs	r3, #0
 8008b08:	613b      	str	r3, [r7, #16]
 8008b0a:	e043      	b.n	8008b94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b22:	d118      	bne.n	8008b56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10a      	bne.n	8008b40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b36:	461a      	mov	r2, r3
 8008b38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	e013      	b.n	8008b68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	e008      	b.n	8008b68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	015a      	lsls	r2, r3, #5
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b62:	461a      	mov	r2, r3
 8008b64:	2300      	movs	r3, #0
 8008b66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b74:	461a      	mov	r2, r3
 8008b76:	2300      	movs	r3, #0
 8008b78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b86:	461a      	mov	r2, r3
 8008b88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	3301      	adds	r3, #1
 8008b92:	613b      	str	r3, [r7, #16]
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d3b7      	bcc.n	8008b0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008bbc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d105      	bne.n	8008bd0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	f043 0210 	orr.w	r2, r3, #16
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	699a      	ldr	r2, [r3, #24]
 8008bd4:	4b0f      	ldr	r3, [pc, #60]	; (8008c14 <USB_DevInit+0x2c4>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d005      	beq.n	8008bee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	f043 0208 	orr.w	r2, r3, #8
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d107      	bne.n	8008c04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bfc:	f043 0304 	orr.w	r3, r3, #4
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c10:	b004      	add	sp, #16
 8008c12:	4770      	bx	lr
 8008c14:	803c3800 	.word	0x803c3800

08008c18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4a13      	ldr	r2, [pc, #76]	; (8008c7c <USB_FlushTxFifo+0x64>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d901      	bls.n	8008c38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e01b      	b.n	8008c70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	daf2      	bge.n	8008c26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	019b      	lsls	r3, r3, #6
 8008c48:	f043 0220 	orr.w	r2, r3, #32
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3301      	adds	r3, #1
 8008c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4a08      	ldr	r2, [pc, #32]	; (8008c7c <USB_FlushTxFifo+0x64>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d901      	bls.n	8008c62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e006      	b.n	8008c70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d0f0      	beq.n	8008c50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	00030d40 	.word	0x00030d40

08008c80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	4a11      	ldr	r2, [pc, #68]	; (8008cdc <USB_FlushRxFifo+0x5c>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d901      	bls.n	8008c9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e018      	b.n	8008cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	daf2      	bge.n	8008c8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2210      	movs	r2, #16
 8008cae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4a08      	ldr	r2, [pc, #32]	; (8008cdc <USB_FlushRxFifo+0x5c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d901      	bls.n	8008cc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e006      	b.n	8008cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f003 0310 	and.w	r3, r3, #16
 8008cca:	2b10      	cmp	r3, #16
 8008ccc:	d0f0      	beq.n	8008cb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	00030d40 	.word	0x00030d40

08008ce0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	78fb      	ldrb	r3, [r7, #3]
 8008cfa:	68f9      	ldr	r1, [r7, #12]
 8008cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d00:	4313      	orrs	r3, r2
 8008d02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b087      	sub	sp, #28
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f003 0306 	and.w	r3, r3, #6
 8008d2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d102      	bne.n	8008d38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008d32:	2300      	movs	r3, #0
 8008d34:	75fb      	strb	r3, [r7, #23]
 8008d36:	e00a      	b.n	8008d4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d002      	beq.n	8008d44 <USB_GetDevSpeed+0x32>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2b06      	cmp	r3, #6
 8008d42:	d102      	bne.n	8008d4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008d44:	2302      	movs	r3, #2
 8008d46:	75fb      	strb	r3, [r7, #23]
 8008d48:	e001      	b.n	8008d4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008d4a:	230f      	movs	r3, #15
 8008d4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	371c      	adds	r7, #28
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	785b      	ldrb	r3, [r3, #1]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d13a      	bne.n	8008dee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d7e:	69da      	ldr	r2, [r3, #28]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	f003 030f 	and.w	r3, r3, #15
 8008d88:	2101      	movs	r1, #1
 8008d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	68f9      	ldr	r1, [r7, #12]
 8008d92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d96:	4313      	orrs	r3, r2
 8008d98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d155      	bne.n	8008e5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	791b      	ldrb	r3, [r3, #4]
 8008dca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008dcc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	059b      	lsls	r3, r3, #22
 8008dd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	0151      	lsls	r1, r2, #5
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	440a      	add	r2, r1
 8008dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	e036      	b.n	8008e5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df4:	69da      	ldr	r2, [r3, #28]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	f003 030f 	and.w	r3, r3, #15
 8008dfe:	2101      	movs	r1, #1
 8008e00:	fa01 f303 	lsl.w	r3, r1, r3
 8008e04:	041b      	lsls	r3, r3, #16
 8008e06:	68f9      	ldr	r1, [r7, #12]
 8008e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	015a      	lsls	r2, r3, #5
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d11a      	bne.n	8008e5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	791b      	ldrb	r3, [r3, #4]
 8008e40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e42:	430b      	orrs	r3, r1
 8008e44:	4313      	orrs	r3, r2
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	0151      	lsls	r1, r2, #5
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	440a      	add	r2, r1
 8008e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
	...

08008e6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	785b      	ldrb	r3, [r3, #1]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d161      	bne.n	8008f4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e9e:	d11f      	bne.n	8008ee0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	0151      	lsls	r1, r2, #5
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	440a      	add	r2, r1
 8008eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ebe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	015a      	lsls	r2, r3, #5
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	0151      	lsls	r1, r2, #5
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	440a      	add	r2, r1
 8008ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ede:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	f003 030f 	and.w	r3, r3, #15
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	68f9      	ldr	r1, [r7, #12]
 8008efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f00:	4013      	ands	r3, r2
 8008f02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0a:	69da      	ldr	r2, [r3, #28]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	f003 030f 	and.w	r3, r3, #15
 8008f14:	2101      	movs	r1, #1
 8008f16:	fa01 f303 	lsl.w	r3, r1, r3
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	43db      	mvns	r3, r3
 8008f1e:	68f9      	ldr	r1, [r7, #12]
 8008f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f24:	4013      	ands	r3, r2
 8008f26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	0159      	lsls	r1, r3, #5
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	440b      	add	r3, r1
 8008f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f42:	4619      	mov	r1, r3
 8008f44:	4b35      	ldr	r3, [pc, #212]	; (800901c <USB_DeactivateEndpoint+0x1b0>)
 8008f46:	4013      	ands	r3, r2
 8008f48:	600b      	str	r3, [r1, #0]
 8008f4a:	e060      	b.n	800900e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f62:	d11f      	bne.n	8008fa4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	0151      	lsls	r1, r2, #5
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	440a      	add	r2, r1
 8008f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	0151      	lsls	r1, r2, #5
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	440a      	add	r2, r1
 8008f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	f003 030f 	and.w	r3, r3, #15
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008fba:	041b      	lsls	r3, r3, #16
 8008fbc:	43db      	mvns	r3, r3
 8008fbe:	68f9      	ldr	r1, [r7, #12]
 8008fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fce:	69da      	ldr	r2, [r3, #28]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	f003 030f 	and.w	r3, r3, #15
 8008fd8:	2101      	movs	r1, #1
 8008fda:	fa01 f303 	lsl.w	r3, r1, r3
 8008fde:	041b      	lsls	r3, r3, #16
 8008fe0:	43db      	mvns	r3, r3
 8008fe2:	68f9      	ldr	r1, [r7, #12]
 8008fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fe8:	4013      	ands	r3, r2
 8008fea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	015a      	lsls	r2, r3, #5
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	0159      	lsls	r1, r3, #5
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	440b      	add	r3, r1
 8009002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009006:	4619      	mov	r1, r3
 8009008:	4b05      	ldr	r3, [pc, #20]	; (8009020 <USB_DeactivateEndpoint+0x1b4>)
 800900a:	4013      	ands	r3, r2
 800900c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	ec337800 	.word	0xec337800
 8009020:	eff37800 	.word	0xeff37800

08009024 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08a      	sub	sp, #40	; 0x28
 8009028:	af02      	add	r7, sp, #8
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	4613      	mov	r3, r2
 8009030:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	785b      	ldrb	r3, [r3, #1]
 8009040:	2b01      	cmp	r3, #1
 8009042:	f040 815c 	bne.w	80092fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d132      	bne.n	80090b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	0151      	lsls	r1, r2, #5
 8009060:	69fa      	ldr	r2, [r7, #28]
 8009062:	440a      	add	r2, r1
 8009064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009068:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800906c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	015a      	lsls	r2, r3, #5
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	4413      	add	r3, r2
 800907a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	0151      	lsls	r1, r2, #5
 8009084:	69fa      	ldr	r2, [r7, #28]
 8009086:	440a      	add	r2, r1
 8009088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800908c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009090:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	4413      	add	r3, r2
 800909a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	0151      	lsls	r1, r2, #5
 80090a4:	69fa      	ldr	r2, [r7, #28]
 80090a6:	440a      	add	r2, r1
 80090a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ac:	0cdb      	lsrs	r3, r3, #19
 80090ae:	04db      	lsls	r3, r3, #19
 80090b0:	6113      	str	r3, [r2, #16]
 80090b2:	e074      	b.n	800919e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	0151      	lsls	r1, r2, #5
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	440a      	add	r2, r1
 80090ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ce:	0cdb      	lsrs	r3, r3, #19
 80090d0:	04db      	lsls	r3, r3, #19
 80090d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	0151      	lsls	r1, r2, #5
 80090e6:	69fa      	ldr	r2, [r7, #28]
 80090e8:	440a      	add	r2, r1
 80090ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009104:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	6999      	ldr	r1, [r3, #24]
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	440b      	add	r3, r1
 8009110:	1e59      	subs	r1, r3, #1
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	fbb1 f3f3 	udiv	r3, r1, r3
 800911a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800911c:	4b9d      	ldr	r3, [pc, #628]	; (8009394 <USB_EPStartXfer+0x370>)
 800911e:	400b      	ands	r3, r1
 8009120:	69b9      	ldr	r1, [r7, #24]
 8009122:	0148      	lsls	r0, r1, #5
 8009124:	69f9      	ldr	r1, [r7, #28]
 8009126:	4401      	add	r1, r0
 8009128:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800912c:	4313      	orrs	r3, r2
 800912e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913c:	691a      	ldr	r2, [r3, #16]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009146:	69b9      	ldr	r1, [r7, #24]
 8009148:	0148      	lsls	r0, r1, #5
 800914a:	69f9      	ldr	r1, [r7, #28]
 800914c:	4401      	add	r1, r0
 800914e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009152:	4313      	orrs	r3, r2
 8009154:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	791b      	ldrb	r3, [r3, #4]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d11f      	bne.n	800919e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	4413      	add	r3, r2
 8009166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	0151      	lsls	r1, r2, #5
 8009170:	69fa      	ldr	r2, [r7, #28]
 8009172:	440a      	add	r2, r1
 8009174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009178:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800917c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	4413      	add	r3, r2
 8009186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	0151      	lsls	r1, r2, #5
 8009190:	69fa      	ldr	r2, [r7, #28]
 8009192:	440a      	add	r2, r1
 8009194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009198:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800919c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800919e:	79fb      	ldrb	r3, [r7, #7]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d14b      	bne.n	800923c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d009      	beq.n	80091c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	015a      	lsls	r2, r3, #5
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	4413      	add	r3, r2
 80091b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b8:	461a      	mov	r2, r3
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	791b      	ldrb	r3, [r3, #4]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d128      	bne.n	800921a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d110      	bne.n	80091fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	0151      	lsls	r1, r2, #5
 80091ea:	69fa      	ldr	r2, [r7, #28]
 80091ec:	440a      	add	r2, r1
 80091ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091f6:	6013      	str	r3, [r2, #0]
 80091f8:	e00f      	b.n	800921a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	4413      	add	r3, r2
 8009202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	69ba      	ldr	r2, [r7, #24]
 800920a:	0151      	lsls	r1, r2, #5
 800920c:	69fa      	ldr	r2, [r7, #28]
 800920e:	440a      	add	r2, r1
 8009210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009218:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	0151      	lsls	r1, r2, #5
 800922c:	69fa      	ldr	r2, [r7, #28]
 800922e:	440a      	add	r2, r1
 8009230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009234:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009238:	6013      	str	r3, [r2, #0]
 800923a:	e133      	b.n	80094a4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	4413      	add	r3, r2
 8009244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	0151      	lsls	r1, r2, #5
 800924e:	69fa      	ldr	r2, [r7, #28]
 8009250:	440a      	add	r2, r1
 8009252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009256:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800925a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	791b      	ldrb	r3, [r3, #4]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d015      	beq.n	8009290 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 811b 	beq.w	80094a4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	f003 030f 	and.w	r3, r3, #15
 800927e:	2101      	movs	r1, #1
 8009280:	fa01 f303 	lsl.w	r3, r1, r3
 8009284:	69f9      	ldr	r1, [r7, #28]
 8009286:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800928a:	4313      	orrs	r3, r2
 800928c:	634b      	str	r3, [r1, #52]	; 0x34
 800928e:	e109      	b.n	80094a4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929c:	2b00      	cmp	r3, #0
 800929e:	d110      	bne.n	80092c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	69ba      	ldr	r2, [r7, #24]
 80092b0:	0151      	lsls	r1, r2, #5
 80092b2:	69fa      	ldr	r2, [r7, #28]
 80092b4:	440a      	add	r2, r1
 80092b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092be:	6013      	str	r3, [r2, #0]
 80092c0:	e00f      	b.n	80092e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	0151      	lsls	r1, r2, #5
 80092d4:	69fa      	ldr	r2, [r7, #28]
 80092d6:	440a      	add	r2, r1
 80092d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	6919      	ldr	r1, [r3, #16]
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	781a      	ldrb	r2, [r3, #0]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	b298      	uxth	r0, r3
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	4603      	mov	r3, r0
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 fade 	bl	80098b8 <USB_WritePacket>
 80092fc:	e0d2      	b.n	80094a4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	4413      	add	r3, r2
 8009306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	69ba      	ldr	r2, [r7, #24]
 800930e:	0151      	lsls	r1, r2, #5
 8009310:	69fa      	ldr	r2, [r7, #28]
 8009312:	440a      	add	r2, r1
 8009314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009318:	0cdb      	lsrs	r3, r3, #19
 800931a:	04db      	lsls	r3, r3, #19
 800931c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	015a      	lsls	r2, r3, #5
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	4413      	add	r3, r2
 8009326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	0151      	lsls	r1, r2, #5
 8009330:	69fa      	ldr	r2, [r7, #28]
 8009332:	440a      	add	r2, r1
 8009334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009338:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800933c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009340:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d126      	bne.n	8009398 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009356:	691a      	ldr	r2, [r3, #16]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009360:	69b9      	ldr	r1, [r7, #24]
 8009362:	0148      	lsls	r0, r1, #5
 8009364:	69f9      	ldr	r1, [r7, #28]
 8009366:	4401      	add	r1, r0
 8009368:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800936c:	4313      	orrs	r3, r2
 800936e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	69ba      	ldr	r2, [r7, #24]
 8009380:	0151      	lsls	r1, r2, #5
 8009382:	69fa      	ldr	r2, [r7, #28]
 8009384:	440a      	add	r2, r1
 8009386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800938a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800938e:	6113      	str	r3, [r2, #16]
 8009390:	e03a      	b.n	8009408 <USB_EPStartXfer+0x3e4>
 8009392:	bf00      	nop
 8009394:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	4413      	add	r3, r2
 80093a2:	1e5a      	subs	r2, r3, #1
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ac:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	8afa      	ldrh	r2, [r7, #22]
 80093b4:	fb03 f202 	mul.w	r2, r3, r2
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c8:	691a      	ldr	r2, [r3, #16]
 80093ca:	8afb      	ldrh	r3, [r7, #22]
 80093cc:	04d9      	lsls	r1, r3, #19
 80093ce:	4b38      	ldr	r3, [pc, #224]	; (80094b0 <USB_EPStartXfer+0x48c>)
 80093d0:	400b      	ands	r3, r1
 80093d2:	69b9      	ldr	r1, [r7, #24]
 80093d4:	0148      	lsls	r0, r1, #5
 80093d6:	69f9      	ldr	r1, [r7, #28]
 80093d8:	4401      	add	r1, r0
 80093da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093de:	4313      	orrs	r3, r2
 80093e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ee:	691a      	ldr	r2, [r3, #16]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093f8:	69b9      	ldr	r1, [r7, #24]
 80093fa:	0148      	lsls	r0, r1, #5
 80093fc:	69f9      	ldr	r1, [r7, #28]
 80093fe:	4401      	add	r1, r0
 8009400:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009404:	4313      	orrs	r3, r2
 8009406:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d10d      	bne.n	800942a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d009      	beq.n	800942a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6919      	ldr	r1, [r3, #16]
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	4413      	add	r3, r2
 8009422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009426:	460a      	mov	r2, r1
 8009428:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	791b      	ldrb	r3, [r3, #4]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d128      	bne.n	8009484 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800943e:	2b00      	cmp	r3, #0
 8009440:	d110      	bne.n	8009464 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	4413      	add	r3, r2
 800944a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	69ba      	ldr	r2, [r7, #24]
 8009452:	0151      	lsls	r1, r2, #5
 8009454:	69fa      	ldr	r2, [r7, #28]
 8009456:	440a      	add	r2, r1
 8009458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800945c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009460:	6013      	str	r3, [r2, #0]
 8009462:	e00f      	b.n	8009484 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	4413      	add	r3, r2
 800946c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	69ba      	ldr	r2, [r7, #24]
 8009474:	0151      	lsls	r1, r2, #5
 8009476:	69fa      	ldr	r2, [r7, #28]
 8009478:	440a      	add	r2, r1
 800947a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800947e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009482:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	0151      	lsls	r1, r2, #5
 8009496:	69fa      	ldr	r2, [r7, #28]
 8009498:	440a      	add	r2, r1
 800949a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800949e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3720      	adds	r7, #32
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	1ff80000 	.word	0x1ff80000

080094b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	4613      	mov	r3, r2
 80094c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	785b      	ldrb	r3, [r3, #1]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	f040 80ce 	bne.w	8009672 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d132      	bne.n	8009544 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	015a      	lsls	r2, r3, #5
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	0151      	lsls	r1, r2, #5
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	440a      	add	r2, r1
 80094f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009500:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	4413      	add	r3, r2
 800950a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	0151      	lsls	r1, r2, #5
 8009514:	697a      	ldr	r2, [r7, #20]
 8009516:	440a      	add	r2, r1
 8009518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009520:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	4413      	add	r3, r2
 800952a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	0151      	lsls	r1, r2, #5
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	440a      	add	r2, r1
 8009538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800953c:	0cdb      	lsrs	r3, r3, #19
 800953e:	04db      	lsls	r3, r3, #19
 8009540:	6113      	str	r3, [r2, #16]
 8009542:	e04e      	b.n	80095e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	0151      	lsls	r1, r2, #5
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	440a      	add	r2, r1
 800955a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800955e:	0cdb      	lsrs	r3, r3, #19
 8009560:	04db      	lsls	r3, r3, #19
 8009562:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	0151      	lsls	r1, r2, #5
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	440a      	add	r2, r1
 800957a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800957e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009582:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009586:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	699a      	ldr	r2, [r3, #24]
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	429a      	cmp	r2, r3
 8009592:	d903      	bls.n	800959c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	68da      	ldr	r2, [r3, #12]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	693a      	ldr	r2, [r7, #16]
 80095ac:	0151      	lsls	r1, r2, #5
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	440a      	add	r2, r1
 80095b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c8:	691a      	ldr	r2, [r3, #16]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095d2:	6939      	ldr	r1, [r7, #16]
 80095d4:	0148      	lsls	r0, r1, #5
 80095d6:	6979      	ldr	r1, [r7, #20]
 80095d8:	4401      	add	r1, r0
 80095da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80095de:	4313      	orrs	r3, r2
 80095e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d11e      	bne.n	8009626 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d009      	beq.n	8009604 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fc:	461a      	mov	r2, r3
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	0151      	lsls	r1, r2, #5
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	440a      	add	r2, r1
 800961a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800961e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009622:	6013      	str	r3, [r2, #0]
 8009624:	e097      	b.n	8009756 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	4413      	add	r3, r2
 800962e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	0151      	lsls	r1, r2, #5
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	440a      	add	r2, r1
 800963c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009640:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009644:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 8083 	beq.w	8009756 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	f003 030f 	and.w	r3, r3, #15
 8009660:	2101      	movs	r1, #1
 8009662:	fa01 f303 	lsl.w	r3, r1, r3
 8009666:	6979      	ldr	r1, [r7, #20]
 8009668:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800966c:	4313      	orrs	r3, r2
 800966e:	634b      	str	r3, [r1, #52]	; 0x34
 8009670:	e071      	b.n	8009756 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	0151      	lsls	r1, r2, #5
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	440a      	add	r2, r1
 8009688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800968c:	0cdb      	lsrs	r3, r3, #19
 800968e:	04db      	lsls	r3, r3, #19
 8009690:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	015a      	lsls	r2, r3, #5
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	4413      	add	r3, r2
 800969a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	0151      	lsls	r1, r2, #5
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	440a      	add	r2, r1
 80096a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	0151      	lsls	r1, r2, #5
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	440a      	add	r2, r1
 80096e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	015a      	lsls	r2, r3, #5
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	4413      	add	r3, r2
 80096f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fa:	691a      	ldr	r2, [r3, #16]
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	69db      	ldr	r3, [r3, #28]
 8009700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009704:	6939      	ldr	r1, [r7, #16]
 8009706:	0148      	lsls	r0, r1, #5
 8009708:	6979      	ldr	r1, [r7, #20]
 800970a:	4401      	add	r1, r0
 800970c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009710:	4313      	orrs	r3, r2
 8009712:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009714:	79fb      	ldrb	r3, [r7, #7]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d10d      	bne.n	8009736 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d009      	beq.n	8009736 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	6919      	ldr	r1, [r3, #16]
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	4413      	add	r3, r2
 800972e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009732:	460a      	mov	r2, r1
 8009734:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	4413      	add	r3, r2
 800973e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	0151      	lsls	r1, r2, #5
 8009748:	697a      	ldr	r2, [r7, #20]
 800974a:	440a      	add	r2, r1
 800974c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009750:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009754:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	371c      	adds	r7, #28
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	785b      	ldrb	r3, [r3, #1]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d14a      	bne.n	8009818 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	4413      	add	r3, r2
 800978c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800979a:	f040 8086 	bne.w	80098aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	015a      	lsls	r2, r3, #5
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	4413      	add	r3, r2
 80097a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	7812      	ldrb	r2, [r2, #0]
 80097b2:	0151      	lsls	r1, r2, #5
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	440a      	add	r2, r1
 80097b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	7812      	ldrb	r2, [r2, #0]
 80097d6:	0151      	lsls	r1, r2, #5
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	440a      	add	r2, r1
 80097dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3301      	adds	r3, #1
 80097ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d902      	bls.n	80097fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	75fb      	strb	r3, [r7, #23]
          break;
 80097fa:	e056      	b.n	80098aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	4413      	add	r3, r2
 8009806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009814:	d0e7      	beq.n	80097e6 <USB_EPStopXfer+0x82>
 8009816:	e048      	b.n	80098aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	4413      	add	r3, r2
 8009822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800982c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009830:	d13b      	bne.n	80098aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	7812      	ldrb	r2, [r2, #0]
 8009846:	0151      	lsls	r1, r2, #5
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	440a      	add	r2, r1
 800984c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009850:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009854:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	7812      	ldrb	r2, [r2, #0]
 800986a:	0151      	lsls	r1, r2, #5
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	440a      	add	r2, r1
 8009870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009878:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3301      	adds	r3, #1
 800987e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f242 7210 	movw	r2, #10000	; 0x2710
 8009886:	4293      	cmp	r3, r2
 8009888:	d902      	bls.n	8009890 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	75fb      	strb	r3, [r7, #23]
          break;
 800988e:	e00c      	b.n	80098aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098a8:	d0e7      	beq.n	800987a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	371c      	adds	r7, #28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b089      	sub	sp, #36	; 0x24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	4611      	mov	r1, r2
 80098c4:	461a      	mov	r2, r3
 80098c6:	460b      	mov	r3, r1
 80098c8:	71fb      	strb	r3, [r7, #7]
 80098ca:	4613      	mov	r3, r2
 80098cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80098d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d123      	bne.n	8009926 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80098de:	88bb      	ldrh	r3, [r7, #4]
 80098e0:	3303      	adds	r3, #3
 80098e2:	089b      	lsrs	r3, r3, #2
 80098e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80098e6:	2300      	movs	r3, #0
 80098e8:	61bb      	str	r3, [r7, #24]
 80098ea:	e018      	b.n	800991e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80098ec:	79fb      	ldrb	r3, [r7, #7]
 80098ee:	031a      	lsls	r2, r3, #12
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098f8:	461a      	mov	r2, r3
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	3301      	adds	r3, #1
 8009904:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	3301      	adds	r3, #1
 800990a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	3301      	adds	r3, #1
 8009910:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	3301      	adds	r3, #1
 8009916:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	3301      	adds	r3, #1
 800991c:	61bb      	str	r3, [r7, #24]
 800991e:	69ba      	ldr	r2, [r7, #24]
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	429a      	cmp	r2, r3
 8009924:	d3e2      	bcc.n	80098ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3724      	adds	r7, #36	; 0x24
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009934:	b480      	push	{r7}
 8009936:	b08b      	sub	sp, #44	; 0x2c
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	4613      	mov	r3, r2
 8009940:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800994a:	88fb      	ldrh	r3, [r7, #6]
 800994c:	089b      	lsrs	r3, r3, #2
 800994e:	b29b      	uxth	r3, r3
 8009950:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009952:	88fb      	ldrh	r3, [r7, #6]
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800995a:	2300      	movs	r3, #0
 800995c:	623b      	str	r3, [r7, #32]
 800995e:	e014      	b.n	800998a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996a:	601a      	str	r2, [r3, #0]
    pDest++;
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	3301      	adds	r3, #1
 8009970:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	3301      	adds	r3, #1
 8009976:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	3301      	adds	r3, #1
 800997c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	3301      	adds	r3, #1
 8009982:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009984:	6a3b      	ldr	r3, [r7, #32]
 8009986:	3301      	adds	r3, #1
 8009988:	623b      	str	r3, [r7, #32]
 800998a:	6a3a      	ldr	r2, [r7, #32]
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	429a      	cmp	r2, r3
 8009990:	d3e6      	bcc.n	8009960 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009992:	8bfb      	ldrh	r3, [r7, #30]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d01e      	beq.n	80099d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009998:	2300      	movs	r3, #0
 800999a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a2:	461a      	mov	r2, r3
 80099a4:	f107 0310 	add.w	r3, r7, #16
 80099a8:	6812      	ldr	r2, [r2, #0]
 80099aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	00db      	lsls	r3, r3, #3
 80099b4:	fa22 f303 	lsr.w	r3, r2, r3
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	701a      	strb	r2, [r3, #0]
      i++;
 80099be:	6a3b      	ldr	r3, [r7, #32]
 80099c0:	3301      	adds	r3, #1
 80099c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	3301      	adds	r3, #1
 80099c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80099ca:	8bfb      	ldrh	r3, [r7, #30]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80099d0:	8bfb      	ldrh	r3, [r7, #30]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1ea      	bne.n	80099ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099d8:	4618      	mov	r0, r3
 80099da:	372c      	adds	r7, #44	; 0x2c
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	785b      	ldrb	r3, [r3, #1]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d12c      	bne.n	8009a5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	db12      	blt.n	8009a38 <USB_EPSetStall+0x54>
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00f      	beq.n	8009a38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	015a      	lsls	r2, r3, #5
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	0151      	lsls	r1, r2, #5
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	440a      	add	r2, r1
 8009a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	015a      	lsls	r2, r3, #5
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4413      	add	r3, r2
 8009a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	0151      	lsls	r1, r2, #5
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	440a      	add	r2, r1
 8009a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a56:	6013      	str	r3, [r2, #0]
 8009a58:	e02b      	b.n	8009ab2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	015a      	lsls	r2, r3, #5
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	4413      	add	r3, r2
 8009a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	db12      	blt.n	8009a92 <USB_EPSetStall+0xae>
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00f      	beq.n	8009a92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	0151      	lsls	r1, r2, #5
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	440a      	add	r2, r1
 8009a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	015a      	lsls	r2, r3, #5
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	0151      	lsls	r1, r2, #5
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	440a      	add	r2, r1
 8009aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ab0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	785b      	ldrb	r3, [r3, #1]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d128      	bne.n	8009b2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	0151      	lsls	r1, r2, #5
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	440a      	add	r2, r1
 8009af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009af6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009afa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	791b      	ldrb	r3, [r3, #4]
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d003      	beq.n	8009b0c <USB_EPClearStall+0x4c>
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	791b      	ldrb	r3, [r3, #4]
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d138      	bne.n	8009b7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	0151      	lsls	r1, r2, #5
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	440a      	add	r2, r1
 8009b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b2a:	6013      	str	r3, [r2, #0]
 8009b2c:	e027      	b.n	8009b7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	0151      	lsls	r1, r2, #5
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	440a      	add	r2, r1
 8009b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	791b      	ldrb	r3, [r3, #4]
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d003      	beq.n	8009b5e <USB_EPClearStall+0x9e>
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	791b      	ldrb	r3, [r3, #4]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d10f      	bne.n	8009b7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	015a      	lsls	r2, r3, #5
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	0151      	lsls	r1, r2, #5
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	440a      	add	r2, r1
 8009b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009baa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009bae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	78fb      	ldrb	r3, [r7, #3]
 8009bba:	011b      	lsls	r3, r3, #4
 8009bbc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009bc0:	68f9      	ldr	r1, [r7, #12]
 8009bc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bf2:	f023 0303 	bic.w	r3, r3, #3
 8009bf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c06:	f023 0302 	bic.w	r3, r3, #2
 8009c0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b085      	sub	sp, #20
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c34:	f023 0303 	bic.w	r3, r3, #3
 8009c38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c48:	f043 0302 	orr.w	r3, r3, #2
 8009c4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3714      	adds	r7, #20
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b085      	sub	sp, #20
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	4013      	ands	r3, r2
 8009c72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009c74:	68fb      	ldr	r3, [r7, #12]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b085      	sub	sp, #20
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	4013      	ands	r3, r2
 8009ca4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	0c1b      	lsrs	r3, r3, #16
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3714      	adds	r7, #20
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b085      	sub	sp, #20
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	b29b      	uxth	r3, r3
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009cea:	b480      	push	{r7}
 8009cec:	b085      	sub	sp, #20
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009cfa:	78fb      	ldrb	r3, [r7, #3]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	4013      	ands	r3, r2
 8009d16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d18:	68bb      	ldr	r3, [r7, #8]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b087      	sub	sp, #28
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	460b      	mov	r3, r1
 8009d30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009d4a:	78fb      	ldrb	r3, [r7, #3]
 8009d4c:	f003 030f 	and.w	r3, r3, #15
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	fa22 f303 	lsr.w	r3, r2, r3
 8009d56:	01db      	lsls	r3, r3, #7
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009d60:	78fb      	ldrb	r3, [r7, #3]
 8009d62:	015a      	lsls	r2, r3, #5
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	4413      	add	r3, r2
 8009d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	4013      	ands	r3, r2
 8009d72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d74:	68bb      	ldr	r3, [r7, #8]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	f003 0301 	and.w	r3, r3, #1
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b085      	sub	sp, #20
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009db8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009dbc:	f023 0307 	bic.w	r3, r3, #7
 8009dc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	460b      	mov	r3, r1
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	333c      	adds	r3, #60	; 0x3c
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	4a26      	ldr	r2, [pc, #152]	; (8009e9c <USB_EP0_OutStart+0xb8>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d90a      	bls.n	8009e1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e18:	d101      	bne.n	8009e1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e037      	b.n	8009e8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e24:	461a      	mov	r2, r3
 8009e26:	2300      	movs	r3, #0
 8009e28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e4c:	f043 0318 	orr.w	r3, r3, #24
 8009e50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009e64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009e66:	7afb      	ldrb	r3, [r7, #11]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d10f      	bne.n	8009e8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e72:	461a      	mov	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009e8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	371c      	adds	r7, #28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	4f54300a 	.word	0x4f54300a

08009ea0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	4a13      	ldr	r2, [pc, #76]	; (8009f04 <USB_CoreReset+0x64>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d901      	bls.n	8009ebe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e01b      	b.n	8009ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	daf2      	bge.n	8009eac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	f043 0201 	orr.w	r2, r3, #1
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4a09      	ldr	r2, [pc, #36]	; (8009f04 <USB_CoreReset+0x64>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d901      	bls.n	8009ee8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e006      	b.n	8009ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d0f0      	beq.n	8009ed6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	00030d40 	.word	0x00030d40

08009f08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009f14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009f18:	f002 fca2 	bl	800c860 <USBD_static_malloc>
 8009f1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d109      	bne.n	8009f38 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	32b0      	adds	r2, #176	; 0xb0
 8009f2e:	2100      	movs	r1, #0
 8009f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009f34:	2302      	movs	r3, #2
 8009f36:	e0d4      	b.n	800a0e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009f38:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f002 fd32 	bl	800c9a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	32b0      	adds	r2, #176	; 0xb0
 8009f4e:	68f9      	ldr	r1, [r7, #12]
 8009f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	32b0      	adds	r2, #176	; 0xb0
 8009f5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	7c1b      	ldrb	r3, [r3, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d138      	bne.n	8009fe2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009f70:	4b5e      	ldr	r3, [pc, #376]	; (800a0ec <USBD_CDC_Init+0x1e4>)
 8009f72:	7819      	ldrb	r1, [r3, #0]
 8009f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f78:	2202      	movs	r2, #2
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f002 fb4d 	bl	800c61a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009f80:	4b5a      	ldr	r3, [pc, #360]	; (800a0ec <USBD_CDC_Init+0x1e4>)
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	f003 020f 	and.w	r2, r3, #15
 8009f88:	6879      	ldr	r1, [r7, #4]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	440b      	add	r3, r1
 8009f94:	3324      	adds	r3, #36	; 0x24
 8009f96:	2201      	movs	r2, #1
 8009f98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009f9a:	4b55      	ldr	r3, [pc, #340]	; (800a0f0 <USBD_CDC_Init+0x1e8>)
 8009f9c:	7819      	ldrb	r1, [r3, #0]
 8009f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f002 fb38 	bl	800c61a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009faa:	4b51      	ldr	r3, [pc, #324]	; (800a0f0 <USBD_CDC_Init+0x1e8>)
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	f003 020f 	and.w	r2, r3, #15
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009fc6:	4b4b      	ldr	r3, [pc, #300]	; (800a0f4 <USBD_CDC_Init+0x1ec>)
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	f003 020f 	and.w	r2, r3, #15
 8009fce:	6879      	ldr	r1, [r7, #4]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	440b      	add	r3, r1
 8009fda:	3326      	adds	r3, #38	; 0x26
 8009fdc:	2210      	movs	r2, #16
 8009fde:	801a      	strh	r2, [r3, #0]
 8009fe0:	e035      	b.n	800a04e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009fe2:	4b42      	ldr	r3, [pc, #264]	; (800a0ec <USBD_CDC_Init+0x1e4>)
 8009fe4:	7819      	ldrb	r1, [r3, #0]
 8009fe6:	2340      	movs	r3, #64	; 0x40
 8009fe8:	2202      	movs	r2, #2
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f002 fb15 	bl	800c61a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ff0:	4b3e      	ldr	r3, [pc, #248]	; (800a0ec <USBD_CDC_Init+0x1e4>)
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	f003 020f 	and.w	r2, r3, #15
 8009ff8:	6879      	ldr	r1, [r7, #4]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	440b      	add	r3, r1
 800a004:	3324      	adds	r3, #36	; 0x24
 800a006:	2201      	movs	r2, #1
 800a008:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a00a:	4b39      	ldr	r3, [pc, #228]	; (800a0f0 <USBD_CDC_Init+0x1e8>)
 800a00c:	7819      	ldrb	r1, [r3, #0]
 800a00e:	2340      	movs	r3, #64	; 0x40
 800a010:	2202      	movs	r2, #2
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f002 fb01 	bl	800c61a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a018:	4b35      	ldr	r3, [pc, #212]	; (800a0f0 <USBD_CDC_Init+0x1e8>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	f003 020f 	and.w	r2, r3, #15
 800a020:	6879      	ldr	r1, [r7, #4]
 800a022:	4613      	mov	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	440b      	add	r3, r1
 800a02c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a030:	2201      	movs	r2, #1
 800a032:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a034:	4b2f      	ldr	r3, [pc, #188]	; (800a0f4 <USBD_CDC_Init+0x1ec>)
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	f003 020f 	and.w	r2, r3, #15
 800a03c:	6879      	ldr	r1, [r7, #4]
 800a03e:	4613      	mov	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	440b      	add	r3, r1
 800a048:	3326      	adds	r3, #38	; 0x26
 800a04a:	2210      	movs	r2, #16
 800a04c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a04e:	4b29      	ldr	r3, [pc, #164]	; (800a0f4 <USBD_CDC_Init+0x1ec>)
 800a050:	7819      	ldrb	r1, [r3, #0]
 800a052:	2308      	movs	r3, #8
 800a054:	2203      	movs	r2, #3
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f002 fadf 	bl	800c61a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a05c:	4b25      	ldr	r3, [pc, #148]	; (800a0f4 <USBD_CDC_Init+0x1ec>)
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	f003 020f 	and.w	r2, r3, #15
 800a064:	6879      	ldr	r1, [r7, #4]
 800a066:	4613      	mov	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	4413      	add	r3, r2
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	440b      	add	r3, r1
 800a070:	3324      	adds	r3, #36	; 0x24
 800a072:	2201      	movs	r2, #1
 800a074:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	33b0      	adds	r3, #176	; 0xb0
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d101      	bne.n	800a0b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	e018      	b.n	800a0e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	7c1b      	ldrb	r3, [r3, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10a      	bne.n	800a0ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0b8:	4b0d      	ldr	r3, [pc, #52]	; (800a0f0 <USBD_CDC_Init+0x1e8>)
 800a0ba:	7819      	ldrb	r1, [r3, #0]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f002 fb96 	bl	800c7f8 <USBD_LL_PrepareReceive>
 800a0cc:	e008      	b.n	800a0e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0ce:	4b08      	ldr	r3, [pc, #32]	; (800a0f0 <USBD_CDC_Init+0x1e8>)
 800a0d0:	7819      	ldrb	r1, [r3, #0]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0d8:	2340      	movs	r3, #64	; 0x40
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f002 fb8c 	bl	800c7f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20000093 	.word	0x20000093
 800a0f0:	20000094 	.word	0x20000094
 800a0f4:	20000095 	.word	0x20000095

0800a0f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a104:	4b3a      	ldr	r3, [pc, #232]	; (800a1f0 <USBD_CDC_DeInit+0xf8>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f002 faab 	bl	800c666 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a110:	4b37      	ldr	r3, [pc, #220]	; (800a1f0 <USBD_CDC_DeInit+0xf8>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	f003 020f 	and.w	r2, r3, #15
 800a118:	6879      	ldr	r1, [r7, #4]
 800a11a:	4613      	mov	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	440b      	add	r3, r1
 800a124:	3324      	adds	r3, #36	; 0x24
 800a126:	2200      	movs	r2, #0
 800a128:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a12a:	4b32      	ldr	r3, [pc, #200]	; (800a1f4 <USBD_CDC_DeInit+0xfc>)
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f002 fa98 	bl	800c666 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a136:	4b2f      	ldr	r3, [pc, #188]	; (800a1f4 <USBD_CDC_DeInit+0xfc>)
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	f003 020f 	and.w	r2, r3, #15
 800a13e:	6879      	ldr	r1, [r7, #4]
 800a140:	4613      	mov	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	4413      	add	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	440b      	add	r3, r1
 800a14a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a14e:	2200      	movs	r2, #0
 800a150:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a152:	4b29      	ldr	r3, [pc, #164]	; (800a1f8 <USBD_CDC_DeInit+0x100>)
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	4619      	mov	r1, r3
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f002 fa84 	bl	800c666 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a15e:	4b26      	ldr	r3, [pc, #152]	; (800a1f8 <USBD_CDC_DeInit+0x100>)
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	f003 020f 	and.w	r2, r3, #15
 800a166:	6879      	ldr	r1, [r7, #4]
 800a168:	4613      	mov	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4413      	add	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	440b      	add	r3, r1
 800a172:	3324      	adds	r3, #36	; 0x24
 800a174:	2200      	movs	r2, #0
 800a176:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a178:	4b1f      	ldr	r3, [pc, #124]	; (800a1f8 <USBD_CDC_DeInit+0x100>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	f003 020f 	and.w	r2, r3, #15
 800a180:	6879      	ldr	r1, [r7, #4]
 800a182:	4613      	mov	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	440b      	add	r3, r1
 800a18c:	3326      	adds	r3, #38	; 0x26
 800a18e:	2200      	movs	r2, #0
 800a190:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	32b0      	adds	r2, #176	; 0xb0
 800a19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d01f      	beq.n	800a1e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	33b0      	adds	r3, #176	; 0xb0
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	32b0      	adds	r2, #176	; 0xb0
 800a1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f002 fb58 	bl	800c87c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	32b0      	adds	r2, #176	; 0xb0
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20000093 	.word	0x20000093
 800a1f4:	20000094 	.word	0x20000094
 800a1f8:	20000095 	.word	0x20000095

0800a1fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	32b0      	adds	r2, #176	; 0xb0
 800a210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a214:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a216:	2300      	movs	r3, #0
 800a218:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a21a:	2300      	movs	r3, #0
 800a21c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a228:	2303      	movs	r3, #3
 800a22a:	e0bf      	b.n	800a3ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a234:	2b00      	cmp	r3, #0
 800a236:	d050      	beq.n	800a2da <USBD_CDC_Setup+0xde>
 800a238:	2b20      	cmp	r3, #32
 800a23a:	f040 80af 	bne.w	800a39c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	88db      	ldrh	r3, [r3, #6]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d03a      	beq.n	800a2bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	b25b      	sxtb	r3, r3
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	da1b      	bge.n	800a288 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	33b0      	adds	r3, #176	; 0xb0
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	683a      	ldr	r2, [r7, #0]
 800a264:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a266:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	88d2      	ldrh	r2, [r2, #6]
 800a26c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	88db      	ldrh	r3, [r3, #6]
 800a272:	2b07      	cmp	r3, #7
 800a274:	bf28      	it	cs
 800a276:	2307      	movcs	r3, #7
 800a278:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	89fa      	ldrh	r2, [r7, #14]
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f001 fd89 	bl	800bd98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a286:	e090      	b.n	800a3aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	785a      	ldrb	r2, [r3, #1]
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	88db      	ldrh	r3, [r3, #6]
 800a296:	2b3f      	cmp	r3, #63	; 0x3f
 800a298:	d803      	bhi.n	800a2a2 <USBD_CDC_Setup+0xa6>
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	88db      	ldrh	r3, [r3, #6]
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	e000      	b.n	800a2a4 <USBD_CDC_Setup+0xa8>
 800a2a2:	2240      	movs	r2, #64	; 0x40
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a2aa:	6939      	ldr	r1, [r7, #16]
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f001 fd9b 	bl	800bdf0 <USBD_CtlPrepareRx>
      break;
 800a2ba:	e076      	b.n	800a3aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	33b0      	adds	r3, #176	; 0xb0
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	7850      	ldrb	r0, [r2, #1]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	6839      	ldr	r1, [r7, #0]
 800a2d6:	4798      	blx	r3
      break;
 800a2d8:	e067      	b.n	800a3aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	785b      	ldrb	r3, [r3, #1]
 800a2de:	2b0b      	cmp	r3, #11
 800a2e0:	d851      	bhi.n	800a386 <USBD_CDC_Setup+0x18a>
 800a2e2:	a201      	add	r2, pc, #4	; (adr r2, 800a2e8 <USBD_CDC_Setup+0xec>)
 800a2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e8:	0800a319 	.word	0x0800a319
 800a2ec:	0800a395 	.word	0x0800a395
 800a2f0:	0800a387 	.word	0x0800a387
 800a2f4:	0800a387 	.word	0x0800a387
 800a2f8:	0800a387 	.word	0x0800a387
 800a2fc:	0800a387 	.word	0x0800a387
 800a300:	0800a387 	.word	0x0800a387
 800a304:	0800a387 	.word	0x0800a387
 800a308:	0800a387 	.word	0x0800a387
 800a30c:	0800a387 	.word	0x0800a387
 800a310:	0800a343 	.word	0x0800a343
 800a314:	0800a36d 	.word	0x0800a36d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	2b03      	cmp	r3, #3
 800a322:	d107      	bne.n	800a334 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a324:	f107 030a 	add.w	r3, r7, #10
 800a328:	2202      	movs	r2, #2
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f001 fd33 	bl	800bd98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a332:	e032      	b.n	800a39a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f001 fcbd 	bl	800bcb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a33c:	2303      	movs	r3, #3
 800a33e:	75fb      	strb	r3, [r7, #23]
          break;
 800a340:	e02b      	b.n	800a39a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d107      	bne.n	800a35e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a34e:	f107 030d 	add.w	r3, r7, #13
 800a352:	2201      	movs	r2, #1
 800a354:	4619      	mov	r1, r3
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f001 fd1e 	bl	800bd98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a35c:	e01d      	b.n	800a39a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f001 fca8 	bl	800bcb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a366:	2303      	movs	r3, #3
 800a368:	75fb      	strb	r3, [r7, #23]
          break;
 800a36a:	e016      	b.n	800a39a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b03      	cmp	r3, #3
 800a376:	d00f      	beq.n	800a398 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a378:	6839      	ldr	r1, [r7, #0]
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f001 fc9b 	bl	800bcb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a380:	2303      	movs	r3, #3
 800a382:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a384:	e008      	b.n	800a398 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f001 fc94 	bl	800bcb6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a38e:	2303      	movs	r3, #3
 800a390:	75fb      	strb	r3, [r7, #23]
          break;
 800a392:	e002      	b.n	800a39a <USBD_CDC_Setup+0x19e>
          break;
 800a394:	bf00      	nop
 800a396:	e008      	b.n	800a3aa <USBD_CDC_Setup+0x1ae>
          break;
 800a398:	bf00      	nop
      }
      break;
 800a39a:	e006      	b.n	800a3aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f001 fc89 	bl	800bcb6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3a8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	32b0      	adds	r2, #176	; 0xb0
 800a3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d101      	bne.n	800a3de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	e065      	b.n	800a4aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	32b0      	adds	r2, #176	; 0xb0
 800a3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a3ee:	78fb      	ldrb	r3, [r7, #3]
 800a3f0:	f003 020f 	and.w	r2, r3, #15
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4413      	add	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	440b      	add	r3, r1
 800a400:	3318      	adds	r3, #24
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d02f      	beq.n	800a468 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a408:	78fb      	ldrb	r3, [r7, #3]
 800a40a:	f003 020f 	and.w	r2, r3, #15
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	4613      	mov	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	440b      	add	r3, r1
 800a41a:	3318      	adds	r3, #24
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	78fb      	ldrb	r3, [r7, #3]
 800a420:	f003 010f 	and.w	r1, r3, #15
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	460b      	mov	r3, r1
 800a428:	00db      	lsls	r3, r3, #3
 800a42a:	440b      	add	r3, r1
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4403      	add	r3, r0
 800a430:	3348      	adds	r3, #72	; 0x48
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	fbb2 f1f3 	udiv	r1, r2, r3
 800a438:	fb01 f303 	mul.w	r3, r1, r3
 800a43c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d112      	bne.n	800a468 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a442:	78fb      	ldrb	r3, [r7, #3]
 800a444:	f003 020f 	and.w	r2, r3, #15
 800a448:	6879      	ldr	r1, [r7, #4]
 800a44a:	4613      	mov	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4413      	add	r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	440b      	add	r3, r1
 800a454:	3318      	adds	r3, #24
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a45a:	78f9      	ldrb	r1, [r7, #3]
 800a45c:	2300      	movs	r3, #0
 800a45e:	2200      	movs	r2, #0
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f002 f9a8 	bl	800c7b6 <USBD_LL_Transmit>
 800a466:	e01f      	b.n	800a4a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	33b0      	adds	r3, #176	; 0xb0
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d010      	beq.n	800a4a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	33b0      	adds	r3, #176	; 0xb0
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a4a4:	78fa      	ldrb	r2, [r7, #3]
 800a4a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	32b0      	adds	r2, #176	; 0xb0
 800a4c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	32b0      	adds	r2, #176	; 0xb0
 800a4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e01a      	b.n	800a51a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a4e4:	78fb      	ldrb	r3, [r7, #3]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f002 f9a6 	bl	800c83a <USBD_LL_GetRxDataSize>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	33b0      	adds	r3, #176	; 0xb0
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a514:	4611      	mov	r1, r2
 800a516:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	32b0      	adds	r2, #176	; 0xb0
 800a534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a538:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a540:	2303      	movs	r3, #3
 800a542:	e025      	b.n	800a590 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	33b0      	adds	r3, #176	; 0xb0
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4413      	add	r3, r2
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d01a      	beq.n	800a58e <USBD_CDC_EP0_RxReady+0x6c>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a55e:	2bff      	cmp	r3, #255	; 0xff
 800a560:	d015      	beq.n	800a58e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	33b0      	adds	r3, #176	; 0xb0
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4413      	add	r3, r2
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a57a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a582:	b292      	uxth	r2, r2
 800a584:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	22ff      	movs	r2, #255	; 0xff
 800a58a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a5a0:	2182      	movs	r1, #130	; 0x82
 800a5a2:	4818      	ldr	r0, [pc, #96]	; (800a604 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a5a4:	f000 fd4f 	bl	800b046 <USBD_GetEpDesc>
 800a5a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	4815      	ldr	r0, [pc, #84]	; (800a604 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a5ae:	f000 fd4a 	bl	800b046 <USBD_GetEpDesc>
 800a5b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a5b4:	2181      	movs	r1, #129	; 0x81
 800a5b6:	4813      	ldr	r0, [pc, #76]	; (800a604 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a5b8:	f000 fd45 	bl	800b046 <USBD_GetEpDesc>
 800a5bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	2210      	movs	r2, #16
 800a5c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d006      	beq.n	800a5de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5d8:	711a      	strb	r2, [r3, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d006      	beq.n	800a5f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5ec:	711a      	strb	r2, [r3, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2243      	movs	r2, #67	; 0x43
 800a5f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a5f8:	4b02      	ldr	r3, [pc, #8]	; (800a604 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	20000050 	.word	0x20000050

0800a608 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a610:	2182      	movs	r1, #130	; 0x82
 800a612:	4818      	ldr	r0, [pc, #96]	; (800a674 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a614:	f000 fd17 	bl	800b046 <USBD_GetEpDesc>
 800a618:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a61a:	2101      	movs	r1, #1
 800a61c:	4815      	ldr	r0, [pc, #84]	; (800a674 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a61e:	f000 fd12 	bl	800b046 <USBD_GetEpDesc>
 800a622:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a624:	2181      	movs	r1, #129	; 0x81
 800a626:	4813      	ldr	r0, [pc, #76]	; (800a674 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a628:	f000 fd0d 	bl	800b046 <USBD_GetEpDesc>
 800a62c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	2210      	movs	r2, #16
 800a638:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d006      	beq.n	800a64e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	2200      	movs	r2, #0
 800a644:	711a      	strb	r2, [r3, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f042 0202 	orr.w	r2, r2, #2
 800a64c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d006      	beq.n	800a662 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	711a      	strb	r2, [r3, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f042 0202 	orr.w	r2, r2, #2
 800a660:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2243      	movs	r2, #67	; 0x43
 800a666:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a668:	4b02      	ldr	r3, [pc, #8]	; (800a674 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3718      	adds	r7, #24
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20000050 	.word	0x20000050

0800a678 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a680:	2182      	movs	r1, #130	; 0x82
 800a682:	4818      	ldr	r0, [pc, #96]	; (800a6e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a684:	f000 fcdf 	bl	800b046 <USBD_GetEpDesc>
 800a688:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a68a:	2101      	movs	r1, #1
 800a68c:	4815      	ldr	r0, [pc, #84]	; (800a6e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a68e:	f000 fcda 	bl	800b046 <USBD_GetEpDesc>
 800a692:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a694:	2181      	movs	r1, #129	; 0x81
 800a696:	4813      	ldr	r0, [pc, #76]	; (800a6e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a698:	f000 fcd5 	bl	800b046 <USBD_GetEpDesc>
 800a69c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	2210      	movs	r2, #16
 800a6a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d006      	beq.n	800a6be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6b8:	711a      	strb	r2, [r3, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d006      	beq.n	800a6d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6cc:	711a      	strb	r2, [r3, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2243      	movs	r2, #67	; 0x43
 800a6d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a6d8:	4b02      	ldr	r3, [pc, #8]	; (800a6e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3718      	adds	r7, #24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20000050 	.word	0x20000050

0800a6e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	220a      	movs	r2, #10
 800a6f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a6f6:	4b03      	ldr	r3, [pc, #12]	; (800a704 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	2000000c 	.word	0x2000000c

0800a708 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a718:	2303      	movs	r3, #3
 800a71a:	e009      	b.n	800a730 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	33b0      	adds	r3, #176	; 0xb0
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	683a      	ldr	r2, [r7, #0]
 800a72c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b087      	sub	sp, #28
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	32b0      	adds	r2, #176	; 0xb0
 800a752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a756:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a75e:	2303      	movs	r3, #3
 800a760:	e008      	b.n	800a774 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	371c      	adds	r7, #28
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	32b0      	adds	r2, #176	; 0xb0
 800a794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a798:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d101      	bne.n	800a7a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	e004      	b.n	800a7ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
	...

0800a7bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	32b0      	adds	r2, #176	; 0xb0
 800a7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	32b0      	adds	r2, #176	; 0xb0
 800a7e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d101      	bne.n	800a7ee <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	e025      	b.n	800a83a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d11f      	bne.n	800a838 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a800:	4b10      	ldr	r3, [pc, #64]	; (800a844 <USBD_CDC_TransmitPacket+0x88>)
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	f003 020f 	and.w	r2, r3, #15
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	4613      	mov	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	4403      	add	r3, r0
 800a81a:	3318      	adds	r3, #24
 800a81c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a81e:	4b09      	ldr	r3, [pc, #36]	; (800a844 <USBD_CDC_TransmitPacket+0x88>)
 800a820:	7819      	ldrb	r1, [r3, #0]
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f001 ffc1 	bl	800c7b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a838:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	20000093 	.word	0x20000093

0800a848 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	32b0      	adds	r2, #176	; 0xb0
 800a85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	32b0      	adds	r2, #176	; 0xb0
 800a86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d101      	bne.n	800a876 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a872:	2303      	movs	r3, #3
 800a874:	e018      	b.n	800a8a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	7c1b      	ldrb	r3, [r3, #16]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10a      	bne.n	800a894 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a87e:	4b0c      	ldr	r3, [pc, #48]	; (800a8b0 <USBD_CDC_ReceivePacket+0x68>)
 800a880:	7819      	ldrb	r1, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f001 ffb3 	bl	800c7f8 <USBD_LL_PrepareReceive>
 800a892:	e008      	b.n	800a8a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a894:	4b06      	ldr	r3, [pc, #24]	; (800a8b0 <USBD_CDC_ReceivePacket+0x68>)
 800a896:	7819      	ldrb	r1, [r3, #0]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a89e:	2340      	movs	r3, #64	; 0x40
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f001 ffa9 	bl	800c7f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	20000094 	.word	0x20000094

0800a8b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b086      	sub	sp, #24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d101      	bne.n	800a8cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e01f      	b.n	800a90c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	79fa      	ldrb	r2, [r7, #7]
 800a8fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f001 fe23 	bl	800c54c <USBD_LL_Init>
 800a906:	4603      	mov	r3, r0
 800a908:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a90a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3718      	adds	r7, #24
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a91e:	2300      	movs	r3, #0
 800a920:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d101      	bne.n	800a92c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a928:	2303      	movs	r3, #3
 800a92a:	e025      	b.n	800a978 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	32ae      	adds	r2, #174	; 0xae
 800a93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00f      	beq.n	800a968 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	32ae      	adds	r2, #174	; 0xae
 800a952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a958:	f107 020e 	add.w	r2, r7, #14
 800a95c:	4610      	mov	r0, r2
 800a95e:	4798      	blx	r3
 800a960:	4602      	mov	r2, r0
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f001 fe2b 	bl	800c5e4 <USBD_LL_Start>
 800a98e:	4603      	mov	r3, r0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	370c      	adds	r7, #12
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d009      	beq.n	800a9dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	78fa      	ldrb	r2, [r7, #3]
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	4798      	blx	r3
 800a9d8:	4603      	mov	r3, r0
 800a9da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	78fa      	ldrb	r2, [r7, #3]
 800aa00:	4611      	mov	r1, r2
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	4798      	blx	r3
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f001 f908 	bl	800bc42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aa40:	461a      	mov	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa4e:	f003 031f 	and.w	r3, r3, #31
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d01a      	beq.n	800aa8c <USBD_LL_SetupStage+0x72>
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d822      	bhi.n	800aaa0 <USBD_LL_SetupStage+0x86>
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d002      	beq.n	800aa64 <USBD_LL_SetupStage+0x4a>
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d00a      	beq.n	800aa78 <USBD_LL_SetupStage+0x5e>
 800aa62:	e01d      	b.n	800aaa0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 fb5f 	bl	800b130 <USBD_StdDevReq>
 800aa72:	4603      	mov	r3, r0
 800aa74:	73fb      	strb	r3, [r7, #15]
      break;
 800aa76:	e020      	b.n	800aaba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 fbc7 	bl	800b214 <USBD_StdItfReq>
 800aa86:	4603      	mov	r3, r0
 800aa88:	73fb      	strb	r3, [r7, #15]
      break;
 800aa8a:	e016      	b.n	800aaba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa92:	4619      	mov	r1, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fc29 	bl	800b2ec <USBD_StdEPReq>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa9e:	e00c      	b.n	800aaba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aaa6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	4619      	mov	r1, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f001 fdf8 	bl	800c6a4 <USBD_LL_StallEP>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73fb      	strb	r3, [r7, #15]
      break;
 800aab8:	bf00      	nop
  }

  return ret;
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	460b      	mov	r3, r1
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800aad6:	7afb      	ldrb	r3, [r7, #11]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d16e      	bne.n	800abba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aae2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aaea:	2b03      	cmp	r3, #3
 800aaec:	f040 8098 	bne.w	800ac20 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	689a      	ldr	r2, [r3, #8]
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d913      	bls.n	800ab24 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	689a      	ldr	r2, [r3, #8]
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	1ad2      	subs	r2, r2, r3
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	68da      	ldr	r2, [r3, #12]
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	4293      	cmp	r3, r2
 800ab14:	bf28      	it	cs
 800ab16:	4613      	movcs	r3, r2
 800ab18:	461a      	mov	r2, r3
 800ab1a:	6879      	ldr	r1, [r7, #4]
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f001 f984 	bl	800be2a <USBD_CtlContinueRx>
 800ab22:	e07d      	b.n	800ac20 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab2a:	f003 031f 	and.w	r3, r3, #31
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d014      	beq.n	800ab5c <USBD_LL_DataOutStage+0x98>
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d81d      	bhi.n	800ab72 <USBD_LL_DataOutStage+0xae>
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d002      	beq.n	800ab40 <USBD_LL_DataOutStage+0x7c>
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d003      	beq.n	800ab46 <USBD_LL_DataOutStage+0x82>
 800ab3e:	e018      	b.n	800ab72 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	75bb      	strb	r3, [r7, #22]
            break;
 800ab44:	e018      	b.n	800ab78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	4619      	mov	r1, r3
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 fa5e 	bl	800b012 <USBD_CoreFindIF>
 800ab56:	4603      	mov	r3, r0
 800ab58:	75bb      	strb	r3, [r7, #22]
            break;
 800ab5a:	e00d      	b.n	800ab78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	4619      	mov	r1, r3
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 fa60 	bl	800b02c <USBD_CoreFindEP>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	75bb      	strb	r3, [r7, #22]
            break;
 800ab70:	e002      	b.n	800ab78 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ab72:	2300      	movs	r3, #0
 800ab74:	75bb      	strb	r3, [r7, #22]
            break;
 800ab76:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ab78:	7dbb      	ldrb	r3, [r7, #22]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d119      	bne.n	800abb2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d113      	bne.n	800abb2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ab8a:	7dba      	ldrb	r2, [r7, #22]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	32ae      	adds	r2, #174	; 0xae
 800ab90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00b      	beq.n	800abb2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ab9a:	7dba      	ldrb	r2, [r7, #22]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aba2:	7dba      	ldrb	r2, [r7, #22]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	32ae      	adds	r2, #174	; 0xae
 800aba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f001 f94a 	bl	800be4c <USBD_CtlSendStatus>
 800abb8:	e032      	b.n	800ac20 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800abba:	7afb      	ldrb	r3, [r7, #11]
 800abbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	4619      	mov	r1, r3
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f000 fa31 	bl	800b02c <USBD_CoreFindEP>
 800abca:	4603      	mov	r3, r0
 800abcc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abce:	7dbb      	ldrb	r3, [r7, #22]
 800abd0:	2bff      	cmp	r3, #255	; 0xff
 800abd2:	d025      	beq.n	800ac20 <USBD_LL_DataOutStage+0x15c>
 800abd4:	7dbb      	ldrb	r3, [r7, #22]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d122      	bne.n	800ac20 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b03      	cmp	r3, #3
 800abe4:	d117      	bne.n	800ac16 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800abe6:	7dba      	ldrb	r2, [r7, #22]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	32ae      	adds	r2, #174	; 0xae
 800abec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf0:	699b      	ldr	r3, [r3, #24]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00f      	beq.n	800ac16 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800abf6:	7dba      	ldrb	r2, [r7, #22]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800abfe:	7dba      	ldrb	r2, [r7, #22]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	32ae      	adds	r2, #174	; 0xae
 800ac04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	7afa      	ldrb	r2, [r7, #11]
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	4798      	blx	r3
 800ac12:	4603      	mov	r3, r0
 800ac14:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ac16:	7dfb      	ldrb	r3, [r7, #23]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ac1c:	7dfb      	ldrb	r3, [r7, #23]
 800ac1e:	e000      	b.n	800ac22 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3718      	adds	r7, #24
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b086      	sub	sp, #24
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	60f8      	str	r0, [r7, #12]
 800ac32:	460b      	mov	r3, r1
 800ac34:	607a      	str	r2, [r7, #4]
 800ac36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ac38:	7afb      	ldrb	r3, [r7, #11]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d16f      	bne.n	800ad1e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3314      	adds	r3, #20
 800ac42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d15a      	bne.n	800ad04 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	689a      	ldr	r2, [r3, #8]
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d914      	bls.n	800ac84 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	689a      	ldr	r2, [r3, #8]
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	1ad2      	subs	r2, r2, r3
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	6879      	ldr	r1, [r7, #4]
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f001 f8ac 	bl	800bdce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac76:	2300      	movs	r3, #0
 800ac78:	2200      	movs	r2, #0
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f001 fdbb 	bl	800c7f8 <USBD_LL_PrepareReceive>
 800ac82:	e03f      	b.n	800ad04 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	68da      	ldr	r2, [r3, #12]
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d11c      	bne.n	800acca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d316      	bcc.n	800acca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d20f      	bcs.n	800acca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800acaa:	2200      	movs	r2, #0
 800acac:	2100      	movs	r1, #0
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f001 f88d 	bl	800bdce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acbc:	2300      	movs	r3, #0
 800acbe:	2200      	movs	r2, #0
 800acc0:	2100      	movs	r1, #0
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f001 fd98 	bl	800c7f8 <USBD_LL_PrepareReceive>
 800acc8:	e01c      	b.n	800ad04 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d10f      	bne.n	800acf6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d009      	beq.n	800acf6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800acf6:	2180      	movs	r1, #128	; 0x80
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f001 fcd3 	bl	800c6a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f001 f8b7 	bl	800be72 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d03a      	beq.n	800ad84 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f7ff fe42 	bl	800a998 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ad1c:	e032      	b.n	800ad84 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ad1e:	7afb      	ldrb	r3, [r7, #11]
 800ad20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	4619      	mov	r1, r3
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 f97f 	bl	800b02c <USBD_CoreFindEP>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad32:	7dfb      	ldrb	r3, [r7, #23]
 800ad34:	2bff      	cmp	r3, #255	; 0xff
 800ad36:	d025      	beq.n	800ad84 <USBD_LL_DataInStage+0x15a>
 800ad38:	7dfb      	ldrb	r3, [r7, #23]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d122      	bne.n	800ad84 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b03      	cmp	r3, #3
 800ad48:	d11c      	bne.n	800ad84 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ad4a:	7dfa      	ldrb	r2, [r7, #23]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	32ae      	adds	r2, #174	; 0xae
 800ad50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d014      	beq.n	800ad84 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ad5a:	7dfa      	ldrb	r2, [r7, #23]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ad62:	7dfa      	ldrb	r2, [r7, #23]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	32ae      	adds	r2, #174	; 0xae
 800ad68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad6c:	695b      	ldr	r3, [r3, #20]
 800ad6e:	7afa      	ldrb	r2, [r7, #11]
 800ad70:	4611      	mov	r1, r2
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	4798      	blx	r3
 800ad76:	4603      	mov	r3, r0
 800ad78:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ad7a:	7dbb      	ldrb	r3, [r7, #22]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ad80:	7dbb      	ldrb	r3, [r7, #22]
 800ad82:	e000      	b.n	800ad86 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3718      	adds	r7, #24
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b084      	sub	sp, #16
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad96:	2300      	movs	r3, #0
 800ad98:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d014      	beq.n	800adf4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00e      	beq.n	800adf4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	6852      	ldr	r2, [r2, #4]
 800ade2:	b2d2      	uxtb	r2, r2
 800ade4:	4611      	mov	r1, r2
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	4798      	blx	r3
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d001      	beq.n	800adf4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800adf0:	2303      	movs	r3, #3
 800adf2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adf4:	2340      	movs	r3, #64	; 0x40
 800adf6:	2200      	movs	r2, #0
 800adf8:	2100      	movs	r1, #0
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f001 fc0d 	bl	800c61a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2240      	movs	r2, #64	; 0x40
 800ae0c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae10:	2340      	movs	r3, #64	; 0x40
 800ae12:	2200      	movs	r2, #0
 800ae14:	2180      	movs	r1, #128	; 0x80
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f001 fbff 	bl	800c61a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2240      	movs	r2, #64	; 0x40
 800ae26:	621a      	str	r2, [r3, #32]

  return ret;
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3710      	adds	r7, #16
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b083      	sub	sp, #12
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	78fa      	ldrb	r2, [r7, #3]
 800ae42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr

0800ae52 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b083      	sub	sp, #12
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2204      	movs	r2, #4
 800ae6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae7e:	b480      	push	{r7}
 800ae80:	b083      	sub	sp, #12
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b04      	cmp	r3, #4
 800ae90:	d106      	bne.n	800aea0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	370c      	adds	r7, #12
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	d110      	bne.n	800aee4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00b      	beq.n	800aee4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aed2:	69db      	ldr	r3, [r3, #28]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d005      	beq.n	800aee4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aede:	69db      	ldr	r3, [r3, #28]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b082      	sub	sp, #8
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	460b      	mov	r3, r1
 800aef8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	32ae      	adds	r2, #174	; 0xae
 800af04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d101      	bne.n	800af10 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800af0c:	2303      	movs	r3, #3
 800af0e:	e01c      	b.n	800af4a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b03      	cmp	r3, #3
 800af1a:	d115      	bne.n	800af48 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	32ae      	adds	r2, #174	; 0xae
 800af26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2a:	6a1b      	ldr	r3, [r3, #32]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00b      	beq.n	800af48 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	32ae      	adds	r2, #174	; 0xae
 800af3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3e:	6a1b      	ldr	r3, [r3, #32]
 800af40:	78fa      	ldrb	r2, [r7, #3]
 800af42:	4611      	mov	r1, r2
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b082      	sub	sp, #8
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	460b      	mov	r3, r1
 800af5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	32ae      	adds	r2, #174	; 0xae
 800af68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d101      	bne.n	800af74 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800af70:	2303      	movs	r3, #3
 800af72:	e01c      	b.n	800afae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	2b03      	cmp	r3, #3
 800af7e:	d115      	bne.n	800afac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	32ae      	adds	r2, #174	; 0xae
 800af8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00b      	beq.n	800afac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	32ae      	adds	r2, #174	; 0xae
 800af9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa4:	78fa      	ldrb	r2, [r7, #3]
 800afa6:	4611      	mov	r1, r2
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3708      	adds	r7, #8
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800afb6:	b480      	push	{r7}
 800afb8:	b083      	sub	sp, #12
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800afd4:	2300      	movs	r3, #0
 800afd6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00e      	beq.n	800b008 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	6852      	ldr	r2, [r2, #4]
 800aff6:	b2d2      	uxtb	r2, r2
 800aff8:	4611      	mov	r1, r2
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	4798      	blx	r3
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d001      	beq.n	800b008 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b004:	2303      	movs	r3, #3
 800b006:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b008:	7bfb      	ldrb	r3, [r7, #15]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b012:	b480      	push	{r7}
 800b014:	b083      	sub	sp, #12
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	460b      	mov	r3, r1
 800b01c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b01e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b020:	4618      	mov	r0, r3
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	460b      	mov	r3, r1
 800b036:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b038:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	370c      	adds	r7, #12
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr

0800b046 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b086      	sub	sp, #24
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	460b      	mov	r3, r1
 800b050:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b05a:	2300      	movs	r3, #0
 800b05c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	885b      	ldrh	r3, [r3, #2]
 800b062:	b29a      	uxth	r2, r3
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	b29b      	uxth	r3, r3
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d920      	bls.n	800b0b0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	b29b      	uxth	r3, r3
 800b074:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b076:	e013      	b.n	800b0a0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b078:	f107 030a 	add.w	r3, r7, #10
 800b07c:	4619      	mov	r1, r3
 800b07e:	6978      	ldr	r0, [r7, #20]
 800b080:	f000 f81b 	bl	800b0ba <USBD_GetNextDesc>
 800b084:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	785b      	ldrb	r3, [r3, #1]
 800b08a:	2b05      	cmp	r3, #5
 800b08c:	d108      	bne.n	800b0a0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	789b      	ldrb	r3, [r3, #2]
 800b096:	78fa      	ldrb	r2, [r7, #3]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d008      	beq.n	800b0ae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b09c:	2300      	movs	r3, #0
 800b09e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	885b      	ldrh	r3, [r3, #2]
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	897b      	ldrh	r3, [r7, #10]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d8e5      	bhi.n	800b078 <USBD_GetEpDesc+0x32>
 800b0ac:	e000      	b.n	800b0b0 <USBD_GetEpDesc+0x6a>
          break;
 800b0ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b0b0:	693b      	ldr	r3, [r7, #16]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b085      	sub	sp, #20
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	881a      	ldrh	r2, [r3, #0]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	4413      	add	r3, r2
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	461a      	mov	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3714      	adds	r7, #20
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b087      	sub	sp, #28
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	3301      	adds	r3, #1
 800b10a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b112:	8a3b      	ldrh	r3, [r7, #16]
 800b114:	021b      	lsls	r3, r3, #8
 800b116:	b21a      	sxth	r2, r3
 800b118:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	b21b      	sxth	r3, r3
 800b120:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b122:	89fb      	ldrh	r3, [r7, #14]
}
 800b124:	4618      	mov	r0, r3
 800b126:	371c      	adds	r7, #28
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b146:	2b40      	cmp	r3, #64	; 0x40
 800b148:	d005      	beq.n	800b156 <USBD_StdDevReq+0x26>
 800b14a:	2b40      	cmp	r3, #64	; 0x40
 800b14c:	d857      	bhi.n	800b1fe <USBD_StdDevReq+0xce>
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00f      	beq.n	800b172 <USBD_StdDevReq+0x42>
 800b152:	2b20      	cmp	r3, #32
 800b154:	d153      	bne.n	800b1fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	32ae      	adds	r2, #174	; 0xae
 800b160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	6839      	ldr	r1, [r7, #0]
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	4798      	blx	r3
 800b16c:	4603      	mov	r3, r0
 800b16e:	73fb      	strb	r3, [r7, #15]
      break;
 800b170:	e04a      	b.n	800b208 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	785b      	ldrb	r3, [r3, #1]
 800b176:	2b09      	cmp	r3, #9
 800b178:	d83b      	bhi.n	800b1f2 <USBD_StdDevReq+0xc2>
 800b17a:	a201      	add	r2, pc, #4	; (adr r2, 800b180 <USBD_StdDevReq+0x50>)
 800b17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b180:	0800b1d5 	.word	0x0800b1d5
 800b184:	0800b1e9 	.word	0x0800b1e9
 800b188:	0800b1f3 	.word	0x0800b1f3
 800b18c:	0800b1df 	.word	0x0800b1df
 800b190:	0800b1f3 	.word	0x0800b1f3
 800b194:	0800b1b3 	.word	0x0800b1b3
 800b198:	0800b1a9 	.word	0x0800b1a9
 800b19c:	0800b1f3 	.word	0x0800b1f3
 800b1a0:	0800b1cb 	.word	0x0800b1cb
 800b1a4:	0800b1bd 	.word	0x0800b1bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 fa3c 	bl	800b628 <USBD_GetDescriptor>
          break;
 800b1b0:	e024      	b.n	800b1fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b1b2:	6839      	ldr	r1, [r7, #0]
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fba1 	bl	800b8fc <USBD_SetAddress>
          break;
 800b1ba:	e01f      	b.n	800b1fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fbe0 	bl	800b984 <USBD_SetConfig>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	73fb      	strb	r3, [r7, #15]
          break;
 800b1c8:	e018      	b.n	800b1fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b1ca:	6839      	ldr	r1, [r7, #0]
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fc83 	bl	800bad8 <USBD_GetConfig>
          break;
 800b1d2:	e013      	b.n	800b1fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fcb4 	bl	800bb44 <USBD_GetStatus>
          break;
 800b1dc:	e00e      	b.n	800b1fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fce3 	bl	800bbac <USBD_SetFeature>
          break;
 800b1e6:	e009      	b.n	800b1fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 fd07 	bl	800bbfe <USBD_ClrFeature>
          break;
 800b1f0:	e004      	b.n	800b1fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b1f2:	6839      	ldr	r1, [r7, #0]
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fd5e 	bl	800bcb6 <USBD_CtlError>
          break;
 800b1fa:	bf00      	nop
      }
      break;
 800b1fc:	e004      	b.n	800b208 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 fd58 	bl	800bcb6 <USBD_CtlError>
      break;
 800b206:	bf00      	nop
  }

  return ret;
 800b208:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop

0800b214 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b22a:	2b40      	cmp	r3, #64	; 0x40
 800b22c:	d005      	beq.n	800b23a <USBD_StdItfReq+0x26>
 800b22e:	2b40      	cmp	r3, #64	; 0x40
 800b230:	d852      	bhi.n	800b2d8 <USBD_StdItfReq+0xc4>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <USBD_StdItfReq+0x26>
 800b236:	2b20      	cmp	r3, #32
 800b238:	d14e      	bne.n	800b2d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b240:	b2db      	uxtb	r3, r3
 800b242:	3b01      	subs	r3, #1
 800b244:	2b02      	cmp	r3, #2
 800b246:	d840      	bhi.n	800b2ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	889b      	ldrh	r3, [r3, #4]
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d836      	bhi.n	800b2c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	889b      	ldrh	r3, [r3, #4]
 800b256:	b2db      	uxtb	r3, r3
 800b258:	4619      	mov	r1, r3
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7ff fed9 	bl	800b012 <USBD_CoreFindIF>
 800b260:	4603      	mov	r3, r0
 800b262:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b264:	7bbb      	ldrb	r3, [r7, #14]
 800b266:	2bff      	cmp	r3, #255	; 0xff
 800b268:	d01d      	beq.n	800b2a6 <USBD_StdItfReq+0x92>
 800b26a:	7bbb      	ldrb	r3, [r7, #14]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d11a      	bne.n	800b2a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b270:	7bba      	ldrb	r2, [r7, #14]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	32ae      	adds	r2, #174	; 0xae
 800b276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00f      	beq.n	800b2a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b280:	7bba      	ldrb	r2, [r7, #14]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b288:	7bba      	ldrb	r2, [r7, #14]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	32ae      	adds	r2, #174	; 0xae
 800b28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	4798      	blx	r3
 800b29a:	4603      	mov	r3, r0
 800b29c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b29e:	e004      	b.n	800b2aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b2a4:	e001      	b.n	800b2aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	88db      	ldrh	r3, [r3, #6]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d110      	bne.n	800b2d4 <USBD_StdItfReq+0xc0>
 800b2b2:	7bfb      	ldrb	r3, [r7, #15]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10d      	bne.n	800b2d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fdc7 	bl	800be4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b2be:	e009      	b.n	800b2d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 fcf7 	bl	800bcb6 <USBD_CtlError>
          break;
 800b2c8:	e004      	b.n	800b2d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 fcf2 	bl	800bcb6 <USBD_CtlError>
          break;
 800b2d2:	e000      	b.n	800b2d6 <USBD_StdItfReq+0xc2>
          break;
 800b2d4:	bf00      	nop
      }
      break;
 800b2d6:	e004      	b.n	800b2e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fceb 	bl	800bcb6 <USBD_CtlError>
      break;
 800b2e0:	bf00      	nop
  }

  return ret;
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3710      	adds	r7, #16
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	889b      	ldrh	r3, [r3, #4]
 800b2fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b308:	2b40      	cmp	r3, #64	; 0x40
 800b30a:	d007      	beq.n	800b31c <USBD_StdEPReq+0x30>
 800b30c:	2b40      	cmp	r3, #64	; 0x40
 800b30e:	f200 817f 	bhi.w	800b610 <USBD_StdEPReq+0x324>
 800b312:	2b00      	cmp	r3, #0
 800b314:	d02a      	beq.n	800b36c <USBD_StdEPReq+0x80>
 800b316:	2b20      	cmp	r3, #32
 800b318:	f040 817a 	bne.w	800b610 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b31c:	7bbb      	ldrb	r3, [r7, #14]
 800b31e:	4619      	mov	r1, r3
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7ff fe83 	bl	800b02c <USBD_CoreFindEP>
 800b326:	4603      	mov	r3, r0
 800b328:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b32a:	7b7b      	ldrb	r3, [r7, #13]
 800b32c:	2bff      	cmp	r3, #255	; 0xff
 800b32e:	f000 8174 	beq.w	800b61a <USBD_StdEPReq+0x32e>
 800b332:	7b7b      	ldrb	r3, [r7, #13]
 800b334:	2b00      	cmp	r3, #0
 800b336:	f040 8170 	bne.w	800b61a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b33a:	7b7a      	ldrb	r2, [r7, #13]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b342:	7b7a      	ldrb	r2, [r7, #13]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	32ae      	adds	r2, #174	; 0xae
 800b348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f000 8163 	beq.w	800b61a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b354:	7b7a      	ldrb	r2, [r7, #13]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	32ae      	adds	r2, #174	; 0xae
 800b35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	6839      	ldr	r1, [r7, #0]
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	4798      	blx	r3
 800b366:	4603      	mov	r3, r0
 800b368:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b36a:	e156      	b.n	800b61a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	785b      	ldrb	r3, [r3, #1]
 800b370:	2b03      	cmp	r3, #3
 800b372:	d008      	beq.n	800b386 <USBD_StdEPReq+0x9a>
 800b374:	2b03      	cmp	r3, #3
 800b376:	f300 8145 	bgt.w	800b604 <USBD_StdEPReq+0x318>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f000 809b 	beq.w	800b4b6 <USBD_StdEPReq+0x1ca>
 800b380:	2b01      	cmp	r3, #1
 800b382:	d03c      	beq.n	800b3fe <USBD_StdEPReq+0x112>
 800b384:	e13e      	b.n	800b604 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d002      	beq.n	800b398 <USBD_StdEPReq+0xac>
 800b392:	2b03      	cmp	r3, #3
 800b394:	d016      	beq.n	800b3c4 <USBD_StdEPReq+0xd8>
 800b396:	e02c      	b.n	800b3f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b398:	7bbb      	ldrb	r3, [r7, #14]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00d      	beq.n	800b3ba <USBD_StdEPReq+0xce>
 800b39e:	7bbb      	ldrb	r3, [r7, #14]
 800b3a0:	2b80      	cmp	r3, #128	; 0x80
 800b3a2:	d00a      	beq.n	800b3ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b3a4:	7bbb      	ldrb	r3, [r7, #14]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f001 f97b 	bl	800c6a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3ae:	2180      	movs	r1, #128	; 0x80
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f001 f977 	bl	800c6a4 <USBD_LL_StallEP>
 800b3b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b3b8:	e020      	b.n	800b3fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fc7a 	bl	800bcb6 <USBD_CtlError>
              break;
 800b3c2:	e01b      	b.n	800b3fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	885b      	ldrh	r3, [r3, #2]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10e      	bne.n	800b3ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b3cc:	7bbb      	ldrb	r3, [r7, #14]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00b      	beq.n	800b3ea <USBD_StdEPReq+0xfe>
 800b3d2:	7bbb      	ldrb	r3, [r7, #14]
 800b3d4:	2b80      	cmp	r3, #128	; 0x80
 800b3d6:	d008      	beq.n	800b3ea <USBD_StdEPReq+0xfe>
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	88db      	ldrh	r3, [r3, #6]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d104      	bne.n	800b3ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b3e0:	7bbb      	ldrb	r3, [r7, #14]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f001 f95d 	bl	800c6a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fd2e 	bl	800be4c <USBD_CtlSendStatus>

              break;
 800b3f0:	e004      	b.n	800b3fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b3f2:	6839      	ldr	r1, [r7, #0]
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 fc5e 	bl	800bcb6 <USBD_CtlError>
              break;
 800b3fa:	bf00      	nop
          }
          break;
 800b3fc:	e107      	b.n	800b60e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b404:	b2db      	uxtb	r3, r3
 800b406:	2b02      	cmp	r3, #2
 800b408:	d002      	beq.n	800b410 <USBD_StdEPReq+0x124>
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	d016      	beq.n	800b43c <USBD_StdEPReq+0x150>
 800b40e:	e04b      	b.n	800b4a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b410:	7bbb      	ldrb	r3, [r7, #14]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00d      	beq.n	800b432 <USBD_StdEPReq+0x146>
 800b416:	7bbb      	ldrb	r3, [r7, #14]
 800b418:	2b80      	cmp	r3, #128	; 0x80
 800b41a:	d00a      	beq.n	800b432 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b41c:	7bbb      	ldrb	r3, [r7, #14]
 800b41e:	4619      	mov	r1, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f001 f93f 	bl	800c6a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b426:	2180      	movs	r1, #128	; 0x80
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f001 f93b 	bl	800c6a4 <USBD_LL_StallEP>
 800b42e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b430:	e040      	b.n	800b4b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b432:	6839      	ldr	r1, [r7, #0]
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fc3e 	bl	800bcb6 <USBD_CtlError>
              break;
 800b43a:	e03b      	b.n	800b4b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	885b      	ldrh	r3, [r3, #2]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d136      	bne.n	800b4b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b444:	7bbb      	ldrb	r3, [r7, #14]
 800b446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d004      	beq.n	800b458 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b44e:	7bbb      	ldrb	r3, [r7, #14]
 800b450:	4619      	mov	r1, r3
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f001 f945 	bl	800c6e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fcf7 	bl	800be4c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff fde2 	bl	800b02c <USBD_CoreFindEP>
 800b468:	4603      	mov	r3, r0
 800b46a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b46c:	7b7b      	ldrb	r3, [r7, #13]
 800b46e:	2bff      	cmp	r3, #255	; 0xff
 800b470:	d01f      	beq.n	800b4b2 <USBD_StdEPReq+0x1c6>
 800b472:	7b7b      	ldrb	r3, [r7, #13]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d11c      	bne.n	800b4b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b478:	7b7a      	ldrb	r2, [r7, #13]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b480:	7b7a      	ldrb	r2, [r7, #13]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	32ae      	adds	r2, #174	; 0xae
 800b486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d010      	beq.n	800b4b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b490:	7b7a      	ldrb	r2, [r7, #13]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	32ae      	adds	r2, #174	; 0xae
 800b496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	6839      	ldr	r1, [r7, #0]
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	4798      	blx	r3
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b4a6:	e004      	b.n	800b4b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fc03 	bl	800bcb6 <USBD_CtlError>
              break;
 800b4b0:	e000      	b.n	800b4b4 <USBD_StdEPReq+0x1c8>
              break;
 800b4b2:	bf00      	nop
          }
          break;
 800b4b4:	e0ab      	b.n	800b60e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d002      	beq.n	800b4c8 <USBD_StdEPReq+0x1dc>
 800b4c2:	2b03      	cmp	r3, #3
 800b4c4:	d032      	beq.n	800b52c <USBD_StdEPReq+0x240>
 800b4c6:	e097      	b.n	800b5f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d007      	beq.n	800b4de <USBD_StdEPReq+0x1f2>
 800b4ce:	7bbb      	ldrb	r3, [r7, #14]
 800b4d0:	2b80      	cmp	r3, #128	; 0x80
 800b4d2:	d004      	beq.n	800b4de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fbed 	bl	800bcb6 <USBD_CtlError>
                break;
 800b4dc:	e091      	b.n	800b602 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	da0b      	bge.n	800b4fe <USBD_StdEPReq+0x212>
 800b4e6:	7bbb      	ldrb	r3, [r7, #14]
 800b4e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	3310      	adds	r3, #16
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	3304      	adds	r3, #4
 800b4fc:	e00b      	b.n	800b516 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
 800b500:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b504:	4613      	mov	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	4413      	add	r3, r2
 800b514:	3304      	adds	r3, #4
 800b516:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	2200      	movs	r2, #0
 800b51c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2202      	movs	r2, #2
 800b522:	4619      	mov	r1, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 fc37 	bl	800bd98 <USBD_CtlSendData>
              break;
 800b52a:	e06a      	b.n	800b602 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b52c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b530:	2b00      	cmp	r3, #0
 800b532:	da11      	bge.n	800b558 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b534:	7bbb      	ldrb	r3, [r7, #14]
 800b536:	f003 020f 	and.w	r2, r3, #15
 800b53a:	6879      	ldr	r1, [r7, #4]
 800b53c:	4613      	mov	r3, r2
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	4413      	add	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	440b      	add	r3, r1
 800b546:	3324      	adds	r3, #36	; 0x24
 800b548:	881b      	ldrh	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d117      	bne.n	800b57e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b54e:	6839      	ldr	r1, [r7, #0]
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 fbb0 	bl	800bcb6 <USBD_CtlError>
                  break;
 800b556:	e054      	b.n	800b602 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b558:	7bbb      	ldrb	r3, [r7, #14]
 800b55a:	f003 020f 	and.w	r2, r3, #15
 800b55e:	6879      	ldr	r1, [r7, #4]
 800b560:	4613      	mov	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4413      	add	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	440b      	add	r3, r1
 800b56a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b56e:	881b      	ldrh	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d104      	bne.n	800b57e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 fb9d 	bl	800bcb6 <USBD_CtlError>
                  break;
 800b57c:	e041      	b.n	800b602 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b57e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b582:	2b00      	cmp	r3, #0
 800b584:	da0b      	bge.n	800b59e <USBD_StdEPReq+0x2b2>
 800b586:	7bbb      	ldrb	r3, [r7, #14]
 800b588:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b58c:	4613      	mov	r3, r2
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	4413      	add	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	3310      	adds	r3, #16
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	4413      	add	r3, r2
 800b59a:	3304      	adds	r3, #4
 800b59c:	e00b      	b.n	800b5b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b59e:	7bbb      	ldrb	r3, [r7, #14]
 800b5a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4413      	add	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	3304      	adds	r3, #4
 800b5b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b5b8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <USBD_StdEPReq+0x2d8>
 800b5be:	7bbb      	ldrb	r3, [r7, #14]
 800b5c0:	2b80      	cmp	r3, #128	; 0x80
 800b5c2:	d103      	bne.n	800b5cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	601a      	str	r2, [r3, #0]
 800b5ca:	e00e      	b.n	800b5ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b5cc:	7bbb      	ldrb	r3, [r7, #14]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f001 f8a5 	bl	800c720 <USBD_LL_IsStallEP>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	2201      	movs	r2, #1
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	e002      	b.n	800b5ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fbd1 	bl	800bd98 <USBD_CtlSendData>
              break;
 800b5f6:	e004      	b.n	800b602 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b5f8:	6839      	ldr	r1, [r7, #0]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fb5b 	bl	800bcb6 <USBD_CtlError>
              break;
 800b600:	bf00      	nop
          }
          break;
 800b602:	e004      	b.n	800b60e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b604:	6839      	ldr	r1, [r7, #0]
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 fb55 	bl	800bcb6 <USBD_CtlError>
          break;
 800b60c:	bf00      	nop
      }
      break;
 800b60e:	e005      	b.n	800b61c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b610:	6839      	ldr	r1, [r7, #0]
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 fb4f 	bl	800bcb6 <USBD_CtlError>
      break;
 800b618:	e000      	b.n	800b61c <USBD_StdEPReq+0x330>
      break;
 800b61a:	bf00      	nop
  }

  return ret;
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
	...

0800b628 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b632:	2300      	movs	r3, #0
 800b634:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b636:	2300      	movs	r3, #0
 800b638:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b63a:	2300      	movs	r3, #0
 800b63c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	885b      	ldrh	r3, [r3, #2]
 800b642:	0a1b      	lsrs	r3, r3, #8
 800b644:	b29b      	uxth	r3, r3
 800b646:	3b01      	subs	r3, #1
 800b648:	2b06      	cmp	r3, #6
 800b64a:	f200 8128 	bhi.w	800b89e <USBD_GetDescriptor+0x276>
 800b64e:	a201      	add	r2, pc, #4	; (adr r2, 800b654 <USBD_GetDescriptor+0x2c>)
 800b650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b654:	0800b671 	.word	0x0800b671
 800b658:	0800b689 	.word	0x0800b689
 800b65c:	0800b6c9 	.word	0x0800b6c9
 800b660:	0800b89f 	.word	0x0800b89f
 800b664:	0800b89f 	.word	0x0800b89f
 800b668:	0800b83f 	.word	0x0800b83f
 800b66c:	0800b86b 	.word	0x0800b86b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	7c12      	ldrb	r2, [r2, #16]
 800b67c:	f107 0108 	add.w	r1, r7, #8
 800b680:	4610      	mov	r0, r2
 800b682:	4798      	blx	r3
 800b684:	60f8      	str	r0, [r7, #12]
      break;
 800b686:	e112      	b.n	800b8ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	7c1b      	ldrb	r3, [r3, #16]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d10d      	bne.n	800b6ac <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b698:	f107 0208 	add.w	r2, r7, #8
 800b69c:	4610      	mov	r0, r2
 800b69e:	4798      	blx	r3
 800b6a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b6aa:	e100      	b.n	800b8ae <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b4:	f107 0208 	add.w	r2, r7, #8
 800b6b8:	4610      	mov	r0, r2
 800b6ba:	4798      	blx	r3
 800b6bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	701a      	strb	r2, [r3, #0]
      break;
 800b6c6:	e0f2      	b.n	800b8ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	885b      	ldrh	r3, [r3, #2]
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b05      	cmp	r3, #5
 800b6d0:	f200 80ac 	bhi.w	800b82c <USBD_GetDescriptor+0x204>
 800b6d4:	a201      	add	r2, pc, #4	; (adr r2, 800b6dc <USBD_GetDescriptor+0xb4>)
 800b6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6da:	bf00      	nop
 800b6dc:	0800b6f5 	.word	0x0800b6f5
 800b6e0:	0800b729 	.word	0x0800b729
 800b6e4:	0800b75d 	.word	0x0800b75d
 800b6e8:	0800b791 	.word	0x0800b791
 800b6ec:	0800b7c5 	.word	0x0800b7c5
 800b6f0:	0800b7f9 	.word	0x0800b7f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00b      	beq.n	800b718 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	7c12      	ldrb	r2, [r2, #16]
 800b70c:	f107 0108 	add.w	r1, r7, #8
 800b710:	4610      	mov	r0, r2
 800b712:	4798      	blx	r3
 800b714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b716:	e091      	b.n	800b83c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b718:	6839      	ldr	r1, [r7, #0]
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 facb 	bl	800bcb6 <USBD_CtlError>
            err++;
 800b720:	7afb      	ldrb	r3, [r7, #11]
 800b722:	3301      	adds	r3, #1
 800b724:	72fb      	strb	r3, [r7, #11]
          break;
 800b726:	e089      	b.n	800b83c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00b      	beq.n	800b74c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	7c12      	ldrb	r2, [r2, #16]
 800b740:	f107 0108 	add.w	r1, r7, #8
 800b744:	4610      	mov	r0, r2
 800b746:	4798      	blx	r3
 800b748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b74a:	e077      	b.n	800b83c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fab1 	bl	800bcb6 <USBD_CtlError>
            err++;
 800b754:	7afb      	ldrb	r3, [r7, #11]
 800b756:	3301      	adds	r3, #1
 800b758:	72fb      	strb	r3, [r7, #11]
          break;
 800b75a:	e06f      	b.n	800b83c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00b      	beq.n	800b780 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	7c12      	ldrb	r2, [r2, #16]
 800b774:	f107 0108 	add.w	r1, r7, #8
 800b778:	4610      	mov	r0, r2
 800b77a:	4798      	blx	r3
 800b77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b77e:	e05d      	b.n	800b83c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fa97 	bl	800bcb6 <USBD_CtlError>
            err++;
 800b788:	7afb      	ldrb	r3, [r7, #11]
 800b78a:	3301      	adds	r3, #1
 800b78c:	72fb      	strb	r3, [r7, #11]
          break;
 800b78e:	e055      	b.n	800b83c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00b      	beq.n	800b7b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	7c12      	ldrb	r2, [r2, #16]
 800b7a8:	f107 0108 	add.w	r1, r7, #8
 800b7ac:	4610      	mov	r0, r2
 800b7ae:	4798      	blx	r3
 800b7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7b2:	e043      	b.n	800b83c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7b4:	6839      	ldr	r1, [r7, #0]
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 fa7d 	bl	800bcb6 <USBD_CtlError>
            err++;
 800b7bc:	7afb      	ldrb	r3, [r7, #11]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b7c2:	e03b      	b.n	800b83c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ca:	695b      	ldr	r3, [r3, #20]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00b      	beq.n	800b7e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7d6:	695b      	ldr	r3, [r3, #20]
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	7c12      	ldrb	r2, [r2, #16]
 800b7dc:	f107 0108 	add.w	r1, r7, #8
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	4798      	blx	r3
 800b7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7e6:	e029      	b.n	800b83c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7e8:	6839      	ldr	r1, [r7, #0]
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 fa63 	bl	800bcb6 <USBD_CtlError>
            err++;
 800b7f0:	7afb      	ldrb	r3, [r7, #11]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b7f6:	e021      	b.n	800b83c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00b      	beq.n	800b81c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	7c12      	ldrb	r2, [r2, #16]
 800b810:	f107 0108 	add.w	r1, r7, #8
 800b814:	4610      	mov	r0, r2
 800b816:	4798      	blx	r3
 800b818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b81a:	e00f      	b.n	800b83c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b81c:	6839      	ldr	r1, [r7, #0]
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 fa49 	bl	800bcb6 <USBD_CtlError>
            err++;
 800b824:	7afb      	ldrb	r3, [r7, #11]
 800b826:	3301      	adds	r3, #1
 800b828:	72fb      	strb	r3, [r7, #11]
          break;
 800b82a:	e007      	b.n	800b83c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fa41 	bl	800bcb6 <USBD_CtlError>
          err++;
 800b834:	7afb      	ldrb	r3, [r7, #11]
 800b836:	3301      	adds	r3, #1
 800b838:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b83a:	bf00      	nop
      }
      break;
 800b83c:	e037      	b.n	800b8ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	7c1b      	ldrb	r3, [r3, #16]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d109      	bne.n	800b85a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84e:	f107 0208 	add.w	r2, r7, #8
 800b852:	4610      	mov	r0, r2
 800b854:	4798      	blx	r3
 800b856:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b858:	e029      	b.n	800b8ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fa2a 	bl	800bcb6 <USBD_CtlError>
        err++;
 800b862:	7afb      	ldrb	r3, [r7, #11]
 800b864:	3301      	adds	r3, #1
 800b866:	72fb      	strb	r3, [r7, #11]
      break;
 800b868:	e021      	b.n	800b8ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	7c1b      	ldrb	r3, [r3, #16]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10d      	bne.n	800b88e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b87a:	f107 0208 	add.w	r2, r7, #8
 800b87e:	4610      	mov	r0, r2
 800b880:	4798      	blx	r3
 800b882:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3301      	adds	r3, #1
 800b888:	2207      	movs	r2, #7
 800b88a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b88c:	e00f      	b.n	800b8ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 fa10 	bl	800bcb6 <USBD_CtlError>
        err++;
 800b896:	7afb      	ldrb	r3, [r7, #11]
 800b898:	3301      	adds	r3, #1
 800b89a:	72fb      	strb	r3, [r7, #11]
      break;
 800b89c:	e007      	b.n	800b8ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fa08 	bl	800bcb6 <USBD_CtlError>
      err++;
 800b8a6:	7afb      	ldrb	r3, [r7, #11]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	72fb      	strb	r3, [r7, #11]
      break;
 800b8ac:	bf00      	nop
  }

  if (err != 0U)
 800b8ae:	7afb      	ldrb	r3, [r7, #11]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d11e      	bne.n	800b8f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	88db      	ldrh	r3, [r3, #6]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d016      	beq.n	800b8ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b8bc:	893b      	ldrh	r3, [r7, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00e      	beq.n	800b8e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	88da      	ldrh	r2, [r3, #6]
 800b8c6:	893b      	ldrh	r3, [r7, #8]
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	bf28      	it	cs
 800b8cc:	4613      	movcs	r3, r2
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b8d2:	893b      	ldrh	r3, [r7, #8]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	68f9      	ldr	r1, [r7, #12]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fa5d 	bl	800bd98 <USBD_CtlSendData>
 800b8de:	e009      	b.n	800b8f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b8e0:	6839      	ldr	r1, [r7, #0]
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 f9e7 	bl	800bcb6 <USBD_CtlError>
 800b8e8:	e004      	b.n	800b8f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 faae 	bl	800be4c <USBD_CtlSendStatus>
 800b8f0:	e000      	b.n	800b8f4 <USBD_GetDescriptor+0x2cc>
    return;
 800b8f2:	bf00      	nop
  }
}
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop

0800b8fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	889b      	ldrh	r3, [r3, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d131      	bne.n	800b972 <USBD_SetAddress+0x76>
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	88db      	ldrh	r3, [r3, #6]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d12d      	bne.n	800b972 <USBD_SetAddress+0x76>
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	885b      	ldrh	r3, [r3, #2]
 800b91a:	2b7f      	cmp	r3, #127	; 0x7f
 800b91c:	d829      	bhi.n	800b972 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	885b      	ldrh	r3, [r3, #2]
 800b922:	b2db      	uxtb	r3, r3
 800b924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b928:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b03      	cmp	r3, #3
 800b934:	d104      	bne.n	800b940 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 f9bc 	bl	800bcb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b93e:	e01d      	b.n	800b97c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	7bfa      	ldrb	r2, [r7, #15]
 800b944:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b948:	7bfb      	ldrb	r3, [r7, #15]
 800b94a:	4619      	mov	r1, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 ff13 	bl	800c778 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fa7a 	bl	800be4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b958:	7bfb      	ldrb	r3, [r7, #15]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d004      	beq.n	800b968 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2202      	movs	r2, #2
 800b962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b966:	e009      	b.n	800b97c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b970:	e004      	b.n	800b97c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b972:	6839      	ldr	r1, [r7, #0]
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 f99e 	bl	800bcb6 <USBD_CtlError>
  }
}
 800b97a:	bf00      	nop
 800b97c:	bf00      	nop
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	885b      	ldrh	r3, [r3, #2]
 800b996:	b2da      	uxtb	r2, r3
 800b998:	4b4e      	ldr	r3, [pc, #312]	; (800bad4 <USBD_SetConfig+0x150>)
 800b99a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b99c:	4b4d      	ldr	r3, [pc, #308]	; (800bad4 <USBD_SetConfig+0x150>)
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d905      	bls.n	800b9b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b9a4:	6839      	ldr	r1, [r7, #0]
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f985 	bl	800bcb6 <USBD_CtlError>
    return USBD_FAIL;
 800b9ac:	2303      	movs	r3, #3
 800b9ae:	e08c      	b.n	800baca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d002      	beq.n	800b9c2 <USBD_SetConfig+0x3e>
 800b9bc:	2b03      	cmp	r3, #3
 800b9be:	d029      	beq.n	800ba14 <USBD_SetConfig+0x90>
 800b9c0:	e075      	b.n	800baae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b9c2:	4b44      	ldr	r3, [pc, #272]	; (800bad4 <USBD_SetConfig+0x150>)
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d020      	beq.n	800ba0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b9ca:	4b42      	ldr	r3, [pc, #264]	; (800bad4 <USBD_SetConfig+0x150>)
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b9d4:	4b3f      	ldr	r3, [pc, #252]	; (800bad4 <USBD_SetConfig+0x150>)
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	4619      	mov	r1, r3
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7fe ffe7 	bl	800a9ae <USBD_SetClassConfig>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d008      	beq.n	800b9fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b9ea:	6839      	ldr	r1, [r7, #0]
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f962 	bl	800bcb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b9fa:	e065      	b.n	800bac8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fa25 	bl	800be4c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2203      	movs	r2, #3
 800ba06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ba0a:	e05d      	b.n	800bac8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fa1d 	bl	800be4c <USBD_CtlSendStatus>
      break;
 800ba12:	e059      	b.n	800bac8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ba14:	4b2f      	ldr	r3, [pc, #188]	; (800bad4 <USBD_SetConfig+0x150>)
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d112      	bne.n	800ba42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2202      	movs	r2, #2
 800ba20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ba24:	4b2b      	ldr	r3, [pc, #172]	; (800bad4 <USBD_SetConfig+0x150>)
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ba2e:	4b29      	ldr	r3, [pc, #164]	; (800bad4 <USBD_SetConfig+0x150>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	4619      	mov	r1, r3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7fe ffd6 	bl	800a9e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fa06 	bl	800be4c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ba40:	e042      	b.n	800bac8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ba42:	4b24      	ldr	r3, [pc, #144]	; (800bad4 <USBD_SetConfig+0x150>)
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	461a      	mov	r2, r3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d02a      	beq.n	800baa6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	4619      	mov	r1, r3
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f7fe ffc4 	bl	800a9e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ba5e:	4b1d      	ldr	r3, [pc, #116]	; (800bad4 <USBD_SetConfig+0x150>)
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	461a      	mov	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba68:	4b1a      	ldr	r3, [pc, #104]	; (800bad4 <USBD_SetConfig+0x150>)
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7fe ff9d 	bl	800a9ae <USBD_SetClassConfig>
 800ba74:	4603      	mov	r3, r0
 800ba76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ba78:	7bfb      	ldrb	r3, [r7, #15]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00f      	beq.n	800ba9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 f918 	bl	800bcb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f7fe ffa9 	bl	800a9e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2202      	movs	r2, #2
 800ba98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ba9c:	e014      	b.n	800bac8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f9d4 	bl	800be4c <USBD_CtlSendStatus>
      break;
 800baa4:	e010      	b.n	800bac8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 f9d0 	bl	800be4c <USBD_CtlSendStatus>
      break;
 800baac:	e00c      	b.n	800bac8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800baae:	6839      	ldr	r1, [r7, #0]
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f900 	bl	800bcb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bab6:	4b07      	ldr	r3, [pc, #28]	; (800bad4 <USBD_SetConfig+0x150>)
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	4619      	mov	r1, r3
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f7fe ff92 	bl	800a9e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bac2:	2303      	movs	r3, #3
 800bac4:	73fb      	strb	r3, [r7, #15]
      break;
 800bac6:	bf00      	nop
  }

  return ret;
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	20000678 	.word	0x20000678

0800bad8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	88db      	ldrh	r3, [r3, #6]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d004      	beq.n	800baf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 f8e2 	bl	800bcb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800baf2:	e023      	b.n	800bb3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	dc02      	bgt.n	800bb06 <USBD_GetConfig+0x2e>
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	dc03      	bgt.n	800bb0c <USBD_GetConfig+0x34>
 800bb04:	e015      	b.n	800bb32 <USBD_GetConfig+0x5a>
 800bb06:	2b03      	cmp	r3, #3
 800bb08:	d00b      	beq.n	800bb22 <USBD_GetConfig+0x4a>
 800bb0a:	e012      	b.n	800bb32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	3308      	adds	r3, #8
 800bb16:	2201      	movs	r2, #1
 800bb18:	4619      	mov	r1, r3
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f93c 	bl	800bd98 <USBD_CtlSendData>
        break;
 800bb20:	e00c      	b.n	800bb3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	3304      	adds	r3, #4
 800bb26:	2201      	movs	r2, #1
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 f934 	bl	800bd98 <USBD_CtlSendData>
        break;
 800bb30:	e004      	b.n	800bb3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bb32:	6839      	ldr	r1, [r7, #0]
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 f8be 	bl	800bcb6 <USBD_CtlError>
        break;
 800bb3a:	bf00      	nop
}
 800bb3c:	bf00      	nop
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	3b01      	subs	r3, #1
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	d81e      	bhi.n	800bb9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	88db      	ldrh	r3, [r3, #6]
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d004      	beq.n	800bb6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bb64:	6839      	ldr	r1, [r7, #0]
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f8a5 	bl	800bcb6 <USBD_CtlError>
        break;
 800bb6c:	e01a      	b.n	800bba4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2201      	movs	r2, #1
 800bb72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d005      	beq.n	800bb8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	f043 0202 	orr.w	r2, r3, #2
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	330c      	adds	r3, #12
 800bb8e:	2202      	movs	r2, #2
 800bb90:	4619      	mov	r1, r3
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f900 	bl	800bd98 <USBD_CtlSendData>
      break;
 800bb98:	e004      	b.n	800bba4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 f88a 	bl	800bcb6 <USBD_CtlError>
      break;
 800bba2:	bf00      	nop
  }
}
 800bba4:	bf00      	nop
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	885b      	ldrh	r3, [r3, #2]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d107      	bne.n	800bbce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f940 	bl	800be4c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bbcc:	e013      	b.n	800bbf6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	885b      	ldrh	r3, [r3, #2]
 800bbd2:	2b02      	cmp	r3, #2
 800bbd4:	d10b      	bne.n	800bbee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	889b      	ldrh	r3, [r3, #4]
 800bbda:	0a1b      	lsrs	r3, r3, #8
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f930 	bl	800be4c <USBD_CtlSendStatus>
}
 800bbec:	e003      	b.n	800bbf6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bbee:	6839      	ldr	r1, [r7, #0]
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f860 	bl	800bcb6 <USBD_CtlError>
}
 800bbf6:	bf00      	nop
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b082      	sub	sp, #8
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	3b01      	subs	r3, #1
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d80b      	bhi.n	800bc2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	885b      	ldrh	r3, [r3, #2]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d10c      	bne.n	800bc38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f910 	bl	800be4c <USBD_CtlSendStatus>
      }
      break;
 800bc2c:	e004      	b.n	800bc38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f840 	bl	800bcb6 <USBD_CtlError>
      break;
 800bc36:	e000      	b.n	800bc3a <USBD_ClrFeature+0x3c>
      break;
 800bc38:	bf00      	nop
  }
}
 800bc3a:	bf00      	nop
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b084      	sub	sp, #16
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	781a      	ldrb	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	781a      	ldrb	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bc6c:	68f8      	ldr	r0, [r7, #12]
 800bc6e:	f7ff fa41 	bl	800b0f4 <SWAPBYTE>
 800bc72:	4603      	mov	r3, r0
 800bc74:	461a      	mov	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	3301      	adds	r3, #1
 800bc84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f7ff fa34 	bl	800b0f4 <SWAPBYTE>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	461a      	mov	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	3301      	adds	r3, #1
 800bc98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f7ff fa27 	bl	800b0f4 <SWAPBYTE>
 800bca6:	4603      	mov	r3, r0
 800bca8:	461a      	mov	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	80da      	strh	r2, [r3, #6]
}
 800bcae:	bf00      	nop
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b082      	sub	sp, #8
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
 800bcbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcc0:	2180      	movs	r1, #128	; 0x80
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fcee 	bl	800c6a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bcc8:	2100      	movs	r1, #0
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fcea 	bl	800c6a4 <USBD_LL_StallEP>
}
 800bcd0:	bf00      	nop
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bce4:	2300      	movs	r3, #0
 800bce6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d036      	beq.n	800bd5c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bcf2:	6938      	ldr	r0, [r7, #16]
 800bcf4:	f000 f836 	bl	800bd64 <USBD_GetLen>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	005b      	lsls	r3, r3, #1
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	7812      	ldrb	r2, [r2, #0]
 800bd10:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
 800bd14:	3301      	adds	r3, #1
 800bd16:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	68ba      	ldr	r2, [r7, #8]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	2203      	movs	r2, #3
 800bd20:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
 800bd24:	3301      	adds	r3, #1
 800bd26:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bd28:	e013      	b.n	800bd52 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bd2a:	7dfb      	ldrb	r3, [r7, #23]
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	4413      	add	r3, r2
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	7812      	ldrb	r2, [r2, #0]
 800bd34:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	613b      	str	r3, [r7, #16]
    idx++;
 800bd3c:	7dfb      	ldrb	r3, [r7, #23]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bd42:	7dfb      	ldrb	r3, [r7, #23]
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	4413      	add	r3, r2
 800bd48:	2200      	movs	r2, #0
 800bd4a:	701a      	strb	r2, [r3, #0]
    idx++;
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1e7      	bne.n	800bd2a <USBD_GetString+0x52>
 800bd5a:	e000      	b.n	800bd5e <USBD_GetString+0x86>
    return;
 800bd5c:	bf00      	nop
  }
}
 800bd5e:	3718      	adds	r7, #24
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bd74:	e005      	b.n	800bd82 <USBD_GetLen+0x1e>
  {
    len++;
 800bd76:	7bfb      	ldrb	r3, [r7, #15]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1f5      	bne.n	800bd76 <USBD_GetLen+0x12>
  }

  return len;
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2202      	movs	r2, #2
 800bda8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f000 fcf9 	bl	800c7b6 <USBD_LL_Transmit>

  return USBD_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b084      	sub	sp, #16
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	60f8      	str	r0, [r7, #12]
 800bdd6:	60b9      	str	r1, [r7, #8]
 800bdd8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	2100      	movs	r1, #0
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f000 fce8 	bl	800c7b6 <USBD_LL_Transmit>

  return USBD_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2203      	movs	r2, #3
 800be00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	2100      	movs	r1, #0
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f000 fcec 	bl	800c7f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	60f8      	str	r0, [r7, #12]
 800be32:	60b9      	str	r1, [r7, #8]
 800be34:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	68ba      	ldr	r2, [r7, #8]
 800be3a:	2100      	movs	r1, #0
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f000 fcdb 	bl	800c7f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2204      	movs	r2, #4
 800be58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be5c:	2300      	movs	r3, #0
 800be5e:	2200      	movs	r2, #0
 800be60:	2100      	movs	r1, #0
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fca7 	bl	800c7b6 <USBD_LL_Transmit>

  return USBD_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b082      	sub	sp, #8
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2205      	movs	r2, #5
 800be7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be82:	2300      	movs	r3, #0
 800be84:	2200      	movs	r2, #0
 800be86:	2100      	movs	r1, #0
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fcb5 	bl	800c7f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be9c:	2200      	movs	r2, #0
 800be9e:	4912      	ldr	r1, [pc, #72]	; (800bee8 <MX_USB_DEVICE_Init+0x50>)
 800bea0:	4812      	ldr	r0, [pc, #72]	; (800beec <MX_USB_DEVICE_Init+0x54>)
 800bea2:	f7fe fd07 	bl	800a8b4 <USBD_Init>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800beac:	f7f6 fea6 	bl	8002bfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800beb0:	490f      	ldr	r1, [pc, #60]	; (800bef0 <MX_USB_DEVICE_Init+0x58>)
 800beb2:	480e      	ldr	r0, [pc, #56]	; (800beec <MX_USB_DEVICE_Init+0x54>)
 800beb4:	f7fe fd2e 	bl	800a914 <USBD_RegisterClass>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bebe:	f7f6 fe9d 	bl	8002bfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bec2:	490c      	ldr	r1, [pc, #48]	; (800bef4 <MX_USB_DEVICE_Init+0x5c>)
 800bec4:	4809      	ldr	r0, [pc, #36]	; (800beec <MX_USB_DEVICE_Init+0x54>)
 800bec6:	f7fe fc1f 	bl	800a708 <USBD_CDC_RegisterInterface>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bed0:	f7f6 fe94 	bl	8002bfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bed4:	4805      	ldr	r0, [pc, #20]	; (800beec <MX_USB_DEVICE_Init+0x54>)
 800bed6:	f7fe fd53 	bl	800a980 <USBD_Start>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bee0:	f7f6 fe8c 	bl	8002bfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bee4:	bf00      	nop
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	200000ac 	.word	0x200000ac
 800beec:	2000067c 	.word	0x2000067c
 800bef0:	20000018 	.word	0x20000018
 800bef4:	20000098 	.word	0x20000098

0800bef8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800befc:	2200      	movs	r2, #0
 800befe:	4905      	ldr	r1, [pc, #20]	; (800bf14 <CDC_Init_FS+0x1c>)
 800bf00:	4805      	ldr	r0, [pc, #20]	; (800bf18 <CDC_Init_FS+0x20>)
 800bf02:	f7fe fc1b 	bl	800a73c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf06:	4905      	ldr	r1, [pc, #20]	; (800bf1c <CDC_Init_FS+0x24>)
 800bf08:	4803      	ldr	r0, [pc, #12]	; (800bf18 <CDC_Init_FS+0x20>)
 800bf0a:	f7fe fc39 	bl	800a780 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bf0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	20001158 	.word	0x20001158
 800bf18:	2000067c 	.word	0x2000067c
 800bf1c:	20000958 	.word	0x20000958

0800bf20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf20:	b480      	push	{r7}
 800bf22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	4603      	mov	r3, r0
 800bf38:	6039      	str	r1, [r7, #0]
 800bf3a:	71fb      	strb	r3, [r7, #7]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf40:	79fb      	ldrb	r3, [r7, #7]
 800bf42:	2b23      	cmp	r3, #35	; 0x23
 800bf44:	d84a      	bhi.n	800bfdc <CDC_Control_FS+0xac>
 800bf46:	a201      	add	r2, pc, #4	; (adr r2, 800bf4c <CDC_Control_FS+0x1c>)
 800bf48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4c:	0800bfdd 	.word	0x0800bfdd
 800bf50:	0800bfdd 	.word	0x0800bfdd
 800bf54:	0800bfdd 	.word	0x0800bfdd
 800bf58:	0800bfdd 	.word	0x0800bfdd
 800bf5c:	0800bfdd 	.word	0x0800bfdd
 800bf60:	0800bfdd 	.word	0x0800bfdd
 800bf64:	0800bfdd 	.word	0x0800bfdd
 800bf68:	0800bfdd 	.word	0x0800bfdd
 800bf6c:	0800bfdd 	.word	0x0800bfdd
 800bf70:	0800bfdd 	.word	0x0800bfdd
 800bf74:	0800bfdd 	.word	0x0800bfdd
 800bf78:	0800bfdd 	.word	0x0800bfdd
 800bf7c:	0800bfdd 	.word	0x0800bfdd
 800bf80:	0800bfdd 	.word	0x0800bfdd
 800bf84:	0800bfdd 	.word	0x0800bfdd
 800bf88:	0800bfdd 	.word	0x0800bfdd
 800bf8c:	0800bfdd 	.word	0x0800bfdd
 800bf90:	0800bfdd 	.word	0x0800bfdd
 800bf94:	0800bfdd 	.word	0x0800bfdd
 800bf98:	0800bfdd 	.word	0x0800bfdd
 800bf9c:	0800bfdd 	.word	0x0800bfdd
 800bfa0:	0800bfdd 	.word	0x0800bfdd
 800bfa4:	0800bfdd 	.word	0x0800bfdd
 800bfa8:	0800bfdd 	.word	0x0800bfdd
 800bfac:	0800bfdd 	.word	0x0800bfdd
 800bfb0:	0800bfdd 	.word	0x0800bfdd
 800bfb4:	0800bfdd 	.word	0x0800bfdd
 800bfb8:	0800bfdd 	.word	0x0800bfdd
 800bfbc:	0800bfdd 	.word	0x0800bfdd
 800bfc0:	0800bfdd 	.word	0x0800bfdd
 800bfc4:	0800bfdd 	.word	0x0800bfdd
 800bfc8:	0800bfdd 	.word	0x0800bfdd
 800bfcc:	0800bfdd 	.word	0x0800bfdd
 800bfd0:	0800bfdd 	.word	0x0800bfdd
 800bfd4:	0800bfdd 	.word	0x0800bfdd
 800bfd8:	0800bfdd 	.word	0x0800bfdd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bfdc:	bf00      	nop
  }

  return (USBD_OK);
 800bfde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bff6:	6879      	ldr	r1, [r7, #4]
 800bff8:	4805      	ldr	r0, [pc, #20]	; (800c010 <CDC_Receive_FS+0x24>)
 800bffa:	f7fe fbc1 	bl	800a780 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bffe:	4804      	ldr	r0, [pc, #16]	; (800c010 <CDC_Receive_FS+0x24>)
 800c000:	f7fe fc22 	bl	800a848 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c004:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c006:	4618      	mov	r0, r3
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	2000067c 	.word	0x2000067c

0800c014 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	460b      	mov	r3, r1
 800c01e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c020:	2300      	movs	r3, #0
 800c022:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c024:	4b0d      	ldr	r3, [pc, #52]	; (800c05c <CDC_Transmit_FS+0x48>)
 800c026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c02a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c032:	2b00      	cmp	r3, #0
 800c034:	d001      	beq.n	800c03a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c036:	2301      	movs	r3, #1
 800c038:	e00b      	b.n	800c052 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c03a:	887b      	ldrh	r3, [r7, #2]
 800c03c:	461a      	mov	r2, r3
 800c03e:	6879      	ldr	r1, [r7, #4]
 800c040:	4806      	ldr	r0, [pc, #24]	; (800c05c <CDC_Transmit_FS+0x48>)
 800c042:	f7fe fb7b 	bl	800a73c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c046:	4805      	ldr	r0, [pc, #20]	; (800c05c <CDC_Transmit_FS+0x48>)
 800c048:	f7fe fbb8 	bl	800a7bc <USBD_CDC_TransmitPacket>
 800c04c:	4603      	mov	r3, r0
 800c04e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c050:	7bfb      	ldrb	r3, [r7, #15]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	2000067c 	.word	0x2000067c

0800c060 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c060:	b480      	push	{r7}
 800c062:	b087      	sub	sp, #28
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	4613      	mov	r3, r2
 800c06c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c072:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c076:	4618      	mov	r0, r3
 800c078:	371c      	adds	r7, #28
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
	...

0800c084 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	4603      	mov	r3, r0
 800c08c:	6039      	str	r1, [r7, #0]
 800c08e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	2212      	movs	r2, #18
 800c094:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c096:	4b03      	ldr	r3, [pc, #12]	; (800c0a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c098:	4618      	mov	r0, r3
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	200000c8 	.word	0x200000c8

0800c0a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	6039      	str	r1, [r7, #0]
 800c0b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	2204      	movs	r2, #4
 800c0b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c0ba:	4b03      	ldr	r3, [pc, #12]	; (800c0c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	200000dc 	.word	0x200000dc

0800c0cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	6039      	str	r1, [r7, #0]
 800c0d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0d8:	79fb      	ldrb	r3, [r7, #7]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d105      	bne.n	800c0ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0de:	683a      	ldr	r2, [r7, #0]
 800c0e0:	4907      	ldr	r1, [pc, #28]	; (800c100 <USBD_FS_ProductStrDescriptor+0x34>)
 800c0e2:	4808      	ldr	r0, [pc, #32]	; (800c104 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0e4:	f7ff fdf8 	bl	800bcd8 <USBD_GetString>
 800c0e8:	e004      	b.n	800c0f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0ea:	683a      	ldr	r2, [r7, #0]
 800c0ec:	4904      	ldr	r1, [pc, #16]	; (800c100 <USBD_FS_ProductStrDescriptor+0x34>)
 800c0ee:	4805      	ldr	r0, [pc, #20]	; (800c104 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0f0:	f7ff fdf2 	bl	800bcd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0f4:	4b02      	ldr	r3, [pc, #8]	; (800c100 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	20001958 	.word	0x20001958
 800c104:	0800cb14 	.word	0x0800cb14

0800c108 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	6039      	str	r1, [r7, #0]
 800c112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c114:	683a      	ldr	r2, [r7, #0]
 800c116:	4904      	ldr	r1, [pc, #16]	; (800c128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c118:	4804      	ldr	r0, [pc, #16]	; (800c12c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c11a:	f7ff fddd 	bl	800bcd8 <USBD_GetString>
  return USBD_StrDesc;
 800c11e:	4b02      	ldr	r3, [pc, #8]	; (800c128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c120:	4618      	mov	r0, r3
 800c122:	3708      	adds	r7, #8
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	20001958 	.word	0x20001958
 800c12c:	0800cb2c 	.word	0x0800cb2c

0800c130 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	4603      	mov	r3, r0
 800c138:	6039      	str	r1, [r7, #0]
 800c13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	221a      	movs	r2, #26
 800c140:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c142:	f000 f843 	bl	800c1cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c146:	4b02      	ldr	r3, [pc, #8]	; (800c150 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	200000e0 	.word	0x200000e0

0800c154 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	4603      	mov	r3, r0
 800c15c:	6039      	str	r1, [r7, #0]
 800c15e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c160:	79fb      	ldrb	r3, [r7, #7]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d105      	bne.n	800c172 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	4907      	ldr	r1, [pc, #28]	; (800c188 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c16a:	4808      	ldr	r0, [pc, #32]	; (800c18c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c16c:	f7ff fdb4 	bl	800bcd8 <USBD_GetString>
 800c170:	e004      	b.n	800c17c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	4904      	ldr	r1, [pc, #16]	; (800c188 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c176:	4805      	ldr	r0, [pc, #20]	; (800c18c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c178:	f7ff fdae 	bl	800bcd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c17c:	4b02      	ldr	r3, [pc, #8]	; (800c188 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	20001958 	.word	0x20001958
 800c18c:	0800cb40 	.word	0x0800cb40

0800c190 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	4603      	mov	r3, r0
 800c198:	6039      	str	r1, [r7, #0]
 800c19a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c19c:	79fb      	ldrb	r3, [r7, #7]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d105      	bne.n	800c1ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1a2:	683a      	ldr	r2, [r7, #0]
 800c1a4:	4907      	ldr	r1, [pc, #28]	; (800c1c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1a6:	4808      	ldr	r0, [pc, #32]	; (800c1c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1a8:	f7ff fd96 	bl	800bcd8 <USBD_GetString>
 800c1ac:	e004      	b.n	800c1b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1ae:	683a      	ldr	r2, [r7, #0]
 800c1b0:	4904      	ldr	r1, [pc, #16]	; (800c1c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1b2:	4805      	ldr	r0, [pc, #20]	; (800c1c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1b4:	f7ff fd90 	bl	800bcd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1b8:	4b02      	ldr	r3, [pc, #8]	; (800c1c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	20001958 	.word	0x20001958
 800c1c8:	0800cb4c 	.word	0x0800cb4c

0800c1cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c1d2:	4b0f      	ldr	r3, [pc, #60]	; (800c210 <Get_SerialNum+0x44>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c1d8:	4b0e      	ldr	r3, [pc, #56]	; (800c214 <Get_SerialNum+0x48>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c1de:	4b0e      	ldr	r3, [pc, #56]	; (800c218 <Get_SerialNum+0x4c>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d009      	beq.n	800c206 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c1f2:	2208      	movs	r2, #8
 800c1f4:	4909      	ldr	r1, [pc, #36]	; (800c21c <Get_SerialNum+0x50>)
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f000 f814 	bl	800c224 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c1fc:	2204      	movs	r2, #4
 800c1fe:	4908      	ldr	r1, [pc, #32]	; (800c220 <Get_SerialNum+0x54>)
 800c200:	68b8      	ldr	r0, [r7, #8]
 800c202:	f000 f80f 	bl	800c224 <IntToUnicode>
  }
}
 800c206:	bf00      	nop
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	1fff7a10 	.word	0x1fff7a10
 800c214:	1fff7a14 	.word	0x1fff7a14
 800c218:	1fff7a18 	.word	0x1fff7a18
 800c21c:	200000e2 	.word	0x200000e2
 800c220:	200000f2 	.word	0x200000f2

0800c224 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c224:	b480      	push	{r7}
 800c226:	b087      	sub	sp, #28
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	4613      	mov	r3, r2
 800c230:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c236:	2300      	movs	r3, #0
 800c238:	75fb      	strb	r3, [r7, #23]
 800c23a:	e027      	b.n	800c28c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	0f1b      	lsrs	r3, r3, #28
 800c240:	2b09      	cmp	r3, #9
 800c242:	d80b      	bhi.n	800c25c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	0f1b      	lsrs	r3, r3, #28
 800c248:	b2da      	uxtb	r2, r3
 800c24a:	7dfb      	ldrb	r3, [r7, #23]
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	4619      	mov	r1, r3
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	440b      	add	r3, r1
 800c254:	3230      	adds	r2, #48	; 0x30
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	e00a      	b.n	800c272 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	0f1b      	lsrs	r3, r3, #28
 800c260:	b2da      	uxtb	r2, r3
 800c262:	7dfb      	ldrb	r3, [r7, #23]
 800c264:	005b      	lsls	r3, r3, #1
 800c266:	4619      	mov	r1, r3
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	440b      	add	r3, r1
 800c26c:	3237      	adds	r2, #55	; 0x37
 800c26e:	b2d2      	uxtb	r2, r2
 800c270:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	011b      	lsls	r3, r3, #4
 800c276:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c278:	7dfb      	ldrb	r3, [r7, #23]
 800c27a:	005b      	lsls	r3, r3, #1
 800c27c:	3301      	adds	r3, #1
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	4413      	add	r3, r2
 800c282:	2200      	movs	r2, #0
 800c284:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c286:	7dfb      	ldrb	r3, [r7, #23]
 800c288:	3301      	adds	r3, #1
 800c28a:	75fb      	strb	r3, [r7, #23]
 800c28c:	7dfa      	ldrb	r2, [r7, #23]
 800c28e:	79fb      	ldrb	r3, [r7, #7]
 800c290:	429a      	cmp	r2, r3
 800c292:	d3d3      	bcc.n	800c23c <IntToUnicode+0x18>
  }
}
 800c294:	bf00      	nop
 800c296:	bf00      	nop
 800c298:	371c      	adds	r7, #28
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
	...

0800c2a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b08a      	sub	sp, #40	; 0x28
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2ac:	f107 0314 	add.w	r3, r7, #20
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	601a      	str	r2, [r3, #0]
 800c2b4:	605a      	str	r2, [r3, #4]
 800c2b6:	609a      	str	r2, [r3, #8]
 800c2b8:	60da      	str	r2, [r3, #12]
 800c2ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2c4:	d147      	bne.n	800c356 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	613b      	str	r3, [r7, #16]
 800c2ca:	4b25      	ldr	r3, [pc, #148]	; (800c360 <HAL_PCD_MspInit+0xbc>)
 800c2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ce:	4a24      	ldr	r2, [pc, #144]	; (800c360 <HAL_PCD_MspInit+0xbc>)
 800c2d0:	f043 0301 	orr.w	r3, r3, #1
 800c2d4:	6313      	str	r3, [r2, #48]	; 0x30
 800c2d6:	4b22      	ldr	r3, [pc, #136]	; (800c360 <HAL_PCD_MspInit+0xbc>)
 800c2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2da:	f003 0301 	and.w	r3, r3, #1
 800c2de:	613b      	str	r3, [r7, #16]
 800c2e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c2e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c2f0:	f107 0314 	add.w	r3, r7, #20
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	481b      	ldr	r0, [pc, #108]	; (800c364 <HAL_PCD_MspInit+0xc0>)
 800c2f8:	f7f7 fcf4 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c2fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c302:	2302      	movs	r3, #2
 800c304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c306:	2300      	movs	r3, #0
 800c308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c30a:	2300      	movs	r3, #0
 800c30c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c30e:	230a      	movs	r3, #10
 800c310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c312:	f107 0314 	add.w	r3, r7, #20
 800c316:	4619      	mov	r1, r3
 800c318:	4812      	ldr	r0, [pc, #72]	; (800c364 <HAL_PCD_MspInit+0xc0>)
 800c31a:	f7f7 fce3 	bl	8003ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c31e:	4b10      	ldr	r3, [pc, #64]	; (800c360 <HAL_PCD_MspInit+0xbc>)
 800c320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c322:	4a0f      	ldr	r2, [pc, #60]	; (800c360 <HAL_PCD_MspInit+0xbc>)
 800c324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c328:	6353      	str	r3, [r2, #52]	; 0x34
 800c32a:	2300      	movs	r3, #0
 800c32c:	60fb      	str	r3, [r7, #12]
 800c32e:	4b0c      	ldr	r3, [pc, #48]	; (800c360 <HAL_PCD_MspInit+0xbc>)
 800c330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c332:	4a0b      	ldr	r2, [pc, #44]	; (800c360 <HAL_PCD_MspInit+0xbc>)
 800c334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c338:	6453      	str	r3, [r2, #68]	; 0x44
 800c33a:	4b09      	ldr	r3, [pc, #36]	; (800c360 <HAL_PCD_MspInit+0xbc>)
 800c33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c33e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c342:	60fb      	str	r3, [r7, #12]
 800c344:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c346:	2200      	movs	r2, #0
 800c348:	2100      	movs	r1, #0
 800c34a:	2043      	movs	r0, #67	; 0x43
 800c34c:	f7f7 f917 	bl	800357e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c350:	2043      	movs	r0, #67	; 0x43
 800c352:	f7f7 f930 	bl	80035b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c356:	bf00      	nop
 800c358:	3728      	adds	r7, #40	; 0x28
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	40023800 	.word	0x40023800
 800c364:	40020000 	.word	0x40020000

0800c368 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c37c:	4619      	mov	r1, r3
 800c37e:	4610      	mov	r0, r2
 800c380:	f7fe fb4b 	bl	800aa1a <USBD_LL_SetupStage>
}
 800c384:	bf00      	nop
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	460b      	mov	r3, r1
 800c396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c39e:	78fa      	ldrb	r2, [r7, #3]
 800c3a0:	6879      	ldr	r1, [r7, #4]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	00db      	lsls	r3, r3, #3
 800c3a6:	4413      	add	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	440b      	add	r3, r1
 800c3ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	78fb      	ldrb	r3, [r7, #3]
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	f7fe fb85 	bl	800aac4 <USBD_LL_DataOutStage>
}
 800c3ba:	bf00      	nop
 800c3bc:	3708      	adds	r7, #8
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b082      	sub	sp, #8
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c3d4:	78fa      	ldrb	r2, [r7, #3]
 800c3d6:	6879      	ldr	r1, [r7, #4]
 800c3d8:	4613      	mov	r3, r2
 800c3da:	00db      	lsls	r3, r3, #3
 800c3dc:	4413      	add	r3, r2
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	440b      	add	r3, r1
 800c3e2:	334c      	adds	r3, #76	; 0x4c
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	78fb      	ldrb	r3, [r7, #3]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	f7fe fc1e 	bl	800ac2a <USBD_LL_DataInStage>
}
 800c3ee:	bf00      	nop
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b082      	sub	sp, #8
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe fd52 	bl	800aeae <USBD_LL_SOF>
}
 800c40a:	bf00      	nop
 800c40c:	3708      	adds	r7, #8
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c41a:	2301      	movs	r3, #1
 800c41c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d102      	bne.n	800c42c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c426:	2300      	movs	r3, #0
 800c428:	73fb      	strb	r3, [r7, #15]
 800c42a:	e008      	b.n	800c43e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	2b02      	cmp	r3, #2
 800c432:	d102      	bne.n	800c43a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c434:	2301      	movs	r3, #1
 800c436:	73fb      	strb	r3, [r7, #15]
 800c438:	e001      	b.n	800c43e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c43a:	f7f6 fbdf 	bl	8002bfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c444:	7bfa      	ldrb	r2, [r7, #15]
 800c446:	4611      	mov	r1, r2
 800c448:	4618      	mov	r0, r3
 800c44a:	f7fe fcf2 	bl	800ae32 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c454:	4618      	mov	r0, r3
 800c456:	f7fe fc9a 	bl	800ad8e <USBD_LL_Reset>
}
 800c45a:	bf00      	nop
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
	...

0800c464 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c472:	4618      	mov	r0, r3
 800c474:	f7fe fced 	bl	800ae52 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	6812      	ldr	r2, [r2, #0]
 800c486:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c48a:	f043 0301 	orr.w	r3, r3, #1
 800c48e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6a1b      	ldr	r3, [r3, #32]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d005      	beq.n	800c4a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c498:	4b04      	ldr	r3, [pc, #16]	; (800c4ac <HAL_PCD_SuspendCallback+0x48>)
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	4a03      	ldr	r2, [pc, #12]	; (800c4ac <HAL_PCD_SuspendCallback+0x48>)
 800c49e:	f043 0306 	orr.w	r3, r3, #6
 800c4a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c4a4:	bf00      	nop
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	e000ed00 	.word	0xe000ed00

0800c4b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fe fcdd 	bl	800ae7e <USBD_LL_Resume>
}
 800c4c4:	bf00      	nop
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c4de:	78fa      	ldrb	r2, [r7, #3]
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7fe fd35 	bl	800af52 <USBD_LL_IsoOUTIncomplete>
}
 800c4e8:	bf00      	nop
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c502:	78fa      	ldrb	r2, [r7, #3]
 800c504:	4611      	mov	r1, r2
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe fcf1 	bl	800aeee <USBD_LL_IsoINIncomplete>
}
 800c50c:	bf00      	nop
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c522:	4618      	mov	r0, r3
 800c524:	f7fe fd47 	bl	800afb6 <USBD_LL_DevConnected>
}
 800c528:	bf00      	nop
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c53e:	4618      	mov	r0, r3
 800c540:	f7fe fd44 	bl	800afcc <USBD_LL_DevDisconnected>
}
 800c544:	bf00      	nop
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d13c      	bne.n	800c5d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c55c:	4a20      	ldr	r2, [pc, #128]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4a1e      	ldr	r2, [pc, #120]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c568:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c56c:	4b1c      	ldr	r3, [pc, #112]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c56e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c572:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c574:	4b1a      	ldr	r3, [pc, #104]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c576:	2204      	movs	r2, #4
 800c578:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c57a:	4b19      	ldr	r3, [pc, #100]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c57c:	2202      	movs	r2, #2
 800c57e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c580:	4b17      	ldr	r3, [pc, #92]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c582:	2200      	movs	r2, #0
 800c584:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c586:	4b16      	ldr	r3, [pc, #88]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c588:	2202      	movs	r2, #2
 800c58a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c58c:	4b14      	ldr	r3, [pc, #80]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c58e:	2200      	movs	r2, #0
 800c590:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c592:	4b13      	ldr	r3, [pc, #76]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c594:	2200      	movs	r2, #0
 800c596:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c598:	4b11      	ldr	r3, [pc, #68]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c59a:	2200      	movs	r2, #0
 800c59c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c59e:	4b10      	ldr	r3, [pc, #64]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c5a4:	4b0e      	ldr	r3, [pc, #56]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c5aa:	480d      	ldr	r0, [pc, #52]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c5ac:	f7f8 fb7e 	bl	8004cac <HAL_PCD_Init>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d001      	beq.n	800c5ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c5b6:	f7f6 fb21 	bl	8002bfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c5ba:	2180      	movs	r1, #128	; 0x80
 800c5bc:	4808      	ldr	r0, [pc, #32]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c5be:	f7f9 fdd6 	bl	800616e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c5c2:	2240      	movs	r2, #64	; 0x40
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	4806      	ldr	r0, [pc, #24]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c5c8:	f7f9 fd8a 	bl	80060e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c5cc:	2280      	movs	r2, #128	; 0x80
 800c5ce:	2101      	movs	r1, #1
 800c5d0:	4803      	ldr	r0, [pc, #12]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c5d2:	f7f9 fd85 	bl	80060e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20001b58 	.word	0x20001b58

0800c5e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7f8 fc73 	bl	8004ee6 <HAL_PCD_Start>
 800c600:	4603      	mov	r3, r0
 800c602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c604:	7bfb      	ldrb	r3, [r7, #15]
 800c606:	4618      	mov	r0, r3
 800c608:	f000 f942 	bl	800c890 <USBD_Get_USB_Status>
 800c60c:	4603      	mov	r3, r0
 800c60e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c610:	7bbb      	ldrb	r3, [r7, #14]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b084      	sub	sp, #16
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	4608      	mov	r0, r1
 800c624:	4611      	mov	r1, r2
 800c626:	461a      	mov	r2, r3
 800c628:	4603      	mov	r3, r0
 800c62a:	70fb      	strb	r3, [r7, #3]
 800c62c:	460b      	mov	r3, r1
 800c62e:	70bb      	strb	r3, [r7, #2]
 800c630:	4613      	mov	r3, r2
 800c632:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c634:	2300      	movs	r3, #0
 800c636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c638:	2300      	movs	r3, #0
 800c63a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c642:	78bb      	ldrb	r3, [r7, #2]
 800c644:	883a      	ldrh	r2, [r7, #0]
 800c646:	78f9      	ldrb	r1, [r7, #3]
 800c648:	f7f9 f944 	bl	80058d4 <HAL_PCD_EP_Open>
 800c64c:	4603      	mov	r3, r0
 800c64e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c650:	7bfb      	ldrb	r3, [r7, #15]
 800c652:	4618      	mov	r0, r3
 800c654:	f000 f91c 	bl	800c890 <USBD_Get_USB_Status>
 800c658:	4603      	mov	r3, r0
 800c65a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c65c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	460b      	mov	r3, r1
 800c670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c672:	2300      	movs	r3, #0
 800c674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c676:	2300      	movs	r3, #0
 800c678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c680:	78fa      	ldrb	r2, [r7, #3]
 800c682:	4611      	mov	r1, r2
 800c684:	4618      	mov	r0, r3
 800c686:	f7f9 f98d 	bl	80059a4 <HAL_PCD_EP_Close>
 800c68a:	4603      	mov	r3, r0
 800c68c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
 800c690:	4618      	mov	r0, r3
 800c692:	f000 f8fd 	bl	800c890 <USBD_Get_USB_Status>
 800c696:	4603      	mov	r3, r0
 800c698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c69a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3710      	adds	r7, #16
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c6be:	78fa      	ldrb	r2, [r7, #3]
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7f9 fa65 	bl	8005b92 <HAL_PCD_EP_SetStall>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 f8de 	bl	800c890 <USBD_Get_USB_Status>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b084      	sub	sp, #16
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c6fc:	78fa      	ldrb	r2, [r7, #3]
 800c6fe:	4611      	mov	r1, r2
 800c700:	4618      	mov	r0, r3
 800c702:	f7f9 faaa 	bl	8005c5a <HAL_PCD_EP_ClrStall>
 800c706:	4603      	mov	r3, r0
 800c708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 f8bf 	bl	800c890 <USBD_Get_USB_Status>
 800c712:	4603      	mov	r3, r0
 800c714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c716:	7bbb      	ldrb	r3, [r7, #14]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	460b      	mov	r3, r1
 800c72a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c732:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c734:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	da0b      	bge.n	800c754 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c73c:	78fb      	ldrb	r3, [r7, #3]
 800c73e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c742:	68f9      	ldr	r1, [r7, #12]
 800c744:	4613      	mov	r3, r2
 800c746:	00db      	lsls	r3, r3, #3
 800c748:	4413      	add	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	440b      	add	r3, r1
 800c74e:	333e      	adds	r3, #62	; 0x3e
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	e00b      	b.n	800c76c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c754:	78fb      	ldrb	r3, [r7, #3]
 800c756:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c75a:	68f9      	ldr	r1, [r7, #12]
 800c75c:	4613      	mov	r3, r2
 800c75e:	00db      	lsls	r3, r3, #3
 800c760:	4413      	add	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	440b      	add	r3, r1
 800c766:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c76a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c784:	2300      	movs	r3, #0
 800c786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c788:	2300      	movs	r3, #0
 800c78a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c792:	78fa      	ldrb	r2, [r7, #3]
 800c794:	4611      	mov	r1, r2
 800c796:	4618      	mov	r0, r3
 800c798:	f7f9 f877 	bl	800588a <HAL_PCD_SetAddress>
 800c79c:	4603      	mov	r3, r0
 800c79e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7a0:	7bfb      	ldrb	r3, [r7, #15]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f000 f874 	bl	800c890 <USBD_Get_USB_Status>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b086      	sub	sp, #24
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	60f8      	str	r0, [r7, #12]
 800c7be:	607a      	str	r2, [r7, #4]
 800c7c0:	603b      	str	r3, [r7, #0]
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c7d4:	7af9      	ldrb	r1, [r7, #11]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	f7f9 f990 	bl	8005afe <HAL_PCD_EP_Transmit>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7e2:	7dfb      	ldrb	r3, [r7, #23]
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f000 f853 	bl	800c890 <USBD_Get_USB_Status>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c7ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3718      	adds	r7, #24
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	607a      	str	r2, [r7, #4]
 800c802:	603b      	str	r3, [r7, #0]
 800c804:	460b      	mov	r3, r1
 800c806:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c808:	2300      	movs	r3, #0
 800c80a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c80c:	2300      	movs	r3, #0
 800c80e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c816:	7af9      	ldrb	r1, [r7, #11]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	f7f9 f90c 	bl	8005a38 <HAL_PCD_EP_Receive>
 800c820:	4603      	mov	r3, r0
 800c822:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c824:	7dfb      	ldrb	r3, [r7, #23]
 800c826:	4618      	mov	r0, r3
 800c828:	f000 f832 	bl	800c890 <USBD_Get_USB_Status>
 800c82c:	4603      	mov	r3, r0
 800c82e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c830:	7dbb      	ldrb	r3, [r7, #22]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3718      	adds	r7, #24
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b082      	sub	sp, #8
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	460b      	mov	r3, r1
 800c844:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c84c:	78fa      	ldrb	r2, [r7, #3]
 800c84e:	4611      	mov	r1, r2
 800c850:	4618      	mov	r0, r3
 800c852:	f7f9 f93c 	bl	8005ace <HAL_PCD_EP_GetRxCount>
 800c856:	4603      	mov	r3, r0
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c868:	4b03      	ldr	r3, [pc, #12]	; (800c878 <USBD_static_malloc+0x18>)
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	20002064 	.word	0x20002064

0800c87c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]

}
 800c884:	bf00      	nop
 800c886:	370c      	adds	r7, #12
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	4603      	mov	r3, r0
 800c898:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c89e:	79fb      	ldrb	r3, [r7, #7]
 800c8a0:	2b03      	cmp	r3, #3
 800c8a2:	d817      	bhi.n	800c8d4 <USBD_Get_USB_Status+0x44>
 800c8a4:	a201      	add	r2, pc, #4	; (adr r2, 800c8ac <USBD_Get_USB_Status+0x1c>)
 800c8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8aa:	bf00      	nop
 800c8ac:	0800c8bd 	.word	0x0800c8bd
 800c8b0:	0800c8c3 	.word	0x0800c8c3
 800c8b4:	0800c8c9 	.word	0x0800c8c9
 800c8b8:	0800c8cf 	.word	0x0800c8cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c0:	e00b      	b.n	800c8da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c6:	e008      	b.n	800c8da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c8cc:	e005      	b.n	800c8da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c8ce:	2303      	movs	r3, #3
 800c8d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c8d2:	e002      	b.n	800c8da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8d8:	bf00      	nop
  }
  return usb_status;
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3714      	adds	r7, #20
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <_ZdlPvj>:
 800c8e8:	f000 b803 	b.w	800c8f2 <_ZdlPv>

0800c8ec <__cxa_pure_virtual>:
 800c8ec:	b508      	push	{r3, lr}
 800c8ee:	f000 f80f 	bl	800c910 <_ZSt9terminatev>

0800c8f2 <_ZdlPv>:
 800c8f2:	f000 b843 	b.w	800c97c <free>

0800c8f6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c8f6:	b508      	push	{r3, lr}
 800c8f8:	4780      	blx	r0
 800c8fa:	f000 f80e 	bl	800c91a <abort>
	...

0800c900 <_ZSt13get_terminatev>:
 800c900:	4b02      	ldr	r3, [pc, #8]	; (800c90c <_ZSt13get_terminatev+0xc>)
 800c902:	6818      	ldr	r0, [r3, #0]
 800c904:	f3bf 8f5b 	dmb	ish
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop
 800c90c:	200000fc 	.word	0x200000fc

0800c910 <_ZSt9terminatev>:
 800c910:	b508      	push	{r3, lr}
 800c912:	f7ff fff5 	bl	800c900 <_ZSt13get_terminatev>
 800c916:	f7ff ffee 	bl	800c8f6 <_ZN10__cxxabiv111__terminateEPFvvE>

0800c91a <abort>:
 800c91a:	b508      	push	{r3, lr}
 800c91c:	2006      	movs	r0, #6
 800c91e:	f000 f8bf 	bl	800caa0 <raise>
 800c922:	2001      	movs	r0, #1
 800c924:	f7f6 fc74 	bl	8003210 <_exit>

0800c928 <__errno>:
 800c928:	4b01      	ldr	r3, [pc, #4]	; (800c930 <__errno+0x8>)
 800c92a:	6818      	ldr	r0, [r3, #0]
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	20000100 	.word	0x20000100

0800c934 <__libc_init_array>:
 800c934:	b570      	push	{r4, r5, r6, lr}
 800c936:	4d0d      	ldr	r5, [pc, #52]	; (800c96c <__libc_init_array+0x38>)
 800c938:	4c0d      	ldr	r4, [pc, #52]	; (800c970 <__libc_init_array+0x3c>)
 800c93a:	1b64      	subs	r4, r4, r5
 800c93c:	10a4      	asrs	r4, r4, #2
 800c93e:	2600      	movs	r6, #0
 800c940:	42a6      	cmp	r6, r4
 800c942:	d109      	bne.n	800c958 <__libc_init_array+0x24>
 800c944:	4d0b      	ldr	r5, [pc, #44]	; (800c974 <__libc_init_array+0x40>)
 800c946:	4c0c      	ldr	r4, [pc, #48]	; (800c978 <__libc_init_array+0x44>)
 800c948:	f000 f8d4 	bl	800caf4 <_init>
 800c94c:	1b64      	subs	r4, r4, r5
 800c94e:	10a4      	asrs	r4, r4, #2
 800c950:	2600      	movs	r6, #0
 800c952:	42a6      	cmp	r6, r4
 800c954:	d105      	bne.n	800c962 <__libc_init_array+0x2e>
 800c956:	bd70      	pop	{r4, r5, r6, pc}
 800c958:	f855 3b04 	ldr.w	r3, [r5], #4
 800c95c:	4798      	blx	r3
 800c95e:	3601      	adds	r6, #1
 800c960:	e7ee      	b.n	800c940 <__libc_init_array+0xc>
 800c962:	f855 3b04 	ldr.w	r3, [r5], #4
 800c966:	4798      	blx	r3
 800c968:	3601      	adds	r6, #1
 800c96a:	e7f2      	b.n	800c952 <__libc_init_array+0x1e>
 800c96c:	0800cc50 	.word	0x0800cc50
 800c970:	0800cc50 	.word	0x0800cc50
 800c974:	0800cc50 	.word	0x0800cc50
 800c978:	0800cc5c 	.word	0x0800cc5c

0800c97c <free>:
 800c97c:	4b02      	ldr	r3, [pc, #8]	; (800c988 <free+0xc>)
 800c97e:	4601      	mov	r1, r0
 800c980:	6818      	ldr	r0, [r3, #0]
 800c982:	f000 b819 	b.w	800c9b8 <_free_r>
 800c986:	bf00      	nop
 800c988:	20000100 	.word	0x20000100

0800c98c <memcpy>:
 800c98c:	440a      	add	r2, r1
 800c98e:	4291      	cmp	r1, r2
 800c990:	f100 33ff 	add.w	r3, r0, #4294967295
 800c994:	d100      	bne.n	800c998 <memcpy+0xc>
 800c996:	4770      	bx	lr
 800c998:	b510      	push	{r4, lr}
 800c99a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c99e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9a2:	4291      	cmp	r1, r2
 800c9a4:	d1f9      	bne.n	800c99a <memcpy+0xe>
 800c9a6:	bd10      	pop	{r4, pc}

0800c9a8 <memset>:
 800c9a8:	4402      	add	r2, r0
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d100      	bne.n	800c9b2 <memset+0xa>
 800c9b0:	4770      	bx	lr
 800c9b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c9b6:	e7f9      	b.n	800c9ac <memset+0x4>

0800c9b8 <_free_r>:
 800c9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9ba:	2900      	cmp	r1, #0
 800c9bc:	d044      	beq.n	800ca48 <_free_r+0x90>
 800c9be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9c2:	9001      	str	r0, [sp, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f1a1 0404 	sub.w	r4, r1, #4
 800c9ca:	bfb8      	it	lt
 800c9cc:	18e4      	addlt	r4, r4, r3
 800c9ce:	f000 f883 	bl	800cad8 <__malloc_lock>
 800c9d2:	4a1e      	ldr	r2, [pc, #120]	; (800ca4c <_free_r+0x94>)
 800c9d4:	9801      	ldr	r0, [sp, #4]
 800c9d6:	6813      	ldr	r3, [r2, #0]
 800c9d8:	b933      	cbnz	r3, 800c9e8 <_free_r+0x30>
 800c9da:	6063      	str	r3, [r4, #4]
 800c9dc:	6014      	str	r4, [r2, #0]
 800c9de:	b003      	add	sp, #12
 800c9e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9e4:	f000 b87e 	b.w	800cae4 <__malloc_unlock>
 800c9e8:	42a3      	cmp	r3, r4
 800c9ea:	d908      	bls.n	800c9fe <_free_r+0x46>
 800c9ec:	6825      	ldr	r5, [r4, #0]
 800c9ee:	1961      	adds	r1, r4, r5
 800c9f0:	428b      	cmp	r3, r1
 800c9f2:	bf01      	itttt	eq
 800c9f4:	6819      	ldreq	r1, [r3, #0]
 800c9f6:	685b      	ldreq	r3, [r3, #4]
 800c9f8:	1949      	addeq	r1, r1, r5
 800c9fa:	6021      	streq	r1, [r4, #0]
 800c9fc:	e7ed      	b.n	800c9da <_free_r+0x22>
 800c9fe:	461a      	mov	r2, r3
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	b10b      	cbz	r3, 800ca08 <_free_r+0x50>
 800ca04:	42a3      	cmp	r3, r4
 800ca06:	d9fa      	bls.n	800c9fe <_free_r+0x46>
 800ca08:	6811      	ldr	r1, [r2, #0]
 800ca0a:	1855      	adds	r5, r2, r1
 800ca0c:	42a5      	cmp	r5, r4
 800ca0e:	d10b      	bne.n	800ca28 <_free_r+0x70>
 800ca10:	6824      	ldr	r4, [r4, #0]
 800ca12:	4421      	add	r1, r4
 800ca14:	1854      	adds	r4, r2, r1
 800ca16:	42a3      	cmp	r3, r4
 800ca18:	6011      	str	r1, [r2, #0]
 800ca1a:	d1e0      	bne.n	800c9de <_free_r+0x26>
 800ca1c:	681c      	ldr	r4, [r3, #0]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	6053      	str	r3, [r2, #4]
 800ca22:	4421      	add	r1, r4
 800ca24:	6011      	str	r1, [r2, #0]
 800ca26:	e7da      	b.n	800c9de <_free_r+0x26>
 800ca28:	d902      	bls.n	800ca30 <_free_r+0x78>
 800ca2a:	230c      	movs	r3, #12
 800ca2c:	6003      	str	r3, [r0, #0]
 800ca2e:	e7d6      	b.n	800c9de <_free_r+0x26>
 800ca30:	6825      	ldr	r5, [r4, #0]
 800ca32:	1961      	adds	r1, r4, r5
 800ca34:	428b      	cmp	r3, r1
 800ca36:	bf04      	itt	eq
 800ca38:	6819      	ldreq	r1, [r3, #0]
 800ca3a:	685b      	ldreq	r3, [r3, #4]
 800ca3c:	6063      	str	r3, [r4, #4]
 800ca3e:	bf04      	itt	eq
 800ca40:	1949      	addeq	r1, r1, r5
 800ca42:	6021      	streq	r1, [r4, #0]
 800ca44:	6054      	str	r4, [r2, #4]
 800ca46:	e7ca      	b.n	800c9de <_free_r+0x26>
 800ca48:	b003      	add	sp, #12
 800ca4a:	bd30      	pop	{r4, r5, pc}
 800ca4c:	20002284 	.word	0x20002284

0800ca50 <_raise_r>:
 800ca50:	291f      	cmp	r1, #31
 800ca52:	b538      	push	{r3, r4, r5, lr}
 800ca54:	4604      	mov	r4, r0
 800ca56:	460d      	mov	r5, r1
 800ca58:	d904      	bls.n	800ca64 <_raise_r+0x14>
 800ca5a:	2316      	movs	r3, #22
 800ca5c:	6003      	str	r3, [r0, #0]
 800ca5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca62:	bd38      	pop	{r3, r4, r5, pc}
 800ca64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca66:	b112      	cbz	r2, 800ca6e <_raise_r+0x1e>
 800ca68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca6c:	b94b      	cbnz	r3, 800ca82 <_raise_r+0x32>
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f000 f830 	bl	800cad4 <_getpid_r>
 800ca74:	462a      	mov	r2, r5
 800ca76:	4601      	mov	r1, r0
 800ca78:	4620      	mov	r0, r4
 800ca7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca7e:	f000 b817 	b.w	800cab0 <_kill_r>
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d00a      	beq.n	800ca9c <_raise_r+0x4c>
 800ca86:	1c59      	adds	r1, r3, #1
 800ca88:	d103      	bne.n	800ca92 <_raise_r+0x42>
 800ca8a:	2316      	movs	r3, #22
 800ca8c:	6003      	str	r3, [r0, #0]
 800ca8e:	2001      	movs	r0, #1
 800ca90:	e7e7      	b.n	800ca62 <_raise_r+0x12>
 800ca92:	2400      	movs	r4, #0
 800ca94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca98:	4628      	mov	r0, r5
 800ca9a:	4798      	blx	r3
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	e7e0      	b.n	800ca62 <_raise_r+0x12>

0800caa0 <raise>:
 800caa0:	4b02      	ldr	r3, [pc, #8]	; (800caac <raise+0xc>)
 800caa2:	4601      	mov	r1, r0
 800caa4:	6818      	ldr	r0, [r3, #0]
 800caa6:	f7ff bfd3 	b.w	800ca50 <_raise_r>
 800caaa:	bf00      	nop
 800caac:	20000100 	.word	0x20000100

0800cab0 <_kill_r>:
 800cab0:	b538      	push	{r3, r4, r5, lr}
 800cab2:	4d07      	ldr	r5, [pc, #28]	; (800cad0 <_kill_r+0x20>)
 800cab4:	2300      	movs	r3, #0
 800cab6:	4604      	mov	r4, r0
 800cab8:	4608      	mov	r0, r1
 800caba:	4611      	mov	r1, r2
 800cabc:	602b      	str	r3, [r5, #0]
 800cabe:	f7f6 fb97 	bl	80031f0 <_kill>
 800cac2:	1c43      	adds	r3, r0, #1
 800cac4:	d102      	bne.n	800cacc <_kill_r+0x1c>
 800cac6:	682b      	ldr	r3, [r5, #0]
 800cac8:	b103      	cbz	r3, 800cacc <_kill_r+0x1c>
 800caca:	6023      	str	r3, [r4, #0]
 800cacc:	bd38      	pop	{r3, r4, r5, pc}
 800cace:	bf00      	nop
 800cad0:	20002288 	.word	0x20002288

0800cad4 <_getpid_r>:
 800cad4:	f7f6 bb84 	b.w	80031e0 <_getpid>

0800cad8 <__malloc_lock>:
 800cad8:	4801      	ldr	r0, [pc, #4]	; (800cae0 <__malloc_lock+0x8>)
 800cada:	f000 b809 	b.w	800caf0 <__retarget_lock_acquire_recursive>
 800cade:	bf00      	nop
 800cae0:	2000228c 	.word	0x2000228c

0800cae4 <__malloc_unlock>:
 800cae4:	4801      	ldr	r0, [pc, #4]	; (800caec <__malloc_unlock+0x8>)
 800cae6:	f000 b804 	b.w	800caf2 <__retarget_lock_release_recursive>
 800caea:	bf00      	nop
 800caec:	2000228c 	.word	0x2000228c

0800caf0 <__retarget_lock_acquire_recursive>:
 800caf0:	4770      	bx	lr

0800caf2 <__retarget_lock_release_recursive>:
 800caf2:	4770      	bx	lr

0800caf4 <_init>:
 800caf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caf6:	bf00      	nop
 800caf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cafa:	bc08      	pop	{r3}
 800cafc:	469e      	mov	lr, r3
 800cafe:	4770      	bx	lr

0800cb00 <_fini>:
 800cb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb02:	bf00      	nop
 800cb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb06:	bc08      	pop	{r3}
 800cb08:	469e      	mov	lr, r3
 800cb0a:	4770      	bx	lr
